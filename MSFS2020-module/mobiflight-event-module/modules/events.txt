//Aerosoft/CRJ 550-700/Air Condition / Pressurization
ASCRJ_AIRC_AFT_CARGO_AIRCOND_SWITCH#(L:ASCRJ_AIRC_AFT_CARGO, Bool) ! (>L:ASCRJ_AIRC_AFT_CARGO)
ASCRJ_AIRC_PACK_L_SWITCH# (L:ASCRJ_AIRC_PACK_L, Bool) ! (>L:ASCRJ_AIRC_PACK_L)
ASCRJ_AIRC_PACK_R_SWITCH# (L:ASCRJ_AIRC_PACK_R, Bool) ! (>L:ASCRJ_AIRC_PACK_R)
ASCRJ_AIRC_RECIRC_FAN_SWITCH#(L:ASCRJ_AIRC_RECIRC_FAN, Bool) ! (>L:ASCRJ_AIRC_RECIRC_FAN)
ASCRJ_AIRC_TEMPCTRL_CABIN_DEC# (L:ASCRJ_AIRC_TEMPCTRL_CABIN, Number) 0 > if{ (L:ASCRJ_AIRC_TEMPCTRL_CABIN, Number) -- (>L:ASCRJ_AIRC_TEMPCTRL_CABIN) }
ASCRJ_AIRC_TEMPCTRL_CABIN_INC# (L:ASCRJ_AIRC_TEMPCTRL_CABIN, Number) 26 < if{ (L:ASCRJ_AIRC_TEMPCTRL_CABIN, Number) ++ (>L:ASCRJ_AIRC_TEMPCTRL_CABIN) }
ASCRJ_AIRC_TEMPCTRL_CKPT_DEC# (L:ASCRJ_AIRC_TEMPCTRL_CKPT, Number) 0 > if{ (L:ASCRJ_AIRC_TEMPCTRL_CKPT, Number) -- (>L:ASCRJ_AIRC_TEMPCTRL_CKPT) }
ASCRJ_AIRC_TEMPCTRL_CKPT_INC# (L:ASCRJ_AIRC_TEMPCTRL_CKPT, Number) 26 < if{ (L:ASCRJ_AIRC_TEMPCTRL_CKPT, Number) ++ (>L:ASCRJ_AIRC_TEMPCTRL_CKPT) }
ASCRJ_PRESS_LDG_ELEV_KNOB_DEC# (L:ASCRJ_PRESS_LDG_ELEV, Number) 10 - dnor (>L:ASCRJ_PRESS_LDG_ELEV) (ASCRJ_PRESS_LDG_ELEV_CHANGE, Number) -- (>L:ASCRJ_PRESS_LDG_ELEV_CHANGE)
ASCRJ_PRESS_LDG_ELEV_KNOB_INC# (L:ASCRJ_PRESS_LDG_ELEV, Number) 10 + dnor (>L:ASCRJ_PRESS_LDG_ELEV) (ASCRJ_PRESS_LDG_ELEV_CHANGE, Number) ++ (>L:ASCRJ_PRESS_LDG_ELEV_CHANGE)
//Aerosoft/CRJ 550-700/Anti-Ice
ASCRJ_AICE_COWL_L_SWITCH#(L:ASCRJ_AICE_COWL_L, Bool) ! (>L:ASCRJ_AICE_COWL_L)
ASCRJ_AICE_COWL_R_SWITCH#(L:ASCRJ_AICE_COWL_R, Bool) ! (>L:ASCRJ_AICE_COWL_R)
ASCRJ_AICE_PHEAT_L_SWITCH#(L:ASCRJ_AICE_PHEAT_L, Bool) ! (>L:ASCRJ_AICE_PHEAT_L)
ASCRJ_AICE_PHEAT_R_SWITCH#(L:ASCRJ_AICE_PHEAT_R, Bool) ! (>L:ASCRJ_AICE_PHEAT_R)
ASCRJ_AICE_WING_SWITCH#(L:ASCRJ_AICE_WING, Bool) ! (>L:ASCRJ_AICE_WING)
ASCRJ_AICE_WSHLD_L_SWITCH#(L:ASCRJ_AICE_WSHLD_L, Number) 0 == if{ 1 (>L:ASCRJ_AICE_WSHLD_L, Number) } els{ (L:ASCRJ_AICE_WSHLD_L, Number) 1 == if{ 2 (>L:ASCRJ_AICE_WSHLD_L, Number) } els{ (L:ASCRJ_AICE_WSHLD_L, Number) 2 == if{ 0 (>L:ASCRJ_AICE_WSHLD_L, Number) }
ASCRJ_AICE_WSHLD_R_SWITCH#(L:ASCRJ_AICE_WSHLD_R, Number) 0 == if{ 1 (>L:ASCRJ_AICE_WSHLD_R, Number) } els{ (L:ASCRJ_AICE_WSHLD_R, Number) 1 == if{ 2 (>L:ASCRJ_AICE_WSHLD_R, Number) } els{ (L:ASCRJ_AICE_WSHLD_R, Number) 2 == if{ 0 (>L:ASCRJ_AICE_WSHLD_R, Number) }
//Aerosoft/CRJ 550-700/Autopilot
ASCRJ_FCP_12BANK_PRESS#1 (>L:ASCRJ_FCP_12BANK)
ASCRJ_FCP_12BANK_RELEASE#0 (>L:ASCRJ_FCP_12BANK)
ASCRJ_FCP_ALT_CANCEL_PRESS#1 (>L:ASCRJ_FCP_ALT_CANCEL)
ASCRJ_FCP_ALT_CANCEL_RELEASE#0 (>L:ASCRJ_FCP_ALT_CANCEL)
ASCRJ_FCP_ALT_PRESS#1 (>L:ASCRJ_FCP_ALT)
ASCRJ_FCP_ALT_RELEASE#0 (>L:ASCRJ_FCP_ALT)
ASCRJ_FCP_ALT_SEL_DEC#(L:ASCRJ_FCP_ALT_CHANGE, 1) -- (>L:ASCRJ_FCP_ALT_CHANGE)
ASCRJ_FCP_ALT_SEL_INC#(L:ASCRJ_FCP_ALT_CHANGE, 1) ++ (>L:ASCRJ_FCP_ALT_CHANGE)
ASCRJ_FCP_APPR_PRESS#1 (>L:ASCRJ_FCP_APPR)
ASCRJ_FCP_APPR_RELEASE#0 (>L:ASCRJ_FCP_APPR)
ASCRJ_FCP_AP_DISC_PRESS#(L:ASCRJ_FCP_AP_DISC, Bool) ! (>L:ASCRJ_FCP_AP_DISC)
ASCRJ_FCP_AP_DISC_RELEASE#(L:ASCRJ_FCP_AP_DISC, Bool) ! (>L:ASCRJ_FCP_AP_DISC)
ASCRJ_FCP_AP_ENG_PRESS#1 (>L:ASCRJ_FCP_AP_ENG)
ASCRJ_FCP_AP_ENG_RELEASE#0 (>L:ASCRJ_FCP_AP_ENG)
ASCRJ_FCP_BC_PRESS#1 (>L:ASCRJ_FCP_BC)
ASCRJ_FCP_BC_RELEASE#0 (>L:ASCRJ_FCP_BC)
ASCRJ_FCP_CRS1_DIRECT_PRESS#1 (>L:ASCRJ_FCP_CRS1_DIRECT)
ASCRJ_FCP_CRS1_DIRECT_RELEASE#0 (>L:ASCRJ_FCP_CRS1_DIRECT)
ASCRJ_FCP_CRS1_SEL_DEC#(L:ASCRJ_FCP_CRS1_CHANGE, 1) -- (>L:ASCRJ_FCP_CRS1_CHANGE)
ASCRJ_FCP_CRS1_SEL_INC#(L:ASCRJ_FCP_CRS1_CHANGE, 1) ++ (>L:ASCRJ_FCP_CRS1_CHANGE)
ASCRJ_FCP_CRS2_DIRECT_PRESS#1 (>L:ASCRJ_FCP_CRS2_DIRECT)
ASCRJ_FCP_CRS2_DIRECT_RELEASE#0 (>L:ASCRJ_FCP_CRS2_DIRECT)
ASCRJ_FCP_CRS2_SEL_DEC#(L:ASCRJ_FCP_CRS2_CHANGE, 1) -- (>L:ASCRJ_FCP_CRS2_CHANGE)
ASCRJ_FCP_CRS2_SEL_INC#(L:ASCRJ_FCP_CRS2_CHANGE, 1) ++ (>L:ASCRJ_FCP_CRS2_CHANGE)
ASCRJ_FCP_FD1_PRESS#1 (>L:ASCRJ_FCP_FD1)
ASCRJ_FCP_FD1_RELEASE#0 (>L:ASCRJ_FCP_FD1)
ASCRJ_FCP_FD2_PRESS#1 (>L:ASCRJ_FCP_FD2)
ASCRJ_FCP_FD2_RELEASE#0 (>L:ASCRJ_FCP_FD2)
ASCRJ_FCP_HDG_PRESS#1 (>L:ASCRJ_FCP_HDG)
ASCRJ_FCP_HDG_RELEASE#0 (>L:ASCRJ_FCP_HDG)
ASCRJ_FCP_HDG_SEL_DEC#(L:ASCRJ_FCP_HDG_CHANGE, 1) -- (>L:ASCRJ_FCP_HDG_CHANGE)
ASCRJ_FCP_HDG_SEL_INC#(L:ASCRJ_FCP_HDG_CHANGE, 1) ++ (>L:ASCRJ_FCP_HDG_CHANGE)
ASCRJ_FCP_HDG_SYNC_PRESS#1 (>L:ASCRJ_FCP_HDG_SYNC)
ASCRJ_FCP_HDG_SYNC_RELEASE#0 (>L:ASCRJ_FCP_HDG_SYNC)
ASCRJ_FCP_IAS_MACH_PRESS#1 (>L:ASCRJ_FCP_IAS_MACH)
ASCRJ_FCP_IAS_MACH_RELEASE#0 (>L:ASCRJ_FCP_IAS_MACH)
ASCRJ_FCP_NAV_PRESS#1 (>L:ASCRJ_FCP_NAV)
ASCRJ_FCP_NAV_RELEASE#0 (>L:ASCRJ_FCP_NAV)
ASCRJ_FCP_SPEED_MODE_PRESS#1 (>L:ASCRJ_FCP_SPEED_MODE)
ASCRJ_FCP_SPEED_MODE_RELEASE#0 (>L:ASCRJ_FCP_SPEED_MODE)
ASCRJ_FCP_SPEED_PRESS#1 (>L:ASCRJ_FCP_SPEED)
ASCRJ_FCP_SPEED_RELEASE#0 (>L:ASCRJ_FCP_SPEED)
ASCRJ_FCP_SPEED_SEL_DEC#(L:ASCRJ_FCP_SPEED_CHANGE, 1) -- (>L:ASCRJ_FCP_SPEED_CHANGE)
ASCRJ_FCP_SPEED_SEL_INC#(L:ASCRJ_FCP_SPEED_CHANGE, 1) ++ (>L:ASCRJ_FCP_SPEED_CHANGE)
ASCRJ_FCP_TURB_PRESS#1 (>L:ASCRJ_FCP_TURB)
ASCRJ_FCP_TURB_RELEASE#0 (>L:ASCRJ_FCP_TURB)
ASCRJ_FCP_VNAV_PRESS#1 (>L:ASCRJ_FCP_VNAV)
ASCRJ_FCP_VNAV_RELEASE#0 (>L:ASCRJ_FCP_VNAV)
ASCRJ_FCP_VS_PRESS#1 (>L:ASCRJ_FCP_VS)
ASCRJ_FCP_VS_RELEASE#0 (>L:ASCRJ_FCP_VS)
ASCRJ_FCP_WHEEL_SEL_DEC#(L:ASCRJ_FCP_WHEEL_CHANGE, 1) -- (>L:ASCRJ_FCP_WHEEL_CHANGE)
ASCRJ_FCP_WHEEL_SEL_INC#(L:ASCRJ_FCP_WHEEL_CHANGE, 1) ++ (>L:ASCRJ_FCP_WHEEL_CHANGE)
ASCRJ_FCP_XFR_PRESS#1 (>L:ASCRJ_FCP_XFR)
ASCRJ_FCP_XFR_RELEASE#0 (>L:ASCRJ_FCP_XFR)
ASCRJ_TQ_TOGA_SWITCH#1 (>L:ASCRJ_TQ_TOGA_1)
//Aerosoft/CRJ 550-700/Avionics
ASCRJ_ECAM_PRI_PRESS#1 (>L:ASCRJ_ECAM_PRI)
ASCRJ_ECAM_STEP_PRESS#1 (>L:ASCRJ_ECAM_STEP)
ASCRJ_LSP_CLCK_CHR_BTN_PRESS#1 (>L:ASCRJ_LSP_CLCK_CHR)
ASCRJ_LSP_CLCK_CHR_BTN_RELEASE#0 (>L:ASCRJ_LSP_CLCK_CHR)
//Aerosoft/CRJ 550-700/Electrical
ASCRJ_ELEC_ACESSXFER#(L:ASCRJ_ELEC_ACESSXFER, Bool) ! (>L:ASCRJ_ELEC_ACESSXFER)
ASCRJ_ELEC_APUGEN#(L:ASCRJ_ELEC_APUGEN, Bool) ! (>L:ASCRJ_ELEC_APUGEN)
ASCRJ_ELEC_AUTOXFER1#(L:ASCRJ_ELEC_AUTOXFER1, Bool) ! (>L:ASCRJ_ELEC_AUTOXFER1)
ASCRJ_ELEC_AUTOXFER2#(L:ASCRJ_ELEC_AUTOXFER2, Bool) ! (>L:ASCRJ_ELEC_AUTOXFER2)
ASCRJ_ELEC_BATTMASTER_SWITCH#(L:ASCRJ_ELEC_BATTMASTER, Bool) ! (>L:ASCRJ_ELEC_BATTMASTER)
ASCRJ_ELEC_DCSERVICE#(L:ASCRJ_ELEC_DCSERVICE, Bool) ! (>L:ASCRJ_ELEC_DCSERVICE)
ASCRJ_ELEC_GEN1#(L:ASCRJ_ELEC_GEN1, Bool) ! (>L:ASCRJ_ELEC_GEN1)
ASCRJ_ELEC_GEN2#(L:ASCRJ_ELEC_GEN2, Bool) ! (>L:ASCRJ_ELEC_GEN2)
ASCRJ_ELEC_GPU_INUSE_SWITCH# (L:ASCRJ_ELEC_GPU, Bool) ! (>L:ASCRJ_ELEC_GPU)
ASCRJ_ELEC_IDG1#(L:ASCRJ_ELEC_IDG1, Bool) ! (>L:ASCRJ_ELEC_IDG1)
ASCRJ_ELEC_IDG2#(L:ASCRJ_ELEC_IDG2, Bool) ! (>L:ASCRJ_ELEC_IDG2)
ASCRJ_IRS1_KNOB_SWITCH#(L:ASCRJ_IRS1_KNOB, Number) 0 == if{ 1 (>L:ASCRJ_IRS1_KNOB, Number) } els{ (L:ASCRJ_IRS1_KNOB, Number) 1 == if{ 2 (>L:ASCRJ_IRS1_KNOB, Number) } els{ (L:ASCRJ_IRS1_KNOB, Number) 2 == if{ 0 (>L:ASCRJ_IRS1_KNOB, Number) }
ASCRJ_IRS2_KNOB_SWITCH#(L:ASCRJ_IRS2_KNOB, Number) 0 == if{ 1 (>L:ASCRJ_IRS2_KNOB, Number) } els{ (L:ASCRJ_IRS2_KNOB, Number) 1 == if{ 2 (>L:ASCRJ_IRS2_KNOB, Number) } els{ (L:ASCRJ_IRS2_KNOB, Number) 2 == if{ 0 (>L:ASCRJ_IRS2_KNOB, Number) }
ASCRJ_MASTER_CAUT_PRESS#1 (>L:ASCRJ_MASTER_CAUT)
ASCRJ_MASTER_CAUT_RELEASE#0 (>L:ASCRJ_MASTER_CAUT)
ASCRJ_MASTER_WARN_PRESS#1 (>L:ASCRJ_MASTER_WARN)
ASCRJ_MASTER_WARN_RELEASE#0 (>L:ASCRJ_MASTER_WARN)
//Aerosoft/CRJ 550-700/Engines
ASCRJ_FUEL_PUMP_L_SWITCH# (L:ASCRJ_FUEL_PUMP_L, Bool) ! (>L:ASCRJ_FUEL_PUMP_L)
ASCRJ_FUEL_PUMP_R_SWITCH# (L:ASCRJ_FUEL_PUMP_R, Bool) ! (>L:ASCRJ_FUEL_PUMP_R)
ASCRJ_REV_1_ARM_SWITCH_TOGGLE# (L:ASCRJ_TQ_REV1_MODE, Bool) ! (>L:ASCRJ_TQ_REV1_MODE)
ASCRJ_REV_2_ARM_SWITCH_TOGGLE# (L:ASCRJ_TQ_REV2_MODE, Bool) ! (>L:ASCRJ_TQ_REV2_MODE)
ASCRJ_TQ_CUTOFF_1_LEVER#1 (>L:ASCRJ_TQ_CUTOFF_1)
ASCRJ_TQ_CUTOFF_2_LEVER#1 (>L:ASCRJ_TQ_CUTOFF_2)
ASCRJ_TQ_THROTTLE_1_POS_IDLE#400 (>L:ASCRJ_TQ_THROTTLE_1_POS)
ASCRJ_TQ_THROTTLE_1_POS_SHUTOFF#500 (>L:ASCRJ_TQ_THROTTLE_1_POS)
ASCRJ_TQ_THROTTLE_2_POS_IDLE#400 (>L:ASCRJ_TQ_THROTTLE_2_POS)
ASCRJ_TQ_THROTTLE_2_POS_SHUTOFF#500 (>L:ASCRJ_TQ_THROTTLE_2_POS)
//Aerosoft/CRJ 550-700/Flight Controls
ASCRJ_MACH_TRIM_SWITCH# (L:ASCRJ_MACH_TRIM, Bool) ! (>L:ASCRJ_MACH_TRIM)
ASCRJ_STAB_TRIM_CH_1_SWITCH# (L:ASCRJ_STAB_TRIM_CH1_TRIGGER, Bool) ! (>L:ASCRJ_STAB_TRIM_CH1_TRIGGER)
ASCRJ_STAB_TRIM_CH_2_SWITCH# (L:ASCRJ_STAB_TRIM_CH2_TRIGGER, Bool) ! (>L:ASCRJ_STAB_TRIM_CH2_TRIGGER)
ASCRJ_YD1_SWITCH# (L:ASCRJ_YD1, Bool) ! (>L:ASCRJ_YD1)
ASCRJ_YD2_SWITCH# (L:ASCRJ_YD2, Bool) ! (>L:ASCRJ_YD2)
ASCRJ_YD_DISC_SWITCH# (L:ASCRJ_YD_DISC, Bool) ! (>L:ASCRJ_YD_DISC)
//Aerosoft/CRJ 550-700/Flight Instrumentation
ASCRJ_LSP_BRG1#1 (>L:ASCRJ_LSP_BRG1)
ASCRJ_LSP_BRG1#0 (>L:ASCRJ_LSP_BRG1)
ASCRJ_LSP_BRG2#1 (>L:ASCRJ_LSP_BRG2)
ASCRJ_LSP_BRG2#(>L:ASCRJ_LSP_BRG2)
ASCRJ_LSP_HEIGHT_MODE#(L:ASCRJ_LSP_HEIGHT_MODE, Number) 0 > if{ (L:ASCRJ_LSP_HEIGHT_MODE, Number) -- (>L:ASCRJ_LSP_HEIGHT_MODE) 
ASCRJ_LSP_HEIGHT_MODE#(L:ASCRJ_LSP_HEIGHT_MODE, Number) 2 -- < if{ (L:ASCRJ_LSP_HEIGHT_MODE, Number) ++ (>L:ASCRJ_LSP_HEIGHT_MODE) 
ASCRJ_LSP_HEIGHT_SEL#(L_ASCRJ_LSP_HEIGHT_SEL_ Number) 10 + DNOR (>L:ASCRJ_LSP_HEIGHT_SEL) (L:ASCRJ_LSP_HEIGHT_SEL_CHANGE, Number) ++ (>L:ASCRJ_LSP_HEIGHT_SEL_CHANGE) 
ASCRJ_LSP_HEIGHT_SEL#(L_ASCRJ_LSP_HEIGHT_SEL_ Number) 10 - DNOR (>L:ASCRJ_LSP_HEIGHT_SEL) (L:ASCRJ_LSP_HEIGHT_SEL_CHANGE, Number) -- (>L:ASCRJ_LSP_HEIGHT_SEL_CHANGE) 
ASCRJ_LSP_RDR#1 (>L:ASCRJ_LSP_RDR)
ASCRJ_LSP_RDR#0 (>L:ASCRJ_LSP_RDR)
ASCRJ_LSP_SEL#1 (>L:ASCRJ_LSP_SEL)
ASCRJ_LSP_SEL#0 (>L:ASCRJ_LSP_SEL)
ASCRJ_LSP_SPEED_MODE#(L:ASCRJ_LSP_SPEED_MODE, Number) 0 > if{ (L:ASCRJ_LSP_SPEED_MODE, Number) -- (>L:ASCRJ_LSP_SPEED_MODE) 
ASCRJ_LSP_SPEED_MODE#(L:ASCRJ_LSP_SPEED_MODE, Number) 2 < if{ (L:ASCRJ_LSP_SPEED_MODE, Number) ++ (>L:ASCRJ_LSP_SPEED_MODE) 
ASCRJ_LSP_SPEED_SEL#(L:ASCRJ_LSP_SPEED_SEL, Number) 10 + dnor (>L:ASCRJ_LSP_SPEED_SEL) (L:ASCRJ_LSP_SPEED_SEL_CHANGE_, Number) ++ (>L:ASCRJ_LSP_SPEED_SEL_CHANGE) 
ASCRJ_LSP_SPEED_SEL#(L:ASCRJ_LSP_SPEED_SEL, Number) 10 - dnor (>L:ASCRJ_LSP_SPEED_SEL) (L:ASCRJ_LSP_SPEED_SEL_CHANGE_, Number) -- (>L:ASCRJ_LSP_SPEED_SEL_CHANGE) 
ASCRJ_LSP_SPEED_SEL#1 (>L:ASCRJ_LSP_SPEED_SEL)
ASCRJ_LSP_SPEED_SEL#0 (>L:ASCRJ_LSP_SPEED_SEL) 0 (>L:ASCRJ_LSP_SPEED_SEL) 1 (>L:ASCRJ_LSP_SPEED_SET) 
//Aerosoft/CRJ 550-700/Gear
ASCRJ_APU_PWRFUEL_PRESS#1 (>L:ASCRJ_APU_PWRFUEL)
ASCRJ_APU_PWRFUEL_RELEASE#0 (>L:ASCRJ_APU_PWRFUEL)
ASCRJ_APU_STARTSTOP_PRESS#1 (>L:ASCRJ_APU_STARTSTOP)
ASCRJ_APU_STARTSTOP_RELEASE#0 (>L:ASCRJ_APU_STARTSTOP)
ASCRJ_GEAR_GEAR_LEVER_SWITCH_OFF#0 (L:ASCRJ_GEAR_GEAR_LEVER, Bool) ! (>L:ASCRJ_GEAR_GEAR_LEVER)
ASCRJ_GEAR_GEAR_LEVER_SWITCH_ON#1 (L:ASCRJ_GEAR_GEAR_LEVER, Bool) ! (>L:ASCRJ_GEAR_GEAR_LEVER)
ASCRJ_PARK_BRAKE_SWITCH_OFF#0 (L:ASCRJ_PARK_BRAKE, Bool) ! (>L:ASCRJ_PARK_BRAKE)
ASCRJ_PARK_BRAKE_SWITCH_ON#1 (L:ASCRJ_PARK_BRAKE, Bool) ! (>L:ASCRJ_PARK_BRAKE)
//Aerosoft/CRJ 550-700/Hydraulic
ASCRJ_HYDR_PUMP_1_SWITCH# (L:ASCRJ_HYDR_PUMP_1, Number) 0 == if{ 1 (>L:ASCRJ_HYDR_PUMP_1, Number) } els{ (L:ASCRJ_HYDR_PUMP_1, Number) 1 == if{ 2 (>L:ASCRJ_HYDR_PUMP_1, Number) } els{ (L:ASCRJ_HYDR_PUMP_1, Number) 2 == if{ 0 (>L:ASCRJ_HYDR_PUMP_1, Number)
ASCRJ_HYDR_PUMP_2_SWITCH# (L:ASCRJ_HYDR_PUMP_2, Number) 0 == if{ 1 (>L:ASCRJ_HYDR_PUMP_2, Number) } els{ (L:ASCRJ_HYDR_PUMP_2, Number) 1 == if{ 2 (>L:ASCRJ_HYDR_PUMP_2, Number) } els{ (L:ASCRJ_HYDR_PUMP_2, Number) 2 == if{ 0 (>L:ASCRJ_HYDR_PUMP_2, Number)
ASCRJ_HYDR_PUMP_3A_SWITCH# (L:ASCRJ_HYDR_PUMP_3A, Bool) ! (>L:ASCRJ_HYDR_PUMP_3A)
ASCRJ_HYDR_PUMP_3B_SWITCH# (L:ASCRJ_HYDR_PUMP_3B, Number) 0 == if{ 1 (>L:ASCRJ_HYDR_PUMP_3B, Number) } els{ (L:ASCRJ_HYDR_PUMP_3B, Number) 1 == if{ 2 (>L:ASCRJ_HYDR_PUMP_3B, Number) } els{ (L:ASCRJ_HYDR_PUMP_3B, Number) 2 == if{ 0 (>L:ASCRJ_HYDR_PUMP_3B, Number)
//Aerosoft/CRJ 550-700/Lights
ASCRJ_DM_LT_CPT_DEC# (L:ASCRJ64_DM_LT_CPT, Number) 0 > if{ (L:ASCRJ64_DM_LT_CPT, Number) -- (>L:ASCRJ64_DM_LT_CPT) }
ASCRJ_DM_LT_CPT_INC# (L:ASCRJ64_DM_LT_CPT, Number) 26 < if{ (L:ASCRJ64_DM_LT_CPT, Number) ++ (>L:ASCRJ64_DM_LT_CPT) }
ASCRJ_DM_LT_FO_DEC# (L:ASCRJ64_DM_LT_FO, Number) 0 > if{ (L:ASCRJ64_DM_LT_FO, Number) -- (>L:ASCRJ64_DM_LT_FO) }
ASCRJ_DM_LT_FO_INC# (L:ASCRJ64_DM_LT_FO, Number) 26 < if{ (L:ASCRJ64_DM_LT_FO, Number) ++ (>L:ASCRJ64_DM_LT_FO) }
ASCRJ_EXTL_BEACON_SWITCH#(L:ASCRJ_EXTL_BEACON, Bool) ! (>L:ASCRJ_EXTL_BEACON)
ASCRJ_EXTL_LOGO_SWITCH#(L:ASCRJ_EXTL_LOGO, Bool) ! (>L:ASCRJ_EXTL_LOGO)
ASCRJ_EXTL_NAV_SWITCH#(L:ASCRJ_EXTL_NAV, Bool) ! (>L:ASCRJ_EXTL_NAV)
ASCRJ_EXTL_STROBE_SWITCH#(L:ASCRJ_EXTL_STROBE, Bool) ! (>L:ASCRJ_EXTL_STROBE)
ASCRJ_EXTL_WING_SWITCH#(L:ASCRJ_EXTL_WING, Bool) ! (>L:ASCRJ_EXTL_WING)
ASCRJ_INTL_CB_PNL_BRT_DEC# (L:ASCRJ_INTL_CB_PNL_BRT, Number) 0 > if{ (L:ASCRJ_INTL_CB_PNL_BRT, Number) -- (>L:ASCRJ_INTL_CB_PNL_BRT) }
ASCRJ_INTL_CB_PNL_BRT_INC# (L:ASCRJ_INTL_CB_PNL_BRT, Number) 26 < if{ (L:ASCRJ_INTL_CB_PNL_BRT, Number) ++ (>L:ASCRJ_INTL_CB_PNL_BRT) }
ASCRJ_INTL_DSPL_BRT_DEC# (L:ASCRJ_INTL_DSPL_BRT, Number) 0 > if{ (L:ASCRJ_INTL_DSPL_BRT, Number) -- (>L:ASCRJ_INTL_DSPL_BRT) }
ASCRJ_INTL_DSPL_BRT_INC# (L:ASCRJ_INTL_DSPL_BRT, Number) 26 < if{ (L:ASCRJ_INTL_DSPL_BRT, Number) ++ (>L:ASCRJ_INTL_DSPL_BRT) }
ASCRJ_INTL_FLOOD_BRT_DEC# (L:ASCRJ_INTL_FLOOD_BRT, Number) 0 > if{ (L:ASCRJ_INTL_FLOOD_BRT, Number) -- (>L:ASCRJ_INTL_FLOOD_BRT) }
ASCRJ_INTL_FLOOD_BRT_INC# (L:ASCRJ_INTL_FLOOD_BRT, Number) 26 < if{ (L:ASCRJ_INTL_FLOOD_BRT, Number) ++ (>L:ASCRJ_INTL_FLOOD_BRT) }
ASCRJ_INTL_INTEG_BRT_DEC# (L:ASCRJ_INTL_INTEG_BRT, Number) 0 > if{ (L:ASCRJ_INTL_INTEG_BRT, Number) -- (>L:ASCRJ_INTL_INTEG_BRT) }
ASCRJ_INTL_INTEG_BRT_INC# (L:ASCRJ_INTL_INTEG_BRT, Number) 26 < if{ (L:ASCRJ_INTL_INTEG_BRT, Number) ++ (>L:ASCRJ_INTL_INTEG_BRT) }
ASCRJ_INTL_OVHD_DEC# (L:ASCRJ_INTL_OVHD, Number) 0 > if{ (L:ASCRJ_INTL_OVHD, Number) -- (>L:ASCRJ_INTL_OVHD) }
ASCRJ_INTL_OVHD_INC# (L:ASCRJ_INTL_OVHD, Number) 26 < if{ (L:ASCRJ_INTL_OVHD, Number) ++ (>L:ASCRJ_INTL_OVHD) }
ASCRJ_LSP_DSPL_DEC# (L:ASCRJ_LSP_DSPL, Number) 0 > if{ (L:ASCRJ_LSP_DSPL, Number) -- (>L:ASCRJ_LSP_DSPL) }
ASCRJ_LSP_DSPL_INC# (L:ASCRJ_LSP_DSPL, Number) 26 < if{ (L:ASCRJ_LSP_DSPL, Number) ++ (>L:ASCRJ_LSP_DSPL) }
ASCRJ_LSP_FLOOD_DEC# (L:ASCRJ_LSP_FLOOD, Number) 0 > if{ (L:ASCRJ_LSP_FLOOD, Number) -- (>L:ASCRJ_LSP_FLOOD) }
ASCRJ_LSP_FLOOD_INC# (L:ASCRJ_LSP_FLOOD, Number) 26 < if{ (L:ASCRJ_LSP_FLOOD, Number) ++ (>L:ASCRJ_LSP_FLOOD) }
ASCRJ_LSP_INTEG_DEC# (L:ASCRJ_LSP_INTEG, Number) 0 > if{ (L:ASCRJ_LSP_INTEG, Number) -- (>L:ASCRJ_LSP_INTEG) }
ASCRJ_LSP_INTEG_INC# (L:ASCRJ_LSP_INTEG, Number) 26 < if{ (L:ASCRJ_LSP_INTEG, Number) ++ (>L:ASCRJ_LSP_INTEG) }
ASCRJ_OVHD_EMER_LTS_SWITCH#(L:ASCRJ_OVHD_EMER_LTS, Number) 0 == if{ 1 (>L:ASCRJ_OVHD_EMER_LTS, Number) } els{ (L:ASCRJ_OVHD_EMER_LTS, Number) 1 == if{ 2 (>L:ASCRJ_OVHD_EMER_LTS, Number) } els{ (L:ASCRJ_OVHD_EMER_LTS, Number) 2 == if{ 0 (>L:ASCRJ_OVHD_EMER_LTS, Number) }
ASCRJ_OVHD_LDG_LEFT_SWITCH#(L:ASCRJ_OVHD_LDG_LEFT, Bool) ! (>L:ASCRJ_OVHD_LDG_LEFT)
ASCRJ_OVHD_LDG_NOSE_SWITCH#(L:ASCRJ_OVHD_LDG_NOSE, Bool) ! (>L:ASCRJ_OVHD_LDG_NOSE)
ASCRJ_OVHD_LDG_RIGHT_SWITCH#(L:ASCRJ_OVHD_LDG_RIGHT, Bool) ! (>L:ASCRJ_OVHD_LDG_RIGHT)
ASCRJ_OVHD_TAXI_SWITCH#(L:ASCRJ_OVHD_TAXI, Bool) ! (>L:ASCRJ_OVHD_TAXI)
ASCRJ_RSP_DSPL_DEC# (L:ASCRJ_RSP_DSPL, Number) 0 > if{ (L:ASCRJ_RSP_DSPL, Number) -- (>L:ASCRJ_RSP_DSPL) }
ASCRJ_RSP_DSPL_INC# (L:ASCRJ_RSP_DSPL, Number) 26 < if{ (L:ASCRJ_RSP_DSPL, Number) ++ (>L:ASCRJ_RSP_DSPL) }
ASCRJ_RSP_FLOOD_DEC# (L:ASCRJ_RSP_FLOOD, Number) 0 > if{ (L:ASCRJ_RSP_FLOOD, Number) -- (>L:ASCRJ_RSP_FLOOD) }
ASCRJ_RSP_FLOOD_INC# (L:ASCRJ_RSP_FLOOD, Number) 26 < if{ (L:ASCRJ_RSP_FLOOD, Number) ++ (>L:ASCRJ_RSP_FLOOD) }
ASCRJ_RSP_INTEG_DEC# (L:ASCRJ_RSP_INTEG, Number) 0 > if{ (L:ASCRJ_RSP_INTEG, Number) -- (>L:ASCRJ_RSP_INTEG) }
ASCRJ_RSP_INTEG_INC# (L:ASCRJ_RSP_INTEG, Number) 26 < if{ (L:ASCRJ_RSP_INTEG, Number) ++ (>L:ASCRJ_RSP_INTEG) }
//Aerosoft/CRJ 550-700/Navigation
ASCRJ_LSP_BARO_CHANGE_DEC#(L:ASCRJ_LSP_BARO_CHANGE, 2) -- (>L:ASCRJ_LSP_BARO_CHANGE)
ASCRJ_LSP_BARO_CHANGE_INC#(L:ASCRJ_LSP_BARO_CHANGE, 2) ++ (>L:ASCRJ_LSP_BARO_CHANGE)
ASCRJ_LSP_BARO_STD_PRESS#1 (>L:ASCRJ_LSP_BARO_STD)
ASCRJ_LSP_BARO_STD_RELEASE#0 (>L:ASCRJ_LSP_BARO_STD)
ASCRJ_LSP_FORMAT_CHANGE_ENCOD_DEC#(L:ASCRJ_LSP_FORMAT, Number) 10 - dnor (>L:ASCRJ_LSP_FORMAT) (L:ASCRJ_LSP_FORMAT_CHANGE, Number) -- (>L:ASCRJ_LSP_FORMAT_CHANGE)
ASCRJ_LSP_FORMAT_CHANGE_ENCOD_INC#(L:ASCRJ_LSP_FORMAT, Number) 10 + dnor (>L:ASCRJ_LSP_FORMAT) (L:ASCRJ_LSP_FORMAT_CHANGE, Number) ++ (>L:ASCRJ_LSP_FORMAT_CHANGE)
ASCRJ_LSP_NAV_SOURCE_CHANGE_DEC#(L:ASCRJ_LSP_NAV_SOURCE_CHANGE, 1) -- (>L:ASCRJ_LSP_NAV_SOURCE_CHANGE)
ASCRJ_LSP_NAV_SOURCE_CHANGE_INC#(L:ASCRJ_LSP_NAV_SOURCE_CHANGE, 1) ++ (>L:ASCRJ_LSP_NAV_SOURCE_CHANGE)
ASCRJ_LSP_NAV_SOURCE_XSIDE_PRESS#1 (>L:ASCRJ_LSP_NAV_SOURCE_XSIDE)
ASCRJ_LSP_NAV_SOURCE_XSIDE_RELEASE#0 (>L:ASCRJ_LSP_NAV_SOURCE_XSIDE)
ASCRJ_LSP_ZOOM_RANGE_CHANGE_DEC#(L:ASCRJ_LSP_RANGE_CHANGE, 1) -- (>L:ASCRJ_LSP_RANGE_CHANGE)
ASCRJ_LSP_ZOOM_RANGE_CHANGE_INC#(L:ASCRJ_LSP_RANGE_CHANGE, 1) ++ (>L:ASCRJ_LSP_RANGE_CHANGE)
ASCRJ_MCDU1_BRT_DEC# (L:ASCRJ_MCDU1_BRT_CHANGE, Number) -- (>L:ASCRJ_MCDU1_BRT_CHANGE)
ASCRJ_MCDU1_BRT_INC# (L:ASCRJ_MCDU1_BRT_CHANGE, Number) ++ (>L:ASCRJ_MCDU1_BRT_CHANGE)
ASCRJ_MCDU2_BRT_DEC# (L:ASCRJ_MCDU2_BRT_CHANGE, Number) -- (>L:ASCRJ_MCDU2_BRT_CHANGE)
ASCRJ_MCDU2_BRT_INC# (L:ASCRJ_MCDU2_BRT_CHANGE, Number) ++ (>L:ASCRJ_MCDU2_BRT_CHANGE)
//Aerosoft/CRJ 550-700/Passengers/Crew
ASCRJ_OVHD_NO_SMOKING_SWITCH#1 (L:ASCRJ_OVHD_NO_SMOKING, Number) 0 == if{ 1 (>L:ASCRJ_OVHD_NO_SMOKING, Number) } els{ (L:ASCRJ_OVHD_NO_SMOKING, Number) 1 == if{ 2 (>L:ASCRJ_OVHD_NO_SMOKING, Number) } els{ (L:ASCRJ_OVHD_NO_SMOKING, Number) 2 == if{ 0 (>L:ASCRJ_OVHD_NO_SMOKING, Number) }
ASCRJ_OVHD_SEAT_BELTS_SWITCH#1 (L:ASCRJ_OVHD_SEAT_BELTS, Number) 0 == if{ 1 (>L:ASCRJ_OVHD_SEAT_BELTS, Number) } els{ (L:ASCRJ_OVHD_SEAT_BELTS, Number) 1 == if{ 2 (>L:ASCRJ_OVHD_SEAT_BELTS, Number) } els{ (L:ASCRJ_OVHD_SEAT_BELTS, Number) 2 == if{ 0 (>L:ASCRJ_OVHD_SEAT_BELTS, Number) }
//Aerosoft/CRJ 550-700/Radio
ASCRJ_RTU1_IDENT_PRESS#1 (>L:ASCRJ_RTU1_IDENT)
ASCRJ_RTU1_KNOB_INNER_DEC# (L:ASCRJ_RTU1_KNOB_INNER, Number) 10 - dnor (>L:ASCRJ_RTU1_KNOB_INNER) (ASCRJ_RTU1_KNOB_INNER_CHANGE, Number) -- (>L:ASCRJ_RTU1_KNOB_INNER_CHANGE)
ASCRJ_RTU1_KNOB_INNER_INC# (L:ASCRJ_RTU1_KNOB_INNER, Number) 10 + dnor (>L:ASCRJ_RTU1_KNOB_INNER) (ASCRJ_RTU1_KNOB_INNER_CHANGE, Number) ++ (>L:ASCRJ_RTU1_KNOB_INNER_CHANGE)
ASCRJ_RTU1_KNOB_OUTER_DEC# (L:ASCRJ_RTU1_KNOB_OUTER, Number) 10 - dnor (>L:ASCRJ_RTU1_KNOB_OUTER) (ASCRJ_RTU1_KNOB_OUTER_CHANGE, Number) -- (>L:ASCRJ_RTU1_KNOB_OUTER_CHANGE)
ASCRJ_RTU1_KNOB_OUTER_INC# (L:ASCRJ_RTU1_KNOB_OUTER, Number) 10 + dnor (>L:ASCRJ_RTU1_KNOB_OUTER) (ASCRJ_RTU1_KNOB_OUTER_CHANGE, Number) ++ (>L:ASCRJ_RTU1_KNOB_OUTER_CHANGE)
ASCRJ_RTU1_LSK1L_SWITCH_PRESS#1 (>L:ASCRJ_RTU1_LSK1L)
ASCRJ_RTU1_LSK1R_SWITCH_PRESS#1 (>L:ASCRJ_RTU1_LSK1R)
ASCRJ_RTU1_LSK2L_SWITCH_PRESS#1 (>L:ASCRJ_RTU1_LSK2L)
ASCRJ_RTU1_LSK2R_SWITCH_PRESS#1 (>L:ASCRJ_RTU1_LSK2R)
ASCRJ_RTU1_LSK3L_SWITCH_PRESS#1 (>L:ASCRJ_RTU1_LSK3L)
ASCRJ_RTU1_LSK3R_SWITCH_PRESS#1 (>L:ASCRJ_RTU1_LSK3R)
ASCRJ_RTU1_LSK4L_SWITCH_PRESS#1 (>L:ASCRJ_RTU1_LSK4L)
ASCRJ_RTU1_LSK4R_SWITCH_PRESS#1 (>L:ASCRJ_RTU1_LSK4R)
ASCRJ_XPDR_ATC_SEL_PRESS_PRESS#1 (>L:ASCRJ_XPDR_ATC_SEL)
ASCRJ_XPDR_ATC_SEL_PRESS_RELEASE#0 (>L:ASCRJ_XPDR_ATC_SEL)
ASCRJ_XPDR_ATC_SEL_SWITCH# (L:ASCRJ_XPDR_ATC_SEL, Number) 0 == if{ 1 (>L:ASCRJ_XPDR_ATC_SEL, Number) } els{ (L:ASCRJ_XPDR_ATC_SEL, Number) 1 == if{ 2 (>L:ASCRJ_XPDR_ATC_SEL, Number) } els{ (L:ASCRJ_XPDR_ATC_SEL, Number) 2 == if{ 0 (>L:ASCRJ_XPDR_ATC_SEL, Number) }
//Asobo/Baron G58/Anti-Ice
G58_PROP_DEICE_OFF#0 s0 (A:PROP DEICE SWITCH:1, Bool) != if{(>K:TOGGLE_PROPELLER_DEICE) } l0 (>L:DEICE_Propeller_1)
G58_PROP_DEICE_ON#1 s0 (A:PROP DEICE SWITCH:1, Bool) != if{(>K:TOGGLE_PROPELLER_DEICE) } l0 (>L:DEICE_Propeller_1)
//Asobo/Baron G58/Electrical
G58_MAGNETO1_BOTH#3 (>K:MAGNETO1_SET) (A:GENERAL ENG STARTER:1, Bool) if{ 0 (>K:SET_STARTER1_HELD) }
G58_MAGNETO1_LEFT#2 (>K:MAGNETO1_SET) (A:GENERAL ENG STARTER:1, Bool) if{ 0 (>K:SET_STARTER1_HELD) }
G58_MAGNETO1_OFF#0 (>K:MAGNETO1_SET) (A:GENERAL ENG STARTER:1, Bool) if{ 0 (>K:SET_STARTER1_HELD) }
G58_MAGNETO1_RIGHT#1 (>K:MAGNETO1_SET) (A:GENERAL ENG STARTER:1, Bool) if{ 0 (>K:SET_STARTER1_HELD) }
G58_MAGNETO1_START#4 (>K:MAGNETO1_SET) (A:GENERAL ENG STARTER:1, Bool) if{ 1 (>K:SET_STARTER1_HELD) }
G58_MAGNETO2_BOTH#3 (>K:MAGNETO2_SET) (A:GENERAL ENG STARTER:2, Bool) if{ 0 (>K:SET_STARTER2_HELD) }
G58_MAGNETO2_LEFT#2 (>K:MAGNETO2_SET) (A:GENERAL ENG STARTER:2, Bool) if{ 0 (>K:SET_STARTER2_HELD) }
G58_MAGNETO2_OFF#0 (>K:MAGNETO2_SET) (A:GENERAL ENG STARTER:2, Bool) if{ 0 (>K:SET_STARTER2_HELD) }
G58_MAGNETO2_RIGHT#1 (>K:MAGNETO2_SET) (A:GENERAL ENG STARTER:2, Bool) if{ 0 (>K:SET_STARTER2_HELD) }
G58_MAGNETO2_START#4 (>K:MAGNETO2_SET) (A:GENERAL ENG STARTER:2, Bool) if{ 1 (>K:SET_STARTER2_HELD) }
G58_MASTER_BATTERY_1_OFF#(A:ELECTRICAL MASTER BATTERY:1, bool) if{ 1 (>K:TOGGLE_MASTER_BATTERY) }
G58_MASTER_BATTERY_1_ON#(A:ELECTRICAL MASTER BATTERY:1, bool) ! if{ 1 (>K:TOGGLE_MASTER_BATTERY) }
G58_MASTER_BATTERY_2_OFF#(A:ELECTRICAL MASTER BATTERY:2, bool) if{ 2 (>K:TOGGLE_MASTER_BATTERY) }
G58_MASTER_BATTERY_2_ON#(A:ELECTRICAL MASTER BATTERY:2, bool) ! if{ 2 (>K:TOGGLE_MASTER_BATTERY) }
//Asobo/330 Extra/Avionics
AS3X_1_CLR_Push#(>H:AS3X_1_CLR_Push)
AS3X_1_DIRECTTO#(>H:AS3X_1_DIRECTTO)
AS3X_1_ENT_Push#(>H:AS3X_1_ENT_Push)
AS3X_1_FPL_Push#(>H:AS3X_1_FPL_Push)
AS3X_1_JOYSTICK_PUSH#(>H:AS3X_1_JOYSTICK_PUSH)
AS3X_1_MENU_Push#(>H:AS3X_1_MENU_Push)
AS3X_1_NRST_Push#(>H:AS3X_1_NRST_Push)
AS3X_1_RNG_Dezoom#(>H:AS3X_1_RNG_Dezoom)
AS3X_1_RNG_Zoom#(>H:AS3X_1_RNG_Zoom)
AS3X_1_SOFTKEYS_1#(>H:AS3X_1_SOFTKEYS_1)
AS3X_1_SOFTKEYS_2#(>H:AS3X_1_SOFTKEYS_2)
AS3X_1_SOFTKEYS_3#(>H:AS3X_1_SOFTKEYS_3)
AS3X_1_SOFTKEYS_4#(>H:AS3X_1_SOFTKEYS_4)
AS3X_1_SOFTKEYS_5#(>H:AS3X_1_SOFTKEYS_5)
AS3X_1_TURN_DEC#(>H:AS3X_1_TURN_DEC)
AS3X_1_TURN_INC#(>H:AS3X_1_TURN_INC)
//Asobo/747-8i/EFIS
B747_8_BARO_DEC#(>K:KOHLSMAN_DEC)
B747_8_BARO_INC#(>K:KOHLSMAN_INC)
B747_8_BTN_ARPT#(>H:B747_8_MFD_BTN_ARPT) (>H:B747_8_PFD_BTN_ARPT) and
B747_8_BTN_DATA#(>H:B747_8_MFD_BTN_DATA) (>H:B747_8_PFD_BTN_DATA) and
B747_8_BTN_POS#(>H:B747_8_MFD_BTN_POS) (>H:B747_8_PFD_BTN_POS) and
B747_8_BTN_STA#(>H:B747_8_MFD_BTN_STA) (>H:B747_8_PFD_BTN_STA) and
B747_8_BTN_TERR#(>H:B747_8_MFD_BTN_TERR) (>H:B747_8_PFD_BTN_TERR) and
B747_8_BTN_WPT#(>H:B747_8_MFD_BTN_WPT) (>H:B747_8_PFD_BTN_WPT) and
B747_8_BTN_WXR#(>H:B747_8_MFD_BTN_WXR) (>H:B747_8_PFD_BTN_WXR) and
B747_8_MFD_NAV_MODE_APP#0 (>L:B747_8_MFD_NAV_MODE)
B747_8_MFD_NAV_MODE_DEC#(L:B747_8_MFD_NAV_MODE) 0 > if{ 1 if{ (L:B747_8_MFD_NAV_MODE) 1 - (>L:B747_8_MFD_NAV_MODE) } }
B747_8_MFD_NAV_MODE_INC#(L:B747_8_MFD_NAV_MODE) 3 < if{ 1 if{ (L:B747_8_MFD_NAV_MODE) 1 + (>L:B747_8_MFD_NAV_MODE) } }
B747_8_MFD_NAV_MODE_MAP#2 (>L:B747_8_MFD_NAV_MODE)
B747_8_MFD_NAV_MODE_PLN#3 (>L:B747_8_MFD_NAV_MODE)
B747_8_MFD_NAV_MODE_VOR#1 (>L:B747_8_MFD_NAV_MODE)
B747_8_MFD_Range_0_25#0 (>L:B747_8_MFD_Range)
B747_8_MFD_Range_0_5#1 (>L:B747_8_MFD_Range)
B747_8_MFD_Range_1#2 (>L:B747_8_MFD_Range)
B747_8_MFD_Range_10#5 (>L:B747_8_MFD_Range)
B747_8_MFD_Range_160#9 (>L:B747_8_MFD_Range)
B747_8_MFD_Range_2#3 (>L:B747_8_MFD_Range)
B747_8_MFD_Range_20#6 (>L:B747_8_MFD_Range)
B747_8_MFD_Range_320#10 (>L:B747_8_MFD_Range)
B747_8_MFD_Range_40#7 (>L:B747_8_MFD_Range)
B747_8_MFD_Range_5#4 (>L:B747_8_MFD_Range)
B747_8_MFD_Range_640#11 (>L:B747_8_MFD_Range)
B747_8_MFD_Range_80#8 (>L:B747_8_MFD_Range)
B747_8_MFD_Range_DEC#(L:B747_8_MFD_Range) 0 > if{ 1 if{ (L:B747_8_MFD_Range) 1 - (>L:B747_8_MFD_Range) } }
B747_8_MFD_Range_INC#(L:B747_8_MFD_Range) 11 < if{ 1 if{ (L:B747_8_MFD_Range) 1 + (>L:B747_8_MFD_Range) } }
B747_8_PFD_FPV#(>H:B747_8_PFD_FPV)
B747_8_PFD_MTRS#(>H:B747_8_PFD_MTRS)
B747_8_PFD_Mins_DEC#(>H:B747_8_PFD_Mins_DEC)
B747_8_PFD_Mins_INC#(>H:B747_8_PFD_Mins_INC)
B747_8_PFD_Mins_Press#(>H:B747_8_PFD_Mins_Press)
B747_8_XMLVAR_Baro_Selector_HPA_1_HPA#1 (>L:B747_8_XMLVAR_Baro_Selector_HPA_1)
B747_8_XMLVAR_Baro_Selector_HPA_1_IN#0 (>L:B747_8_XMLVAR_Baro_Selector_HPA_1)
B747_8_XMLVAR_Mins_Selector_Baro_BARO#1 (>L:B747_8_XMLVAR_Mins_Selector_Baro)
B747_8_XMLVAR_Mins_Selector_Baro_RADIO#0 (>L:B747_8_XMLVAR_Mins_Selector_Baro)
B747_8_XMLVAR_NAV_AID_SWITCH_L1_State_ADF#2 (>L:B747_8_XMLVAR_NAV_AID_SWITCH_L1_State)
B747_8_XMLVAR_NAV_AID_SWITCH_L1_State_OFF#1 (>L:B747_8_XMLVAR_NAV_AID_SWITCH_L1_State)
B747_8_XMLVAR_NAV_AID_SWITCH_L1_State_VOR#0 (>L:B747_8_XMLVAR_NAV_AID_SWITCH_L1_State)
B747_8_XMLVAR_NAV_AID_SWITCH_L2_State_ADF#2 (>L:B747_8_XMLVAR_NAV_AID_SWITCH_L2_State)
B747_8_XMLVAR_NAV_AID_SWITCH_L2_State_OFF#1 (>L:B747_8_XMLVAR_NAV_AID_SWITCH_L2_State)
B747_8_XMLVAR_NAV_AID_SWITCH_L2_State_VOR#0 (>L:B747_8_XMLVAR_NAV_AID_SWITCH_L2_State)
XMLVAR_Baro1_ForcedToSTD#(L:XMLVAR_Baro1_ForcedToSTD) ! (>L:XMLVAR_Baro1_ForcedToSTD)
//Asobo/747-8i/EICAS
B747_8_EICAS_CHANGE_PAGE_chkl#(>H:B747_8_EICAS_2_EICAS_CHANGE_PAGE_chkl)
B747_8_EICAS_CHANGE_PAGE_drs#(>H:B747_8_EICAS_2_EICAS_CHANGE_PAGE_drs)
B747_8_EICAS_CHANGE_PAGE_ecs#(>H:B747_8_EICAS_2_EICAS_CHANGE_PAGE_ecs)
B747_8_EICAS_CHANGE_PAGE_elec#(>H:B747_8_EICAS_2_EICAS_CHANGE_PAGE_elec)
B747_8_EICAS_CHANGE_PAGE_eng#(>H:B747_8_EICAS_2_EICAS_CHANGE_PAGE_eng) 
B747_8_EICAS_CHANGE_PAGE_ftcl#(>H:B747_8_EICAS_2_EICAS_CHANGE_PAGE_ftcl)
B747_8_EICAS_CHANGE_PAGE_fuel#(>H:B747_8_EICAS_2_EICAS_CHANGE_PAGE_fuel)
B747_8_EICAS_CHANGE_PAGE_gear#(>H:B747_8_EICAS_2_EICAS_CHANGE_PAGE_gear)
B747_8_EICAS_CHANGE_PAGE_hyd#B747_8_EICAS_2_EICAS_CHANGE_PAGE_hyd)
B747_8_EICAS_CHANGE_PAGE_info#(>H:B747_8_EICAS_2_EICAS_CHANGE_PAGE_info)
B747_8_EICAS_CHANGE_PAGE_nav#(>H:B747_8_EICAS_2_EICAS_CHANGE_PAGE_nav)
B747_8_EICAS_CHANGE_PAGE_stat#(>H:B747_8_EICAS_2_EICAS_CHANGE_PAGE_stat)
//Asobo/747-8i/Navigation
B747_8_FMC_1_BTN_0#(>H:B747_8_FMC_1_BTN_0)
B747_8_FMC_1_BTN_1#(>H:B747_8_FMC_1_BTN_1)
B747_8_FMC_1_BTN_2#(>H:B747_8_FMC_1_BTN_2)
B747_8_FMC_1_BTN_3#(>H:B747_8_FMC_1_BTN_3)
B747_8_FMC_1_BTN_4#(>H:B747_8_FMC_1_BTN_4)
B747_8_FMC_1_BTN_5#(>H:B747_8_FMC_1_BTN_5)
B747_8_FMC_1_BTN_6#(>H:B747_8_FMC_1_BTN_6)
B747_8_FMC_1_BTN_7#(>H:B747_8_FMC_1_BTN_7)
B747_8_FMC_1_BTN_8#(>H:B747_8_FMC_1_BTN_8)
B747_8_FMC_1_BTN_9#(>H:B747_8_FMC_1_BTN_9)
B747_8_FMC_1_BTN_A#(>H:B747_8_FMC_1_BTN_A)
B747_8_FMC_1_BTN_ATC#(>H:B747_8_FMC_1_BTN_ATC)
B747_8_FMC_1_BTN_B#(>H:B747_8_FMC_1_BTN_B)
B747_8_FMC_1_BTN_BRT_DIM#(>H:B747_8_FMC_1_BTN_BRT_DIM)
B747_8_FMC_1_BTN_C#(>H:B747_8_FMC_1_BTN_C)
B747_8_FMC_1_BTN_CLR#(>H:B747_8_FMC_1_BTN_CLR)
B747_8_FMC_1_BTN_D#(>H:B747_8_FMC_1_BTN_D)
B747_8_FMC_1_BTN_DEL#(>H:B747_8_FMC_1_BTN_DEL)
B747_8_FMC_1_BTN_DEPARR#(>H:B747_8_FMC_1_BTN_DEPARR)
B747_8_FMC_1_BTN_DIV#(>H:B747_8_FMC_1_BTN_DIV)
B747_8_FMC_1_BTN_DOT#(>H:B747_8_FMC_1_BTN_DOT)
B747_8_FMC_1_BTN_E#(>H:B747_8_FMC_1_BTN_E)
B747_8_FMC_1_BTN_EXEC#(>H:B747_8_FMC_1_BTN_EXEC)
B747_8_FMC_1_BTN_F#(>H:B747_8_FMC_1_BTN_F)
B747_8_FMC_1_BTN_FIX#(>H:B747_8_FMC_1_BTN_FIX)
B747_8_FMC_1_BTN_FMCCOMM#(>H:B747_8_FMC_1_BTN_FMCCOMM)
B747_8_FMC_1_BTN_G#(>H:B747_8_FMC_1_BTN_G)
B747_8_FMC_1_BTN_H#(>H:B747_8_FMC_1_BTN_H)
B747_8_FMC_1_BTN_HOLD#(>H:B747_8_FMC_1_BTN_HOLD)
B747_8_FMC_1_BTN_I#(>H:B747_8_FMC_1_BTN_I)
B747_8_FMC_1_BTN_INIT#(>H:B747_8_FMC_1_BTN_INIT)
B747_8_FMC_1_BTN_J#(>H:B747_8_FMC_1_BTN_J)
B747_8_FMC_1_BTN_K#(>H:B747_8_FMC_1_BTN_K)
B747_8_FMC_1_BTN_L#(>H:B747_8_FMC_1_BTN_L)
B747_8_FMC_1_BTN_L1#(>H:B747_8_FMC_1_BTN_L1)
B747_8_FMC_1_BTN_L2#(>H:B747_8_FMC_1_BTN_L2)
B747_8_FMC_1_BTN_L3#(>H:B747_8_FMC_1_BTN_L3)
B747_8_FMC_1_BTN_L4#(>H:B747_8_FMC_1_BTN_L4)
B747_8_FMC_1_BTN_L5#(>H:B747_8_FMC_1_BTN_L5)
B747_8_FMC_1_BTN_L6#(>H:B747_8_FMC_1_BTN_L6)
B747_8_FMC_1_BTN_LEGS#(>H:B747_8_FMC_1_BTN_LEGS)
B747_8_FMC_1_BTN_M#(>H:B747_8_FMC_1_BTN_M)
B747_8_FMC_1_BTN_MENU#(>H:B747_8_FMC_1_BTN_MENU)
B747_8_FMC_1_BTN_N#(>H:B747_8_FMC_1_BTN_N)
B747_8_FMC_1_BTN_NAVRAD#(>H:B747_8_FMC_1_BTN_NAVRAD)
B747_8_FMC_1_BTN_NEXTPAGE#(>H:B747_8_FMC_1_BTN_NEXTPAGE)
B747_8_FMC_1_BTN_O#(>H:B747_8_FMC_1_BTN_O)
B747_8_FMC_1_BTN_P#(>H:B747_8_FMC_1_BTN_P)
B747_8_FMC_1_BTN_PLUSMINUS#(>H:B747_8_FMC_1_BTN_PLUSMINUS)
B747_8_FMC_1_BTN_PREVPAGE#(>H:B747_8_FMC_1_BTN_PREVPAGE)
B747_8_FMC_1_BTN_PROG#(>H:B747_8_FMC_1_BTN_PROG)
B747_8_FMC_1_BTN_Q#(>H:B747_8_FMC_1_BTN_Q)
B747_8_FMC_1_BTN_R#(>H:B747_8_FMC_1_BTN_R)
B747_8_FMC_1_BTN_R1#(>H:B747_8_FMC_1_BTN_R1)
B747_8_FMC_1_BTN_R2#(>H:B747_8_FMC_1_BTN_R2)
B747_8_FMC_1_BTN_R3#(>H:B747_8_FMC_1_BTN_R3)
B747_8_FMC_1_BTN_R4#(>H:B747_8_FMC_1_BTN_R4)
B747_8_FMC_1_BTN_R5#(>H:B747_8_FMC_1_BTN_R5)
B747_8_FMC_1_BTN_R6#(>H:B747_8_FMC_1_BTN_R6)
B747_8_FMC_1_BTN_RTE#(>H:B747_8_FMC_1_BTN_RTE)
B747_8_FMC_1_BTN_S#(>H:B747_8_FMC_1_BTN_S)
B747_8_FMC_1_BTN_SP#(>H:B747_8_FMC_1_BTN_SP)
B747_8_FMC_1_BTN_T#(>H:B747_8_FMC_1_BTN_T)
B747_8_FMC_1_BTN_U#(>H:B747_8_FMC_1_BTN_U)
B747_8_FMC_1_BTN_V#(>H:B747_8_FMC_1_BTN_V)
B747_8_FMC_1_BTN_VNAV#(>H:B747_8_FMC_1_BTN_VNAV)
B747_8_FMC_1_BTN_W#(>H:B747_8_FMC_1_BTN_W)
B747_8_FMC_1_BTN_X#(>H:B747_8_FMC_1_BTN_X)
B747_8_FMC_1_BTN_Y#(>H:B747_8_FMC_1_BTN_Y)
B747_8_FMC_1_BTN_Z#(>H:B747_8_FMC_1_BTN_Z)
//Asobo/A320/Lights
ASOA320_OH_EXTLT_RWY_OFF#(A:LIGHT TAXI:2, Bool) if{ 2 (>K:TOGGLE_TAXI_LIGHTS) 3 (>K:TOGGLE_TAXI_LIGHTS) }
ASOA320_OH_EXTLT_RWY_ON#(A:LIGHT TAXI:2, Bool) ! if{ 2 (>K:TOGGLE_TAXI_LIGHTS) 3 (>K:TOGGLE_TAXI_LIGHTS) }
ASOA320_OH_EXTLT_RWY_TOG#2 (>K:TOGGLE_TAXI_LIGHTS) 3 (>K:TOGGLE_TAXI_LIGHTS)
ASOA320_OH_STROBES_TOG_AUTO#(A:LIGHT STROBE:0, Percent) ! if{ 0 (>K:STROBES_TOGGLE) } 1 (>L:STROBE_1_Auto)
ASOA320_OH_STROBES_TOG_OFF#(A:LIGHT STROBE:0, Percent) if{ 0 (>K:STROBES_TOGGLE) } 0 (>L:STROBE_1_Auto)
ASOA320_OH_STROBES_TOG_ON#(A:LIGHT STROBE:0, Percent) ! if{ 0 (>K:STROBES_TOGGLE) } 0 (>L:STROBE_1_Auto)
//Asobo/Baron G58/Controls
G58_COWL_FLAP_CLOSE#0 (>K:COWLFLAP1_SET)
G58_COWL_FLAP_OPEN#16383 (>K:COWLFLAP1_SET)
//Asobo/Baron G58/Safety
G58_ELT_ARM#(A:ELT ACTIVATED, Bool) if{ (>K:ELT_OFF) }
G58_ELT_ON#(A:ELT ACTIVATED, Bool) ! if{ (>K:ELT_ON) }
//Asobo/Bonanza G36/Avionics
G36_AVIONICS_OFF#(A:CIRCUIT SWITCH ON:24, Bool) 1 == if{ 1 (>K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE) 24 (>K:ELECTRICAL_CIRCUIT_TOGGLE) }
G36_AVIONICS_ON#(A:CIRCUIT SWITCH ON:24, Bool) 0 == if{ 1 (>K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE) 24 (>K:ELECTRICAL_CIRCUIT_TOGGLE) }
//Asobo/Bonanza G36/Electrical
G36_ALTERNATOR_1_OFF#(A:GENERAL ENG MASTER ALTERNATOR:1, Bool) 1 == if{ 1 (>K:TOGGLE_ALTERNATOR1) }
G36_ALTERNATOR_1_ON#(A:GENERAL ENG MASTER ALTERNATOR:1, Bool) 0 == if{ 1 (>K:TOGGLE_ALTERNATOR1) }
G36_ALTERNATOR_2_OFF#(A:GENERAL ENG MASTER ALTERNATOR:2, Bool) 1 == if{ 1 (>K:TOGGLE_ALTERNATOR2) }
G36_ALTERNATOR_2_ON#(A:GENERAL ENG MASTER ALTERNATOR:2, Bool) 0 == if{ 1 (>K:TOGGLE_ALTERNATOR2) }
G36_BATTERY_1_OFF#(A:ELECTRICAL MASTER BATTERY:1, Bool) 1 == if{ 1 (>K:TOGGLE_MASTER_BATTERY) }
G36_BATTERY_1_ON#(A:ELECTRICAL MASTER BATTERY:1, Bool) 0 == if{ 1 (>K:TOGGLE_MASTER_BATTERY) }
G36_BATTERY_2_OFF#(A:ELECTRICAL MASTER BATTERY:2, Bool) 1 == if{ 2 (>K:TOGGLE_MASTER_BATTERY) }
G36_BATTERY_2_ON#(A:ELECTRICAL MASTER BATTERY:2, Bool) 0 == if{ 2 (>K:TOGGLE_MASTER_BATTERY) }
//Asobo/Bonanza G36/Fuel
G36_FUEL_PUMP_HIGH#1 (>K:ELECT_FUEL_PUMP1_SET) 1 (>L:XMLVAR_FUEL_Pump1_High_ON)
G36_FUEL_PUMP_OFF#0 (>K:ELECT_FUEL_PUMP1_SET) 0 (>L:XMLVAR_FUEL_Pump1_High_ON)
G36_FUEL_PUMP_ON#1 (>K:ELECT_FUEL_PUMP1_SET) 0 (>L:XMLVAR_FUEL_Pump1_High_ON)
//Asobo/Bonanza G36/Lights
G36_LIGHTING_KNOB_FLOOD_DEC#(A:LIGHT POTENTIOMETER:5, Percent) 10 - 0 max 5 (>K:2:LIGHT_POTENTIOMETER_SET)
G36_LIGHTING_KNOB_FLOOD_INC#(A:LIGHT POTENTIOMETER:5, Percent) 10 + 100 min 5 (>K:2:LIGHT_POTENTIOMETER_SET)
G36_LIGHTING_SWITCH_FLOOD#0 (>K:GLARESHIELD_LIGHTS_TOGGLE)
G36_LIGHT_FLOOD_OFF#0 (>K:GLARESHIELD_LIGHTS_SET)
G36_LIGHT_FLOOD_ON#1 (>K:GLARESHIELD_LIGHTS_SET)
G36_LIGHT_KNOB_AVIONICS_DEC#(A:LIGHT POTENTIOMETER:14, Percent) 1 - 0 max 14 (>K:2:LIGHT_POTENTIOMETER_SET)
G36_LIGHT_KNOB_AVIONICS_INC#(A:LIGHT POTENTIOMETER:14, Percent) 1 + 100 min 14 (>K:2:LIGHT_POTENTIOMETER_SET)
G36_LIGHT_KNOB_GLARESHIELD_DEC#(A:LIGHT POTENTIOMETER:5, Percent) 1 - 0 max 5 (>K:2:LIGHT_POTENTIOMETER_SET)
G36_LIGHT_KNOB_GLARESHIELD_INC#(A:LIGHT POTENTIOMETER:5, Percent) 1 + 100 min 5 (>K:2:LIGHT_POTENTIOMETER_SET)
G36_LIGHT_KNOB_PANEL_DEC#(A:LIGHT POTENTIOMETER:3, Percent) 1 - 0 max 3 (>K:2:LIGHT_POTENTIOMETER_SET)
G36_LIGHT_KNOB_PANEL_INC#(A:LIGHT POTENTIOMETER:3, Percent) 1 + 100 min 3 (>K:2:LIGHT_POTENTIOMETER_SET)
G36_LIGHT_KNOB_SUBPANEL_DEC#(A:LIGHT POTENTIOMETER:2, Percent) 1 - 0 max 2 (>K:2:LIGHT_POTENTIOMETER_SET)
G36_LIGHT_KNOB_SUBPANEL_INC#(A:LIGHT POTENTIOMETER:2, Percent) 1 + 100 min 2 (>K:2:LIGHT_POTENTIOMETER_SET)
G36_LIGHT_PANEL_OFF#0 (>K:PANEL_LIGHTS_SET)
G36_LIGHT_PANEL_ON#1 (>K:PANEL_LIGHTS_SET)
//Asobo/Cessna 172/Anti-Ice
C_172_Pitot_Heat_Toggle_#1 (L:DEICE_Pitot_1) ! (>K:2:PITOT_HEAT_SET)
C_172_PITOT_HEAT_OFF#(A:PITOT HEAT, Bool) 1 == if{ (>K:PITOT_HEAT_TOGGLE) }
C_172_PITOT_HEAT_ON#(A:PITOT HEAT, Bool) 0 == if{ (>K:PITOT_HEAT_TOGGLE) }
//Asobo/Cessna 172/Autopilot
C_172_AP#(A:AUTOPILOT DISENGAGED, Bool) ! if{ (>K:AP_MASTER) (A:AUTOPILOT MASTER, Bool) if{ (A:AUTOPILOT FLIGHT DIRECTOR ACTIVE, Bool) ! if{ 1 (>K:TOGGLE_FLIGHT_DIRECTOR) } } (A:AUTOPILOT MASTER, bool) ! if{ (H:Generic_Autopilot_Manual_Off) } }
C_172_AP_ALT#(>K:AP_ALT_HOLD)
C_172_AP_APR#(A:AUTOPILOT APPROACH HOLD,Bool) (A:AUTOPILOT GLIDESLOPE HOLD, Bool) ! and if{ (>K:AP_APR_HOLD) } (>K:AP_APR_HOLD)
C_172_AP_FLC#(>K:FLIGHT_LEVEL_CHANGE) (A:AIRSPEED INDICATED, knots) (>K:AP_SPD_VAR_SET)
C_172_AP_HDG#(>K:AP_PANEL_HEADING_HOLD)
C_172_AP_NAV#(>K:AP_NAV1_HOLD)
C_172_AP_NOSE_DN#(A:AUTOPILOT VERTICAL HOLD, Bool) if{ (>K:AP_VS_VAR_DEC) (>H:AP_UP) } (A:AUTOPILOT FLIGHT LEVEL CHANGE, Bool) if{ (>K:AP_SPD_VAR_DEC) } (A:AUTOPILOT PITCH HOLD, Bool) if{ (>K:AP_PITCH_REF_INC_DN) }
C_172_AP_NOSE_UP#(A:AUTOPILOT VERTICAL HOLD, Bool) if{ (>K:AP_VS_VAR_INC) (>H:AP_DN) } (A:AUTOPILOT FLIGHT LEVEL CHANGE, Bool) if{ (>K:AP_SPD_VAR_INC) } (A:AUTOPILOT PITCH HOLD, Bool) if{ (>K:AP_PITCH_REF_INC_UP) }
C_172_AP_VS#(>K:AP_PANEL_VS_HOLD)
C_172_FD#(A:AUTOPILOT MASTER, bool) ! if{ 0 (>K:TOGGLE_FLIGHT_DIRECTOR) }
//Asobo/Cessna 172/Avionics
C_172_AVIONICS_BUS_1_OFF#(A:CIRCUIT SWITCH ON:24, Bool) 1 == if{ 4 1 (>K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE) 24 (>K:ELECTRICAL_CIRCUIT_TOGGLE) }
C_172_AVIONICS_BUS_1_ON#(A:CIRCUIT SWITCH ON:24, bool) 0 == if{ 4 1 (>K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE) 24 (>K:ELECTRICAL_CIRCUIT_TOGGLE) }
C_172_AVIONICS_BUS_2_OFF#(A:CIRCUIT SWITCH ON:25, Bool) 1 == if{ 5 2 (>K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE) 25 (>K:ELECTRICAL_CIRCUIT_TOGGLE) }
C_172_AVIONICS_BUS_2_ON#(A:CIRCUIT SWITCH ON:25, bool) 0 == if{ 5 2 (>K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE) 25 (>K:ELECTRICAL_CIRCUIT_TOGGLE) }
C_172_XPNDR_VFR#1200 (>L:my xpndr code, number) (L:my xpndr code, bco16) (>K:XPNDR_SET)
//Asobo/Cessna 172/Electrical
C172_ALTERNATOR_OFF#(A:GENERAL ENG MASTER ALTERNATOR:1, Bool) 1 == if{ 1 (>K:TOGGLE_ALTERNATOR1) }
C172_ALTERNATOR_ON#(A:GENERAL ENG MASTER ALTERNATOR:1, Bool) 0 == if{ 1 (>K:TOGGLE_ALTERNATOR1) }
C172_BATTERY_OFF#(A:ELECTRICAL MASTER BATTERY:1, Bool) 1 == if{ 1 (>K:TOGGLE_MASTER_BATTERY) }
C172_BATTERY_ON#(A:ELECTRICAL MASTER BATTERY:1, Bool) 0 == if{ 1 (>K:TOGGLE_MASTER_BATTERY) }
C_172_STBYBATTERY_OFF#(L:XMLVAR_BatterySTBY_SwitchState) 0 == if{ 2 (>K:TOGGLE_MASTER_BATTERY) }
C_172_STBYBATTERY_ON#(L:XMLVAR_BatterySTBY_SwitchState) 1 == if{ 2 (>K:TOGGLE_MASTER_BATTERY) }
C_172_STBYBATTERY_TEST_OFF#0 (>L:XMLVAR_STBYBattery_IsHeld)
C_172_STBYBATTERY_TEST_ON#1 (>L:XMLVAR_STBYBattery_Test) 1 (>L:XMLVAR_STBYBattery_IsHeld)
//Asobo/Cessna 172/Environment
TOGGLE_ALTERNATE_AIR#(>K:TOGGLE_ALTERNATE_STATIC)
//Asobo/Cessna 172/Fuel
C_172_BOTH_FUEL_TANKS#1 (>K:FUEL_SELECTOR_SET)
C_172_FUEL_PUMP_OFF#(A:GENERAL ENG FUEL PUMP SWITCH:1, Bool) 1 == if{ (>K:TOGGLE_ELECT_FUEL_PUMP) }
C_172_FUEL_PUMP_ON#(A:GENERAL ENG FUEL PUMP SWITCH:1, Bool) 0 == if{ (>K:TOGGLE_ELECT_FUEL_PUMP) }
C_172_FUEL_SHUTOFF_VALVE_CLOSE#(A:GENERAL ENG FUEL VALVE:1, Bool) 1 == if{ (>K:TOGGLE_FUEL_VALVE_ENG1) }
C_172_FUEL_SHUTOFF_VALVE_OPEN#(A:GENERAL ENG FUEL VALVE:1, Bool) 0 == if{ (>K:TOGGLE_FUEL_VALVE_ENG1) }
C_172_LEFT_FUEL_TANK#2 (>K:FUEL_SELECTOR_SET)
C_172_RIGHT_FUEL_TANK#3 (>K:FUEL_SELECTOR_SET)
//Asobo/Cessna 172/Lights
C_172_AVIONICS_LIGHT_DEC#(L:LIGHTING_POTENTIOMETER_4) 5 - 0 max d (>L:LIGHTING_POTENTIOMETER_4) 4 (>K:2:LIGHT_POTENTIOMETER_SET) 
C_172_AVIONICS_LIGHT_INC#(L:LIGHTING_POTENTIOMETER_4) 5 + 0 100 min d (>L:LIGHTING_POTENTIOMETER_4) 4 (>K:2:LIGHT_POTENTIOMETER_SET) 
C_172_COPILOT_CABIN_LIGHT_DEC#(A:LIGHT CABIN POWER SETTING:2, Percent) 10 - 0 max 2 (>K:2:CABIN_LIGHTS_POWER_SETTING_SET) (A:LIGHT CABIN:2, Bool) (A:LIGHT CABIN POWER SETTING:2, Percent) 0 == and if{ 2 0 (>K:2:CABIN_LIGHTS_SET) }
C_172_COPILOT_CABIN_LIGHT_INC#(A:LIGHT CABIN:2, Bool) ! if{ 2 1 (>K:2:CABIN_LIGHTS_SET) } (A:LIGHT CABIN POWER SETTING:2, Percent) 10 + 100 min 2 (>K:2:CABIN_LIGHTS_POWER_SETTING_SET)
C_172_LIGHTS_LANDING_OFF#(A:LIGHT LANDING:0, Percent) 100 == if{ 0 (>K:LANDING_LIGHTS_TOGGLE) }
C_172_LIGHTS_LANDING_ON#(A:LIGHT LANDING:0, Percent) 0 == if{ 0 (>K:LANDING_LIGHTS_TOGGLE) }
C_172_PANEL_LIGHT_DEC#(L:LIGHTING_POTENTIOMETER_3, percent) 5 - 0 max d (>L:LIGHTING_POTENTIOMETER_3) 3 (>K:2:LIGHT_POTENTIOMETER_SET)
C_172_PANEL_LIGHT_INC#(L:LIGHTING_POTENTIOMETER_3, percent) 5 + 100 min d (>L:LIGHTING_POTENTIOMETER_3) 3 (>K:2:LIGHT_POTENTIOMETER_SET)
C_172_PEDESTRAL_LIGHT_DEC#(L:LIGHTING_PEDESTRAL_1) 5 - 0 max d (>L:LIGHTING_PEDESTRAL_1) 1 (>K:2:PEDESTRAL_LIGHTS_POWER_SETTING_SET)
C_172_PEDESTRAL_LIGHT_INC#(L:LIGHTING_PEDESTRAL_1) 5 + 100 min d (>L:LIGHTING_PEDESTRAL_1) 1 (>K:2:PEDESTRAL_LIGHTS_POWER_SETTING_SET)
C_172_PILOT_CABIN_LIGHT_DEC#(A:LIGHT CABIN POWER SETTING:1, Percent) 10 - 0 max 1 (>K:2:CABIN_LIGHTS_POWER_SETTING_SET) (A:LIGHT CABIN:1, Bool) (A:LIGHT CABIN POWER SETTING:1, Percent) 0 == and if{ 1 0 (>K:2:CABIN_LIGHTS_SET) }
C_172_PILOT_CABIN_LIGHT_INC#(A:LIGHT CABIN:1, Bool) ! if{ 1 1 (>K:2:CABIN_LIGHTS_SET) } (A:LIGHT CABIN POWER SETTING:1, Percent) 10 + 100 min 1 (>K:2:CABIN_LIGHTS_POWER_SETTING_SET)
C_172_STBY_INSTRUMENTS_LIGHT_DEC#(A:LIGHT PANEL POWER SETTING:1, Percent) 10 - 0 max 1 (>K:2:PANEL_LIGHTS_POWER_SETTING_SET) (A:LIGHT PANEL:1, Bool) (A:LIGHT PANEL POWER SETTING:1, Percent) 0 == and if{ 1 0 (>K:2:PANEL_LIGHTS_SET) }
C_172_STBY_INSTRUMENTS_LIGHT_INC#(A:LIGHT PANEL:1, Bool) ! if{ 1 1 (>K:2:PANEL_LIGHTS_SET) } (A:LIGHT PANEL POWER SETTING:1, Percent) 10 + 100 min 1 (>K:2:PANEL_LIGHTS_POWER_SETTING_SET)
//Asobo/Cessna 172/Safety
C172_SAFETY_Light_Test_On#(>K:ANNUNCIATOR_SWITCH_ON) 0 (>L:XMLVAR_WarningsAttenuated)
C172_SAFETY_Lights_Test_Off#(>K:ANNUNCIATOR_SWITCH_OFF) 0 (>L:XMLVAR_WarningsAttenuated)
//Asobo/King Air 350i/Autopilot
KA_ALT#(>K:AP_ALT_HOLD)
KA_ALT_DEC#100 (>K:AP_ALT_VAR_DEC)
KA_ALT_FAST_DEC#1000 (>K:AP_ALT_VAR_DEC)
KA_ALT_FAST_INC#1000 (>K:AP_ALT_VAR_INC)
KA_ALT_INC#100 (>K:AP_ALT_VAR_INC)
KA_ALT_SET#(A:INDICATED ALTITUDE, feet) (>K:AP_ALT_VAR_SET_ENGLISH) (>H:AP_KNOB)
KA_AP#(A:AUTOPILOT DISENGAGED, Bool) ! if{ (>K:AP_MASTER) (A:AUTOPILOT MASTER, Bool) if{ (A:AUTOPILOT FLIGHT DIRECTOR ACTIVE, Bool) ! if{ 1 (>K:TOGGLE_FLIGHT_DIRECTOR) } } (L:XMLVAR_APTrim) 0 == if{ (A:AUTOPILOT YAW DAMPER, Bool) ! (A:AUTOPILOT MASTER, bool) and if{ (K:YAW_DAMPER_TOGGLE) } } (A:AUTOPILOT MASTER, Bool) ! if{ (H:Generic_Autopilot_Manual_Off) } }
KA_APPR#(A:AUTOPILOT APPROACH HOLD,Bool) (A:AUTOPILOT GLIDESLOPE HOLD,Bool) ! and if{ (>K:AP_APR_HOLD) } (>K:AP_APR_HOLD)
KA_BANK#(>K:AP_MAX_BANK_INC)
KA_CRS_DEC#(>K:VOR1_OBI_DEC)
KA_CRS_INC#(>K:VOR1_OBI_INC)
KA_CRS_SET#(A:HEADING INDICATOR,degrees) (>K:VOR1_SET)
KA_FD1#(A:AUTOPILOT MASTER, bool) ! if{ 1 (>K:TOGGLE_FLIGHT_DIRECTOR) }
KA_FLC#(>K:FLIGHT_LEVEL_CHANGE) (A:AIRSPEED INDICATED, knots) (>K:AP_SPD_VAR_SET)
KA_HDG#(>K:AP_PANEL_HEADING_HOLD)
KA_HDG_DEC#(>K:HEADING_BUG_DEC)
KA_HDG_FAST_DEC#(A:AUTOPILOT HEADING LOCK DIR:1, Degrees) 5 - (>K:1:HEADING_BUG_SET)
KA_HDG_FAST_INC#(A:AUTOPILOT HEADING LOCK DIR:1, Degrees) 5 + (>K:1:HEADING_BUG_SET)
KA_HDG_INC#(>K:HEADING_BUG_INC)
KA_NAV#(>K:AP_NAV1_HOLD)
KA_PUSHDISCO#(A:>K:AUTOPILOT DISENGAGED, bool) if{ 0(>K:AUTOPILOT_DISENGAGE_SET)} els{ 1(>K:AUTOPILOT_DISENGAGE_SET) }
KA_Push_Heading#(A:HEADING INDICATOR,degrees) (>K:HEADING_BUG_SET)
KA_SPD_DEC#(L:XMLVAR_AirSpeedIsInMach) if{ (>K:AP_MACH_VAR_DEC) } els{ (>K:AP_SPD_VAR_DEC) }
KA_SPD_INC#(L:XMLVAR_AirSpeedIsInMach) if{ (>K:AP_MACH_VAR_INC) } els{ (>K:AP_SPD_VAR_INC) }
KA_VNAV#(L:XMLVAR_VNAVButtonValue) ! (>L:XMLVAR_VNAVButtonValue)
KA_VS#(>K:AP_PANEL_VS_HOLD)
KA_VS_DEC#(A:AUTOPILOT VERTICAL HOLD, bool) if{ (>K:AP_VS_VAR_INC) } els{ (>K:AP_PITCH_REF_INC_UP) }
KA_VS_INC#(A:AUTOPILOT VERTICAL HOLD, bool) if{ (>K:AP_VS_VAR_DEC) } els{ (>K:AP_PITCH_REF_INC_DN) }
KA_YD#(>K:YAW_DAMPER_TOGGLE)
//Asobo/King Air 350i/Engines
KA_ENG1_START_TOGGLE#(A:GENERAL ENG STARTER ACTIVE:1, Bool) 0 == if{ 2 (>K:TURBINE_IGNITION_SWITCH_SET1) 1 (>K:SET_STARTER1_HELD) } els{ 0 (>K:SET_STARTER1_HELD) 0 (>K:TURBINE_IGNITION_SWITCH_SET1) 0 (>K:TOGGLE_STARTER1) }
KA_ENG2_START_TOGGLE#(A:GENERAL ENG STARTER ACTIVE:2, Bool) 0 == if{ 2 (>K:TURBINE_IGNITION_SWITCH_SET2) 1 (>K:SET_STARTER2_HELD) } els{ 0 (>K:SET_STARTER2_HELD) 0 (>K:TURBINE_IGNITION_SWITCH_SET2) 0 (>K:TOGGLE_STARTER2) }
//Asobo/Longitude/Electrical
LONGITUTDE_TOGGLE_ALTERNATOR_1_SWITCH_1#1 (>K:TOGGLE_ALTERNATOR1)
LONGITUTDE_TOGGLE_ALTERNATOR_2_SWITCH_2#1 (>K:TOGGLE_ALTERNATOR2)
LONGITUTDE_TOGGLE_EXTERNAL_POWER_SWITCH#1 (>K:TOGGLE_EXTERNAL_POWER)
LONGITUTDE_TOGGLE_MASTER_BATTERY_SWITCH_1#1 (>K:TOGGLE_MASTER_BATTERY)
LONGITUTDE_TOGGLE_MASTER_BATTERY_SWITCH_2#2 (>K:TOGGLE_MASTER_BATTERY)
//Asobo/Longitude/Lights
LONGITUTDE_LANDING_LIGHTS_L_TOGGLE#(>K:LANDING_LIGHTS_L_TOGGLE)
LONGITUTDE_LANDING_LIGHTS_R_TOGGLE#(>K:LANDING_LIGHTS_R_TOGGLE)
LONGITUTDE_PULSE_LIGHTS_TOGGLE#(>K:PULSE_LIGHTS_TOGGLE)
LONGITUTDE_RECOG_LIGHTS_TOGGLE#(>K:RECOG_LIGHTS_TOGGLE)
LONGITUTDE_TAIL_FLOOD_LIGHTS_TOGGLE#0 (>K:TOGGLE_LOGO_LIGHTS)
LONGITUTDE_TAXI_LIGHTS_TOGGLE#(>K:TAXI_LIGHTS_TOGGLE)
LONGITUTDE_WING_INSP_LIGHTS_TOGGLE#0 (>K:TOGGLE_WING_LIGHTS)
//Asobo/TBM 580/Avionics
AS3000_TSC_Horizontal_BottomKnob_Push#(>H:AS3000_TSC_Horizontal_BottomKnob_Push)
AS3000_TSC_Horizontal_BottomKnob_Small_DEC#(>H:AS3000_TSC_Horizontal_BottomKnob_Small_DEC)
AS3000_TSC_Horizontal_BottomKnob_Small_INC#(>H:AS3000_TSC_Horizontal_BottomKnob_Small_INC)
AS3000_TSC_Horizontal_SoftKey_1#(>H:AS3000_TSC_Horizontal_SoftKey_1)
AS3000_TSC_Horizontal_SoftKey_2#(>H:AS3000_TSC_Horizontal_SoftKey_2)
AS3000_TSC_Horizontal_SoftKey_3#(>H:AS3000_TSC_Horizontal_SoftKey_3)
AS3000_TSC_Horizontal_TopKnob_Large_DEC#(>H:AS3000_TSC_Horizontal_TopKnob_Large_DEC)
AS3000_TSC_Horizontal_TopKnob_Large_INC#(>H:AS3000_TSC_Horizontal_TopKnob_Large_INC)
AS3000_TSC_Horizontal_TopKnob_Push#(>H:AS3000_TSC_Horizontal_TopKnob_Push)
AS3000_TSC_Horizontal_TopKnob_Push_Long#(>H:AS3000_TSC_Horizontal_TopKnob_Push_Long)
AS3000_TSC_Horizontal_TopKnob_Small_DEC#(>H:AS3000_TSC_Horizontal_TopKnob_Small_DEC)
AS3000_TSC_Horizontal_TopKnob_Small_INC#(>H:AS3000_TSC_Horizontal_TopKnob_Small_INC)
//Asobo/TBM 930/Air Condition / Pressurization
TBM930_BLEED_AIR_AUTO#0 (>K:BLEED_AIR_SOURCE_CONTROL_SET)
TBM930_BLEED_AIR_MAX#3 (>K:BLEED_AIR_SOURCE_CONTROL_SET)
TBM930_BLEED_AIR_OFF#1 (>K:BLEED_AIR_SOURCE_CONTROL_SET)
//Asobo/TBM 930/Anti-Ice
TBM930_AIRFRAME_DE_ICE_OFF#(A:STRUCTURAL DEICE SWITCH, Bool) if{ (>K:TOGGLE_STRUCTURAL_DEICE) }
TBM930_AIRFRAME_DE_ICE_ON#(A:STRUCTURAL DEICE SWITCH, Bool) ! if{ (>K:TOGGLE_STRUCTURAL_DEICE) }
TBM930_ICE_LIGHT_OFF#0 0 (>K:2:WING_LIGHTS_SET) 0 (>L:LIGHTING_WING_1)
TBM930_ICE_LIGHT_ON#1 1 (>K:2:WING_LIGHTS_SET) 1 (>L:LIGHTING_WING_1)
TBM930_INERT_SEP_OFF#(A:ENG·ANTI·ICE:1,·Bool)·if{·(>K:ANTI_ICE_TOGGLE_ENG1)·}
TBM930_INERT_SEP_ON#(A:ENG ANTI ICE:1, Bool) ! if{ (>K:ANTI_ICE_TOGGLE_ENG1) }
TBM930_LTS_TEST_OFF#0 (>L:XMLVAR_LTS_TEST)
TBM930_LTS_TEST_ON#1 (>L:XMLVAR_LTS_Test)
TBM930_LTS_TEST_TOGGLE#(L:XMLVAR_LTS_TEST, Number) ! (>L:XMLVAR_LTS_TEST)
TBM930_PITOT_L_OFF#1 0 (>K:2:PITOT_HEAT_SET) 0 (>L:DEICE_Pitot_1)
TBM930_PITOT_L_ON#1 1 (>K:2:PITOT_HEAT_SET) 1 (>L:DEICE_Pitot_1)
TBM930_PITOT_R_OFF#0 (>L:XMLVAR_Pitot_2) (L:XMLVAR_Pitot_1) ! (L:XMLVAR_Pitot_2) ! and (A:PITOT HEAT, bool) == if{ (>K:PITOT_HEAT_TOGGLE) }
TBM930_PITOT_R_ON#2 1 (>K:2:PITOT_HEAT_SET) 1 (>L:DEICE_Pitot_2)
TBM930_PROP_DE_ICE_OFF#(A:PROP DEICE SWITCH:1, Bool) if{ (>K:TOGGLE_PROPELLER_DEICE) }
TBM930_PROP_DE_ICE_ON#(A:PROP DEICE SWITCH:1, Bool) ! if{ (>K:TOGGLE_PROPELLER_DEICE) }
TBM930_Pitot_L_TOG#(L:XMLVAR_Pitot_1) ! (>L:XMLVAR_Pitot_1) (L:XMLVAR_Pitot_1) ! (L:XMLVAR_Pitot_2) ! and (A:PITOT HEAT, bool) == if{ (>K:PITOT_HEAT_TOGGLE) }
TBM930_Pitot_R_TOG#2 (A:PITOT HEAT SWITCH:2) ! (>K:2:PITOT_HEAT_SET) (A:PITOT HEAT SWITCH:2) ! (>L:DEICE_Pitot_2)
TBM930_WINDSHIELD_OFF#0 (>K:WINDSHIELD_DEICE_SET)
TBM930_WINDSHIELD_ON#1 (>K:WINDSHIELD_DEICE_SET)
//Asobo/TBM 930/Autopilot
TBM930_AP_CRS1_INC#(>K:VOR1_OBI_INC)
TBM930_AP_CRS1_SYNC#(A:HEADING INDICATOR, Radians) 57.29 * (>K:VOR1_SET)
TBM930_AP_CRS2_DEC#(>K:VOR2_OBI_DEC)
TBM930_AP_VNV_OFF#0 (>L:XMLVAR_VNAVButtonValue)
TBM930_AUTOPILOT_ALT_ON#(A:AUTOPILOT ALTITUDE LOCK, Bool) ! if{ (>K:AP_ALT_HOLD) }
TBM930_AUTOPILOT_ALT_TOGGLE#(>K:AP_ALT_HOLD)
TBM930_AUTOPILOT_APR_OFF#(>K:AP_APR_HOLD_OFF)
TBM930_AUTOPILOT_APR_TOGGLE#(>K:AP_APR_HOLD)
TBM930_AUTOPILOT_BC_OFF#(>K:AP_BC_HOLD_OFF)
TBM930_AUTOPILOT_CRS1_DEC#(>K:VOR1_OBI_DEC)
TBM930_AUTOPILOT_CRS2_INC#(>K:VOR2_OBI_INC)
TBM930_AUTOPILOT_CRS2_SYNC#(A:HEADING INDICATOR, Radians) 57.29 * (>K:VOR2_SET)
TBM930_AUTOPILOT_FD_ON#(A:AUTOPILOT FLIGHT DIRECTOR ACTIVE, Bool) ! if{ 1 (>K:TOGGLE_FLIGHT_DIRECTOR) }
TBM930_AUTOPILOT_FD_TOGGLE#1 (>K:TOGGLE_FLIGHT_DIRECTOR)
TBM930_AUTOPILOT_FLC_OFF#(A:AUTOPILOT FLIGHT LEVEL CHANGE, Bool) if{(>K:FLIGHT_LEVEL_CHANGE)}
TBM930_AUTOPILOT_FLC_TOGGLE#(>K:FLIGHT_LEVEL_CHANGE) (A:AIRSPEED INDICATED, Knots) (>K:AP_SPD_VAR_SET)
TBM930_AUTOPILOT_HDG_ON#(A:AUTOPILOT HEADING LOCK, Bool) ! if{ (>K:AP_PANEL_HEADING_HOLD) }
TBM930_AUTOPILOT_Heading_Sync#(A:HEADING INDICATOR, degrees) (>K:HEADING_BUG_SET)
TBM930_AUTOPILOT_IAS_DEC#(L:XMLVAR_AirSpeedIsInMach) if{ (>K:AP_MACH_VAR_DEC) } els{ (>K:AP_SPD_VAR_DEC) }
TBM930_AUTOPILOT_IAS_INC#(L:XMLVAR_AirSpeedIsInMach) if{ (>K:AP_MACH_VAR_INC) } els{ (>K:AP_SPD_VAR_INC) }
TBM930_AUTOPILOT_LVL_OFF#(A:AUTOPILOT WING LEVELER, Bool) if{ (>K:AP_WING_LEVELER) (A:AUTOPILOT MASTER, Bool) if{ (>K:AUTOPILOT_OFF) } (>K:AP_PITCH_LEVELER_OFF) }
TBM930_AUTOPILOT_MASTER_OFF#2 (>L:XMLVAR_APTrim) (A:AUTOPILOT DISENGAGED, Bool) ! if{ (>K:AUTOPILOT_DISENGAGE_TOGGLE) } (A:RUDDER TRIM DISABLED, Bool) ! if{ 1 (>K:RUDDER_TRIM_DISABLED_SET) } (A:AILERON TRIM DISABLED, Bool) ! if{ 1 (>K:AILERON_TRIM_DISABLED_SET) }
TBM930_AUTOPILOT_MASTER_ON#0 (>L:XMLVAR_APTrim) (A:AUTOPILOT DISENGAGED, Bool) if{ (>K:AUTOPILOT_DISENGAGE_TOGGLE) }
TBM930_AUTOPILOT_MASTER_TOGGLE#(A:AUTOPILOT DISENGAGED, Bool) if{ 0 (>L:XMLVAR_APTrim) (A:AUTOPILOT DISENGAGED, Bool) if{ (>K:AUTOPILOT_DISENGAGE_TOGGLE) } } els{ 2 (>L:XMLVAR_APTrim) (A:AUTOPILOT DISENGAGED, Bool) ! if{ (>K:AUTOPILOT_DISENGAGE_TOGGLE) } (A:RUDDER TRIM DISABLED, Bool) ! if{ 1 (>K:RUDDER_TRIM_DISABLED_SET) } (A:AILERON TRIM DISABLED, Bool) ! if{ 1 (>K:AILERON_TRIM_DISABLED_SET) } }
TBM930_AUTOPILOT_MASTER_TRIM_ONLY#1 (>L:XMLVAR_APTrim) (A:AUTOPILOT DISENGAGED, Bool) ! if{ (>K:AUTOPILOT_DISENGAGE_TOGGLE) } (A:RUDDER TRIM DISABLED, Bool) if{ 0 (>K:RUDDER_TRIM_DISABLED_SET) } (A:AILERON TRIM DISABLED, Bool) if{ 0 (>K:AILERON_TRIM_DISABLED_SET) }
TBM930_AUTOPILOT_MAX_BANK_ON#(A:AUTOPILOT MAX BANK, Radians) 0.5 > if{ (>K:AP_MAX_BANK_INC) }
TBM930_AUTOPILOT_MAX_BANK_TOGGLE#(>K:AP_MAX_BANK_INC)
TBM930_AUTOPILOT_SPD_KTS#0 (>L:XMLVAR_AirSpeedIsInMach, Number)
TBM930_AUTOPILOT_SPD_MACH#1 (>L:XMLVAR_AirSpeedIsInMach, Number)
TBM930_AUTOPILOT_SPD_TOGGLE#(L:XMLVAR_AirSpeedIsInMach, Number) ! (>L:XMLVAR_AirSpeedIsInMach, Number)
TBM930_AUTOPILOT_TOGGLE#(A:AUTOPILOT DISENGAGED, Bool) ! if{ (>K:AP_MASTER) (L:XMLVAR_APTrim) 0 == if{ (A:AUTOPILOT YAW DAMPER, Bool) ! (A:AUTOPILOT MASTER, Bool) and if{ (>K:YAW_DAMPER_TOGGLE) } } (A:AUTOPILOT MASTER, Bool) ! if{ (>H:Generic_Autopilot_Manual_Off) } }
TBM930_AUTOPILOT_VNV_ON#1 (>L:XMLVAR_VNAVButtonValue)
TBM930_AUTOPILOT_VNV_TOGGLE#(L:XMLVAR_VNAVButtonValue) ! (>L:XMLVAR_VNAVButtonValue)
TBM930_AUTOPILOT_VS_OFF#(A:AUTOPILOT VERTICAL HOLD, Bool) if{ (>K:AP_PANEL_VS_HOLD) }
TBM930_AUTOPILOT_YD_OFF#(A:AUTOPILOT YAW DAMPER, Bool) if{ (>K:YAW_DAMPER_TOGGLE) }
TBM930_BARO_DEC#(>K:KOHLSMAN_DEC) (>H:AP_BARO_DOWN)
TBM930_BARO_INC#(>K:KOHLSMAN_INC) (>H:AP_BARO_UP)
TBM930_BARO_SYNC#(>K:BAROMETRIC)
//Asobo/TBM 930/Avionics
TBM930_PFD_1_SOFTKEYS_1#1 (>H:AS3000_PFD_1_SOFTKEYS_1)
TBM930_PFD_1_SOFTKEYS_10#1 (>H:AS3000_PFD_1_SOFTKEYS_10)
TBM930_PFD_1_SOFTKEYS_11#1 (>H:AS3000_PFD_1_SOFTKEYS_11)
TBM930_PFD_1_SOFTKEYS_12#1 (>H:AS3000_PFD_1_SOFTKEYS_12)
TBM930_PFD_1_SOFTKEYS_2#1 (>H:AS3000_PFD_1_SOFTKEYS_2)
TBM930_PFD_1_SOFTKEYS_3#1 (>H:AS3000_PFD_1_SOFTKEYS_3)
TBM930_PFD_1_SOFTKEYS_4#1 (>H:AS3000_PFD_1_SOFTKEYS_4)
TBM930_PFD_1_SOFTKEYS_5#1 (>H:AS3000_PFD_1_SOFTKEYS_5)
TBM930_PFD_1_SOFTKEYS_6#1 (>H:AS3000_PFD_1_SOFTKEYS_6)
TBM930_PFD_1_SOFTKEYS_7#1 (>H:AS3000_PFD_1_SOFTKEYS_7)
TBM930_PFD_1_SOFTKEYS_8#1 (>H:AS3000_PFD_1_SOFTKEYS_8)
TBM930_PFD_1_SOFTKEYS_9#1 (>H:AS3000_PFD_1_SOFTKEYS_9)
TBM930_PFD_2_SOFTKEYS_1#1 (>H:AS3000_PFD_2_SOFTKEYS_1)
TBM930_PFD_2_SOFTKEYS_10#1 (>H:AS3000_PFD_2_SOFTKEYS_10)
TBM930_PFD_2_SOFTKEYS_11#1 (>H:AS3000_PFD_2_SOFTKEYS_11)
TBM930_PFD_2_SOFTKEYS_12#1 (>H:AS3000_PFD_2_SOFTKEYS_12)
TBM930_PFD_2_SOFTKEYS_2#1 (>H:AS3000_PFD_2_SOFTKEYS_2)
TBM930_PFD_2_SOFTKEYS_3#1 (>H:AS3000_PFD_2_SOFTKEYS_3)
TBM930_PFD_2_SOFTKEYS_4#1 (>H:AS3000_PFD_2_SOFTKEYS_4)
TBM930_PFD_2_SOFTKEYS_5#1 (>H:AS3000_PFD_2_SOFTKEYS_5)
TBM930_PFD_2_SOFTKEYS_6#1 (>H:AS3000_PFD_2_SOFTKEYS_6)
TBM930_PFD_2_SOFTKEYS_7#1 (>H:AS3000_PFD_2_SOFTKEYS_7)
TBM930_PFD_2_SOFTKEYS_8#1 (>H:AS3000_PFD_2_SOFTKEYS_8)
TBM930_PFD_2_SOFTKEYS_9#1 (>H:AS3000_PFD_2_SOFTKEYS_9)
TBM930_PFD_3_SOFTKEYS_1#1 (>H:AS3000_PFD_3_SOFTKEYS_1)
TBM930_PFD_3_SOFTKEYS_10#1 (>H:AS3000_PFD_3_SOFTKEYS_10)
TBM930_PFD_3_SOFTKEYS_11#1 (>H:AS3000_PFD_3_SOFTKEYS_11)
TBM930_PFD_3_SOFTKEYS_12#1 (>H:AS3000_PFD_3_SOFTKEYS_12)
TBM930_PFD_3_SOFTKEYS_2#1 (>H:AS3000_PFD_3_SOFTKEYS_2)
TBM930_PFD_3_SOFTKEYS_3#1 (>H:AS3000_PFD_3_SOFTKEYS_3)
TBM930_PFD_3_SOFTKEYS_4#1 (>H:AS3000_PFD_3_SOFTKEYS_4)
TBM930_PFD_3_SOFTKEYS_5#1 (>H:AS3000_PFD_3_SOFTKEYS_5)
TBM930_PFD_3_SOFTKEYS_6#1 (>H:AS3000_PFD_3_SOFTKEYS_6)
TBM930_PFD_3_SOFTKEYS_7#1 (>H:AS3000_PFD_3_SOFTKEYS_7)
TBM930_PFD_3_SOFTKEYS_8#1 (>H:AS3000_PFD_3_SOFTKEYS_8)
TBM930_PFD_3_SOFTKEYS_9#1 (>H:AS3000_PFD_3_SOFTKEYS_9)
//Asobo/TBM 930/Electrical
TBM930_ELECTRICAL_SOURCE_BATT#1 (>L:XMLVAR_ElecSource, Number) (A:ELECTRICAL MASTER BATTERY, Bool) ! if{ (>K:TOGGLE_MASTER_BATTERY) }
TBM930_ELECTRICAL_SOURCE_GPU#0 (>L:XMLVAR_ElecSource, Number) (A:ELECTRICAL MASTER BATTERY, Bool) if{ (>K:TOGGLE_MASTER_BATTERY) }
TBM930_ELECTRICAL_SOURCE_OFF#2 (>L:XMLVAR_ElecSource, Number) (A:ELECTRICAL MASTER BATTERY, Bool) if{ (>K:TOGGLE_MASTER_BATTERY) }
TBM930_GENERATOR_MAIN#1 (>L:XMLVAR_ElecGen, Number) (A:GENERAL ENG MASTER ALTERNATOR:1, Bool) ! if{ (>K:TOGGLE_ALTERNATOR1) }
TBM930_GENERATOR_OFF#2 (>L:XMLVAR_ElecGen, Number) (A:GENERAL ENG MASTER ALTERNATOR:1, Bool) if{ (>K:TOGGLE_ALTERNATOR1) }
TBM930_GENERATOR_STANDBY#0 (>L:XMLVAR_ElecGen, Number) (A:GENERAL ENG MASTER ALTERNATOR:1, Bool) ! if{ (>K:TOGGLE_ALTERNATOR1) }
//Asobo/TBM 930/Engines
TBM930_IGNITION_AUTO#1 (>A:TURB ENG IGNITION SWITCH EX1:1, Enum) 1 (>L:XMLVAR_Ignition)
TBM930_IGNITION_OFF#0 (>A:TURB ENG IGNITION SWITCH EX1:1, Enum) 0 (>L:XMLVAR_Ignition)
TBM930_IGNITION_ON#2 (>A:TURB ENG IGNITION SWITCH EX1:1, Enum) 0 (>L:XMLVAR_Ignition)
TBM930_STARTER_ABORT#2 (>L:XMLVAR_Starter, Number) (A:GENERAL ENG STARTER:1, Bool) if{ (>K:TOGGLE_STARTER1) }
TBM930_STARTER_ON#0 (>L:XMLVAR_Starter, Number) (A:GENERAL ENG STARTER:1, Bool) ! if{ (>K:TOGGLE_STARTER1) }
//Asobo/TBM 930/Fuel
TBM930_AUX_BP_AUTO#2 (>L:XMLVAR_BoostFuelPump, Number) (A:GENERAL ENG FUEL PUMP SWITCH EX1:1, Enum) 2 != if{ 2 (>K:ELECT_FUEL_PUMP1_SET) }
TBM930_AUX_BP_OFF#0 (>L:XMLVAR_BoostFuelPump, Number) (A:GENERAL ENG FUEL PUMP SWITCH EX1:1, Enum) 0 != if{ 0 (>K:ELECT_FUEL_PUMP1_SET) }
TBM930_AUX_BP_ON#1 (>L:XMLVAR_BoostFuelPump, Number) (A:GENERAL ENG FUEL PUMP SWITCH EX1:1, Enum) 1 != if{ 1 (>K:ELECT_FUEL_PUMP1_SET) }
TBM930_FUEL_SELECTOR_AUTO#
TBM930_FUEL_SELECTOR_MANUAL#
TBM930_SHIFT_FUEL_TANK#(A:FUEL TANK SELECTOR:1, Enum) 2 == if{ (>K:FUEL_SELECTOR_RIGHT) } els{ (>K:FUEL_SELECTOR_LEFT) }
//Asobo/TBM 930/Gear
TBM930_LANDING_GEAR_DOWN#(>K:GEAR_DOWN)
TBM930_LANDING_GEAR_UP#(>K:GEAR_UP)
//Asobo/TBM 930/Lights
TBM930_DIMMER_OFF#
TBM930_DIMMER_ON#
TBM930_DIMMER_TOGGLE#
TBM930_LANDING_TAXI_OFF_State_0#1 (A:LIGHT LANDING, Bool) != if{ (>K:LANDING_LIGHTS_TOGGLE) } 0 (A:LIGHT LOGO, Bool) != if{ (>K:TOGGLE_LOGO_LIGHTS) } 0 (A:LIGHT TAXI, Bool) != if{ (>K:TOGGLE_TAXI_LIGHTS) } 0 (>L:XMLVAR_LANDING_TAXI_OFF_Switch_Position)
TBM930_LANDING_TAXI_OFF_State_1#0 (A:LIGHT LANDING, Bool) != if{ (>K:LANDING_LIGHTS_TOGGLE) } 1 (A:LIGHT TAXI, Bool) != if{ (>K:TOGGLE_TAXI_LIGHTS) } 1 (>L:XMLVAR_LANDING_TAXI_OFF_Switch_Position)
TBM930_LANDING_TAXI_OFF_State_2#0 (A:LIGHT LANDING, Bool) != if{ (>K:LANDING_LIGHTS_TOGGLE) } 0 (A:LIGHT TAXI, Bool) != if{ (>K:TOGGLE_TAXI_LIGHTS) } 2 (>L:XMLVAR_LANDING_TAXI_OFF_Switch_Position)
TBM930_NAV_LIGHT_OFF#(A:LIGHT NAV, Bool) if{ (>K:TOGGLE_NAV_LIGHTS) }
TBM930_NAV_LIGHT_ON#(A:LIGHT NAV, Bool) ! if{ (>K:TOGGLE_NAV_LIGHTS) }
TBM930_NAV_LIGHT_TOGGLE#(>K:TOGGLE_NAV_LIGHTS)
TBM930_PANEL_LIGHT_DEC#(A:LIGHT POTENTIOMETER:4, Percent) 5 - 0 max 4 (>K:2:LIGHT_POTENTIOMETER_SET)
TBM930_PANEL_LIGHT_INC#(A:LIGHT POTENTIOMETER:4, Percent) 5 + 100 min 4 (>K:2:LIGHT_POTENTIOMETER_SET)
TBM930_STROBE_LIGHT_OFF#(>K:STROBES_OFF)
TBM930_STROBE_LIGHT_ON#(>K:STROBES_ON)
TBM930_STROBE_LIGHT_TOGGLE#(>K:STROBES_TOGGLE)
//Asobo/TBM 930/Miscellaneous
TBM930_CRASH_BAR_DOWN#2 (>L:XMLVAR_ElecSource, Number) (A:ELECTRICAL MASTER BATTERY, Bool) if{ (>K:TOGGLE_MASTER_BATTERY) } 2 (>L:XMLVAR_ElecGen, Number) (A:GENERAL ENG MASTER ALTERNATOR:1, Bool) if{ (>K:TOGGLE_ALTERNATOR1) } 0 (>L:XMLVAR_CrashLeverPos, Number)
TBM930_CRASH_BAR_UP#1 (>L:XMLVAR_CrashLeverPos, Number)
//Asobo/TBM 930/Warning System
TBM930_ELT_ARM#(>K:ELT_OFF)
TBM930_ELT_ON#(>K:ELT_ON) (E:SIMULATION TIME, seconds) (>L:XMLVAR_ELT_ACTIVATION_TIME, Number)
TBM930_ELT_TEST#3 (>L:XMLVAR_ELT_STATE, Number) (E:SIMULATION TIME, seconds) (>L:XMLVAR_ELT_TEST_TIME, Number)
TBM930_MASTER_CAUTION_PUSH#1 (>H:Generic_Master_Caution_Push, Number)
TBM930_MASTER_WARNING_PUSH#1 (>H:Generic_Master_Warning_Push, Number)
//Asobo/XCub/Autopilot
ALT_knob_push#(A:INDICATED ALTITUDE, feet) (>K:AP_ALT_VAR_SET_ENGLISH)
//Carenado/M20R OVATION/Autopilot
KAS297_ALT_ARM_PUSH#1 (>L:KAS297_ALT_ARM_PUSH)
KAS297_ALT_DEC_100# (L:CUSTOM_AP_ALT_VAR_SET_ENGLISH, feet) 100 - 0 max (>L:CUSTOM_AP_ALT_VAR_SET_ENGLISH, feet)
KAS297_ALT_DEC_1000# (L:CUSTOM_AP_ALT_VAR_SET_ENGLISH, feet) 1000 - 0 max (>L:CUSTOM_AP_ALT_VAR_SET_ENGLISH, feet)
KAS297_ALT_INC_100# (L:CUSTOM_AP_ALT_VAR_SET_ENGLISH, feet) (L:CUSTOM_AP_ALT_VAR_SET_ENGLISH, feet) 100 + (>L:CUSTOM_AP_ALT_VAR_SET_ENGLISH)
KAS297_ALT_INC_1000# (L:CUSTOM_AP_ALT_VAR_SET_ENGLISH, feet) (L:CUSTOM_AP_ALT_VAR_SET_ENGLISH, feet) 1000 + (>L:CUSTOM_AP_ALT_VAR_SET_ENGLISH)
KAS297_AP_SELECT_ALT_OR_VS# (L:GAUGE_ALT_ALERT_MODE, Number) 0 == if{ 1 (>L:GAUGE_ALT_ALERT_MODE, Number) } els{ (L:GAUGE_ALT_ALERT_MODE, Number) 1 == if{ 0 (>L:GAUGE_ALT_ALERT_MODE, Number) }
//Fly By Wire/A320-Dev/Air Condition / Pressurization
AIRCOND_AFT_CABIN_KNOB_DEC#(L:A320_Neo_AIRCOND_LVL_3, Percent) 5 - 0 max (>L:A320_Neo_AIRCOND_LVL_3)
AIRCOND_AFT_CABIN_KNOB_INC#(L:A320_Neo_AIRCOND_LVL_3, Percent) 5 + 100 min (>L:A320_Neo_AIRCOND_LVL_3)
AIRCOND_APU_BLEED_TOGGLE#(L:A32NX_OVHD_PNEU_APU_BLEED_PB_IS_ON, bool) ! (>L:A32NX_OVHD_PNEU_APU_BLEED_PB_IS_ON, bool)
AIRCOND_COCKPIT_KNOB_DEC#(L:A320_Neo_AIRCOND_LVL_1, Percent) 5 - 0 max (>L:A320_Neo_AIRCOND_LVL_1)
AIRCOND_COCKPIT_KNOB_INC#(L:A320_Neo_AIRCOND_LVL_1, Percent) 5 + 100 min (>L:A320_Neo_AIRCOND_LVL_1)
AIRCOND_ENG1_BLEED_TOGGLE#1 (>K:ENGINE_BLEED_AIR_SOURCE_TOGGLE) (L:XMLVAR_Momentary_PUSH_OVHD_AIRCOND_ENG1BLEED_Pressed) ! (>L:XMLVAR_Momentary_PUSH_OVHD_AIRCOND_ENG1BLEED_Pressed)
AIRCOND_ENG2_BLEED_TOGGLE#2 (>K:ENGINE_BLEED_AIR_SOURCE_TOGGLE) (L:XMLVAR_Momentary_PUSH_OVHD_AIRCOND_ENG2BLEED_Pressed) ! (>L:XMLVAR_Momentary_PUSH_OVHD_AIRCOND_ENG2BLEED_Pressed)
AIRCOND_FWD_CABIN_KNOB_DEC#(L:A320_Neo_AIRCOND_LVL_2, Percent) 5 - 0 max (>L:A320_Neo_AIRCOND_LVL_2)
AIRCOND_FWD_CABIN_KNOB_INC#(L:A320_Neo_AIRCOND_LVL_2, Percent) 5 + 100 min (>L:A320_Neo_AIRCOND_LVL_2)
AIRCOND_HOTAIR_TOGGLE#(L:A32NX_AIRCOND_HOTAIR_TOGGLE, bool) ! (>L:A32NX_AIRCOND_HOTAIR_TOGGLE, bool)
AIRCOND_PACK_FLOW_KNOB_HI#2 (>L:A32NX_KNOB_OVHD_AIRCOND_PACKFLOW_Position)
AIRCOND_PACK_FLOW_KNOB_LO#0 (>L:A32NX_KNOB_OVHD_AIRCOND_PACKFLOW_Position)
AIRCOND_PACK_FLOW_KNOB_NORM#1 (>L:A32NX_KNOB_OVHD_AIRCOND_PACKFLOW_Position)
AIRCOND_PACK1_TOGGLE#(L:A32NX_AIRCOND_PACK1_TOGGLE, bool) ! (>L:A32NX_AIRCOND_PACK1_TOGGLE, bool)
AIRCOND_PACK2_TOGGLE#(L:A32NX_AIRCOND_PACK2_TOGGLE, bool) ! (>L:A32NX_AIRCOND_PACK2_TOGGLE, bool)
AIRCOND_RAMAIR_LOCK_TOGGLE#(L:A32NX_AIRCOND_RAMAIR_TOGGLE_LOCK) ! (>L:A32NX_AIRCOND_RAMAIR_TOGGLE_LOCK)
AIRCOND_RAMAIR_TOGGLE#(L:A32NX_AIRCOND_RAMAIR_TOGGLE, bool) ! (>L:A32NX_AIRCOND_RAMAIR_TOGGLE, bool)
CABIN_PRESS_DITCHING_LOCK_TOGGLE#(L:A32NX_DITCHING_LOCK) ! (>L:A32NX_DITCHING_LOCK)
CABIN_PRESS_DITCHING_TOGGLE#(L:A32NX_DITCHING) ! (>L:A32NX_DITCHING)
CABIN_PRESS_LDGELEV_AUTO_DEC#(L:XMLVAR_KNOB_OVHD_CABINPRESS_LDGELEV, Percent) 4 - 0 max 88 min (>L:XMLVAR_KNOB_OVHD_CABINPRESS_LDGELEV, percent)
CABIN_PRESS_LDGELEV_AUTO_INC#(L:XMLVAR_KNOB_OVHD_CABINPRESS_LDGELEV, Percent) 4 + 0 max 88 min (>L:XMLVAR_KNOB_OVHD_CABINPRESS_LDGELEV, percent)
CABIN_PRESS_MAN_VS_CTL_DN#2 (>L:A32NX_MAN_VS_CONTROL, number)
CABIN_PRESS_MAN_VS_CTL_MID#1 (>L:A32NX_MAN_VS_CONTROL, number)
CABIN_PRESS_MAN_VS_CTL_UP#0 (>L:A32NX_MAN_VS_CONTROL, number)
CABIN_PRESS_MODE_SEL_MAN#(L:A32NX_CAB_PRESS_MODE_MAN, bool) ! (>L:A32NX_CAB_PRESS_MODE_MAN, bool)
//Fly By Wire/A320-Dev/Anti-Ice
ANTIICE_ENG1_TOGGLE#(L:XMLVAR_Momentary_PUSH_OVHD_ANTIICE_ENG2_Pressed) ! (>L:XMLVAR_Momentary_PUSH_OVHD_ANTIICE_ENG2_Pressed) (>K:ANTI_ICE_TOGGLE_ENG1)
ANTIICE_ENG2_TOGGLE#(L:XMLVAR_Momentary_PUSH_OVHD_ANTIICE_ENG1_Pressed) ! (>L:XMLVAR_Momentary_PUSH_OVHD_ANTIICE_ENG1_Pressed) (>K:ANTI_ICE_TOGGLE_ENG2)
ANTIICE_PROBE_WINDOW_TOGGLE#(L:A32NX_MAN_PITOT_HEAT) ! (>L:A32NX_MAN_PITOT_HEAT) (L:XMLVAR_Momentary_PUSH_OVHD_PROBESWINDOW_Pressed) ! (>L:XMLVAR_Momentary_PUSH_OVHD_PROBESWINDOW_Pressed)
ANTIICE_WING_TOGGLE#(L:XMLVAR_Momentary_PUSH_OVHD_ANTIICE_WING_Pressed) ! (>L:XMLVAR_Momentary_PUSH_OVHD_ANTIICE_WING_Pressed) (>K:TOGGLE_STRUCTURAL_DEICE)
//Fly By Wire/A320-Dev/Autopilot
A32NX_FCU_ALT_DEC#(>K:A32NX.FCU_ALT_DEC)
A32NX_FCU_ALT_INC#(>K:A32NX.FCU_ALT_INC)
A32NX_FCU_ALT_INCREMENT_SET#(>K:A32NX.FCU_ALT_INCREMENT_SET)
A32NX_FCU_ALT_INCREMENT_TOGGLE#(>K:A32NX.FCU_ALT_INCREMENT_TOGGLE)
A32NX_FCU_ALT_PULL#(>K:A32NX.FCU_ALT_PULL)
A32NX_FCU_ALT_PUSH#(>K:A32NX.FCU_ALT_PUSH)
A32NX_FCU_ALT_SET#(>K:A32NX.FCU_ALT_SET)
A32NX_FCU_APPR_PUSH#(>K:A32NX.FCU_APPR_PUSH)
A32NX_FCU_AP_1_PUSH#(>K:A32NX.FCU_AP_1_PUSH)
A32NX_FCU_AP_2_PUSH#(>K:A32NX.FCU_AP_2_PUSH)
A32NX_FCU_AP_DISCONNECT_PUSH#(>K:A32NX.FCU_AP_DISCONNECT_PUSH)
A32NX_FCU_ATHR_DISCONNECT_PUSH#(>K:A32NX.FCU_ATHR_DISCONNECT_PUSH)
A32NX_FCU_ATHR_PUSH#(>K:A32NX.FCU_ATHR_PUSH)
A32NX_FCU_EXPED_PUSH#(>K:A32NX.FCU_EXPED_PUSH)
A32NX_FCU_HDG_DEC#(>K:A32NX.FCU_HDG_DEC)
A32NX_FCU_HDG_INC#(>K:A32NX.FCU_HDG_INC)
A32NX_FCU_HDG_PULL#(>K:A32NX.FCU_HDG_PULL)
A32NX_FCU_HDG_PUSH#(>K:A32NX.FCU_HDG_PUSH)
A32NX_FCU_HDG_SET#(>K:A32NX.FCU_HDG_SET)
A32NX_FCU_LOC_PUSH#(>K:A32NX.FCU_LOC_PUSH)
A32NX_FCU_SPD_DEC#(>K:A32NX.FCU_SPD_DEC)
A32NX_FCU_SPD_INC#(>K:A32NX.FCU_SPD_INC)
A32NX_FCU_SPD_MACH_TOGGLE_PUSH#(>K:A32NX.FCU_SPD_MACH_TOGGLE_PUSH)
A32NX_FCU_SPD_PULL#(>K:A32NX.FCU_SPD_PULL)
A32NX_FCU_SPD_PUSH#(>K:A32NX.FCU_SPD_PUSH)
A32NX_FCU_SPD_SET#(>K:A32NX.FCU_SPD_SET)
A32NX_FCU_TRK_FPA_TOGGLE_PUSH#(>K:A32NX.FCU_TRK_FPA_TOGGLE_PUSH)
A32NX_FCU_VS_DEC#(>K:A32NX.FCU_VS_DEC)
A32NX_FCU_VS_INC#(>K:A32NX.FCU_VS_INC)
A32NX_FCU_VS_PULL#(>K:A32NX.FCU_VS_PULL)
A32NX_FCU_VS_PUSH#(>K:A32NX.FCU_VS_PUSH)
A32NX_FCU_VS_SET#(>K:A32NX.FCU_VS_SET)
//Fly By Wire/A320-Dev/EFIS
AUTOPILOT_BARO_DEC#(L:XMLVAR_Baro1_Mode) 2 != (L:XMLVAR_Baro1_Mode) 3 != and if{ (L:XMLVAR_Baro_Selector_HPA_1) if{ 1 (A:KOHLSMAN SETTING MB:1, mbars) -- 16 * (>K:2:KOHLSMAN_SET) } els{ 1 (>K:KOHLSMAN_DEC) } }
AUTOPILOT_BARO_INC#(L:XMLVAR_Baro1_Mode) 2 != (L:XMLVAR_Baro1_Mode) 3 != and if{ (L:XMLVAR_Baro_Selector_HPA_1) if{ 1 (A:KOHLSMAN SETTING MB:1, mbars) ++ 16 * (>K:2:KOHLSMAN_SET) } els{ 1 (>K:KOHLSMAN_INC) } }
//Fly By Wire/A320-Dev/Electrical
OVHD_ELEC_AC_ESS_FEED_TOGGLE#(L:A32NX_OVHD_ELEC_AC_ESS_FEED_PB_IS_NORMAL, bool) ! (>L:A32NX_OVHD_ELEC_AC_ESS_FEED_PB_IS_NORMAL, bool)
OVHD_ELEC_APU_GEN_TOGGLE#1 (>K:APU_GENERATOR_SWITCH_TOGGLE) (L:XMLVAR_Momentary_PUSH_OVHD_ELEC_APUGEN_Pressed) ! (>L:XMLVAR_Momentary_PUSH_OVHD_ELEC_APUGEN_Pressed)
OVHD_ELEC_BATTERY_1_TOGGLE#(L:A32NX_OVHD_ELEC_BAT_1_PB_IS_AUTO, Bool) if{ 0 (>L:A32NX_OVHD_ELEC_BAT_1_PB_IS_AUTO) } els{ 1 (>L:A32NX_OVHD_ELEC_BAT_1_PB_IS_AUTO) } (L:XMLVAR_Momentary_PUSH_OVHD_ELEC_BAT1_Pressed) ! (>L:XMLVAR_Momentary_PUSH_OVHD_ELEC_BAT1_Pressed)
OVHD_ELEC_BATTERY_2_TOGGLE#(L:A32NX_OVHD_ELEC_BAT_2_PB_IS_AUTO, Bool) if{ 0 (>L:A32NX_OVHD_ELEC_BAT_2_PB_IS_AUTO) } els{ 1 (>L:A32NX_OVHD_ELEC_BAT_2_PB_IS_AUTO) } (L:XMLVAR_Momentary_PUSH_OVHD_ELEC_BAT2_Pressed) ! (>L:XMLVAR_Momentary_PUSH_OVHD_ELEC_BAT2_Pressed)
OVHD_ELEC_COMMERCIAL_TOGGLE#(L:A32NX_OVHD_ELEC_COMMERCIAL_PB_IS_ON, bool) ! (>L:A32NX_OVHD_ELEC_COMMERCIAL_PB_IS_ON)
OVHD_ELEC_EXT_PWR_TOGGLE#(A:EXTERNAL POWER AVAILABLE:1,bool) (A:EXTERNAL POWER ON:1,bool) ! and if{ 1 (>K:TOGGLE EXTERNAL_POWER) } els{ (A:EXTERNAL POWER ON:1,bool) if { 1 (>K:TOGGLE_EXTERNAL_POWER) } }
OVHD_ELEC_GALY_AND_CAB_TOGGLE#(L:A32NX_OVHD_ELEC_GALY_AND_CAB_PB_IS_AUTO, bool) ! (>L:A32NX_OVHD_ELEC_GALY_AND_CAB_PB_IS_AUTO, bool)
OVHD_ELEC_GEN1_TOGGLE#(>K:TOGGLE_ALTERNATOR1) (L:XMLVAR_Momentary_PUSH_OVHD_ELEC_GEN1_Pressed) ! (>L:XMLVAR_Momentary_PUSH_OVHD_ELEC_GEN1_Pressed)
OVHD_ELEC_GEN2_TOGGLE#(>K:TOGGLE_ALTERNATOR2) (L:XMLVAR_Momentary_PUSH_OVHD_ELEC_GEN2_Pressed) ! (>L:XMLVAR_Momentary_PUSH_OVHD_ELEC_GEN2_Pressed)
//Fly By Wire/A320-Dev/Fire
FIRE_APU_AGENT1_DISCHARGE#(L:A32NX_FIRE_BUTTON_APU) if{ 1 (>L:A32NX_FIRE_APU_AGENT1_Discharge) }
FIRE_BUTTON_APU_ON#(L:A32NX_FIRE_GUARD_APU) if{ 1 (>L:A32NX_FIRE_BUTTON_APU) }
FIRE_BUTTON_ENG1_ON#(L:A32NX_FIRE_GUARD_ENG1) if{ 1 (>L:A32NX_FIRE_BUTTON_ENG1) }
FIRE_BUTTON_ENG2_ON#(L:A32NX_FIRE_GUARD_ENG2) if{ 1 (>L:A32NX_FIRE_BUTTON_ENG2) }
FIRE_ENG1_AGENT1_DISCHARGE#(L:A32NX_FIRE_BUTTON_ENG1) if{ 1 (>L:A32NX_FIRE_ENG1_AGENT1_Discharge) }
FIRE_ENG1_AGENT2_DISCHARGE#(L:A32NX_FIRE_BUTTON_ENG1) if{ 1 (>L:A32NX_FIRE_ENG1_AGENT2_Discharge) }
FIRE_ENG2_AGENT1_DISCHARGE#(L:A32NX_FIRE_BUTTON_ENG2) if{ 1 (>L:A32NX_FIRE_ENG2_AGENT1_Discharge) }
FIRE_ENG2_AGENT2_DISCHARGE#(L:A32NX_FIRE_BUTTON_ENG2) if{ 1 (>L:A32NX_FIRE_ENG2_AGENT2_Discharge) }
FIRE_GUARD_APU_TOGGLE#(L:A32NX_FIRE_BUTTON_APU) ! if{ (L:A32NX_FIRE_GUARD_APU) ! (>L:A32NX_FIRE_GUARD_APU) }
FIRE_GUARD_ENG1_TOGGLE#(L:A32NX_FIRE_BUTTON_ENG1) ! if{ (L:A32NX_FIRE_GUARD_ENG1) ! (>L:A32NX_FIRE_GUARD_ENG1) }
FIRE_GUARD_ENG2_TOGGLE#(L:A32NX_FIRE_BUTTON_ENG2) ! if{ (L:A32NX_FIRE_GUARD_ENG2) ! (>L:A32NX_FIRE_GUARD_ENG2) }
FIRE_TEST_APU_OFF#0 (>L:A32NX_FIRE_TEST_APU)
FIRE_TEST_APU_ON#1 (>L:A32NX_FIRE_TEST_APU) 
FIRE_TEST_ENG1_OFF#0 (>L:A32NX_FIRE_TEST_ENG1)
FIRE_TEST_ENG1_ON#1 (>L:A32NX_FIRE_TEST_ENG1) 
FIRE_TEST_ENG2_OFF#0 (>L:A32NX_FIRE_TEST_ENG2)
FIRE_TEST_ENG2_ON#1 (>L:A32NX_FIRE_TEST_ENG2) 
//Fly By Wire/A320-Dev/Fuel
FUEL_CTK_PUMP1_#(L:XMLVAR_Momentary_PUSH_OVHD_FUEL_PUMP1_Pressed) ! (>L:XMLVAR_Momentary_PUSH_OVHD_FUEL_PUMP1_Pressed) 1 (>K:FUELSYSTEM_PUMP_TOGGLE)
FUEL_CTK_PUMP2#(L:XMLVAR_Momentary_PUSH_OVHD_FUEL_PUMP2_Pressed) ! (>L:XMLVAR_Momentary_PUSH_OVHD_FUEL_PUMP2_Pressed) 4 (>K:FUELSYSTEM_PUMP_TOGGLE)
FUEL_LTK_PUMP1#(L:XMLVAR_Momentary_PUSH_OVHD_FUEL_LTKPUMPS1_Pressed) ! (>L:XMLVAR_Momentary_PUSH_OVHD_FUEL_LTKPUMPS1_Pressed) 2 (>K:FUELSYSTEM_PUMP_TOGGLE)
FUEL_LTK_PUMP2#(L:XMLVAR_Momentary_PUSH_OVHD_FUEL_LTKPUMPS2_Pressed) ! (>L:XMLVAR_Momentary_PUSH_OVHD_FUEL_LTKPUMPS2_Pressed) 5 (>K:FUELSYSTEM_PUMP_TOGGLE)
FUEL_RTK_PUMP1#(L:XMLVAR_Momentary_PUSH_OVHD_FUEL_RTKPUMPS1_Pressed) ! (>L:XMLVAR_Momentary_PUSH_OVHD_FUEL_RTKPUMPS1_Pressed) 3 (>K:FUELSYSTEM_PUMP_TOGGLE)
FUEL_RTK_PUMP2#(L:XMLVAR_Momentary_PUSH_OVHD_FUEL_RTKPUMPS2_Pressed) ! (>L:XMLVAR_Momentary_PUSH_OVHD_FUEL_RTKPUMPS2_Pressed) 6 (>K:FUELSYSTEM_PUMP_TOGGLE)
FUEL_XFEED_VALVE_ON#(L:XMLVAR_Momentary_PUSH_OVHD_FUEL_XFEED_Pressed) ! (>L:XMLVAR_Momentary_PUSH_OVHD_FUEL_XFEED_Pressed) 3 (>K:FUELSYSTEM_VALVE_TOGGLE)
HYD_ENG1_PUMP_TOGGLE#(L:A32NX_OVHD_HYD_ENG_1_PUMP_PB_IS_AUTO, bool) ! (>L:A32NX_OVHD_HYD_ENG_1_PUMP_PB_IS_AUTO, bool)
HYD_ENG2_PUMP_TOGGLE#(L:A32NX_OVHD_HYD_ENG_2_PUMP_PB_IS_AUTO, bool) ! (>L:A32NX_OVHD_HYD_ENG_2_PUMP_PB_IS_AUTO, bool)
HYD_EPUMP_BLUE_LOCK_TOGGLE#(L:A32NX_OVHD_HYD_EPUMPB_PB_IS_AUTO_LOCK) ! (>L:A32NX_OVHD_HYD_EPUMPB_PB_IS_AUTO_LOCK)
HYD_EPUMPB_IS_AUTO_TOGGLE#(L:A32NX_OVHD_HYD_EPUMPB_PB_IS_AUTO, bool) ! (L:A32NX_OVHD_HYD_EPUMPB_PB_IS_AUTO, bool)
HYD_EPUMPY_IS_AUTO_TOGGLE#(L:A32NX_OVHD_HYD_EPUMPY_PB_IS_AUTO, bool) ! (>L:A32NX_OVHD_HYD_EPUMPY_PB_IS_AUTO, bool)
HYD_PTU_IS_AUTO_TOGGLE#(L:A32NX_OVHD_HYD_PTU_PB_IS_AUTO, bool) ! (>L:A32NX_OVHD_HYD_PTU_PB_IS_AUTO, bool)
HYD_RAT_MAN_ON_PRESSED#1 (>L:A32NX_OVHD_HYD_RAT_MAN_ON_IS_PRESSED)
HYD_RAT_MAN_ON_RELEASED#0 (>L:A32NX_OVHD_HYD_RAT_MAN_ON_IS_PRESSED)
//Fly By Wire/A320-Dev/Gear
AUTOBRAKE_LOW_HARD-TOGGLE#(L:A32NX_AUTOBRAKES_ARMED_MODE) 0 == if{ 1 (>L:A32NX_AUTOBRAKES_ARMED_MODE) } els{ 0 (>L:A32NX_AUTOBRAKES_ARMED_MODE) }
AUTOBRAKE_MAX_HARD-TOGGLE#(L:A32NX_AUTOBRAKES_ARMED_MODE) 0 == if{ 3 (>L:A32NX_AUTOBRAKES_ARMED_MODE) } els{ 0 (>L:A32NX_AUTOBRAKES_ARMED_MODE) }
AUTOBRAKE_MED_HARD-TOGGLE#(L:A32NX_AUTOBRAKES_ARMED_MODE) 0 == if{ 2 (>L:A32NX_AUTOBRAKES_ARMED_MODE) } els{ 0 (>L:A32NX_AUTOBRAKES_ARMED_MODE) }
//Fly By Wire/A320-Dev/Lights
BEACON_LIGHTS_OFF#0 0 (>K:2:BEACON_LIGHTS_SET)
BEACON_LIGHTS_ON#0 1 (>K:2:BEACON_LIGHTS_SET)
LANDING_LIGHTS_L_OFF#1 (>L:LIGHTING_LANDING_2) 0 (>L:LANDING_2_Retracted) 0 2 r (>K:2:LANDING_LIGHTS_SET)
LANDING_LIGHTS_L_ON#0 (>L:LIGHTING_LANDING_2) 0 (>L:LANDING_2_Retracted) 1 2 r (>K:2:LANDING_LIGHTS_SET)
LANDING_LIGHTS_L_RETRACT#2 (>L:LIGHTING_LANDING_2) 1 (>L:LANDING_2_Retracted) 0 2 r (>K:2:LANDING_LIGHTS_SET)
LANDING_LIGHTS_R_OFF#1 (>L:LIGHTING_LANDING_3) 0 (>L:LANDING_3_Retracted) 0 3 r (>K:2:LANDING_LIGHTS_SET)
LANDING_LIGHTS_R_ON#0 (>L:LIGHTING_LANDING_3) 0 (>L:LANDING_3_Retracted) 1 3 r (>K:2:LANDING_LIGHTS_SET)
LANDING_LIGHTS_R_RETRACT#2 (>L:LIGHTING_LANDING_3) 1 (>L:LANDING_3_Retracted) 0 3 r (>K:2:LANDING_LIGHTS_SET)
NAV_LOGO_LIGHTS_OFF#0 0 (>K:2:NAV_LIGHTS_SET) 0 0 (>K:2:LOGO_LIGHTS_SET)
NAV_LOGO_LIGHTS_ON#0 1 (>K:2:NAV_LIGHTS_SET) 0 1 (>K:2:LOGO_LIGHTS_SET)
NAV_LOGO_LIGHTS_TOGGLE#(L:LIGHTING_NAV_0) ! s0 (>L:LIGHTING_NAV_0) 0 l0 (>K:2:NAV_LIGHTS_SET) 0 l0 (>K:2:LOGO_LIGHTS_SET)
NOSE_LIGHTS_OFF#2 (>L:LIGHTING_LANDING_1) 0 1 r (>K:2:LANDING_LIGHTS_SET) 0 1 r (>K:2:TAXI_LIGHTS_SET)
NOSE_LIGHTS_TAXI#1 (>L:LIGHTING_LANDING_1) 0 1 r (>K:2:LANDING_LIGHTS_SET) 1 1 r (>K:2:TAXI_LIGHTS_SET) 
NOSE_LIGHTS_TO#0 (>L:LIGHTING_LANDING_1) 1 1 r (>K:2:LANDING_LIGHTS_SET) 0 1 r (>K:2:TAXI_LIGHTS_SET)
RUNWAY_TURNOFF_LIGHTS_OFF#0 s0 (>L:LIGHTING_TAXI_2) 2 l0 (>K:2:TAXI_LIGHTS_SET) 3 l0 (>K:2:TAXI_LIGHTS_SET)
RUNWAY_TURNOFF_LIGHTS_ON#1 s0 (>L:LIGHTING_TAXI_2) 2 l0 (>K:2:TAXI_LIGHTS_SET) 3 l0 (>K:2:TAXI_LIGHTS_SET)
STROBE_LIGHTS_AUTO#0 (>L:LIGHTING_STROBE_0) 0 (>L:STROBE_0_Auto) 1 0 r (>K:2:STROBES_SET)
STROBE_LIGHTS_OFF#2 (>L:LIGHTING_STROBE_0) 0 (>L:STROBE_0_Auto) 0 0 r (>K:2:STROBES_SET)
STROBE_LIGHTS_ON#1 (>L:LIGHTING_STROBE_0) 1 (>L:STROBE_0_Auto) 1 0 r (>K:2:STROBES_SET)
WING_LIGHTS_OFF#0 0 s0 (>K:2:WING_LIGHTS_SET) l0 (>L:LIGHTING_WING_0)
WING_LIGHTS_ON#0 1 s0 (>K:2:WING_LIGHTS_SET) l0 (>L:LIGHTING_WING_0)
WING_LIGHTS_TOGGLE#(L:LIGHTING_WING_0) ! s0 0 l0 (>K:2:WING_LIGHTS_SET) l0 (>L:LIGHTING_WING_0)
//Fly By Wire/A320-Dev/MCDU
A320_Neo_CDU_1_BTN_INIT#(>H:A320_Neo_CDU_1_BTN_INIT)
A320_Neo_CDU_1_BTN_PERF#(>H:A320_Neo_CDU_1_BTN_PERF)
A320_Neo_CDU_1_BTN_PROG#(>H:A320_Neo_CDU_1_BTN_PROG)
//Fly By Wire/A320-Dev/Navigation
OVHD_ADIRS_ADR_1_TOGGLE#(L:A32NX_OVHD_ADIRS_ADR_1_PB_IS_ON) ! (>L:A32NX_OVHD_ADIRS_ADR_1_PB_IS_ON)
OVHD_ADIRS_ADR_2_TOGGLE#(L:A32NX_OVHD_ADIRS_ADR_2_PB_IS_ON) ! (>L:A32NX_OVHD_ADIRS_ADR_2_PB_IS_ON)
OVHD_ADIRS_ADR_3_TOGGLE#(L:A32NX_OVHD_ADIRS_ADR_3_PB_IS_ON) ! (>L:A32NX_OVHD_ADIRS_ADR_3_PB_IS_ON)
OVHD_ADIRS_IR_1_TOGGLE#(L:A32NX_OVHD_ADIRS_IR_1_PB_IS_ON) ! (>L:A32NX_OVHD_ADIRS_IR_1_PB_IS_ON)
OVHD_ADIRS_IR_2_TOGGLE#(L:A32NX_OVHD_ADIRS_IR_2_PB_IS_ON) ! (>L:A32NX_OVHD_ADIRS_IR_2_PB_IS_ON)
OVHD_ADIRS_IR_3_TOGGLE#(L:A32NX_OVHD_ADIRS_IR_3_PB_IS_ON) ! (>L:A32NX_OVHD_ADIRS_IR_3_PB_IS_ON)
OVHD_ADIRS_KNOB1_ATT#2 (>L:A32NX_OVHD_ADIRS_IR_1_MODE_SELECTOR_KNOB)
OVHD_ADIRS_KNOB1_NAV#1 (>L:A32NX_OVHD_ADIRS_IR_1_MODE_SELECTOR_KNOB)
OVHD_ADIRS_KNOB1_OFF#0 (>L:A32NX_OVHD_ADIRS_IR_1_MODE_SELECTOR_KNOB)
OVHD_ADIRS_KNOB2_ATT#2 (>L:A32NX_OVHD_ADIRS_IR_2_MODE_SELECTOR_KNOB)
OVHD_ADIRS_KNOB2_NAV#1 (>L:A32NX_OVHD_ADIRS_IR_2_MODE_SELECTOR_KNOB)
OVHD_ADIRS_KNOB2_OFF#0 (>L:A32NX_OVHD_ADIRS_IR_2_MODE_SELECTOR_KNOB)
OVHD_ADIRS_KNOB3_ATT#2 (>L:A32NX_OVHD_ADIRS_IR_3_MODE_SELECTOR_KNOB)
OVHD_ADIRS_KNOB3_NAV#1 (>L:A32NX_OVHD_ADIRS_IR_3_MODE_SELECTOR_KNOB)
OVHD_ADIRS_KNOB3_OFF#0 (>L:A32NX_OVHD_ADIRS_IR_3_MODE_SELECTOR_KNOB)
//Fly By Wire/A320-Dev/Passengers/Crew
CABIN_EMERGENCY_LIGHT_ARM#1 (>L:XMLVAR_SWITCH_OVHD_INTLT_EMEREXIT_Position)
CABIN_EMERGENCY_LIGHT_OFF#2 (>L:XMLVAR_SWITCH_OVHD_INTLT_EMEREXIT_Position)
CABIN_EMERGENCY_LIGHT_ON#0 (>L:XMLVAR_SWITCH_OVHD_INTLT_EMEREXIT_Position)
CABIN_NO_SMOKING_AUTO#1 (>L:XMLVAR_SWITCH_OVHD_INTLT_NOSMOKING_Position, number)
CABIN_NO_SMOKING_OFF#2 (>L:XMLVAR_SWITCH_OVHD_INTLT_NOSMOKING_Position, number)
CABIN_NO_SMOKING_ON#0 (>L:XMLVAR_SWITCH_OVHD_INTLT_NOSMOKING_Position, number)
CABIN_SEATBELTS_ALERT_TOGGLE#(>K:CABIN_SEATBELTS_ALERT_SWITCH_TOGGLE)
//Fly By Wire/A320-Dev/Radio
A32NX_AIR_DATA_SWITCHING_CAPT#0 (>L:A32NX_AIR_DATA_SWITCHING_KNOB)
A32NX_AIR_DATA_SWITCHING_F_O#2 (>L:A32NX_AIR_DATA_SWITCHING_KNOB)
A32NX_AIR_DATA_SWITCHING_NORM#1 (>L:A32NX_AIR_DATA_SWITCHING_KNOB)
A32NX_ATT_HDG_SWITCHING_CAPT#0 (>L:A32NX_ATT_HDG_SWITCHING_KNOB)
A32NX_ATT_HDG_SWITCHING_F_O#2 (>L:A32NX_ATT_HDG_SWITCHING_KNOB)
A32NX_ATT_HDG_SWITCHING_NORM#1 (>L:A32NX_ATT_HDG_SWITCHING_KNOB)
A32NX_ECAM_ND_XFR_SWITCHING_CAPT#0 (>L:A32NX_ECAM_ND_XFR_SWITCHING_KNOB)
A32NX_ECAM_ND_XFR_SWITCHING_F_O#2 (>L:A32NX_ECAM_ND_XFR_SWITCHING_KNOB)
A32NX_ECAM_ND_XFR_SWITCHING_NORM#1 (>L:A32NX_ECAM_ND_XFR_SWITCHING_KNOB)
A32NX_EIS_DMC_SWITCHING_CAPT#0 (>L:A32NX_EIS_DMC_SWITCHING_KNOB)
A32NX_EIS_DMC_SWITCHING_F_O#2 (>L:A32NX_EIS_DMC_SWITCHING_KNOB) 
A32NX_EIS_DMC_SWITCHING_NORM#1 (>L:A32NX_EIS_DMC_SWITCHING_KNOB)
//Fly By Wire/A320/Air Condition / Pressurization
A320_Neo_AIRCOND_LVL_1_100#100 (>L:A320_Neo_AIRCOND_LVL_1)
A320_Neo_AIRCOND_LVL_1_25#25 (>L:A320_Neo_AIRCOND_LVL_1)
A320_Neo_AIRCOND_LVL_1_50#50 (>L:A320_Neo_AIRCOND_LVL_1)
A320_Neo_AIRCOND_LVL_1_75#75 (>L:A320_Neo_AIRCOND_LVL_1)
A320_Neo_AIRCOND_LVL_1_OFF#0 (>L:A320_Neo_AIRCOND_LVL_1)
A320_Neo_AIRCOND_LVL_2_100#100 (>L:A320_Neo_AIRCOND_LVL_2)
A320_Neo_AIRCOND_LVL_2_25#25 (>L:A320_Neo_AIRCOND_LVL_2)
A320_Neo_AIRCOND_LVL_2_50#50 (>L:A320_Neo_AIRCOND_LVL_2)
A320_Neo_AIRCOND_LVL_2_75#75 (>L:A320_Neo_AIRCOND_LVL_2)
A320_Neo_AIRCOND_LVL_2_OFF#0 (>L:A320_Neo_AIRCOND_LVL_2)
A320_Neo_AIRCOND_LVL_3_100#100 (>L:A320_Neo_AIRCOND_LVL_3)
A320_Neo_AIRCOND_LVL_3_25#25 (>L:A320_Neo_AIRCOND_LVL_3)
A320_Neo_AIRCOND_LVL_3_50#50 (>L:A320_Neo_AIRCOND_LVL_3)
A320_Neo_AIRCOND_LVL_3_75#75 (>L:A320_Neo_AIRCOND_LVL_3)
A320_Neo_AIRCOND_LVL_3_OFF#0 (>L:A320_Neo_AIRCOND_LVL_3)
A32NX_AIRCOND_HOTAIR_TOGGLE_OFF#0 (>L:A32NX_AIRCOND_HOTAIR_TOGGLE)
A32NX_AIRCOND_HOTAIR_TOGGLE_ON#1 (>L:A32NX_AIRCOND_HOTAIR_TOGGLE)
A32NX_AIRCOND_PACK1_TOGGLE_OFF#0 (>L:A32NX_AIRCOND_PACK1_TOGGLE)
A32NX_AIRCOND_PACK1_TOGGLE_ON#1 (>L:A32NX_AIRCOND_PACK1_TOGGLE)
A32NX_AIRCOND_PACK2_TOGGLE_OFF#0 (>L:A32NX_AIRCOND_PACK2_TOGGLE)
A32NX_AIRCOND_PACK2_TOGGLE_ON#1 (>L:A32NX_AIRCOND_PACK2_TOGGLE)
A32NX_AIRCOND_RAMAIR_TOGGLE_OFF#0 (>L:A32NX_AIRCOND_RAMAIR_TOGGLE)
A32NX_AIRCOND_RAMAIR_TOGGLE_ON#1 (>L:A32NX_AIRCOND_RAMAIR_TOGGLE)
A32NX_APU_BLEED_OFF_OFF#0 (>L:A32NX_APU_BLEED_OFF)
A32NX_APU_BLEED_ON_ON#1 (>L:A32NX_APU_BLEED_ON)
A32NX_KNOB_OVHD_AIRCOND_PACKFLOW_Position_HIGH#2 (>L:A32NX_KNOB_OVHD_AIRCOND_PACKFLOW_Position)
A32NX_KNOB_OVHD_AIRCOND_PACKFLOW_Position_LOW#0 (>L:A32NX_KNOB_OVHD_AIRCOND_PACKFLOW_Position)
A32NX_KNOB_OVHD_AIRCOND_PACKFLOW_Position_MED#1 (>L:A32NX_KNOB_OVHD_AIRCOND_PACKFLOW_Position)
A32NX_KNOB_OVHD_AIRCOND_XBLEED_Position_AUTO#1 (>L:A32NX_KNOB_OVHD_AIRCOND_XBLEED_Position)
A32NX_KNOB_OVHD_AIRCOND_XBLEED_Position_OPEN#2 (>L:A32NX_KNOB_OVHD_AIRCOND_XBLEED_Position)
A32NX_KNOB_OVHD_AIRCOND_XBLEED_Position_SHUT#0 (>L:A32NX_KNOB_OVHD_AIRCOND_XBLEED_Position)
A32NX_OH_AC_ENG1BLEED_TOG#1 (>K:ENGINE_BLEED_AIR_SOURCE_TOGGLE) (L:XMLVAR_Momentary_PUSH_OVHD_AIRCOND_ENG1BLEED_Pressed) ! (>L:XMLVAR_Momentary_PUSH_OVHD_AIRCOND_ENG1BLEED_Pressed)
A32NX_OH_AC_ENG2BLEED_TOG#2 (>K:ENGINE_BLEED_AIR_SOURCE_TOGGLE) (L:XMLVAR_Momentary_PUSH_OVHD_AIRCOND_ENG2BLEED_Pressed) ! (>L:XMLVAR_Momentary_PUSH_OVHD_AIRCOND_ENG2BLEED_Pressed)
A32NX_OH_APU_BLEED_TOG#(L:A32NX_OVHD_PNEU_APU_BLEED_PB_IS_ON, Bool) ! (>L:A32NX_OVHD_PNEU_APU_BLEED_PB_IS_ON, Bool)
PUSH_OVHD_OXYGEN_CREW_OFF#0 (>L:PUSH_OVHD_OXYGEN_CREW)
PUSH_OVHD_OXYGEN_CREW_ON#1 (>L:PUSH_OVHD_OXYGEN_CREW)
XMLVAR_Momentary_PUSH_OVHD_AIRCOND_ENG1BLEED_Pressed_PRESSED#1 (>L:XMLVAR_Momentary_PUSH_OVHD_AIRCOND_ENG1BLEED_Pressed)
XMLVAR_Momentary_PUSH_OVHD_AIRCOND_ENG1BLEED_Released_RELEASED#0 (>L:XMLVAR_Momentary_PUSH_OVHD_AIRCOND_ENG1BLEED_Released)
XMLVAR_Momentary_PUSH_OVHD_AIRCOND_ENG2BLEED_Pressed_PRESSED#1 (>L:XMLVAR_Momentary_PUSH_OVHD_AIRCOND_ENG2BLEED_Pressed)
XMLVAR_Momentary_PUSH_OVHD_AIRCOND_ENG2BLEED_Released_RELEASED#0 (>L:XMLVAR_Momentary_PUSH_OVHD_AIRCOND_ENG2BLEED_Released)
//Fly By Wire/A320/Anti-Ice
A32NX_MAN_PITOT_HEAT_OFF#0 (>L:A32NX_MAN_PITOT_HEAT)
A32NX_MAN_PITOT_HEAT_ON#1 (>L:A32NX_MAN_PITOT_HEAT)
A32NX_OH_ANTIICE_ENG1_TOG#(>K:ANTI_ICE_TOGGLE_ENG1) (L:XMLVAR_Momentary_PUSH_OVHD_ANTIICE_ENG1_Pressed) ! (>L:XMLVAR_Momentary_PUSH_OVHD_ANTIICE_ENG1_Pressed)
A32NX_OH_ANTIICE_ENG2_TOG#(>K:ANTI_ICE_TOGGLE_ENG2) (L:XMLVAR_Momentary_PUSH_OVHD_ANTIICE_ENG2_Pressed) ! (>L:XMLVAR_Momentary_PUSH_OVHD_ANTIICE_ENG2_Pressed)
XMLVAR_Momentary_PUSH_OVHD_ANTIICE_ENG1_Pressed_PRESSED#1 (>L:XMLVAR_Momentary_PUSH_OVHD_ANTIICE_ENG1_Pressed)
XMLVAR_Momentary_PUSH_OVHD_ANTIICE_ENG1_Pressed_RELEASED#0 (>L:XMLVAR_Momentary_PUSH_OVHD_ANTIICE_ENG1_Pressed)
XMLVAR_Momentary_PUSH_OVHD_ANTIICE_ENG2_Pressed_PRESSED#1 (>L:XMLVAR_Momentary_PUSH_OVHD_ANTIICE_ENG2_Pressed)
XMLVAR_Momentary_PUSH_OVHD_ANTIICE_ENG2_Pressed_RELEASED#0 (>L:XMLVAR_Momentary_PUSH_OVHD_ANTIICE_ENG2_Pressed)
XMLVAR_Momentary_PUSH_OVHD_ANTIICE_WING_Pressed_PRESSED#1 (>L:XMLVAR_Momentary_PUSH_OVHD_ANTIICE_WING_Pressed)
XMLVAR_Momentary_PUSH_OVHD_ANTIICE_WING_Pressed_RELEASED#0 (>L:XMLVAR_Momentary_PUSH_OVHD_ANTIICE_WING_Pressed)
//Fly By Wire/A320/Autopilot
A320NX_APPR#(L:A32NX_AUTOPILOT_APPR_MODE, bool) if{ 0 (>L:A32NX_AUTOPILOT_APPR_MODE) (>K:AP_LOC_HOLD_ON) (>K:AP_LOC_HOLD_OFF) } els{ 1 (>L:A32NX_AUTOPILOT_APPR_MODE) 0 (>L:A32NX_AUTOPILOT_LOC_MODE) (>K:AP_APR_HOLD_ON) }
A320NX_LOC#(L:A32NX_AUTOPILOT_LOC_MODE, bool) if{ 0 (>L:A32NX_AUTOPILOT_APPR_MODE) 0 (>L:A32NX_AUTOPILOT_LOC_MODE) (>K:AP_LOC_HOLD) } els{ 0 (>L:A32NX_AUTOPILOT_APPR_MODE) 1 (>L:A32NX_AUTOPILOT_LOC_MODE) (>K:AP_LOC_HOLD) }
A320NX_METRIC_ALT_TOGGLE#(L:A32NX_METRIC_ALT_TOGGLE, bool) ! (>L:A32NX_METRIC_ALT_TOGGLE)
A320_Neo_CDU_MODE_MANAGED_SPEED#(>H:A320_Neo_CDU_MODE_MANAGED_SPEED)
A320_Neo_CDU_MODE_SELECTED_SPEED#(>H:A320_Neo_CDU_MODE_SELECTED_SPEED)
A320_Neo_EXPEDITE_MODE#(>H:A320_Neo_EXPEDITE_MODE)
A320_Neo_FCU_ALT_PULL#(>H:A320_Neo_FCU_ALT_PULL) (>H:A320_Neo_CDU_MODE_SELECTED_ALTITUDE)
A320_Neo_FCU_ALT_PUSH#(>H:A320_Neo_FCU_ALT_PUSH) (>H:A320_Neo_CDU_MODE_MANAGED_ALTITUDE)
A320_Neo_FCU_ALT_PUSH_PULL_TOG#(A:AUTOPILOT ALTITUDE SLOT INDEX, Number) 1 == if{ (>K:A32NX.FCU_ALT_PUSH) } els{ (>K:A32NX.FCU_ALT_PULL) }
A320_Neo_FCU_HDG_DEC#(L:A32NX_TRK_FPA_MODE_ACTIVE, bool) if{ (>H:A320_Neo_FCU_AP_DEC_TRACK) } els{ 1 (>K:HEADING_BUG_DEC) (>H:A320_Neo_CDU_AP_DEC_HEADING) }
A320_Neo_FCU_HDG_INC#(L:A32NX_TRK_FPA_MODE_ACTIVE, bool) if{ (>H:A320_Neo_FCU_AP_INC_TRACK) } els{ 1 (>K:HEADING_BUG_INC) (>H:A320_Neo_CDU_AP_INC_HEADING) }
A320_Neo_FCU_HDG_PULL#(>H:A320_Neo_FCU_HDG_PULL)
A320_Neo_FCU_HDG_PUSH#(>H:A320_Neo_FCU_HDG_PUSH)
A320_Neo_FCU_HDG_PUSH_PULL_TOG#(A:AUTOPILOT HEADING SLOT INDEX, Number) 1 == if{ (>K:A32NX.FCU_HDG_PUSH) } els{ (>K:A32NX.FCU_HDG_PULL) }
A320_Neo_FCU_MODE_MANAGED_SPEED#(>H:A320_Neo_FCU_MODE_MANAGED_SPEED)
A320_Neo_FCU_SPEED_DEC#(L:XMLVAR_AirSpeedIsInMach) if{ 1 (>K:AP_MACH_VAR_DEC) } els{ 1 (>K:AP_SPD_VAR_DEC) } (>H:A320_Neo_CDU_AP_DEC_SPEED)
A320_Neo_FCU_SPEED_INC#(L:XMLVAR_AirSpeedIsInMach) if{ 1 (>K:AP_MACH_VAR_INC) } els{ 1 (>K:AP_SPD_VAR_INC) } (>H:A320_Neo_CDU_AP_INC_SPEED)
A320_Neo_FCU_SPEED_PULL#(>H:A320_Neo_FCU_SPEED_PULL)
A320_Neo_FCU_SPEED_PUSH#(>H:A320_Neo_FCU_SPEED_PUSH)
A320_Neo_FCU_SPEED_PUSH_PULL_TOG#(A:AUTOPILOT SPEED SLOT INDEX, Number) 1 == if{ (>K:A32NX.FCU_SPD_PUSH) } els{ (>K:A32NX.FCU_SPD_PULL) }
A320_Neo_FCU_SPEED_TOGGLE_SPEED_MACH#(>H:A320_Neo_FCU_SPEED_TOGGLE_SPEED_MACH)
A320_Neo_FCU_VS_DEC# (L:A32NX_TRK_FPA_MODE_ACTIVE, bool) 1 == if{ (>H:A320_Neo_FCU_AP_DEC_FPA) } els{ 3 (>K:AP_VS_VAR_DEC) (>H:A320_Neo_FCU_VS_DEC) }
A320_Neo_FCU_VS_INC# (L:A32NX_TRK_FPA_MODE_ACTIVE, bool) 1 == if{ (>H:A320_Neo_FCU_AP_INC_FPA) } els{ 3 (>K:AP_VS_VAR_INC) (>H:A320_Neo_FCU_VS_INC) }
A320_Neo_FCU_VS_PULL#(>H:A320_Neo_FCU_VS_PULL) (>H:A320_Neo_CDU_VS)
A320_Neo_FCU_VS_PUSH#(>H:A320_Neo_FCU_VS_PUSH) (>H:A320_Neo_CDU_VS)
A320_Neo_FCU_VS_PUSH_PULL_TOG#(L:MF_VS_TOG,Bool) if{ (>H:A320_Neo_FCU_VS_ZERO) } els{ (>H:A320_Neo_FCU_VS_HOLD) } (L:MF_VS_TOG,Bool) ! (>L:MF_VS_TOG,Bool)
A32NX_AP_MANAGED_SPEED_IN_MACH_TOGGLE#(>K:AP_MANAGED_SPEED_IN_MACH_TOGGLE)
A32NX_FCU_ALT_DEC#3 (A:AUTOPILOT ALTITUDE LOCK VAR:3, feet) (L:XMLVAR_Autopilot_Altitude_Increment) - (L:XMLVAR_Autopilot_Altitude_Increment) (A:AUTOPILOT ALTITUDE LOCK VAR:3, feet) (L:XMLVAR_Autopilot_Altitude_Increment) % - (L:XMLVAR_Autopilot_Altitude_Increment) % + 100 max (>K:2:AP_ALT_VAR_SET_ENGLISH) (>H:AP_KNOB_Down) (>H:A320_Neo_CDU_AP_DEC_ALT)
A32NX_FCU_ALT_DEC100#3 (A:AUTOPILOT ALTITUDE LOCK VAR:3, feet) 100 - 100 (A:AUTOPILOT ALTITUDE LOCK VAR:3, feet) 100 % - 100 % + 100 max (>K:2:AP_ALT_VAR_SET_ENGLISH) (>H:AP_KNOB_Down) (>H:A320_Neo_CDU_AP_DEC_ALT)
A32NX_FCU_ALT_DEC1000#3 (A:AUTOPILOT ALTITUDE LOCK VAR:3, feet) 1000 - 1000 (A:AUTOPILOT ALTITUDE LOCK VAR:3, feet) 1000 % - 1000 % + 1000 max (>K:2:AP_ALT_VAR_SET_ENGLISH) (>H:AP_KNOB_Down) (>H:A320_Neo_CDU_AP_DEC_ALT)
A32NX_FCU_ALT_INC#3 (A:AUTOPILOT ALTITUDE LOCK VAR:3, feet) (L:XMLVAR_Autopilot_Altitude_Increment) + (A:AUTOPILOT ALTITUDE LOCK VAR:3, feet) (L:XMLVAR_Autopilot_Altitude_Increment) % - 49000 min (>K:2:AP_ALT_VAR_SET_ENGLISH) (>H:AP_KNOB_Up) (>H:A320_Neo_CDU_AP_INC_ALT)
A32NX_FCU_ALT_INC100#3 (A:AUTOPILOT ALTITUDE LOCK VAR:3, feet) 100 + (A:AUTOPILOT ALTITUDE LOCK VAR:3, feet) 100 % - 49000 min (>K:2:AP_ALT_VAR_SET_ENGLISH) (>H:AP_KNOB_Up) (>H:A320_Neo_CDU_AP_INC_ALT)
A32NX_FCU_ALT_INC1000#3 (A:AUTOPILOT ALTITUDE LOCK VAR:3, feet) 1000 + (A:AUTOPILOT ALTITUDE LOCK VAR:3, feet) 1000 % - 49000 min (>K:2:AP_ALT_VAR_SET_ENGLISH) (>H:AP_KNOB_Up) (>H:A320_Neo_CDU_AP_INC_ALT)
A32NX_FCU_AP1_PUSH#(L:A32NX_AUTOPILOT_APPR_MODE, Bool) if{ (>K:AP_LOC_HOLD_ON) (>K:AP_LOC_HOLD_OFF) } (L:A32NX_AUTOPILOT_LOC_MODE, Bool) if{ (>K:AP_LOC_HOLD) } (A:AUTOPILOT DISENGAGED, Bool) ! 1 and if{ 1 1 != if{ 0 (>L:XMLVAR_Autopilot_1_Status) } 2 1 != if{ 0 (>L:XMLVAR_Autopilot_2_Status) } (L:XMLVAR_Autopilot_1_Status) ! (>L:XMLVAR_Autopilot_1_Status) (L:XMLVAR_Autopilot_1_Status) (L:XMLVAR_Autopilot_2_Status) or (A:AUTOPILOT MASTER, Bool) != if{ (>K:AP_MASTER) (A:AUTOPILOT MASTER, Bool) ! if{ 0 (>L:XMLVAR_Autopilot_1_Status) } } } (L:A32NX_AUTOPILOT_APPR_MODE, Bool) if{ (>K:AP_APR_HOLD) } (L:A32NX_AUTOPILOT_LOC_MODE, Bool) if{ (>K:AP_LOC_HOLD) }
A32NX_FCU_AP2_PUSH#(L:A32NX_AUTOPILOT_APPR_MODE, Bool) if{ (>K:AP_LOC_HOLD_ON) (>K:AP_LOC_HOLD_OFF) } (L:A32NX_AUTOPILOT_LOC_MODE, Bool) if{ (>K:AP_LOC_HOLD) } (A:AUTOPILOT DISENGAGED, Bool) ! 1 and if{ 1 2 != if{ 0 (>L:XMLVAR_Autopilot_1_Status) } 2 2 != if{ 0 (>L:XMLVAR_Autopilot_2_Status) } (L:XMLVAR_Autopilot_2_Status) ! (>L:XMLVAR_Autopilot_2_Status) (L:XMLVAR_Autopilot_1_Status) (L:XMLVAR_Autopilot_2_Status) or (A:AUTOPILOT MASTER, Bool) != if{ (>K:AP_MASTER) (A:AUTOPILOT MASTER, Bool) ! if{ 0 (>L:XMLVAR_Autopilot_2_Status) } } } (L:A32NX_AUTOPILOT_APPR_MODE, Bool) if{ (>K:AP_APR_HOLD) } (L:A32NX_AUTOPILOT_LOC_MODE, Bool) if{ (>K:AP_LOC_HOLD) }
A32NX_FCU_ATHR_TOG#0 (>K:AUTO_THROTTLE_ARM) (A:FLAPS HANDLE INDEX, Number) 0 > if{ (A:DESIGN SPEED VS0, knots) sp1 } els{ (A:DESIGN SPEED VS1, knots) sp1 } l1 1.3 * (A:AUTOPILOT AIRSPEED HOLD VAR:0, knots) max (>K:AP_SPD_VAR_SET)
A32NX_TRK_FPA_MODE#(L:A32NX_TRK_FPA_MODE_ACTIVE) ! (>L:A32NX_TRK_FPA_MODE_ACTIVE)
Autopilot_Altitude_Increment_TOGGLE#(L:XMLVAR_Autopilot_Altitude_Increment) 100 == if{ 1000 } els{ 100 } (>L:XMLVAR_Autopilot_Altitude_Increment)
XMLVAR_Autopilot_Altitude_Increment_1000Feet#1000 (>L:XMLVAR_Autopilot_Altitude_Increment)
XMLVAR_Autopilot_Altitude_Increment_100Feet#100 (>L:XMLVAR_Autopilot_Altitude_Increment)
//Fly By Wire/A320/Avionics
PUSH_AUTOPILOT_CHRONO_L#(L:PUSH_AUTOPILOT_CHRONO_L) ! (>L:PUSH_AUTOPILOT_CHRONO_L)
//Fly By Wire/A320/Controls
A32NX_THROTTLE_FULL_REVERSE_BUTTON#(A:GENERAL ENG THROTTLE LEVER POSITION:1,percent) -0.1 < if{ -9830 } els{ -16383 } (>K:THROTTLE_SET)
//Fly By Wire/A320/ECAM
A320_Neo_EICAS_2_ECAM_CHANGE_PAGE_APU#(>H:A320_Neo_EICAS_2_ECAM_CHANGE_PAGE_APU)
A320_Neo_EICAS_2_ECAM_CHANGE_PAGE_BLEED#(>H:A320_Neo_EICAS_2_ECAM_CHANGE_PAGE_BLEED)
A320_Neo_EICAS_2_ECAM_CHANGE_PAGE_COND#(>H:A320_Neo_EICAS_2_ECAM_CHANGE_PAGE_COND)
A320_Neo_EICAS_2_ECAM_CHANGE_PAGE_DOOR#(>H:A320_Neo_EICAS_2_ECAM_CHANGE_PAGE_DOOR)
A320_Neo_EICAS_2_ECAM_CHANGE_PAGE_ELEC#(>H:A320_Neo_EICAS_2_ECAM_CHANGE_PAGE_ELEC)
A320_Neo_EICAS_2_ECAM_CHANGE_PAGE_ENG#(>H:A320_Neo_EICAS_2_ECAM_CHANGE_PAGE_ENG)
A320_Neo_EICAS_2_ECAM_CHANGE_PAGE_FTCL#(>H:A320_Neo_EICAS_2_ECAM_CHANGE_PAGE_FTCL)
A320_Neo_EICAS_2_ECAM_CHANGE_PAGE_FUEL#(>H:A320_Neo_EICAS_2_ECAM_CHANGE_PAGE_FUEL)
A320_Neo_EICAS_2_ECAM_CHANGE_PAGE_HYD#(>H:A320_Neo_EICAS_2_ECAM_CHANGE_PAGE_HYD)
A320_Neo_EICAS_2_ECAM_CHANGE_PAGE_PRESS#(>H:A320_Neo_EICAS_2_ECAM_CHANGE_PAGE_PRESS)
A320_Neo_EICAS_2_ECAM_CHANGE_PAGE_STS#(>H:A320_Neo_EICAS_2_ECAM_CHANGE_PAGE_STS)
A320_Neo_EICAS_2_ECAM_CHANGE_PAGE_WHEEL#(>H:A320_Neo_EICAS_2_ECAM_CHANGE_PAGE_WHEEL)
A32NX_BTN_CLR_PRESSED#1 (>L:A32NX_BTN_CLR)
A32NX_BTN_CLR_RELEASED#0 (>L:A32NX_BTN_CLR)
A32NX_BTN_RCL_PRESSED#1 (>L:A32NX_BTN_RCL)
A32NX_BTN_TOCONFIG_PRESSED#1 (>L:A32NX_BTN_TOCONFIG)
A32NX_BTN_TOCONFIG_RELEASED#0 (>L:A32NX_BTN_TOCONFIG)
A32NX_ECAM_ALL_Push_IsDown_PRESSED#1 (>L:A32NX_ECAM_ALL_Push_IsDown)
A32NX_ECAM_ALL_Push_IsDown_RELEASED#0 (>L:A32NX_ECAM_ALL_Push_IsDown)
A32NX_ECAM_BTN_TOCONFIG_Push#1 (>L:A32NX_BTN_TOCONFIG)
//Fly By Wire/A320/EFIS
A320_Neo_MFD_BTN_ARPT_1#(>H:A320_Neo_MFD_BTN_ARPT_1)
A320_Neo_MFD_BTN_ARPT_2#(>H:A320_Neo_MFD_BTN_ARPT_2)
A320_Neo_MFD_BTN_CSTR_1#(>H:A320_Neo_MFD_BTN_CSTR_1)
A320_Neo_MFD_BTN_CSTR_2#(>H:A320_Neo_MFD_BTN_CSTR_2)
A320_Neo_MFD_BTN_NDB_1#(>H:A320_Neo_MFD_BTN_NDB_1)
A320_Neo_MFD_BTN_NDB_2#(>H:A320_Neo_MFD_BTN_NDB_2)
A320_Neo_MFD_BTN_VORD_1#(>H:A320_Neo_MFD_BTN_VORD_1)
A320_Neo_MFD_BTN_VORD_2#(>H:A320_Neo_MFD_BTN_VORD_2)
A320_Neo_MFD_BTN_WPT_1#(>H:A320_Neo_MFD_BTN_WPT_1)
A320_Neo_MFD_BTN_WPT_2#(>H:A320_Neo_MFD_BTN_WPT_2)
A320_Neo_MFD_NAV_MODE_1_ARC#3 (>L:A320_Neo_MFD_NAV_MODE_1)
A320_Neo_MFD_NAV_MODE_1_DEC#(L:A320_Neo_MFD_NAV_MODE_1) 0 > if{ (L:A320_Neo_MFD_NAV_MODE_1) 1 - (>L:A320_Neo_MFD_NAV_MODE_1) }
A320_Neo_MFD_NAV_MODE_1_INC#(L:A320_Neo_MFD_NAV_MODE_1) 4 < if{ (L:A320_Neo_MFD_NAV_MODE_1) 1 + (>L:A320_Neo_MFD_NAV_MODE_1) }
A320_Neo_MFD_NAV_MODE_1_LS#0 (>L:A320_Neo_MFD_NAV_MODE_1)
A320_Neo_MFD_NAV_MODE_1_NAV#2 (>L:A320_Neo_MFD_NAV_MODE_1)
A320_Neo_MFD_NAV_MODE_1_PLAN#4 (>L:A320_Neo_MFD_NAV_MODE_1)
A320_Neo_MFD_NAV_MODE_1_VOR#1 (>L:A320_Neo_MFD_NAV_MODE_1)
A320_Neo_MFD_NAV_MODE_2_ARC#3 (>L:A320_Neo_MFD_NAV_MODE_2)
A320_Neo_MFD_NAV_MODE_2_DEC#(L:A320_Neo_MFD_NAV_MODE_2) 0 > if{ 1 if{ (L:A320_Neo_MFD_NAV_MODE_2) 1 - (>L:A320_Neo_MFD_NAV_MODE_2) } }
A320_Neo_MFD_NAV_MODE_2_INC#(L:A320_Neo_MFD_NAV_MODE_2) 4 < if{ 1 if{ (L:A320_Neo_MFD_NAV_MODE_2) 1 + (>L:A320_Neo_MFD_NAV_MODE_2) } }
A320_Neo_MFD_NAV_MODE_2_LS#0 (>L:A320_Neo_MFD_NAV_MODE_2)
A320_Neo_MFD_NAV_MODE_2_NAV#2 (>L:A320_Neo_MFD_NAV_MODE_2)
A320_Neo_MFD_NAV_MODE_2_PLAN#4 (>L:A320_Neo_MFD_NAV_MODE_2)
A320_Neo_MFD_NAV_MODE_2_VOR#1 (>L:A320_Neo_MFD_NAV_MODE_2)
A320_Neo_MFD_Range_1_10#0 (>L:A320_Neo_MFD_Range_1)
A320_Neo_MFD_Range_1_160#4 (>L:A320_Neo_MFD_Range_1)
A320_Neo_MFD_Range_1_20#1 (>L:A320_Neo_MFD_Range_1)
A320_Neo_MFD_Range_1_320#5 (>L:A320_Neo_MFD_Range_1)
A320_Neo_MFD_Range_1_40#2 (>L:A320_Neo_MFD_Range_1)
A320_Neo_MFD_Range_1_80#3 (>L:A320_Neo_MFD_Range_1)
A320_Neo_MFD_Range_1_DEC#(L:A320_Neo_MFD_Range_1) 0 > if{ (L:A320_Neo_MFD_Range_1) 1 - (>L:A320_Neo_MFD_Range_1) }
A320_Neo_MFD_Range_1_INC#(L:A320_Neo_MFD_Range_1) 5 < if{ (L:A320_Neo_MFD_Range_1) 1 + (>L:A320_Neo_MFD_Range_1) }
A320_Neo_MFD_Range_2_10#0 (>L:A320_Neo_MFD_Range_2)
A320_Neo_MFD_Range_2_160#4 (>L:A320_Neo_MFD_Range_2)
A320_Neo_MFD_Range_2_20#1 (>L:A320_Neo_MFD_Range_2)
A320_Neo_MFD_Range_2_320#5 (>L:A320_Neo_MFD_Range_2)
A320_Neo_MFD_Range_2_40#2 (>L:A320_Neo_MFD_Range_2)
A320_Neo_MFD_Range_2_80#3 (>L:A320_Neo_MFD_Range_2)
A320_Neo_MFD_Range_2_DEC#(L:A320_Neo_MFD_Range_2) 0 > if{ 1 if{ (L:A320_Neo_MFD_Range_2) 1 - (>L:A320_Neo_MFD_Range_2) } }
A320_Neo_MFD_Range_2_INC#(L:A320_Neo_MFD_Range_2) 5 < if{ 1 if{ (L:A320_Neo_MFD_Range_2) 1 + (>L:A320_Neo_MFD_Range_2) } }
A320_Neo_PFD_BTN_LS_1#(>H:A320_Neo_PFD_BTN_LS_1)
A320_Neo_PFD_BTN_LS_2#(>H:A320_Neo_PFD_BTN_LS_2)
A32NX_BARO_MODE_TOG3#(L:XMLVAR_Baro1_Mode) 2 < if{ (L:XMLVAR_Baro1_Mode) ++ } els{ 0 } (>L:XMLVAR_Baro1_Mode)
A32NX_BARO_SELECT_HPA#1 (>L:XMLVAR_Baro_Selector_HPA_1)
A32NX_BARO_SELECT_INHG#0 (>L:XMLVAR_Baro_Selector_HPA_1)
A32NX_BARO_SELECT_TOG#(L:XMLVAR_Baro_Selector_HPA_1) ! (>L:XMLVAR_Baro_Selector_HPA_1)
Baro_decrease#(>K:KOHLSMAN_DEC)
Baro_increase#(>K:KOHLSMAN_INC)
Toggle_Flight_Director#(>K:TOGGLE_FLIGHT_DIRECTOR)
XMLVAR_Baro1_Mode_QFE#0 (>L:XMLVAR_Baro1_Mode)
XMLVAR_Baro1_Mode_QNH#1 (>L:XMLVAR_Baro1_Mode)
XMLVAR_Baro1_Mode_STD#3 (>L:XMLVAR_Baro1_Mode)
XMLVAR_Baro2_Mode_QFE#0 (>L:XMLVAR_Baro2_Mode)
XMLVAR_Baro2_Mode_QNH#1 (>L:XMLVAR_Baro2_Mode)
XMLVAR_Baro2_Mode_STD#2 (>L:XMLVAR_Baro2_Mode)
XMLVAR_NAV_AID_SWITCH_L1_State_ADF#1 (>L:XMLVAR_NAV_AID_SWITCH_L1_State)
XMLVAR_NAV_AID_SWITCH_L1_State_Off#0 (>L:XMLVAR_NAV_AID_SWITCH_L1_State)
XMLVAR_NAV_AID_SWITCH_L1_State_VOR#2 (>L:XMLVAR_NAV_AID_SWITCH_L1_State)
XMLVAR_NAV_AID_SWITCH_L2_State_ADF#1 (>L:XMLVAR_NAV_AID_SWITCH_L2_State)
XMLVAR_NAV_AID_SWITCH_L2_State_Off#0 (>L:XMLVAR_NAV_AID_SWITCH_L2_State)
XMLVAR_NAV_AID_SWITCH_L2_State_VOR#2 (>L:XMLVAR_NAV_AID_SWITCH_L2_State)
XMLVAR_NAV_AID_SWITCH_R1_State_ADF#1 (>L:XMLVAR_NAV_AID_SWITCH_R1_State)
XMLVAR_NAV_AID_SWITCH_R1_State_Off#0 (>L:XMLVAR_NAV_AID_SWITCH_R1_State)
XMLVAR_NAV_AID_SWITCH_R1_State_VOR#2 (>L:XMLVAR_NAV_AID_SWITCH_R1_State)
XMLVAR_NAV_AID_SWITCH_R2_State_ADF#1 (>L:XMLVAR_NAV_AID_SWITCH_R2_State)
XMLVAR_NAV_AID_SWITCH_R2_State_Off#0 (>L:XMLVAR_NAV_AID_SWITCH_R2_State)
XMLVAR_NAV_AID_SWITCH_R2_State_VOR#2 (>L:XMLVAR_NAV_AID_SWITCH_R2_State)
//Fly By Wire/A320/Electrical
A32NX_APU_MASTER_SW#(L:A32NX_OVHD_APU_MASTER_SW_PB_IS_ON, Bool) if{ 0 (>L:A32NX_OVHD_APU_MASTER_SW_PB_IS_ON) } els{ (A:ELECTRICAL MAIN BUS VOLTAGE, Volts) 20 > if{ 1 (>L:A32NX_OVHD_APU_MASTER_SW_PB_IS_ON) } } (L:XMLVAR_Momentary_PUSH_OVHD_MASTERSW_Pressed) ! (>L:XMLVAR_Momentary_PUSH_OVHD_MASTERSW_Pressed)
A32NX_APU_START#(A:ELECTRICAL MAIN BUS VOLTAGE, Volts) 20 > (L:A32NX_OVHD_APU_MASTER_SW_PB_IS_ON, Bool) and if{ 1 (>L:A32NX_OVHD_APU_START_PB_IS_ON) }
A32NX_ELEC_ACESSFEED_TOGGLE_ALTN#0 (>L:A32NX_ELEC_ACESSFEED_TOGGLE)
A32NX_ELEC_ACESSFEED_TOGGLE_ON#1 (>L:A32NX_ELEC_ACESSFEED_TOGGLE)
A32NX_ELEC_BUSTIE_TOGGLE_AUTO#1 (>L:A32NX_ELEC_BUSTIE_TOGGLE)
A32NX_ELEC_BUSTIE_TOGGLE_OFF#0 (>L:A32NX_ELEC_BUSTIE_TOGGLE)
A32NX_ELEC_COMMERCIAL_TOGGLE_OFF#0 (>L:A32NX_ELEC_COMMERCIAL_TOGGLE)
A32NX_ELEC_COMMERCIAL_TOGGLE_ON#1 (>L:A32NX_ELEC_COMMERCIAL_TOGGLE)
A32NX_ELEC_GALYCAB_TOGGLE_AUTO#1 (>L:A32NX_ELEC_GALYCAB_TOGGLE)
A32NX_ELEC_GALYCAB_TOGGLE_OFF#0 (>L:A32NX_ELEC_GALYCAB_TOGGLE)
A32NX_ELEC_IDG1_FAULT_PRESSED#1 (>L:A32NX_ELEC_IDG1_FAULT)
A32NX_ELEC_IDG1_FAULT_RELEASED#0 (>L:A32NX_ELEC_IDG1_FAULT)
A32NX_ELEC_IDG2_FAULT_PRESSED#1 (>L:A32NX_ELEC_IDG2_FAULT)
A32NX_ELEC_IDG2_FAULT_RELEASED#0 (>L:A32NX_ELEC_IDG2_FAULT)
A32NX_EMERELECPWR_EMERTESTLOCK_TOGGLE_OFF#0 (>L:A32NX_EMERELECPWR_EMERTESTLOCK_TOGGLE)
A32NX_EMERELECPWR_EMERTESTLOCK_TOGGLE_ON#1 (>L:A32NX_EMERELECPWR_EMERTESTLOCK_TOGGLE)
A32NX_EMERELECPWR_GEN1_TOGGLE_OFF#0 (>L:A32NX_EMERELECPWR_GEN1_TOGGLE)
A32NX_EMERELECPWR_GEN1_TOGGLE_ON#1 (>L:A32NX_EMERELECPWR_GEN1_TOGGLE)
A32NX_EMERELECPWR_MANONLOCK_TOGGLE_AUTO#0 (>L:A32NX_EMERELECPWR_MANONLOCK_TOGGLE)
A32NX_EMERELECPWR_MANONLOCK_TOGGLE_MAN#1 (>L:A32NX_EMERELECPWR_MANONLOCK_TOGGLE)
A32NX_OH_ELEC_APUGEN_TOG#1 (>K:APU_GENERATOR_SWITCH_TOGGLE) (L:XMLVAR_Momentary_PUSH_OVHD_ELEC_APUGEN_Pressed) ! (>L:XMLVAR_Momentary_PUSH_OVHD_ELEC_APUGEN_Pressed)
A32NX_OH_ELEC_BAT1_TOG#10 6 (>K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE) 10 (>A:BUS LOOKUP INDEX, Number) (A:BUS CONNECTION ON:6, Bool) ! if{ 0 } els{ 1 } (>L:A32NX_OVHD_ELEC_BAT_10_PB_IS_AUTO) (L:XMLVAR_Momentary_PUSH_OVHD_ELEC_BAT1_Pressed) ! (>L:XMLVAR_Momentary_PUSH_OVHD_ELEC_BAT1_Pressed)
A32NX_OH_ELEC_BAT2_TOG#11 6 (>K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE) 11 (>A:BUS LOOKUP INDEX, Number) (A:BUS CONNECTION ON:6, Bool) ! if{ 0 } els{ 1 } (>L:A32NX_OVHD_ELEC_BAT_11_PB_IS_AUTO) (L:XMLVAR_Momentary_PUSH_OVHD_ELEC_BAT2_Pressed) ! (>L:XMLVAR_Momentary_PUSH_OVHD_ELEC_BAT2_Pressed)
A32NX_OH_ELEC_EXTPWR_TOG#(A:EXTERNAL POWER AVAILABLE:1, Bool) (A:EXTERNAL POWER ON:1, Bool) ! and if{ 1 (>K:TOGGLE_EXTERNAL_POWER) } els{ (A:EXTERNAL POWER ON:1, Bool) if{ 1 (>K:TOGGLE_EXTERNAL_POWER) } }
A32NX_OH_ELEC_GEN1_TOG#(>K:TOGGLE_ALTERNATOR1) (L:XMLVAR_Momentary_PUSH_OVHD_ELEC_GEN1_Pressed) ! (>L:XMLVAR_Momentary_PUSH_OVHD_ELEC_GEN1_Pressed)
A32NX_OH_ELEC_GEN2_TOG#(>K:TOGGLE_ALTERNATOR2) (L:XMLVAR_Momentary_PUSH_OVHD_ELEC_GEN2_Pressed) ! (>L:XMLVAR_Momentary_PUSH_OVHD_ELEC_GEN2_Pressed)
ACPowerAvailable_PRESSED#1 (>L:ACPowerAvailable)
ACPowerAvailable_RELEASED#0 (>L:ACPowerAvailable)
XMLVAR_Momentary_PUSH_OVHD_APU_MASTERSW_Pressed_PRESSED#1 (>L:XMLVAR_Momentary_PUSH_OVHD_APU_MASTERSW_Pressed)
XMLVAR_Momentary_PUSH_OVHD_APU_MASTERSW_Pressed_RELEASED#0 (>L:XMLVAR_Momentary_PUSH_OVHD_APU_MASTERSW_Pressed)
XMLVAR_Momentary_PUSH_OVHD_ELEC_APUGEN_Pressed_PRESSED#1 (>L:XMLVAR_Momentary_PUSH_OVHD_ELEC_APUGEN_Pressed)
XMLVAR_Momentary_PUSH_OVHD_ELEC_APUGEN_Pressed_RELEASED#0 (>L:XMLVAR_Momentary_PUSH_OVHD_ELEC_APUGEN_Pressed)
XMLVAR_Momentary_PUSH_OVHD_ELEC_BAT1_Pressed_PRESSED#1 (>L:XMLVAR_Momentary_PUSH_OVHD_ELEC_BAT1_Pressed)
XMLVAR_Momentary_PUSH_OVHD_ELEC_BAT1_Pressed_RELEASED#0 (>L:XMLVAR_Momentary_PUSH_OVHD_ELEC_BAT1_Pressed)
XMLVAR_Momentary_PUSH_OVHD_ELEC_BAT2_Pressed_PRESSED#1 (>L:XMLVAR_Momentary_PUSH_OVHD_ELEC_BAT2_Pressed)
XMLVAR_Momentary_PUSH_OVHD_ELEC_BAT2_Pressed_RELEASED#0 (>L:XMLVAR_Momentary_PUSH_OVHD_ELEC_BAT2_Pressed)
XMLVAR_Momentary_PUSH_OVHD_ELEC_GEN1_Pressed_PRESSED#1 (>L:XMLVAR_Momentary_PUSH_OVHD_ELEC_GEN1_Pressed)
XMLVAR_Momentary_PUSH_OVHD_ELEC_GEN1_Pressed_RELEASED#0 (>L:XMLVAR_Momentary_PUSH_OVHD_ELEC_GEN1_Pressed)
XMLVAR_Momentary_PUSH_OVHD_ELEC_GEN2_Pressed_PRESSED#1 (>L:XMLVAR_Momentary_PUSH_OVHD_ELEC_GEN2_Pressed)
XMLVAR_Momentary_PUSH_OVHD_ELEC_GEN2_Pressed_RELEASED#0 (>L:XMLVAR_Momentary_PUSH_OVHD_ELEC_GEN2_Pressed)
//Fly By Wire/A320/Engines
A32NX_ENG1_START_TOG#(A:FUELSYSTEM VALVE SWITCH:1, Bool) if{ 1 (>K:FUELSYSTEM_VALVE_CLOSE) (A:GENERAL ENG STARTER:1, Bool) if{ (>K:TOGGLE_STARTER1) } } els{ 1 (>K:FUELSYSTEM_VALVE_OPEN) (A:GENERAL ENG STARTER:1, Bool) ! if{ (>K:TOGGLE_STARTER1) } }
A32NX_ENG2_START_TOG#(A:FUELSYSTEM VALVE SWITCH:2, Bool) if{ 2 (>K:FUELSYSTEM_VALVE_CLOSE) (A:GENERAL ENG STARTER:2, Bool) if{ (>K:TOGGLE_STARTER2) } } els{ 2 (>K:FUELSYSTEM_VALVE_OPEN) (A:GENERAL ENG STARTER:2, Bool) ! if{ (>K:TOGGLE_STARTER2) } }
A32NX_ENG_MODE_CRANK#0 (>K:TURBINE_IGNITION_SWITCH_SET)
A32NX_ENG_MODE_IGNSTART#2 (>K:TURBINE_IGNITION_SWITCH_SET1) 2 (>K:TURBINE_IGNITION_SWITCH_SET2) (>H:A320_NEO_EICAS2_Ignition_Start)
A32NX_ENG_MODE_NORMAL#1 (>K:TURBINE_IGNITION_SWITCH_SET1) 1 (>K:TURBINE_IGNITION_SWITCH_SET2)
//Fly By Wire/A320/Flight Controls
XMLVAR_Momentary_PUSH_OVHD_FLTCTL_ELAC2_Pressed_PRESSED#1 (>L:XMLVAR_Momentary_PUSH_OVHD_FLTCTL_ELAC2_Pressed)
XMLVAR_Momentary_PUSH_OVHD_FLTCTL_ELAC2_Pressed_RELEASED#0 (>L:XMLVAR_Momentary_PUSH_OVHD_FLTCTL_ELAC2_Pressed)
XMLVAR_Momentary_PUSH_OVHD_FLTCTL_ELAC_Pressed_PRESSED#1 (>L:XMLVAR_Momentary_PUSH_OVHD_FLTCTL_ELAC_Pressed)
XMLVAR_Momentary_PUSH_OVHD_FLTCTL_ELAC_Pressed_RELEASED#0 (>L:XMLVAR_Momentary_PUSH_OVHD_FLTCTL_ELAC_Pressed)
XMLVAR_Momentary_PUSH_OVHD_FLTCTL_FAC2_Pressed_PRESSED#1 (>L:XMLVAR_Momentary_PUSH_OVHD_FLTCTL_FAC2_Pressed)
XMLVAR_Momentary_PUSH_OVHD_FLTCTL_FAC2_Pressed_RELEASED#0 (>L:XMLVAR_Momentary_PUSH_OVHD_FLTCTL_FAC2_Pressed)
XMLVAR_Momentary_PUSH_OVHD_FLTCTL_FAC_Pressed_PRESSED#1 (>L:XMLVAR_Momentary_PUSH_OVHD_FLTCTL_FAC_Pressed)
XMLVAR_Momentary_PUSH_OVHD_FLTCTL_FAC_Pressed_RELEASED#0 (>L:XMLVAR_Momentary_PUSH_OVHD_FLTCTL_FAC_Pressed)
XMLVAR_Momentary_PUSH_OVHD_FLTCTL_SEC2_Pressed_PRESSED#1 (>L:XMLVAR_Momentary_PUSH_OVHD_FLTCTL_SEC2_Pressed)
XMLVAR_Momentary_PUSH_OVHD_FLTCTL_SEC2_Pressed_RELEASED#0 (>L:XMLVAR_Momentary_PUSH_OVHD_FLTCTL_SEC2_Pressed)
XMLVAR_Momentary_PUSH_OVHD_FLTCTL_SEC3_Pressed_PRESSED#1 (>L:XMLVAR_Momentary_PUSH_OVHD_FLTCTL_SEC3_Pressed)
XMLVAR_Momentary_PUSH_OVHD_FLTCTL_SEC3_Pressed_RELEASED#0 (>L:XMLVAR_Momentary_PUSH_OVHD_FLTCTL_SEC3_Pressed)
XMLVAR_Momentary_PUSH_OVHD_FLTCTL_SEC_Pressed_PRESSED#1 (>L:XMLVAR_Momentary_PUSH_OVHD_FLTCTL_SEC_Pressed)
XMLVAR_Momentary_PUSH_OVHD_FLTCTL_SEC_Pressed_RELEASED#0 (>L:XMLVAR_Momentary_PUSH_OVHD_FLTCTL_SEC_Pressed)
//Fly By Wire/A320/Fuel
A32NX_OVHD_FUELSYSTEM_CTKPUMP1_TOGGLE#1 (>K:FUELSYSTEM_PUMP_TOGGLE) (L:XMLVAR_Momentary_PUSH_OVHD_FUEL_CTKPUMPS1_Pressed) ! (>L:XMLVAR_Momentary_PUSH_OVHD_FUEL_CTKPUMPS1_Pressed)
A32NX_OVHD_FUELSYSTEM_CTKPUMP2_TOGGLE#4 (>K:FUELSYSTEM_PUMP_TOGGLE) (L:XMLVAR_Momentary_PUSH_OVHD_FUEL_CTKPUMPS2_Pressed) ! (>L:XMLVAR_Momentary_PUSH_OVHD_FUEL_CTKPUMPS2_Pressed)
A32NX_OVHD_FUELSYSTEM_LTKPUMP1_TOGGLE#2 (>K:FUELSYSTEM_PUMP_TOGGLE) (L:XMLVAR_Momentary_PUSH_OVHD_FUEL_LTKPUMPS1_Pressed) ! (>L:XMLVAR_Momentary_PUSH_OVHD_FUEL_LTKPUMPS1_Pressed)
A32NX_OVHD_FUELSYSTEM_LTKPUMP2_TOGGLE#5 (>K:FUELSYSTEM_PUMP_TOGGLE) (L:XMLVAR_Momentary_PUSH_OVHD_FUEL_LTKPUMPS2_Pressed) ! (>L:XMLVAR_Momentary_PUSH_OVHD_FUEL_LTKPUMPS2_Pressed)
A32NX_OVHD_FUELSYSTEM_RTKPUMP1_TOGGLE#3 (>K:FUELSYSTEM_PUMP_TOGGLE) (L:XMLVAR_Momentary_PUSH_OVHD_FUEL_RTKPUMPS1_Pressed) ! (>L:XMLVAR_Momentary_PUSH_OVHD_FUEL_RTKPUMPS1_Pressed)
A32NX_OVHD_FUELSYSTEM_RTKPUMP2_TOGGLE#6 (>K:FUELSYSTEM_PUMP_TOGGLE) (L:XMLVAR_Momentary_PUSH_OVHD_FUEL_RTKPUMPS2_Pressed) ! (>L:XMLVAR_Momentary_PUSH_OVHD_FUEL_RTKPUMPS2_Pressed)
//Fly By Wire/A320/Gear
A32NX_BRAKE_FAN_BTN_PRESSED#(L:A32NX_BRAKE_FAN_BTN_PRESSED) ! (>L:A32NX_BRAKE_FAN_BTN_PRESSED)
Autobrake_Low_On#1 (>L:A32NX_OVHD_AUTOBRK_LOW_ON_IS_PRESSED, bool)
Autobrake_Low_Toggle#(L:A32NX_OVHD_AUTOBRK_LOW_ON_IS_PRESSED, bool) ! (>L:A32NX_OVHD_AUTOBRK_LOW_ON_IS_PRESSED, bool)
Autobrake_Max_On#1 (>L:A32NX_OVHD_AUTOBRK_MAX_ON_IS_PRESSED, bool)
Autobrake_Max_Toggle#(L:A32NX_OVHD_AUTOBRK_MAX_ON_IS_PRESSED, bool) ! (>L:A32NX_OVHD_AUTOBRK_MAX_ON_IS_PRESSED, bool)
Autobrake_Med_On#1 (>L:A32NX_OVHD_AUTOBRK_MED_ON_IS_PRESSED, bool)
Autobrake_Med_Toggle#(L:A32NX_OVHD_AUTOBRK_MED_ON_IS_PRESSED, bool) ! (>L:A32NX_OVHD_AUTOBRK_MED_ON_IS_PRESSED, bool)
//Fly By Wire/A320/Lights
A32NX_BEACON_TOG_OFF#A32NX_OH_BEACON_TOG_OFF#0 0 (>K:2:BEACON_LIGHTS_SET)
A32NX_BEACON_TOG_ON#A32NX_OH_BEACON_TOG_ON#0 1 (>K:2:BEACON_LIGHTS_SET) 
A32NX_NAV_LIGHT_TOG#(L:LIGHTING_NAV_0)  if{ 0 0 (>K:2:NAV_LIGHTS_SET) 0 0 (>K:2:LOGO_LIGHTS_SET) } els{ 0 1 (>K:2:NAV_LIGHTS_SET) 0 1 (>K:2:LOGO_LIGHTS_SET) }
A32NX_OH_EXTLT_RWY_OFF#(A:LIGHT TAXI:2, Bool) if{ 2 (>K:TOGGLE_TAXI_LIGHTS) 3 (>K:TOGGLE_TAXI_LIGHTS) }
A32NX_OH_EXTLT_RWY_ON#(A:LIGHT TAXI:2, Bool) ! if{ 2 (>K:TOGGLE_TAXI_LIGHTS) 3 (>K:TOGGLE_TAXI_LIGHTS) }
A32NX_OH_EXTLT_RWY_TOG#2 (>K:TOGGLE_TAXI_LIGHTS) 3 (>K:TOGGLE_TAXI_LIGHTS)
A32NX_OH_LANDING_LIGHTS_OFF#(A:LIGHT LANDING, Bool) if{ (>K:LANDING_LIGHTS_TOGGLE) }
A32NX_OH_LANDING_LIGHTS_ON#(A:LIGHT LANDING, Bool) ! if{ (>K:LANDING_LIGHTS_TOGGLE) }
A32NX_OH_LANDING_LIGHTS_TOG#(>K:LANDING_LIGHTS_TOGGLE)
A32NX_OH_STROBES_TOG_AUTO#(A:LIGHT STROBE:0, Percent) ! if{ 0 (>K:STROBES_TOGGLE) } 1 (>L:STROBE_1_Auto)
A32NX_OH_STROBES_TOG_OFF#(A:LIGHT STROBE:0, Percent) if{ 0 (>K:STROBES_TOGGLE) } 0 (>L:STROBE_1_Auto)
A32NX_OH_STROBES_TOG_ON#(A:LIGHT STROBE:0, Percent) ! if{ 0 (>K:STROBES_TOGGLE) } 0 (>L:STROBE_1_Auto)
ANN_LT_BRT#(L:XMLVAR_SWITCH_OVHD_INTLT_ANNLT_Positon) 1 == is{ 1 if{(>L:XMLVAR_SWITCH_OVHD_INTLT_ANNLT_Position) 1 (>L:XMLVAR_SWITCH_OVHD_INTLT_ANNLT_Position) } } els} (L:XMLVAR_SWITCH_OVHD_INTLT_ANNLT_Position) 1 == if{ 1 if{ 1 (>L:XMLVAR_SWITCH_OVHD_INTLT_ANNLT_Position) 1 (>L:XMLVAR_SWITCH_OVHD_INTLT_ANNLT_Position) } }
ANN_LT_DIM#(L:XMLVAR_SWITCH_OVHD_INTLT_ANNLT_Positon) 0 == is{ 1 if{(>L:XMLVAR_SWITCH_OVHD_INTLT_ANNLT_Position) 1 (>L:XMLVAR_SWITCH_OVHD_INTLT_ANNLT_Position) } } els} (L:XMLVAR_SWITCH_OVHD_INTLT_ANNLT_Position) 1 == if{ 1 if{ 2 (>L:XMLVAR_SWITCH_OVHD_INTLT_ANNLT_Position) 2 (>L:XMLVAR_SWITCH_OVHD_INTLT_ANNLT_Position) } } }
ANN_LT_TEST#(L:XMLVAR_SWITCH_OVHD_INTLT_ANNLT_Positon) 2 == is{ 1 if{(>L:XMLVAR_SWITCH_OVHD_INTLT_ANNLT_Position) 1 (>L:XMLVAR_SWITCH_OVHD_INTLT_ANNLT_Position) } } els} (L:XMLVAR_SWITCH_OVHD_INTLT_ANNLT_Position) 1 == if{ 1 if{ 0 (>L:XMLVAR_SWITCH_OVHD_INTLT_ANNLT_Position) 0 (>L:XMLVAR_SWITCH_OVHD_INTLT_ANNLT_Position) } }
DOME_LIGHT_BRT# (A:LIGHT CABIN:0, Percent) 0 == if{ 0 (>K:TOGGLE_CABIN_LIGHTS) 100 (>K:LIGHT_POTENTIOMETER_7_SET) }
DOME_LIGHT_DIM1# (A:LIGHT CABIN:0, Percent) 0 == if{ 0 (>K:TOGGLE_CABIN_LIGHTS) 50 (>K:LIGHT_POTENTIOMETER_7_SET) }
DOME_LIGHT_DIM2#(>K:TOGGLE_CABIN_LIGHTS) } 50 (>K:LIGHT_POTENTIOMETER_7_SET)
DOME_LIGHT_OFF#(A:LIGHT CABIN:0, Percent) 100 == if{ 0 (>K:TOGGLE_CABIN_LIGHTS) 0 (>K:LIGHT_POTENTIOMETER_7_SET) }
DOME_LIGHT_TOGGLE#(A:LIGHT CABIN:0, Percent) 0 == if{ 0 (>K:TOGGLE_CABIN_LIGHTS) 50 (>K:LIGHT_POTENTIOMETER_7_SET) } els{ (A:LIGHT CABIN:0, Percent) 100 == if{ 0 (>K:TOGGLE_CABIN_LIGHTS) 0 (>K:LIGHT_POTENTIOMETER_7_SET) }
EMER_EXIT_ARM#(L:XMLVAR_SWITCH_OVHD_INTLT_EMEREXIT_Positon) 1 == is{ 1 if{(>L:XMLVAR_SWITCH_OVHD_INTLT_EMEREXIT_Position) 1 (>L:XMLVAR_SWITCH_OVHD_INTLT_EMEREXIT_Position) } } els} (L:XMLVAR_SWITCH_OVHD_INTLT_EMEREXIT_Position) 1 == if{ 1 if{ 1 (>L:XMLVAR_SWITCH_OVHD_INTLT_EMEREXIT_Position) 1 (>L:XMLVAR_SWITCH_OVHD_INTLT_EMEREXIT_Position) } }
EMER_EXIT_OFF#(L:XMLVAR_SWITCH_OVHD_INTLT_EMEREXIT_Positon) 0 == is{ 1 if{(>L:XMLVAR_SWITCH_OVHD_INTLT_EMEREXIT_Position) 1 (>L:XMLVAR_SWITCH_OVHD_INTLT_EMEREXIT_Position) } } els} (L:XMLVAR_SWITCH_OVHD_INTLT_EMEREXIT_Position) 1 == if{ 1 if{ 2 (>L:XMLVAR_SWITCH_OVHD_INTLT_EMEREXIT_Position) 2 (>L:XMLVAR_SWITCH_OVHD_INTLT_EMEREXIT_Position) } } }
EMER_EXIT_ON#(L:XMLVAR_SWITCH_OVHD_INTLT_EMEREXIT_Positon) 2 == is{ 1 if{(>L:XMLVAR_SWITCH_OVHD_INTLT_EMEREXIT_Position) 1 (>L:XMLVAR_SWITCH_OVHD_INTLT_EMEREXIT_Position) } } els} (L:XMLVAR_SWITCH_OVHD_INTLT_EMEREXIT_Position) 1 == if{ 1 if{ 0 (>L:XMLVAR_SWITCH_OVHD_INTLT_EMEREXIT_Position) 0 (>L:XMLVAR_SWITCH_OVHD_INTLT_EMEREXIT_Position) } }
LEFT_LANDING_LIGHTS_OFF# if{1 (>L:LANDING_2_Retracted)
LEFT_LANDING_LIGHTS_RETRACTED#(>L:LANDING_2_Retracted) 1 == is{ 1 is(>L:LANDING_2_Retracted) 1 (>L:LANDING_2_Retracted) } } els} (>L:LANDING_2_Retracted) 1 == if{ 1 if {2 (>L:LANDING_2_Retracted) 1 (>L:LANDING_2_Retracted) } }
RIGHT_LANDING_LIGHTS_OFF# if{1 (>L:LANDING_1_Retracted)
RIGHT_LANDING_LIGHTS_RETRACTED#(>L:LANDING_1_Retracted) 1 == is{ 1 is(>L:LANDING_1_Retracted) 1 (>L:LANDING_1_Retracted) } } els} (>L:LANDING_1_Retracted) 1 == if{ 1 if {2 (>L:LANDING_1_Retracted) 1 (>L:LANDING_1_Retracted) } }
STBY_COMPASS_LIGHT_OFF#(>L:A32NX_STBY_COMPASS_LIGHT_TOGGLE)
STBY_COMPASS_LIGHT_TOGGLE#(L:A32NX_STBY_COMPASS_LIGHT_TOGGLE) ! (>L:A32NX_STBY_COMPASS_LIGHT_TOGGLE)
//Fly By Wire/A320/Navigation
A320_Neo_ATC_BTN_0#(>H:A320_Neo_ATC_BTN_0)
A320_Neo_ATC_BTN_1#(>H:A320_Neo_ATC_BTN_1)
A320_Neo_ATC_BTN_2#(>H:A320_Neo_ATC_BTN_2)
A320_Neo_ATC_BTN_3#(>H:A320_Neo_ATC_BTN_3)
A320_Neo_ATC_BTN_4#(>H:A320_Neo_ATC_BTN_4)
A320_Neo_ATC_BTN_5#(>H:A320_Neo_ATC_BTN_5)
A320_Neo_ATC_BTN_6#(>H:A320_Neo_ATC_BTN_6)
A320_Neo_ATC_BTN_7#(>H:A320_Neo_ATC_BTN_7)
A320_Neo_ATC_BTN_8#(>H:A320_Neo_ATC_BTN_8)
A320_Neo_ATC_BTN_9#(>H:A320_Neo_ATC_BTN_9)
A320_Neo_ATC_BTN_CLR#(>H:A320_Neo_ATC_BTN_CLR)
A320_Neo_ATC_BTN_IDENT#(>H:A320_Neo_ATC_BTN_IDENT)
A320_Neo_CDU_1_BTN_0#(>H:A320_Neo_CDU_1_BTN_0)
A320_Neo_CDU_1_BTN_1#(>H:A320_Neo_CDU_1_BTN_1)
A320_Neo_CDU_1_BTN_2#(>H:A320_Neo_CDU_1_BTN_2)
A320_Neo_CDU_1_BTN_3#(>H:A320_Neo_CDU_1_BTN_3)
A320_Neo_CDU_1_BTN_4#(>H:A320_Neo_CDU_1_BTN_4)
A320_Neo_CDU_1_BTN_5#(>H:A320_Neo_CDU_1_BTN_5)
A320_Neo_CDU_1_BTN_6#(>H:A320_Neo_CDU_1_BTN_6)
A320_Neo_CDU_1_BTN_7#(>H:A320_Neo_CDU_1_BTN_7)
A320_Neo_CDU_1_BTN_8#(>H:A320_Neo_CDU_1_BTN_8)
A320_Neo_CDU_1_BTN_9#(>H:A320_Neo_CDU_1_BTN_9)
A320_Neo_CDU_1_BTN_A#(>H:A320_Neo_CDU_1_BTN_A)
A320_Neo_CDU_1_BTN_AIRPORT#(>H:A320_Neo_CDU_1_BTN_AIRPORT)
A320_Neo_CDU_1_BTN_ATC#(>H:A320_Neo_CDU_1_BTN_ATC)
A320_Neo_CDU_1_BTN_B#(>H:A320_Neo_CDU_1_BTN_B)
A320_Neo_CDU_1_BTN_C#(>H:A320_Neo_CDU_1_BTN_C)
A320_Neo_CDU_1_BTN_CLR#(>H:A320_Neo_CDU_1_BTN_CLR)
A320_Neo_CDU_1_BTN_D#(>H:A320_Neo_CDU_1_BTN_D)
A320_Neo_CDU_1_BTN_DIR#(>H:A320_Neo_CDU_1_BTN_DIR)
A320_Neo_CDU_1_BTN_DIV#(>H:A320_Neo_CDU_1_BTN_DIV)
A320_Neo_CDU_1_BTN_DOT#(>H:A320_Neo_CDU_1_BTN_DOT)
A320_Neo_CDU_1_BTN_DOWN#(>H:A320_Neo_CDU_1_BTN_DOWN)
A320_Neo_CDU_1_BTN_E#(>H:A320_Neo_CDU_1_BTN_E)
A320_Neo_CDU_1_BTN_F#(>H:A320_Neo_CDU_1_BTN_F)
A320_Neo_CDU_1_BTN_FPLN#(>H:A320_Neo_CDU_1_BTN_FPLN)
A320_Neo_CDU_1_BTN_FUEL#(>H:A320_Neo_CDU_1_BTN_FUEL)
A320_Neo_CDU_1_BTN_G#(>H:A320_Neo_CDU_1_BTN_G)
A320_Neo_CDU_1_BTN_H#(>H:A320_Neo_CDU_1_BTN_H)
A320_Neo_CDU_1_BTN_I#(>H:A320_Neo_CDU_1_BTN_I)
A320_Neo_CDU_1_BTN_J#(>H:A320_Neo_CDU_1_BTN_J)
A320_Neo_CDU_1_BTN_K#(>H:A320_Neo_CDU_1_BTN_K)
A320_Neo_CDU_1_BTN_L#(>H:A320_Neo_CDU_1_BTN_L)
A320_Neo_CDU_1_BTN_L1#(>H:A320_Neo_CDU_1_BTN_L1)
A320_Neo_CDU_1_BTN_L2#(>H:A320_Neo_CDU_1_BTN_L2)
A320_Neo_CDU_1_BTN_L3#(>H:A320_Neo_CDU_1_BTN_L3)
A320_Neo_CDU_1_BTN_L4#(>H:A320_Neo_CDU_1_BTN_L4)
A320_Neo_CDU_1_BTN_L5#(>H:A320_Neo_CDU_1_BTN_L5)
A320_Neo_CDU_1_BTN_L6#(>H:A320_Neo_CDU_1_BTN_L6)
A320_Neo_CDU_1_BTN_M#(>H:A320_Neo_CDU_1_BTN_M)
A320_Neo_CDU_1_BTN_MENU#(>H:A320_Neo_CDU_1_BTN_MENU)
A320_Neo_CDU_1_BTN_N#(>H:A320_Neo_CDU_1_BTN_N)
A320_Neo_CDU_1_BTN_NEXTPAGE#(>H:A320_Neo_CDU_1_BTN_NEXTPAGE)
A320_Neo_CDU_1_BTN_O#(>H:A320_Neo_CDU_1_BTN_O)
A320_Neo_CDU_1_BTN_OVFY#(>H:A320_Neo_CDU_1_BTN_OVFY)
A320_Neo_CDU_1_BTN_P#(>H:A320_Neo_CDU_1_BTN_P)
A320_Neo_CDU_1_BTN_PLUSMINUS#(>H:A320_Neo_CDU_1_BTN_PLUSMINUS)
A320_Neo_CDU_1_BTN_PREVPAGE#(>H:A320_Neo_CDU_1_BTN_PREVPAGE)
A320_Neo_CDU_1_BTN_Q#(>H:A320_Neo_CDU_1_BTN_Q)
A320_Neo_CDU_1_BTN_R#(>H:A320_Neo_CDU_1_BTN_R)
A320_Neo_CDU_1_BTN_R1#(>H:A320_Neo_CDU_1_BTN_R1)
A320_Neo_CDU_1_BTN_R2#(>H:A320_Neo_CDU_1_BTN_R2)
A320_Neo_CDU_1_BTN_R3#(>H:A320_Neo_CDU_1_BTN_R3)
A320_Neo_CDU_1_BTN_R4#(>H:A320_Neo_CDU_1_BTN_R4)
A320_Neo_CDU_1_BTN_R5#(>H:A320_Neo_CDU_1_BTN_R5)
A320_Neo_CDU_1_BTN_R6#(>H:A320_Neo_CDU_1_BTN_R6)
A320_Neo_CDU_1_BTN_RAD#(>H:A320_Neo_CDU_1_BTN_RAD)
A320_Neo_CDU_1_BTN_S#(>H:A320_Neo_CDU_1_BTN_S)
A320_Neo_CDU_1_BTN_SEC#(>H:A320_Neo_CDU_1_BTN_SEC)
A320_Neo_CDU_1_BTN_SP#(>H:A320_Neo_CDU_1_BTN_SP)
A320_Neo_CDU_1_BTN_T#(>H:A320_Neo_CDU_1_BTN_T)
A320_Neo_CDU_1_BTN_U#(>H:A320_Neo_CDU_1_BTN_U)
A320_Neo_CDU_1_BTN_UP#(>H:A320_Neo_CDU_1_BTN_UP)
A320_Neo_CDU_1_BTN_V#(>H:A320_Neo_CDU_1_BTN_V)
A320_Neo_CDU_1_BTN_W#(>H:A320_Neo_CDU_1_BTN_W)
A320_Neo_CDU_1_BTN_X#(>H:A320_Neo_CDU_1_BTN_X)
A320_Neo_CDU_1_BTN_Y#(>H:A320_Neo_CDU_1_BTN_Y)
A320_Neo_CDU_1_BTN_Z#(>H:A320_Neo_CDU_1_BTN_Z)
A320_Neo_CDU_2_BTN_0#(>H:A320_Neo_CDU_2_BTN_0)
A320_Neo_CDU_2_BTN_1#(>H:A320_Neo_CDU_2_BTN_1)
A320_Neo_CDU_2_BTN_2#(>H:A320_Neo_CDU_2_BTN_2)
A320_Neo_CDU_2_BTN_3#(>H:A320_Neo_CDU_2_BTN_3)
A320_Neo_CDU_2_BTN_4#(>H:A320_Neo_CDU_2_BTN_4)
A320_Neo_CDU_2_BTN_5#(>H:A320_Neo_CDU_2_BTN_5)
A320_Neo_CDU_2_BTN_6#(>H:A320_Neo_CDU_2_BTN_6)
A320_Neo_CDU_2_BTN_7#(>H:A320_Neo_CDU_2_BTN_7)
A320_Neo_CDU_2_BTN_8#(>H:A320_Neo_CDU_2_BTN_8)
A320_Neo_CDU_2_BTN_9#(>H:A320_Neo_CDU_2_BTN_9)
A320_Neo_CDU_2_BTN_A#(>H:A320_Neo_CDU_2_BTN_A)
A320_Neo_CDU_2_BTN_AIRPORT#(>H:A320_Neo_CDU_2_BTN_AIRPORT)
A320_Neo_CDU_2_BTN_ATC#(>H:A320_Neo_CDU_2_BTN_ATC)
A320_Neo_CDU_2_BTN_B#(>H:A320_Neo_CDU_2_BTN_B)
A320_Neo_CDU_2_BTN_C#(>H:A320_Neo_CDU_2_BTN_C)
A320_Neo_CDU_2_BTN_CLR#(>H:A320_Neo_CDU_2_BTN_CLR)
A320_Neo_CDU_2_BTN_D#(>H:A320_Neo_CDU_2_BTN_D)
A320_Neo_CDU_2_BTN_DATA#(>H:A320_Neo_CDU_2_BTN_DATA)
A320_Neo_CDU_2_BTN_DIR#(>H:A320_Neo_CDU_2_BTN_DIR)
A320_Neo_CDU_2_BTN_DIV#(>H:A320_Neo_CDU_2_BTN_DIV)
A320_Neo_CDU_2_BTN_DOT#(>H:A320_Neo_CDU_2_BTN_DOT)
A320_Neo_CDU_2_BTN_DOWN#(>H:A320_Neo_CDU_2_BTN_DOWN)
A320_Neo_CDU_2_BTN_E#(>H:A320_Neo_CDU_2_BTN_E)
A320_Neo_CDU_2_BTN_F#(>H:A320_Neo_CDU_2_BTN_F)
A320_Neo_CDU_2_BTN_FPLN#(>H:A320_Neo_CDU_2_BTN_FPLN)
A320_Neo_CDU_2_BTN_FUEL#(>H:A320_Neo_CDU_2_BTN_FUEL)
A320_Neo_CDU_2_BTN_G#(>H:A320_Neo_CDU_2_BTN_G)
A320_Neo_CDU_2_BTN_H#(>H:A320_Neo_CDU_2_BTN_H)
A320_Neo_CDU_2_BTN_I#(>H:A320_Neo_CDU_2_BTN_I)
A320_Neo_CDU_2_BTN_INIT#(>H:A320_Neo_CDU_2_BTN_INIT)
A320_Neo_CDU_2_BTN_J#(>H:A320_Neo_CDU_2_BTN_J)
A320_Neo_CDU_2_BTN_K#(>H:A320_Neo_CDU_2_BTN_K)
A320_Neo_CDU_2_BTN_L#(>H:A320_Neo_CDU_2_BTN_L)
A320_Neo_CDU_2_BTN_L1#(>H:A320_Neo_CDU_2_BTN_L1)
A320_Neo_CDU_2_BTN_L2#(>H:A320_Neo_CDU_2_BTN_L2)
A320_Neo_CDU_2_BTN_L3#(>H:A320_Neo_CDU_2_BTN_L3)
A320_Neo_CDU_2_BTN_L4#(>H:A320_Neo_CDU_2_BTN_L4)
A320_Neo_CDU_2_BTN_L5#(>H:A320_Neo_CDU_2_BTN_L5)
A320_Neo_CDU_2_BTN_L6#(>H:A320_Neo_CDU_2_BTN_L6)
A320_Neo_CDU_2_BTN_M#(>H:A320_Neo_CDU_2_BTN_M)
A320_Neo_CDU_2_BTN_MENU#(>H:A320_Neo_CDU_2_BTN_MENU)
A320_Neo_CDU_2_BTN_N#(>H:A320_Neo_CDU_2_BTN_N)
A320_Neo_CDU_2_BTN_NEXTPAGE#(>H:A320_Neo_CDU_2_BTN_NEXTPAGE)
A320_Neo_CDU_2_BTN_O#(>H:A320_Neo_CDU_2_BTN_O)
A320_Neo_CDU_2_BTN_OVFY#(>H:A320_Neo_CDU_2_BTN_OVFY)
A320_Neo_CDU_2_BTN_P#(>H:A320_Neo_CDU_2_BTN_P)
A320_Neo_CDU_2_BTN_PERF#(>H:A320_Neo_CDU_2_BTN_PERF)
A320_Neo_CDU_2_BTN_PLUSMINUS#(>H:A320_Neo_CDU_2_BTN_PLUSMINUS)
A320_Neo_CDU_2_BTN_PREVPAGE#(>H:A320_Neo_CDU_2_BTN_PREVPAGE)
A320_Neo_CDU_2_BTN_PROG#(>H:A320_Neo_CDU_2_BTN_PROG)
A320_Neo_CDU_2_BTN_Q#(>H:A320_Neo_CDU_2_BTN_Q)
A320_Neo_CDU_2_BTN_R#(>H:A320_Neo_CDU_2_BTN_R)
A320_Neo_CDU_2_BTN_R1#(>H:A320_Neo_CDU_2_BTN_R1)
A320_Neo_CDU_2_BTN_R2#(>H:A320_Neo_CDU_2_BTN_R2)
A320_Neo_CDU_2_BTN_R3#(>H:A320_Neo_CDU_2_BTN_R3)
A320_Neo_CDU_2_BTN_R4#(>H:A320_Neo_CDU_2_BTN_R4)
A320_Neo_CDU_2_BTN_R5#(>H:A320_Neo_CDU_2_BTN_R5)
A320_Neo_CDU_2_BTN_R6#(>H:A320_Neo_CDU_2_BTN_R6)
A320_Neo_CDU_2_BTN_RAD#(>H:A320_Neo_CDU_2_BTN_RAD)
A320_Neo_CDU_2_BTN_S#(>H:A320_Neo_CDU_2_BTN_S)
A320_Neo_CDU_2_BTN_SEC#(>H:A320_Neo_CDU_2_BTN_SEC)
A320_Neo_CDU_2_BTN_SP#(>H:A320_Neo_CDU_2_BTN_SP)
A320_Neo_CDU_2_BTN_T#(>H:A320_Neo_CDU_2_BTN_T)
A320_Neo_CDU_2_BTN_U#(>H:A320_Neo_CDU_2_BTN_U)
A320_Neo_CDU_2_BTN_UP#(>H:A320_Neo_CDU_2_BTN_UP)
A320_Neo_CDU_2_BTN_V#(>H:A320_Neo_CDU_2_BTN_V)
A320_Neo_CDU_2_BTN_W#(>H:A320_Neo_CDU_2_BTN_W)
A320_Neo_CDU_2_BTN_X#(>H:A320_Neo_CDU_2_BTN_X)
A320_Neo_CDU_2_BTN_Y#(>H:A320_Neo_CDU_2_BTN_Y)
A320_Neo_CDU_2_BTN_Z#(>H:A320_Neo_CDU_2_BTN_Z)
A32NX_ADIRS_KNOB_1_ATT#2 (>L:A32NX_ADIRS_KNOB_1)
A32NX_ADIRS_KNOB_1_NAV#1 (>L:A32NX_ADIRS_KNOB_1)
A32NX_ADIRS_KNOB_1_OFF#0 (>L:A32NX_ADIRS_KNOB_1)
A32NX_ADIRS_KNOB_2_ATT#2 (>L:A32NX_ADIRS_KNOB_2)
A32NX_ADIRS_KNOB_2_NAV#1 (>L:A32NX_ADIRS_KNOB_2)
A32NX_ADIRS_KNOB_2_OFF#0 (>L:A32NX_ADIRS_KNOB_2)
A32NX_ADIRS_KNOB_3_ATT#2 (>L:A32NX_ADIRS_KNOB_3)
A32NX_ADIRS_KNOB_3_NAV#1 (>L:A32NX_ADIRS_KNOB_3)
A32NX_ADIRS_KNOB_3_OFF#0 (>L:A32NX_ADIRS_KNOB_3)
//Fly By Wire/A320/Passengers/Crew
A32NX_CALLS_EMER_ON_OFF#0 (>L:A32NX_CALLS_EMER_ON)
A32NX_CALLS_EMER_ON_ON#1 (>L:A32NX_CALLS_EMER_ON)
A32NX_EVAC_CAPT_TOGGLE_CAPT#0 (>L:A32NX_EVAC_CAPT_TOGGLE)
A32NX_EVAC_CAPT_TOGGLE_CAPT_AND_PURS#1 (>L:A32NX_EVAC_CAPT_TOGGLE)
A32NX_EVAC_COMMAND_TOGGLE_OFF#0 (>L:A32NX_EVAC_COMMAND_TOGGLE)
A32NX_EVAC_COMMAND_TOGGLE_ON#1 (>L:A32NX_EVAC_COMMAND_TOGGLE)
NO_SMOKING_AUTO#(L:XMLVAR_SWITCH_OVHD_INTLT_NOSMOKING_Position) 1 == is{1 if{(>L:XMLVAR_SWITCH_OVHD_INTLT_NOSMOKING_Position) 1 (>L:XMLVAR_SWITCH_OVHD_INTLT_NOSMOKING_Position) } } els} (L:XMLVAR_SWITCH_OVHD_INTLT_NOSMOKING_Position) 1 ==if{ 1 if{ 1 (>L:XMLVAR_SWITCH_OVHD_INTLT_NOSMOKING_Position) 1 (>L:XMLVAR_SWITCH_OVHD_INTLT_NOSMOKING_Position) } }
NO_SMOKING_OFF#(L:XMLVAR_SWITCH_OVHD_INTLT_NOSMOKING_Position) 0 == is{1 if{(>L:XMLVAR_SWITCH_OVHD_INTLT_NOSMOKING_Position) 1 (>L:XMLVAR_SWITCH_OVHD_INTLT_NOSMOKING_Position) } } els} (L:XMLVAR_SWITCH_OVHD_INTLT_NOSMOKING_Position) 1 ==if{ 1 if{ 2 (>L:XMLVAR_SWITCH_OVHD_INTLT_NOSMOKING_Position) 2 (>L:XMLVAR_SWITCH_OVHD_INTLT_NOSMOKING_Position) } } }
NO_SMOKING_ON#(L:XMLVAR_SWITCH_OVHD_INTLT_NOSMOKING_Position) 2 == is{1 if{(>L:XMLVAR_SWITCH_OVHD_INTLT_NOSMOKING_Position) 1 (>L:XMLVAR_SWITCH_OVHD_INTLT_NOSMOKING_Position) } } els} (L:XMLVAR_SWITCH_OVHD_INTLT_NOSMOKING_Position) 1 ==if{ 1 if{ 0 (>L:XMLVAR_SWITCH_OVHD_INTLT_NOSMOKING_Position) 0 (>L:XMLVAR_SWITCH_OVHD_INTLT_NOSMOKING_Position) } } }
PUSH_OVHD_CALLS_AFT_OFF#0 (>L:PUSH_OVHD_CALLS_AFT)
PUSH_OVHD_CALLS_AFT_ON#1 (>L:PUSH_OVHD_CALLS_AFT)
PUSH_OVHD_CALLS_ALL_OFF#0 (>L:PUSH_OVHD_CALLS_ALL)
PUSH_OVHD_CALLS_ALL_ON#1 (>L:PUSH_OVHD_CALLS_ALL)
PUSH_OVHD_CALLS_FWD_OFF#0 (>L:PUSH_OVHD_CALLS_FWD)
PUSH_OVHD_CALLS_FWD_ON#1 (>L:PUSH_OVHD_CALLS_FWD)
PUSH_OVHD_CALLS_MECH_OFF#0 (>L:PUSH_OVHD_CALLS_MECH)
PUSH_OVHD_CALLS_MECH_ON#1 (>L:PUSH_OVHD_CALLS_MECH)
PUSH_OVHD_EVAC_HORN_OFF#0 (>L:PUSH_OVHD_EVAC_HORN)
PUSH_OVHD_EVAC_HORN_ON#1 (>L:PUSH_OVHD_EVAC_HORN)
SEATBELT_SWITCH#(L:XMLVAR_SWITCH_OVHD_INTLT_SEATBELT_Position) ! (>L:XMLVAR_SWITCH_OVHD_INTLT_SEATBELT_Position)
//Fly By Wire/A320/Radio
A320_Neo_FBW_BTN_L_ADF#(L:XMLVAR_RMP_L_On) if{ (L:XMLVAR_RMP_L_GROUP_MODE_IS_DISABLED) ! if{ 1 if{ (>H:A320_Neo_FDW_BTN_L_ADF) 4 (>L:XMLVAR_RMP_L_CURRENT_BUTTON_IN_GROUP_MODE) } } }
A320_Neo_FBW_BTN_L_AM#(L:XMLVAR_RMP_L_On) (L:XMLVAR_RMP_L_CURRENT_BUTTON_IN_GROUP_MODE) 0 == (L:XMLVAR_RMP_L_GROUP_FREQ_IS_DISABLED) ! and if{ (L:XMLVAR_RMP_L_CURRENT_BUTTON_IN_GROUP_FREQ) 4 == (L:XMLVAR_RMP_L_CURRENT_BUTTON_IN_GROUP_FREQ) 5 == or } and if{ (>H:A320_Neo_FDW_BTN_L_AM) (L:XMLVAR_RMP_L_AM_Active) ! (>L:XMLVAR_RMP_L_AM_Active) }
A320_Neo_FBW_BTN_L_BFO#(L:XMLVAR_RMP_L_On) (L:XMLVAR_RMP_L_GROUP_MODE_IS_DISABLED) ! if{ (L:XMLVAR_RMP_L_CURRENT_BUTTON_IN_GROUP_MODE) 4 == } and if{ (>H:A320_Neo_FDW_BTN_L_BFO) (L:XMLVAR_RMP_L_BFO_Active) ! (>L:XMLVAR_RMP_L_BFO_Active) }
A320_Neo_FBW_BTN_L_HF1#(L:XMLVAR_RMP_L_On) if{ (L:XMLVAR_RMP_L_GROUP_FREQ_IS_DISABLED) ! if{ (L:XMLVAR_RMP_L_CURRENT_BUTTON_IN_GROUP_MODE) 0 == if{ (>H:A320_Neo_FDW_BTN_L_HF1) 4 (>L:XMLVAR_RMP_L_CURRENT_BUTTON_IN_GROUP_FREQ) } } }
A320_Neo_FBW_BTN_L_HF2#(L:XMLVAR_RMP_L_On) if{ (L:XMLVAR_RMP_L_GROUP_FREQ_IS_DISABLED) ! if{ (L:XMLVAR_RMP_L_CURRENT_BUTTON_IN_GROUP_MODE) 0 == if{ (>H:A320_Neo_FDW_BTN_L_HF2) 5 (>L:XMLVAR_RMP_L_CURRENT_BUTTON_IN_GROUP_FREQ) } } }
A320_Neo_FBW_BTN_L_ILS#(L:XMLVAR_RMP_L_On) if{ (L:XMLVAR_RMP_L_GROUP_MODE_IS_DISABLED) ! if{ 1 if{ (>H:A320_Neo_FDW_BTN_L_ILS) 2 (>L:XMLVAR_RMP_L_CURRENT_BUTTON_IN_GROUP_MODE) } } }
A320_Neo_FBW_BTN_L_MLS#(L:XMLVAR_RMP_L_On) if{ (L:XMLVAR_RMP_L_GROUP_MODE_IS_DISABLED) ! if{ 0 if{ (>H:A320_Neo_FDW_BTN_L_MLS) 3 (>L:XMLVAR_RMP_L_CURRENT_BUTTON_IN_GROUP_MODE) } } }
A320_Neo_FBW_BTN_L_NAV#(L:XMLVAR_RMP_L_On) 1 and if{ (>H:A320_Neo_FDW_BTN_L_NAV) (L:XMLVAR_RMP_L_NAV_Active) ! (>L:XMLVAR_RMP_L_NAV_Active) 0 (L:XMLVAR_RMP_L_NAV_Active) == if{ 1 (>L:XMLVAR_RMP_L_GROUP_MODE_IS_DISABLED) 0 (>L:XMLVAR_RMP_L_CURRENT_BUTTON_IN_GROUP_MODE) } els{ 0 (>L:XMLVAR_RMP_L_GROUP_MODE_IS_DISABLED) } }
A320_Neo_FBW_BTN_L_VHF1#(L:XMLVAR_RMP_L_On) if{ (L:XMLVAR_RMP_L_GROUP_FREQ_IS_DISABLED) ! if{ (L:XMLVAR_RMP_L_CURRENT_BUTTON_IN_GROUP_MODE) 0 == if{ (>H:A320_Neo_FDW_BTN_L_VHF1) 1 (>L:XMLVAR_RMP_L_CURRENT_BUTTON_IN_GROUP_FREQ) } } }
A320_Neo_FBW_BTN_L_VHF2#(L:XMLVAR_RMP_L_On) if{ (L:XMLVAR_RMP_L_GROUP_FREQ_IS_DISABLED) ! if{ (L:XMLVAR_RMP_L_CURRENT_BUTTON_IN_GROUP_MODE) 0 == if{ (>H:A320_Neo_FDW_BTN_L_VHF2) 2 (>L:XMLVAR_RMP_L_CURRENT_BUTTON_IN_GROUP_FREQ) } } }
A320_Neo_FBW_BTN_L_VHF3#(L:XMLVAR_RMP_L_On) if{ (L:XMLVAR_RMP_L_GROUP_FREQ_IS_DISABLED) ! if{ (L:XMLVAR_RMP_L_CURRENT_BUTTON_IN_GROUP_MODE) 0 == if{ (>H:A320_Neo_FDW_BTN_L_VHF3) 3 (>L:XMLVAR_RMP_L_CURRENT_BUTTON_IN_GROUP_FREQ) } } }
A320_Neo_FBW_BTN_L_VOR#(L:XMLVAR_RMP_L_On) if{ (L:XMLVAR_RMP_L_GROUP_MODE_IS_DISABLED) ! if{ 1 if{ (>H:A320_Neo_FDW_BTN_L_VOR) 1 (>L:XMLVAR_RMP_L_CURRENT_BUTTON_IN_GROUP_MODE) } } }
A320_Neo_FBW_SWITCH_L_TOGGLE#(L:XMLVAR_RMP_L_On) ! (>L:XMLVAR_RMP_L_On) (L:XMLVAR_RMP_L_On) if{ 0 (>L:XMLVAR_RMP_L_GROUP_FREQ_IS_DISABLED) 1 (>L:XMLVAR_RMP_L_GROUP_MODE_IS_DISABLED) 1 (>L:XMLVAR_RMP_L_CURRENT_BUTTON_IN_GROUP_FREQ) 0 (>L:XMLVAR_RMP_L_CURRENT_BUTTON_IN_GROUP_MODE) 0 (>L:XMLVAR_RMP_L_AM_Active) 0 (>L:XMLVAR_RMP_L_NAV_Active) 0 (>L:XMLVAR_RMP_L_BFO_Active) } (>H:A320_Neo_FDW_SWITCH_L_TOGGLE)
A32NX_OVHD_COCKPITDOORVIDEO_TOGGLE_OFF#0 (>L:A32NX_OVHD_COCKPITDOORVIDEO_TOGGLE)
A32NX_OVHD_COCKPITDOORVIDEO_TOGGLE_ON#1 (>L:A32NX_OVHD_COCKPITDOORVIDEO_TOGGLE)
A32NX_RMP_L_INNER_KNOB_TURNED_ANTICLOCKWISE#(>H:A32NX_RMP_L_INNER_KNOB_TURNED_ANTICLOCKWISE)
A32NX_RMP_L_INNER_KNOB_TURNED_CLOCKWISE#(>H:A32NX_RMP_L_INNER_KNOB_TURNED_CLOCKWISE)
A32NX_RMP_L_OFF#0 (>L:A32NX_RMP_L_TOGGLE_SWITCH, bool) (>H:A32NX_RMP_L_TOGGLE_SWITCH)
A32NX_RMP_L_ON#1 (>L:A32NX_RMP_L_TOGGLE_SWITCH, bool) (>H:A32NX_RMP_L_TOGGLE_SWITCH)
A32NX_RMP_L_OUTER_KNOB_TURNED_ANTICLOCKWISE#(>H:A32NX_RMP_L_OUTER_KNOB_TURNED_ANTICLOCKWISE)
A32NX_RMP_L_OUTER_KNOB_TURNED_CLOCKWISE#(>H:A32NX_RMP_L_OUTER_KNOB_TURNED_CLOCKWISE)
A32NX_RMP_L_TOG#(L:A32NX_RMP_L_TOGGLE_SWITCH, bool) ! (>L:A32NX_RMP_L_TOGGLE_SWITCH, bool) (>H:A32NX_RMP_L_TOGGLE_SWITCH)
A32NX_RMP_L_TRANSFER_BUTTON_PRESSED#(>H:A32NX_RMP_L_TRANSFER_BUTTON_PRESSED)
A32NX_RMP_R_OFF#0 (>L:A32NX_RMP_R_TOGGLE_SWITCH, bool) (>H:A32NX_RMP_R_TOGGLE_SWITCH)
A32NX_RMP_R_ON#1 (>L:A32NX_RMP_R_TOGGLE_SWITCH, bool) (>H:A32NX_RMP_R_TOGGLE_SWITCH)
A32NX_RMP_R_TOG#(L:A32NX_RMP_R_TOGGLE_SWITCH, bool) ! (>L:A32NX_RMP_R_TOGGLE_SWITCH, bool) (>H:A32NX_RMP_R_TOGGLE_SWITCH)
//Fly By Wire/A320/Warning System
A320_Neo_MFD_BTN_TERRONND_1#(>H:A320_Neo_MFD_BTN_TERRONND_1)
A32NX_MASTER_CAUTION_PRESSED#0 (>L:A32NX_MASTER_CAUTION) 1 (>L:PUSH_AUTOPILOT_MASTERCAUT_L) 
A32NX_MASTER_CAUTION_RELEASED#0 (>L:PUSH_AUTOPILOT_MASTERCAUT_L) 
A32NX_GPWS_FLAPS3_OFF#0 (>L:A32NX_GPWS_FLAPS3)
A32NX_GPWS_FLAPS3_ON#1 (>L:A32NX_GPWS_FLAPS3)
A32NX_GPWS_FLAP_OFF_OFF#0 (>L:A32NX_GPWS_FLAP_OFF)
A32NX_GPWS_FLAP_OFF_ON#1 (>L:A32NX_GPWS_FLAP_OFF)
A32NX_GPWS_GS_OFF_OFF#0 (>L:A32NX_GPWS_GS_OFF)
A32NX_GPWS_GS_OFF_ON#1 (>L:A32NX_GPWS_GS_OFF)
A32NX_GPWS_SYS_OFF_OFF#0 (>L:A32NX_GPWS_SYS_OFF)
A32NX_GPWS_SYS_OFF_ON#1 (>L:A32NX_GPWS_SYS_OFF)
A32NX_GPWS_TERR_OFF_OFF#0 (>L:A32NX_GPWS_TERR_OFF)
A32NX_GPWS_TERR_OFF_ON#1 (>L:A32NX_GPWS_TERR_OFF)
A32NX_MASTER_WARNING_PRESSED#0 (>L:A32NX_MASTER_WARNING) 1 (>L:PUSH_AUTOPILOT_MASTERAWARN_L) 
A32NX_MASTER_WARNING_RELEASED#0 (>L:PUSH_AUTOPILOT_MASTERAWARN_L)
//FlyInside/Bell 47 G/Electrical
ALTERNATOR_SWITCH_TOGGLE#(L:Aircraft.Engine.1.Alternator.Enabled) ! (>L:Aircraft.Engine.1.Alternator.Enabled)
BATTERY_SWITCH_TOGGLE#(L:Aircraft.Electric.Battery.On) ! (>L:Aircraft.Electric.Battery.On)
IGNITION_KEY_SWITCH#(L:Aircraft.Engine.1.Input.MagnetosPosition, Number) 3 == if{ 2 (>L:Aircraft.Engine.1.Input.MagnetosPosition, Number) } els{ (L:Aircraft.Engine.1.Input.MagnetosPosition, Number) 2 == if{ 1 (>L:Aircraft.Engine.1.Input.MagnetosPosition, Number) } els{ (L:Aircraft.Engine.1.Input.MagnetosPosition, Number) 1 == if{ 0 (>L:Aircraft.Engine.1.Input.MagnetosPosition, Number) } els{ (L:Aircraft.Engine.1.Input.MagnetosPosition, Number) 0 == if{ 3 (>L:Aircraft.Engine.1.Input.MagnetosPosition, Number) }
INSTRUMENTS_POWER_SWITCH_TOGGLE#(L:Aircraft.Systems.Instruments.Enabled) ! (>L:Aircraft.Systems.Instruments.Enabled)
STARTER_COLLECTIVE_SWITCH#(L:Aircraft.Systems.Starter.Switch) ! (>L:Aircraft.Systems.Starter.Switch)
//FlyInside/Bell 47 G/Fuel
FUEL_PRIMER_SWITCH_TOGGLE#(L:Aircraft.Systems.Fuel.Primer.Switch) ! (>L:Aircraft.Systems.Fuel.Primer.Switch)
//FlyInside/Bell 47 G/Lights
BEACON_LIGHT_SWITCH_TOGGLE#(K:TOGGLE_BEACON_LIGHTS) ! (>K:TOGGLE_BEACON_LIGHTS)
LANDING_LIGHT_SWITCH_TOGGLE#(K:LANDING_LIGHTS_TOGGLE) ! (>K:LANDING_LIGHTS_TOGGLE)
NAVIGATION_LIGHTS_SWITCH_TOGGLE#(K:TOGGLE_NAV_LIGHTS) ! (>K:TOGGLE_NAV_LIGHTS)
STROBE_LIGHT_SWITCH_TOGGLE#(K:STROBES_TOGGLE) ! (>K:STROBES_TOGGLE)
//FlyInside/Bell 47 G/Miscellaneous
OIL_TEMP_TRANS_SWITCH_TOGGLE#(L:Aircraft.Gauges.DisplayOilTemp) ! (>L:Aircraft.Gauges.DisplayOilTemp)
//FlyInside/Bell 47 G/Radio
COM_RADIO_KHZ_DEC_ENCODER#(>K:COM_RADIO_FRACT_DEC)
COM_RADIO_KHZ_INC_ENCODER#(>K:COM_RADIO_FRACT_INC)
COM_RADIO_MHZ_DEC_ENCODER#(>K:COM_RADIO_WHOLE_DEC)
COM_RADIO_MHZ_INC_ENCODER#(>K:COM_RADIO_WHOLE_INC)
COM_RADIO_STBY_ACTIVE_SWAP_SW#(>K:COM_STBY_RADIO_SWAP)
COM_RADIO_SWITCH_ON_OFF#(L:Aircraft.Radios.Com.1.On) ! (>L:Aircraft.Radios.Com.1.On)
TRANSPONDER_CODE_1000_INC#(K:XPNDR_1000_INC) ++ (>K:XPNDR_1000_INC)
TRANSPONDER_CODE_100_INC#(K:XPNDR_100_INC) ++ (>K:XPNDR_100_INC)
TRANSPONDER_CODE_10_INC#(K:XPNDR_10_INC) ++ (>K:XPNDR_10_INC)
TRANSPONDER_CODE_1_INC#(K:XPNDR_1_INC) ++ (>K:XPNDR_1_INC)
TRANSPONDER_MODE_CHANGE_ENCODER#(L:Aircraft.Radios.Transponder.State, Number) 4 == if{ 3 (>L:Aircraft.Radios.Transponder.State, Number) } els{ (L:Aircraft.Radios.Transponder.State, Number) 3 == if{ 2 (>L:Aircraft.Radios.Transponder.State, Number) } els{ (L:Aircraft.Radios.Transponder.State, Number) 2 == if{ 1 (>L:Aircraft.Radios.Transponder.State, Number) } els{ (L:Aircraft.Radios.Transponder.State, Number) 1 == if{ 0 (>L:Aircraft.Radios.Transponder.State, Number) }
//Hype Performance Group/H135/Avionics
H135_DISPLAY_CENTER_ON#(L:DISPLAY_CENTER_ON) ! (>L:DISPLAY_CENTER_ON)
H135_DISPLAY_LEFT_ON#(L:DISPLAY_LEFT_ON) ! (>L:DISPLAY_LEFT_ON)
H135_DISPLAY_RIGHT_ON#(L:DISPLAY_RIGHT_ON) ! (>L:DISPLAY_RIGHT_ON)
H135_Left_Lower_MFD#(L:GTN_LEFT_ON) ! (>L:GTN_LEFT_ON)
H135_MFDC_SoftKey_Bottom_1#(L:MFDC_SoftKey_Bottom_1, number) ! (>L:MFDC_SoftKey_Bottom_1, number)
H135_MFDC_SoftKey_Bottom_2#(L:MFDC_SoftKey_Bottom_2, number) ! (>L:MFDC_SoftKey_Bottom_2, number)
H135_MFDC_SoftKey_Bottom_3#(L:MFDC_SoftKey_Bottom_3, number) ! (>L:MFDC_SoftKey_Bottom_3, number)
H135_MFDC_SoftKey_Bottom_4#(L:MFDC_SoftKey_Bottom_4, number) ! (>L:MFDC_SoftKey_Bottom_4, number)
H135_MFDC_SoftKey_Bottom_5#(L:MFDC_SoftKey_Bottom_5, number) ! (>L:MFDC_SoftKey_Bottom_5, number)
H135_MFDC_SoftKey_Bottom_6#(L:MFDC_SoftKey_Bottom_6, number) ! (>L:MFDC_SoftKey_Bottom_6, number)
H135_MFDC_SoftKey_Left_1#(L:MFDC_SoftKey_Left_1, number) ! (>L:MFDC_SoftKey_Left_1, number)
H135_MFDC_SoftKey_Left_2#(L:MFDC_SoftKey_Left_2, number) ! (>L:MFDC_SoftKey_Left_2, number)
H135_MFDC_SoftKey_Left_3#(L:MFDC_SoftKey_Left_3, number) ! (>L:MFDC_SoftKey_Left_3, number)
H135_MFDC_SoftKey_Left_4#(L:MFDC_SoftKey_Left_4, number) ! (>L:MFDC_SoftKey_Left_4, number)
H135_MFDC_SoftKey_Left_5#(L:MFDC_SoftKey_Left_5, number) ! (>L:MFDC_SoftKey_Left_5, number)
H135_MFDC_SoftKey_Left_6#(L:MFDC_SoftKey_Left_6, number) ! (>L:MFDC_SoftKey_Left_6, number)
H135_MFDC_SoftKey_Right_1#(L:MFDC_SoftKey_Right_1, number) ! (>L:MFDC_SoftKey_Right_1, number)
H135_MFDC_SoftKey_Right_2#(L:MFDC_SoftKey_Right_2, number) ! (>L:MFDC_SoftKey_Right_2, number)
H135_MFDC_SoftKey_Right_3#(L:MFDC_SoftKey_Right_3, number) ! (>L:MFDC_SoftKey_Right_3, number)
H135_MFDC_SoftKey_Right_4#(L:MFDC_SoftKey_Right_4, number) ! (>L:MFDC_SoftKey_Right_4, number)
H135_MFDC_SoftKey_Right_5#(L:MFDC_SoftKey_Right_5, number) ! (>L:MFDC_SoftKey_Right_5, number)
H135_MFDC_SoftKey_Right_6#(L:MFDC_SoftKey_Right_6, number) ! (>L:MFDC_SoftKey_Right_6, number)
H135_MFDC_SoftKey_Top_1#(L:MFDC_SoftKey_Top_1, number) ! (>L:MFDC_SoftKey_Top_1, number)
H135_MFDC_SoftKey_Top_2#(L:MFDC_SoftKey_Top_2, number) ! (>L:MFDC_SoftKey_Top_2, number)
H135_MFDC_SoftKey_Top_3#(L:MFDC_SoftKey_Top_3, number) ! (>L:MFDC_SoftKey_Top_3, number)
H135_MFDC_SoftKey_Top_4#(L:MFDC_SoftKey_Top_4, number) ! (>L:MFDC_SoftKey_Top_4, number)
H135_MFDC_SoftKey_Top_5#(L:MFDC_SoftKey_Top_5, number) ! (>L:MFDC_SoftKey_Top_5, number)
H135_MFDC_SoftKey_Top_6#(L:MFDC_SoftKey_Top_6, number) ! (>L:MFDC_SoftKey_Top_6, number)
H135_MFDL_SoftKey_Bottom_1#(L:MFDL_SoftKey_Bottom_1, number) ! (>L:MFDL_SoftKey_Bottom_1, number)
H135_MFDL_SoftKey_Bottom_2#(L:MFDL_SoftKey_Bottom_2, number) ! (>L:MFDL_SoftKey_Bottom_2, number)
H135_MFDL_SoftKey_Bottom_3#(L:MFDL_SoftKey_Bottom_3, number) ! (>L:MFDL_SoftKey_Bottom_3, number)
H135_MFDL_SoftKey_Bottom_4#(L:MFDL_SoftKey_Bottom_4, number) ! (>L:MFDL_SoftKey_Bottom_4, number)
H135_MFDL_SoftKey_Bottom_5#(L:MFDL_SoftKey_Bottom_5, number) ! (>L:MFDL_SoftKey_Bottom_5, number)
H135_MFDL_SoftKey_Bottom_6#(L:MFDL_SoftKey_Bottom_6, number) ! (>L:MFDL_SoftKey_Bottom_6, number)
H135_MFDL_SoftKey_Left_1#(L:MFDL_SoftKey_Left_1, number) ! (>L:MFDL_SoftKey_Left_1, number)
H135_MFDL_SoftKey_Left_2#(L:MFDL_SoftKey_Left_2, number) ! (>L:MFDL_SoftKey_Left_2, number)
H135_MFDL_SoftKey_Left_3#(L:MFDL_SoftKey_Left_3, number) ! (>L:MFDL_SoftKey_Left_3, number)
H135_MFDL_SoftKey_Left_4#(L:MFDL_SoftKey_Left_4, number) ! (>L:MFDL_SoftKey_Left_4, number)
H135_MFDL_SoftKey_Left_5#(L:MFDL_SoftKey_Left_5, number) ! (>L:MFDL_SoftKey_Left_5, number)
H135_MFDL_SoftKey_Left_6#(L:MFDL_SoftKey_Left_6, number) ! (>L:MFDL_SoftKey_Left_6, number)
H135_MFDL_SoftKey_Right_1#(L:MFDL_SoftKey_Right_1, number) ! (>L:MFDL_SoftKey_Right_1, number)
H135_MFDL_SoftKey_Right_2#(L:MFDL_SoftKey_Right_2, number) ! (>L:MFDL_SoftKey_Right_2, number)
H135_MFDL_SoftKey_Right_3#(L:MFDL_SoftKey_Right_3, number) ! (>L:MFDL_SoftKey_Right_3, number)
H135_MFDL_SoftKey_Right_4#(L:MFDL_SoftKey_Right_4, number) ! (>L:MFDL_SoftKey_Right_4, number)
H135_MFDL_SoftKey_Right_5#(L:MFDL_SoftKey_Right_5, number) ! (>L:MFDL_SoftKey_Right_5, number)
H135_MFDL_SoftKey_Right_6#(L:MFDL_SoftKey_Right_6, number) ! (>L:MFDL_SoftKey_Right_6, number)
H135_MFDL_SoftKey_Top_1#(L:MFDL_SoftKey_Top_1, number) ! (>L:MFDL_SoftKey_Top_1, number)
H135_MFDL_SoftKey_Top_2#(L:MFDL_SoftKey_Top_2, number) ! (>L:MFDL_SoftKey_Top_2, number)
H135_MFDL_SoftKey_Top_3#(L:MFDL_SoftKey_Top_3, number) ! (>L:MFDL_SoftKey_Top_3, number)
H135_MFDL_SoftKey_Top_4#(L:MFDL_SoftKey_Top_4, number) ! (>L:MFDL_SoftKey_Top_4, number)
H135_MFDL_SoftKey_Top_5#(L:MFDL_SoftKey_Top_5, number) ! (>L:MFDL_SoftKey_Top_5, number)
H135_MFDL_SoftKey_Top_6#(L:MFDL_SoftKey_Top_6, number) ! (>L:MFDL_SoftKey_Top_6, number)
H135_MFDR_SoftKey_Bottom_1#(L:MFDR_SoftKey_Bottom_1, number) ! (>L:MFDR_SoftKey_Bottom_1, number)
H135_MFDR_SoftKey_Bottom_2#(L:MFDR_SoftKey_Bottom_2, number) ! (>L:MFDR_SoftKey_Bottom_2, number)
H135_MFDR_SoftKey_Bottom_3#(L:MFDR_SoftKey_Bottom_3, number) ! (>L:MFDR_SoftKey_Bottom_3, number)
H135_MFDR_SoftKey_Bottom_4#(L:MFDR_SoftKey_Bottom_4, number) ! (>L:MFDR_SoftKey_Bottom_4, number)
H135_MFDR_SoftKey_Bottom_5#(L:MFDR_SoftKey_Bottom_5, number) ! (>L:MFDR_SoftKey_Bottom_5, number)
H135_MFDR_SoftKey_Bottom_6#(L:MFDR_SoftKey_Bottom_6, number) ! (>L:MFDR_SoftKey_Bottom_6, number)
H135_MFDR_SoftKey_Left_1#(L:MFDR_SoftKey_Left_1, number) ! (>L:MFDR_SoftKey_Left_1, number)
H135_MFDR_SoftKey_Left_2#(L:MFDR_SoftKey_Left_2, number) ! (>L:MFDR_SoftKey_Left_2, number)
H135_MFDR_SoftKey_Left_3#(L:MFDR_SoftKey_Left_3, number) ! (>L:MFDR_SoftKey_Left_3, number)
H135_MFDR_SoftKey_Left_4#(L:MFDR_SoftKey_Left_4, number) ! (>L:MFDR_SoftKey_Left_4, number)
H135_MFDR_SoftKey_Left_5#(L:MFDR_SoftKey_Left_5, number) ! (>L:MFDR_SoftKey_Left_5, number)
H135_MFDR_SoftKey_Left_6#(L:MFDR_SoftKey_Left_6, number) ! (>L:MFDR_SoftKey_Left_6, number)
H135_MFDR_SoftKey_Right_1#(L:MFDR_SoftKey_Right_1, number) ! (>L:MFDR_SoftKey_Right_1, number)
H135_MFDR_SoftKey_Right_2#(L:MFDR_SoftKey_Right_2, number) ! (>L:MFDR_SoftKey_Right_2, number)
H135_MFDR_SoftKey_Right_3#(L:MFDR_SoftKey_Right_3, number) ! (>L:MFDR_SoftKey_Right_3, number)
H135_MFDR_SoftKey_Right_4#(L:MFDR_SoftKey_Right_4, number) ! (>L:MFDR_SoftKey_Right_4, number)
H135_MFDR_SoftKey_Right_5#(L:MFDR_SoftKey_Right_5, number) ! (>L:MFDR_SoftKey_Right_5, number)
H135_MFDR_SoftKey_Right_6#(L:MFDR_SoftKey_Right_6, number) ! (>L:MFDR_SoftKey_Right_6, number)
H135_MFDR_SoftKey_Top_1#(L:MFDR_SoftKey_Top_1, number) ! (>L:MFDR_SoftKey_Top_1, number)
H135_MFDR_SoftKey_Top_2#(L:MFDR_SoftKey_Top_2, number) ! (>L:MFDR_SoftKey_Top_2, number)
H135_MFDR_SoftKey_Top_3#(L:MFDR_SoftKey_Top_3, number) ! (>L:MFDR_SoftKey_Top_3, number)
H135_MFDR_SoftKey_Top_4#(L:MFDR_SoftKey_Top_4, number) ! (>L:MFDR_SoftKey_Top_4, number)
H135_MFDR_SoftKey_Top_5#(L:MFDR_SoftKey_Top_5, number) ! (>L:MFDR_SoftKey_Top_5, number)
H135_MFDR_SoftKey_Top_6#(L:MFDR_SoftKey_Top_6, number) ! (>L:MFDR_SoftKey_Top_6, number)
H135_Right_Lower_MFD#(L:GTN_RIGHT_ON) ! (>L:GTN_RIGHT_ON)
//Hype Performance Group/H135/Engines
H135_Engine1_Down#(L:Engine1_Down, bool) ! (>L:Engine1_Down, bool)
H135_Engine2_Down#(L:Engine2_Down, bool) ! (>L:Engine2_Down, bool)
H135_Engine2_Up#(L:Engine2_Up, bool) ! (>L:Engine2_Up, bool)
//Hype Performance Group/H135/Miscellaneous
H135_MFDC_Knob_Down#(L:MFDC_Knob_Down, bool) ! (>L:MFDC_Knob_Down, bool)
H135_MFDC_Knob_Up#(L:MFDC_Knob_Up, bool) ! (>L:MFDC_Knob_Up, bool)
H135_MFDC_SoftKey_Right_BRT_Down#(L:Bright_Down, bool) ! (>L:Bright_Down, bool)
H135_MFDC_SoftKey_Right_BRT_Up#(L:Bright_Up, bool) ! (>L:Bright_Up, bool)
H135_MFDL_Knob_Down#(L:MFDL_Knob_Down, bool) ! (>L:MFDL_Knob_Down, bool)
H135_MFDL_Knob_Up#(L:MFDL_Knob_Up, bool) ! (>L:MFDL_Knob_Up, bool)
H135_MFDL_SoftKey_Right_BRT_Down#(L:Bright_Down, bool) ! (>L:Bright_Down, bool)
H135_MFDL_SoftKey_Right_BRT_Up#(L:Bright_Up, bool) ! (>L:Bright_Up, bool)
H135_MFDR_Knob_Down#(L:MFDR_Knob_Down, bool) ! (>L:MFDR_Knob_Down, bool)
H135_MFDR_Knob_Up#(L:MFDR_Knob_Up, bool) ! (>L:MFDR_Knob_Up, bool)
H135_MFDR_SoftKey_Right_BRT_Down#(L:Bright_Down, bool) ! (>L:Bright_Down, bool)
H135_MFDR_SoftKey_Right_BRT_Up#(L:Bright_Up, bool) ! (>L:Bright_Up, bool)
H135_Search_Light#(L:SPOTLIGHT_MODE, bool) ! (>L:SPOTLIGHT_MODE, bool)
H135_Tablet_Open#(L:TABLET_OPEN, bool) ! (>L:TABLET_OPEN, bool)
H135_Turbo_Mode#(L:TURBO_MODE) ! (>L:TURBO_MODE)
//Hype Performance Group/H135/Passengers/Crew
H135_Pilot_0_Show#(L:PILOT_1_SHOW, bool) ! (>L:PILOT_0_SHOW, bool)
H135_Pilot_1_Show#(L:PILOT_1_SHOW, bool) ! (>L:PILOT_1_SHOW, bool)
//JustFlight/Piper Arrow III/Autopilot
AUTOPILOT_HDG_Mode_ON_PRESS#2 (>L:AUTOPILOT_mode)
AUTOPILOT_LOC_NORM_Mode_ON_PRESS#3 (>L:AUTOPILOT_mode)
AUTOPILOT_LOC_REV_Mode_ON_PRESS#4 (>L:AUTOPILOT_mode)
AUTOPILOT_Nav_Mode_ON_PRESS#0 (>L:AUTOPILOT_mode)
AUTOPILOT_Omni_Mode_ON_PRESS#1 (>L:AUTOPILOT_mode)
AUTOPILOT_alt_ON_PRESS#1 (>L:AUTOPILOT_alt)
AUTOPILOT_hdg_OFF_PRESS#0 (>L:AUTOPILOT_hdg)
AUTOPILOT_hdg_ON_PRESS#1 (>L:AUTOPILOT_hdg)
AUTOPILOT_navgps_ON_PRESS#1 (>L:AUTOPILOT_navgps)
AUTOPILOT_off#0 (>L:AUTOPILOT_onoff)
AUTOPILOT_on#1 (>L:AUTOPILOT_onoff)
//JustFlight/Piper Arrow III/EFIS
ALT_baro_knob_left#(L:ALTIMETER_baro_knob, enum) ++ 100 min (>L:ALTIMETER_baro_knob, enum) (>K:KOHLSMAN_INC) (L:ALTIMETER_baro_knob, enum) 100 == if{ 0 (>L:ALTIMETER_baro_knob, enum) }
ALT_baro_knob_right#(L:ALTIMETER_baro_knob, enum) -- 0 max (>L:ALTIMETER_baro_knob, enum) (>K:KOHLSMAN_DEC) (L:ALTIMETER_baro_knob, enum) 0 == if{ 100 (>L:ALTIMETER_baro_knob, enum) }
//JustFlight/Piper Arrow III/Electrical
_Circuit_Breaker_-ON#1 (>L:CIRCUIT_BREAKERS_autopilot, bool) 
CENTRE_LOWER_bat_ON_PRESS#1 (>L:CENTRE_LOWER_bat)
CENTRE_LOWER_bat_ON_RELEASE#0 (>L:CENTRE_LOWER_bat)
Center_Lower_Alternator_OFF#0 (>L:center_lower_alt)
Center_Lower_Alternator_ON#1 (>L:CENTRE_LOWER_alt)
//JustFlight/Piper Arrow III/Engines
EGT_knob_left#(L:RIGHT_LOWER_egt_knob, enum) ++ 100 % (>L:RIGHT_LOWER_egt_knob, enum)
EGT_knob_right#(L:RIGHT_LOWER_egt_knob, enum) -- (>L:RIGHT_LOWER_egt_knob, enum) (L:RIGHT_LOWER_egt_knob, enum) 0 < if{ 99 (>L:RIGHT_LOWER_egt_knob, enum) }
THROTTLE_QUADRANT_mixture_lock_ON_PRESS#1 (>L:THROTTLE_QUADRANT_mixture_lock)
THROTTLE_QUADRANT_mixture_lock_ON_RELEASE#0 (>L:THROTTLE_QUADRANT_mixture_lock)
//JustFlight/Piper Arrow III/Environment
Electronic_Flight_Board#1 (>L:EFB_On_Switch) (L:EFB_On, bool) ! (>L:EFB_On, bool)
//JustFlight/Piper Arrow III/Gear
Emergency_gear_down#0 (>L:LOWER_emergency_gear)
Emergency_gear_off#1 (>L:LOWER_emergency_gear)
Emergency_gear_on#2 (>L:LOWER_emergency_gear)
//JustFlight/Piper Arrow III/Radio
KX170_COMM1_inner_knob_left#(L:KX170_COMM1_inner_knob, enum) ++ 100 % (>L:KX170_COMM1_inner_knob, enum)
KX170_COMM1_inner_knob_right#(L:KX170_COMM1_inner_knob, enum) -- (>L:KX170_COMM1_inner_knob, enum) (L:KX170_COMM1_inner_knob, enum) 0 < if{ 99 (>L:KX170_COMM1_inner_knob, enum) }
KX170_COMM1_outer_knob_left#(L:KX170_COMM1_outer_knob, enum) ++ 100 % (>L:KX170_COMM1_outer_knob, enum)
KX170_COMM1_outer_knob_right#(L:KX170_COMM1_outer_knob, enum) -- (>L:KX170_COMM1_outer_knob, enum) (L:KX170_COMM1_outer_knob, enum) 0 < if{ 99 (>L:KX170_COMM1_outer_knob, enum) }
KX170_NAV1_inner_knob_left#(L:KX170_NAV1_inner_knob, enum) ++ 100 % (>L:KX170_NAV1_inner_knob, enum)
KX170_NAV1_inner_knob_right#(L:KX170_NAV1_inner_knob, enum) -- (>L:KX170_NAV1_inner_knob, enum) (L:KX170_NAV1_inner_knob, enum) 0 < if{ 99 (>L:KX170_NAV1_inner_knob, enum) }
KX170_NAV1_outer_knob_left#(L:KX170_NAV1_outer_knob, enum) ++ 100 % (>L:KX170_NAV1_outer_knob, enum)
KX170_NAV1_outer_knob_right#(L:KX170_NAV1_outer_knob, enum) -- (>L:KX170_NAV1_outer_knob, enum) (L:KX170_NAV1_outer_knob, enum) 0 < if{ 99 (>L:KX170_NAV1_outer_knob, enum) }
KX175_COMM2_inner_knob_left#(L:KX175_COMM2_inner_knob, enum) ++ 100 % (>L:KX175_COMM2_inner_knob, enum)
KX175_COMM2_inner_knob_right#(L:KX175_COMM2_inner_knob, enum) -- (>L:KX175_COMM2_inner_knob, enum) (L:KX175_COMM2_inner_knob, enum) 0 < if{ 99 (>L:KX175_COMM2_inner_knob, enum) }
KX175_COMM2_outer_knob_left#(L:KX175_COMM2_outer_knob, enum) ++ 100 % (>L:KX175_COMM2_outer_knob, enum)
KX175_COMM2_outer_knob_right#(L:KX175_COMM2_outer_knob, enum) -- (>L:KX175_COMM2_outer_knob, enum) (L:KX175_COMM2_outer_knob, enum) 0 < if{ 99 (>L:KX175_COMM2_outer_knob, enum) }
KX175_NAV2_inner_knob_left#(L:KX175_NAV2_inner_knob, enum) ++ 100 % (>L:KX175_NAV2_inner_knob, enum)
KX175_NAV2_inner_knob_right#(L:KX175_NAV2_inner_knob, enum) -- (>L:KX175_NAV2_inner_knob, enum) (L:KX175_NAV2_inner_knob, enum) 0 < if{ 99 (>L:KX175_NAV2_inner_knob, enum) }
KX175_NAV2_outer_knob_left#(L:KX175_NAV2_outer_knob, enum) ++ 100 % (>L:KX175_NAV2_outer_knob, enum)
KX175_NAV2_outer_knob_right#(L:KX175_NAV2_outer_knob, enum) -- (>L:KX175_NAV2_outer_knob, enum) (L:KX175_NAV2_outer_knob, enum) 0 < if{ 99 (>L:KX175_NAV2_outer_knob, enum) }
//Microsoft/G1000 NXi/Avionics
AS1000_VNAV_TOGGLE#(>H:AS1000_VNAV_TOGGLE)
//Microsoft/Generic/Anti-Ice
ANTI_ICE_ON#(>K:ANTI_ICE_ON)
ANTI_ICE_TOGGLE#(>K:ANTI_ICE_TOGGLE)
ANTI_ICE_TOGGLE_ENG1#(>K:ANTI_ICE_TOGGLE_ENG1)
ANTI_ICE_TOGGLE_ENG2#(>K:ANTI_ICE_TOGGLE_ENG2)
ANTI_ICE_TOGGLE_ENG3#(>K:ANTI_ICE_TOGGLE_ENG3)
ANTI_ICE_TOGGLE_ENG4#(>K:ANTI_ICE_TOGGLE_ENG4)
PITOT_HEAT_OFF#(>K:PITOT_HEAT_OFF)
PITOT_HEAT_ON#(>K:PITOT_HEAT_ON)
PITOT_HEAT_TOGGLE#(>K:PITOT_HEAT_TOGGLE)
TOGGLE_WINDSHIELD_De-Ice#(>K:WINDSHIELD_DEICE_TOGGLE)
TOGGLE_PITOT_BLOCKAGE#(>K:TOGGLE_PITOT_BLOCKAGE)
TOGGLE_PROPELLER_DEICE#(>K:TOGGLE_PROPELLER_DEICE)
TOGGLE_STRUCTURAL_DEICE#(>K:TOGGLE_STRUCTURAL_DEICE)
//Microsoft/Generic/Autopilot
AP_AIRSPEED_HOLD#(>K:AP_AIRSPEED_HOLD)
AP_AIRSPEED_OFF#(>K:AP_AIRSPEED_OFF)
AP_AIRSPEED_ON#(>K:AP_AIRSPEED_ON)
AP_ALT_HOLD#(>K:AP_ALT_HOLD)
AP_ALT_HOLD_OFF#(>K:AP_ALT_HOLD_OFF)
AP_ALT_HOLD_ON#(>K:AP_ALT_HOLD_ON)
AP_ALT_VAR_DEC#(>K:AP_ALT_VAR_DEC)
AP_ALT_VAR_INC#(>K:AP_ALT_VAR_INC)
AP_APR_HOLD#(>K:AP_APR_HOLD)
AP_APR_HOLD_OFF#(>K:AP_APR_HOLD_OFF)
AP_APR_HOLD_ON#(>K:AP_APR_HOLD_ON)
AP_ATT_HOLD#(>K:AP_ATT_HOLD)
AP_ATT_HOLD_OFF#(>K:AP_ATT_HOLD_OFF)
AP_ATT_HOLD_ON#(>K:AP_ATT_HOLD_ON)
AP_BC_HOLD#(>K:AP_BC_HOLD)
AP_BC_HOLD_OFF#(>K:AP_BC_HOLD_OFF)
AP_BC_HOLD_ON#(>K:AP_BC_HOLD_ON)
AP_HDG_HOLD#(>K:AP_HDG_HOLD)
AP_HDG_HOLD_OFF#(>K:AP_HDG_HOLD_OFF)
AP_HDG_HOLD_ON#(>K:AP_HDG_HOLD_ON)
AP_LOC_HOLD#(>K:AP_LOC_HOLD)
AP_LOC_HOLD_OFF#(>K:AP_LOC_HOLD_OFF)
AP_LOC_HOLD_ON#(>K:AP_LOC_HOLD_ON)
AP_MACH_HOLD#(>K:AP_MACH_HOLD)
AP_MACH_OFF#(>K:AP_MACH_OFF)
AP_MACH_ON#(>K:AP_MACH_ON)
AP_MACH_VAR_DEC#(>K:AP_MACH_VAR_DEC)
AP_MACH_VAR_INC#(>K:AP_MACH_VAR_INC)
AP_MASTER#(>K:AP_MASTER)
AP_MAX_BANK_DEC#(>K:AP_MAX_BANK_DEC)
AP_MAX_BANK_INC#(>K:AP_MAX_BANK_INC)
AP_N1_HOLD#(>K:AP_N1_HOLD)
AP_N1_REF_DEC#(>K:AP_N1_REF_DEC)
AP_N1_REF_INC#(>K:AP_N1_REF_INC)
AP_NAV1_HOLD#(>K:AP_NAV1_HOLD)
AP_NAV1_HOLD_OFF#(>K:AP_NAV1_HOLD_OFF)
AP_NAV1_HOLD_ON#(>K:AP_NAV1_HOLD_ON)
AP_PANEL_ALTITUDE_HOLD#(>K:AP_PANEL_ALTITUDE_HOLD)
AP_PANEL_ALTITUDE_OFF#(>K:AP_PANEL_ALTITUDE_OFF)
AP_PANEL_ALTITUDE_ON#(>K:AP_PANEL_ALTITUDE_ON)
AP_PANEL_HEADING_HOLD#(>K:AP_PANEL_HEADING_HOLD)
AP_PANEL_HEADING_OFF#(>K:AP_PANEL_HEADING_OFF)
AP_PANEL_HEADING_ON#(>K:AP_PANEL_HEADING_ON)
AP_PANEL_MACH_HOLD#(>K:AP_PANEL_MACH_HOLD)
AP_PANEL_MACH_HOLD_TOGGLE#(>K:AP_PANEL_MACH_HOLD_TOGGLE)
AP_PANEL_MACH_OFF#(>K:AP_PANEL_MACH_OFF)
AP_PANEL_MACH_ON#(>K:AP_PANEL_MACH_ON)
AP_PANEL_SPEED_HOLD#(>K:AP_PANEL_SPEED_HOLD)
AP_PANEL_SPEED_HOLD_TOGGLE#(>K:AP_PANEL_SPEED_HOLD_TOGGLE)
AP_PANEL_SPEED_OFF#(>K:AP_PANEL_SPEED_OFF)
AP_PANEL_SPEED_ON#(>K:AP_PANEL_SPEED_ON)
AP_PANEL_VS_HOLD#(>K:AP_PANEL_VS_HOLD)
AP_PITCH_REF_INC_DN#(>K:AP_PITCH_REF_INC_DN)
AP_PITCH_REF_INC_UP#(>K:AP_PITCH_REF_INC_UP)
AP_PITCH_REF_SELECT#(>K:AP_PITCH_REF_SELECT)
AP_SPD_VAR_DEC#(>K:AP_SPD_VAR_DEC)
AP_SPD_VAR_INC#(>K:AP_SPD_VAR_INC)
AP_VS_VAR_DEC#(>K:AP_VS_VAR_DEC)
AP_VS_VAR_INC#(>K:AP_VS_VAR_INC)
AP_WING_LEVELER#(>K:AP_WING_LEVELER)
AP_WING_LEVELER_OFF#(>K:AP_WING_LEVELER_OFF)
AP_WING_LEVELER_ON#(>K:AP_WING_LEVELER_ON)
AUTOPILOT_OFF#(>K:AUTOPILOT_OFF)
AUTOPILOT_ON#(>K:AUTOPILOT_ON)
SYNC_FLIGHT_DIRECTOR_PITCH#(>K:SYNC_FLIGHT_DIRECTOR_PITCH)
TOGGLE_FLIGHT_DIRECTOR#(>K:TOGGLE_FLIGHT_DIRECTOR)
YAW_DAMPER_OFF#(>K:YAW_DAMPER_OFF)
YAW_DAMPER_ON#(>K:YAW_DAMPER_ON)
YAW_DAMPER_TOGGLE#(>K:YAW_DAMPER_TOGGLE)
//Microsoft/Generic/Avionics
_AS3X_Touch_1_Back_Push#(>H:AS3X_Touch_1_Back_Push)
_AS3X_Touch_1_DirectTo_Push#(>H:AS3X_Touch_1_DirectTo_Push)
_AS3X_Touch_1_Knob_Inner_L_DEC#(>H:AS3X_Touch_1_Knob_Inner_L_DEC)
_AS3X_Touch_1_Knob_Inner_R_DEC#(>H:AS3X_Touch_1_Knob_Inner_R_DEC)
_AS3X_Touch_1_Knob_Inner_R_INC#(>H:AS3X_Touch_1_Knob_Inner_R_INC)
_AS3X_Touch_1_Knob_Outer_L_DEC#(>H:AS3X_Touch_1_Knob_Outer_L_DEC)
_AS3X_Touch_1_Knob_Outer_L_INC#(>H:AS3X_Touch_1_Knob_Outer_L_INC)
_AS3X_Touch_1_Knob_Outer_R_DEC#(>H:AS3X_Touch_1_Knob_Outer_R_DEC)
_AS3X_Touch_1_Knob_Outer_R_INC#(>H:AS3X_Touch_1_Knob_Outer_R_INC)
_AS3X_Touch_1_Menu_Push#(>H:AS3X_Touch_1_Menu_Push)
_AS3X_Touch_1_NRST_Push#(>H:AS3X_Touch_1_NRST_Push)
AS1000_AP_ALT_DEC_100# (A:AUTOPILOT ALTITUDE LOCK VAR, feet) 100 - (>K:AP_ALT_VAR_SET_ENGLISH) (>H:AP_KNOB_Up)
AS1000_AP_ALT_DEC_1000# (A:AUTOPILOT ALTITUDE LOCK VAR, feet) 1000 - (>K:AP_ALT_VAR_SET_ENGLISH) (>H:AP_KNOB_Up)
AS1000_AP_ALT_INC_100# (A:AUTOPILOT ALTITUDE LOCK VAR, feet) 100 + (>K:AP_ALT_VAR_SET_ENGLISH) (>H:AP_KNOB_Up)
AS1000_AP_ALT_INC_1000# (A:AUTOPILOT ALTITUDE LOCK VAR, feet) 1000 + (>K:AP_ALT_VAR_SET_ENGLISH) (>H:AP_KNOB_Up)
AS1000_AP_ALT_SYNC#(A:INDICATED ALTITUDE, feet) (>K:AP_ALT_VAR_SET_ENGLISH) (>H:AP_KNOB)
AS1000_AP_VNAV_Push#(L:XMLVAR_VNAVButtonValue, Bool) ! (>L:XMLVAR_VNAVButtonValue)
AS1000_MFD_ActivateMapCursor#(>H:AS1000_MFD_ActivateMapCursor)
AS1000_MFD_BARO_DEC#(>H:AS1000_MFD_BARO_DEC)
AS1000_MFD_BARO_INC#(>H:AS1000_MFD_BARO_INC)
AS1000_MFD_CLR#(>H:AS1000_MFD_CLR)
AS1000_MFD_CLR_Long#(>H:AS1000_MFD_CLR_Long)
AS1000_MFD_COM_Large_DEC#(>H:AS1000_MFD_COM_Large_DEC)
AS1000_MFD_COM_Large_INC#(>H:AS1000_MFD_COM_Large_INC)
AS1000_MFD_COM_Push#(>H:AS1000_MFD_COM_Push)
AS1000_MFD_COM_Small_DEC#(>H:AS1000_MFD_COM_Small_DEC)
AS1000_MFD_COM_Small_INC#(>H:AS1000_MFD_COM_Small_INC)
AS1000_MFD_COM_Switch#(>H:AS1000_MFD_COM_Switch)
AS1000_MFD_COM_Switch_Long#(>H:AS1000_MFD_COM_Switch_Long)
AS1000_MFD_CRS_DEC#(>H:AS1000_MFD_CRS_DEC)
AS1000_MFD_CRS_INC#(>H:AS1000_MFD_CRS_INC)
AS1000_MFD_CRS_PUSH#(>H:AS1000_MFD_CRS_PUSH)
AS1000_MFD_DIRECTTO#(>H:AS1000_MFD_DIRECTTO)
AS1000_MFD_DeactivateMapCursor#(>H:AS1000_MFD_DeactivateMapCursor)
AS1000_MFD_ENT_Push#(>H:AS1000_MFD_ENT_Push)
AS1000_MFD_FLC_Push#(>K:FLIGHT_LEVEL_CHANGE) (A:AIRSPEED INDICATED, knots) (>K:AP_SPD_VAR_SET)
AS1000_MFD_FLIGHT_DIRECTOR_PUSH#(A:AUTOPILOT MASTER, Bool) ! if{ 1 (>K:TOGGLE_FLIGHT_DIRECTOR) }
AS1000_MFD_FMS_Lower_DEC#(>H:AS1000_MFD_FMS_Lower_DEC)
AS1000_MFD_FMS_Lower_INC#(>H:AS1000_MFD_FMS_Lower_INC)
AS1000_MFD_FMS_Upper_DEC#(>H:AS1000_MFD_FMS_Upper_DEC)
AS1000_MFD_FMS_Upper_INC#(>H:AS1000_MFD_FMS_Upper_INC)
AS1000_MFD_FMS_Upper_PUSH#(>H:AS1000_MFD_FMS_Upper_PUSH)
AS1000_MFD_FPL_Push#(>H:AS1000_MFD_FPL_Push)
AS1000_MFD_HEADING_DEC#1 (>K:HEADING_BUG_DEC)
AS1000_MFD_HEADING_FAST_DEC#(A:AUTOPILOT HEADING LOCK DIR:1, Degrees) 5 - dnor (>K:1:HEADING_BUG_SET)
AS1000_MFD_HEADING_FAST_INC#(A:AUTOPILOT HEADING LOCK DIR:1, Degrees) 5 + dnor (>K:1:HEADING_BUG_SET)
AS1000_MFD_HEADING_INC#1 (>K:HEADING_BUG_INC)
AS1000_MFD_HEADING_SYNC#(A:HEADING INDICATOR, degrees) (>K:HEADING_BUG_SET)
AS1000_MFD_JOYSTICK_DOWN#(>H:AS1000_MFD_JOYSTICK_DOWN)
AS1000_MFD_JOYSTICK_LEFT#(>H:AS1000_MFD_JOYSTICK_LEFT)
AS1000_MFD_JOYSTICK_PUSH#(>H:AS1000_MFD_JOYSTICK_PUSH)
AS1000_MFD_JOYSTICK_RIGHT#(>H:AS1000_MFD_JOYSTICK_RIGHT)
AS1000_MFD_JOYSTICK_UP#(>H:AS1000_MFD_JOYSTICK_UP)
AS1000_MFD_MENU_Push#(>H:AS1000_MFD_MENU_Push)
AS1000_MFD_NAV_Large_DEC#(>H:AS1000_MFD_NAV_Large_DEC)
AS1000_MFD_NAV_Large_INC#(>H:AS1000_MFD_NAV_Large_INC)
AS1000_MFD_NAV_Push#(>H:AS1000_MFD_NAV_Push)
AS1000_MFD_NAV_Small_DEC#(>H:AS1000_MFD_NAV_Small_DEC)
AS1000_MFD_NAV_Small_INC#(>H:AS1000_MFD_NAV_Small_INC)
AS1000_MFD_NAV_Switch#(>H:AS1000_MFD_NAV_Switch)
AS1000_MFD_NOSE_DN#(A:AUTOPILOT VERTICAL HOLD, Bool) if{ (>K:AP_VS_VAR_DEC) (>H:AP_UP) } (A:AUTOPILOT FLIGHT LEVEL CHANGE, Bool) if{ (>K:AP_SPD_VAR_INC) } (A:AUTOPILOT PITCH HOLD, Bool) if{ (>K:AP_PITCH_REF_INC_DN) }
AS1000_MFD_NOSE_UP#(A:AUTOPILOT VERTICAL HOLD, Bool) if{ (>K:AP_VS_VAR_INC) (>H:AP_DN) } (A:AUTOPILOT FLIGHT LEVEL CHANGE, Bool) if{ (>K:AP_SPD_VAR_DEC) } (A:AUTOPILOT PITCH HOLD, Bool) if{ (>K:AP_PITCH_REF_INC_UP) }
AS1000_MFD_PROC_Push#(>H:AS1000_MFD_PROC_Push)
AS1000_MFD_RANGE_DEC#(>H:AS1000_MFD_RANGE_DEC)
AS1000_MFD_RANGE_INC#(>H:AS1000_MFD_RANGE_INC)
AS1000_MFD_SOFTKEYS_1#(>H:AS1000_MFD_SOFTKEYS_1)
AS1000_MFD_SOFTKEYS_10#(>H:AS1000_MFD_SOFTKEYS_10)
AS1000_MFD_SOFTKEYS_11#(>H:AS1000_MFD_SOFTKEYS_11)
AS1000_MFD_SOFTKEYS_12#(>H:AS1000_MFD_SOFTKEYS_12)
AS1000_MFD_SOFTKEYS_2#(>H:AS1000_MFD_SOFTKEYS_2)
AS1000_MFD_SOFTKEYS_3#(>H:AS1000_MFD_SOFTKEYS_3)
AS1000_MFD_SOFTKEYS_4#(>H:AS1000_MFD_SOFTKEYS_4)
AS1000_MFD_SOFTKEYS_5#(>H:AS1000_MFD_SOFTKEYS_5)
AS1000_MFD_SOFTKEYS_6#(>H:AS1000_MFD_SOFTKEYS_6)
AS1000_MFD_SOFTKEYS_7#(>H:AS1000_MFD_SOFTKEYS_7)
AS1000_MFD_SOFTKEYS_8#(>H:AS1000_MFD_SOFTKEYS_8)
AS1000_MFD_SOFTKEYS_9#(>H:AS1000_MFD_SOFTKEYS_9)
AS1000_MFD_VOL_1_DEC#(>H:AS1000_MFD_VOL_1_DEC)
AS1000_MFD_VOL_1_INC#(>H:AS1000_MFD_VOL_1_INC)
AS1000_MFD_VOL_2_DEC#(>H:AS1000_MFD_VOL_2_DEC)
AS1000_MFD_VOL_2_INC#(>H:AS1000_MFD_VOL_2_INC)
AS1000_MID_ADF_Push#(>H:AS1000_MID_ADF_Push)
AS1000_MID_AUX_Push#(>H:AS1000_MID_AUX_Push)
AS1000_MID_COM_1_Push#(>H:AS1000_MID_COM_1_Push)
AS1000_MID_COM_2_Push#(>H:AS1000_MID_COM_2_Push)
AS1000_MID_COM_3_Push#(>H:AS1000_MID_COM_3_Push)
AS1000_MID_COM_Mic_1_Push#(>H:AS1000_MID_COM_Mic_1_Push)
AS1000_MID_COM_Mic_2_Push#(>H:AS1000_MID_COM_Mic_2_Push)
AS1000_MID_COM_Mic_3_Push#(>H:AS1000_MID_COM_Mic_3_Push)
AS1000_MID_COM_Swap_1_2_Push#(>H:AS1000_MID_COM_Swap_1_2_Push)
AS1000_MID_DME_Push#(>H:AS1000_MID_DME_Push)
AS1000_MID_Display_Backup_Push#(>H:AS1000_MID_Display_Backup_Push)
AS1000_MID_HI_SENS_Push#(>H:AS1000_MID_HI_SENS_Push)
AS1000_MID_Isolate_Copilot_Push#(>H:AS1000_MID_Isolate_Copilot_Push)
AS1000_MID_Isolate_Pilot_Push#(>H:AS1000_MID_Isolate_Pilot_Push)
AS1000_MID_MAN_SQ_Push#(>H:AS1000_MID_MAN_SQ_Push)
AS1000_MID_MKR_Mute_Push#(>H:AS1000_MID_MKR_Mute_Push)
AS1000_MID_NAV_1_Push#(>H:AS1000_MID_NAV_1_Push)
AS1000_MID_NAV_2_Push#(>H:AS1000_MID_NAV_2_Push)
AS1000_MID_PA_Push#(>H:AS1000_MID_PA_Push)
AS1000_MID_Pass_Copilot_DEC#(>H:AS1000_MID_Pass_Copilot_DEC)
AS1000_MID_Pass_Copilot_INC#(>H:AS1000_MID_Pass_Copilot_INC)
AS1000_MID_Play_Push#(>H:AS1000_MID_Play_Push)
AS1000_MID_SPKR_Push#(>H:AS1000_MID_SPKR_Push)
AS1000_MID_TEL_Push#(>H:AS1000_MID_TEL_Push)
AS1000_PFD_ActivateMapCursor#(>H:AS1000_PFD_ActivateMapCursor)
AS1000_PFD_BARO_DEC#(>H:AS1000_PFD_BARO_DEC)
AS1000_PFD_BARO_INC#(>H:AS1000_PFD_BARO_INC)
AS1000_PFD_CLR#(>H:AS1000_PFD_CLR)
AS1000_PFD_CLR_Long#(>H:AS1000_PFD_CLR_Long)
AS1000_PFD_COM_Large_DEC#(>H:AS1000_PFD_COM_Large_DEC)
AS1000_PFD_COM_Large_INC#(>H:AS1000_PFD_COM_Large_INC)
AS1000_PFD_COM_Push#(>H:AS1000_PFD_COM_Push)
AS1000_PFD_COM_Small_DEC#(>H:AS1000_PFD_COM_Small_DEC)
AS1000_PFD_COM_Small_INC#(>H:AS1000_PFD_COM_Small_INC)
AS1000_PFD_COM_Switch#(>H:AS1000_PFD_COM_Switch)
AS1000_PFD_COM_Switch_Long#(>H:AS1000_PFD_COM_Switch_Long)
AS1000_PFD_CRS_DEC#(>H:AS1000_PFD_CRS_DEC)
AS1000_PFD_CRS_INC#(>H:AS1000_PFD_CRS_INC)
AS1000_PFD_CRS_PUSH#(>H:AS1000_PFD_CRS_PUSH)
AS1000_PFD_DIRECTTO#(>H:AS1000_PFD_DIRECTTO)
AS1000_PFD_DeactivateMapCursor#(>H:AS1000_PFD_DeactivateMapCursor)
AS1000_PFD_ENT_Push#(>H:AS1000_PFD_ENT_Push)
AS1000_PFD_FMS_Lower_DEC#(>H:AS1000_PFD_FMS_Lower_DEC)
AS1000_PFD_FMS_Lower_INC#(>H:AS1000_PFD_FMS_Lower_INC)
AS1000_PFD_FMS_Upper_DEC#(>H:AS1000_PFD_FMS_Upper_DEC)
AS1000_PFD_FMS_Upper_INC#(>H:AS1000_PFD_FMS_Upper_INC)
AS1000_PFD_FMS_Upper_PUSH#(>H:AS1000_PFD_FMS_Upper_PUSH)
AS1000_PFD_FPL_Push#(>H:AS1000_PFD_FPL_Push)
AS1000_PFD_HEADING_DEC#1 (>K:HEADING_BUG_DEC)
AS1000_PFD_HEADING_FAST_DEC#(A:AUTOPILOT HEADING LOCK DIR:1, Degrees) 5 - dnor (>K:1:HEADING_BUG_SET)
AS1000_PFD_HEADING_FAST_INC#(A:AUTOPILOT HEADING LOCK DIR:1, Degrees) 5 + dnor (>K:1:HEADING_BUG_SET)
AS1000_PFD_HEADING_INC#1 (>K:HEADING_BUG_INC)
AS1000_PFD_HEADING_SYNC#(A:HEADING INDICATOR, degrees) (>K:HEADING_BUG_SET)
AS1000_PFD_JOYSTICK_DOWN#(>H:AS1000_PFD_JOYSTICK_DOWN)
AS1000_PFD_JOYSTICK_LEFT#(>H:AS1000_PFD_JOYSTICK_LEFT)
AS1000_PFD_JOYSTICK_PUSH#(>H:AS1000_PFD_JOYSTICK_PUSH)
AS1000_PFD_JOYSTICK_RIGHT#(>H:AS1000_PFD_JOYSTICK_RIGHT)
AS1000_PFD_JOYSTICK_UP#(>H:AS1000_PFD_JOYSTICK_UP)
AS1000_PFD_MENU_Push#(>H:AS1000_PFD_MENU_Push)
AS1000_PFD_NAV_Large_DEC#(>H:AS1000_PFD_NAV_Large_DEC)
AS1000_PFD_NAV_Large_INC#(>H:AS1000_PFD_NAV_Large_INC)
AS1000_PFD_NAV_Push#(>H:AS1000_PFD_NAV_Push)
AS1000_PFD_NAV_Small_DEC#(>H:AS1000_PFD_NAV_Small_DEC)
AS1000_PFD_NAV_Small_INC#(>H:AS1000_PFD_NAV_Small_INC)
AS1000_PFD_NAV_Switch#(>H:AS1000_PFD_NAV_Switch)
AS1000_PFD_PROC_Push#(>H:AS1000_PFD_PROC_Push)
AS1000_PFD_RANGE_DEC#(>H:AS1000_PFD_RANGE_DEC)
AS1000_PFD_RANGE_INC#(>H:AS1000_PFD_RANGE_INC)
AS1000_PFD_SOFTKEYS_1#(>H:AS1000_PFD_SOFTKEYS_1)
AS1000_PFD_SOFTKEYS_10#(>H:AS1000_PFD_SOFTKEYS_10)
AS1000_PFD_SOFTKEYS_11#(>H:AS1000_PFD_SOFTKEYS_11)
AS1000_PFD_SOFTKEYS_12#(>H:AS1000_PFD_SOFTKEYS_12)
AS1000_PFD_SOFTKEYS_2#(>H:AS1000_PFD_SOFTKEYS_2)
AS1000_PFD_SOFTKEYS_3#(>H:AS1000_PFD_SOFTKEYS_3)
AS1000_PFD_SOFTKEYS_4#(>H:AS1000_PFD_SOFTKEYS_4)
AS1000_PFD_SOFTKEYS_5#(>H:AS1000_PFD_SOFTKEYS_5)
AS1000_PFD_SOFTKEYS_6#(>H:AS1000_PFD_SOFTKEYS_6)
AS1000_PFD_SOFTKEYS_7#(>H:AS1000_PFD_SOFTKEYS_7)
AS1000_PFD_SOFTKEYS_8#(>H:AS1000_PFD_SOFTKEYS_8)
AS1000_PFD_SOFTKEYS_9#(>H:AS1000_PFD_SOFTKEYS_9)
AS1000_PFD_VOL_1_DEC#(>H:AS1000_PFD_VOL_1_DEC)
AS1000_PFD_VOL_1_INC#(>H:AS1000_PFD_VOL_1_INC)
AS1000_PFD_VOL_2_DEC#(>H:AS1000_PFD_VOL_2_DEC)
AS1000_PFD_VOL_2_INC#(>H:AS1000_PFD_VOL_2_INC)
AS3000_MFD_SOFTKEYS_1#(>H:AS3000_MFD_SOFTKEYS_1)
AS3000_MFD_SOFTKEYS_10#(>H:AS3000_MFD_SOFTKEYS_10)
AS3000_MFD_SOFTKEYS_11#(>H:AS3000_MFD_SOFTKEYS_11)
AS3000_MFD_SOFTKEYS_12#(>H:AS3000_MFD_SOFTKEYS_12)
AS3000_MFD_SOFTKEYS_2#(>H:AS3000_MFD_SOFTKEYS_2)
AS3000_MFD_SOFTKEYS_3#(>H:AS3000_MFD_SOFTKEYS_3)
AS3000_MFD_SOFTKEYS_4#(>H:AS3000_MFD_SOFTKEYS_4)
AS3000_MFD_SOFTKEYS_5#(>H:AS3000_MFD_SOFTKEYS_5)
AS3000_MFD_SOFTKEYS_6#(>H:AS3000_MFD_SOFTKEYS_6)
AS3000_MFD_SOFTKEYS_7#(>H:AS3000_MFD_SOFTKEYS_7)
AS3000_MFD_SOFTKEYS_8#(>H:AS3000_MFD_SOFTKEYS_8)
AS3000_MFD_SOFTKEYS_9#(>H:AS3000_MFD_SOFTKEYS_9)
AS3000_PFD_BottomKnob_Large_DEC#(>H:AS3000_PFD_BottomKnob_Large_DEC)
AS3000_PFD_BottomKnob_Large_INC#(>H:AS3000_PFD_BottomKnob_Large_INC)
AS3000_PFD_BottomKnob_Push#(>H:AS3000_PFD_BottomKnob_Push)
AS3000_PFD_BottomKnob_Push_Long#(>H:AS3000_PFD_BottomKnob_Push_Long)
AS3000_PFD_BottomKnob_Small_DEC#(>H:AS3000_PFD_BottomKnob_Small_DEC)
AS3000_PFD_BottomKnob_Small_INC#(>H:AS3000_PFD_BottomKnob_Small_INC)
AS3000_PFD_SOFTKEYS_1#(>H:AS3000_PFD_SOFTKEYS_1)
AS3000_PFD_SOFTKEYS_10#(>H:AS3000_PFD_SOFTKEYS_10)
AS3000_PFD_SOFTKEYS_11#(>H:AS3000_PFD_SOFTKEYS_11)
AS3000_PFD_SOFTKEYS_12#(>H:AS3000_PFD_SOFTKEYS_12)
AS3000_PFD_SOFTKEYS_2#(>H:AS3000_PFD_SOFTKEYS_2)
AS3000_PFD_SOFTKEYS_3#(>H:AS3000_PFD_SOFTKEYS_3)
AS3000_PFD_SOFTKEYS_4#(>H:AS3000_PFD_SOFTKEYS_4)
AS3000_PFD_SOFTKEYS_5#(>H:AS3000_PFD_SOFTKEYS_5)
AS3000_PFD_SOFTKEYS_6#(>H:AS3000_PFD_SOFTKEYS_6)
AS3000_PFD_SOFTKEYS_7#(>H:AS3000_PFD_SOFTKEYS_7)
AS3000_PFD_SOFTKEYS_8#(>H:AS3000_PFD_SOFTKEYS_8)
AS3000_PFD_SOFTKEYS_9#(>H:AS3000_PFD_SOFTKEYS_9)
AS3000_PFD_TopKnob_Large_DEC#(>H:AS3000_PFD_TopKnob_Large_DEC)
AS3000_PFD_TopKnob_Large_INC#(>H:AS3000_PFD_TopKnob_Large_INC)
AS3000_PFD_TopKnob_Small_DEC#(>H:AS3000_PFD_TopKnob_Small_DEC)
AS3000_PFD_TopKnob_Small_INC#(>H:AS3000_PFD_TopKnob_Small_INC)
AS3X_Touch_1_Knob_Inner_L_INC#(>H:AS3X_Touch_1_Knob_Inner_L_INC)
AS430_CLR_Push#(>H:AS430_CLR_Push)
AS430_CLR_Push_Long#(>H:AS430_CLR_Push_Long)
AS430_COMSWAP_Push#(>H:AS430_COMSWAP_Push)
AS430_DirectTo_Push#(>H:AS430_DirectTo_Push)
AS430_ENT_Push#(>H:AS430_ENT_Push)
AS430_FPL_Push#(>H:AS430_FPL_Push)
AS430_LeftLargeKnob_Left#(>H:AS430_LeftLargeKnob_Left)
AS430_LeftLargeKnob_Right#(>H:AS430_LeftLargeKnob_Right)
AS430_LeftSmallKnob_Left#(>H:AS430_LeftSmallKnob_Left)
AS430_LeftSmallKnob_Push#(>H:AS430_LeftSmallKnob_Push)
AS430_LeftSmallKnob_Right#(>H:AS430_LeftSmallKnob_Right)
AS430_MENU_Push#(>H:AS430_MENU_Push)
AS430_MSG_Push#(>H:AS430_MSG_Push)
AS430_NAVSWAP_Push#(>H:AS430_NAVSWAP_Push)
AS430_OBS_Push#(>H:AS430_OBS_Push)
AS430_PROC_Push#(>H:AS430_PROC_Push)
AS430_RNG_Dezoom#(>H:AS430_RNG_Dezoom)
AS430_RNG_Zoom#(>H:AS430_RNG_Zoom)
AS430_RightLargeKnob_Left#(>H:AS430_RightLargeKnob_Left)
AS430_RightLargeKnob_Right#(>H:AS430_RightLargeKnob_Right)
AS430_RightSmallKnob_Left#(>H:AS430_RightSmallKnob_Left)
AS430_RightSmallKnob_Push#(>H:AS430_RightSmallKnob_Push)
AS430_RightSmallKnob_Right#(>H:AS430_RightSmallKnob_Right)
AS530_CLR_Push#(>H:AS530_CLR_Push)
AS530_CLR_Push_Long#(>H:AS530_CLR_Push_Long)
AS530_COMSWAP_Push#(>H:AS530_COMSWAP_Push)
AS530_DirectTo_Push#(>H:AS530_DirectTo_Push)
AS530_ENT_Push#(>H:AS530_ENT_Push)
AS530_FPL_Push#(>H:AS530_FPL_Push)
AS530_LeftLargeKnob_Left#(>H:AS530_LeftLargeKnob_Left)
AS530_LeftLargeKnob_Right#(>H:AS530_LeftLargeKnob_Right)
AS530_LeftSmallKnob_Left#(>H:AS530_LeftSmallKnob_Left)
AS530_LeftSmallKnob_Push#(>H:AS530_LeftSmallKnob_Push)
AS530_LeftSmallKnob_Right#(>H:AS530_LeftSmallKnob_Right)
AS530_MENU_Push#(>H:AS530_MENU_Push)
AS530_MSG_Push#(>H:AS530_MSG_Push)
AS530_NAVSWAP_Push#(>H:AS530_NAVSWAP_Push)
AS530_OBS_Push#(>H:AS530_OBS_Push)
AS530_PROC_Push#(>H:AS530_PROC_Push)
AS530_RNG_Dezoom#(>H:AS530_RNG_Dezoom)
AS530_RNG_Zoom#(>H:AS530_RNG_Zoom)
AS530_RightLargeKnob_Left#(>H:AS530_RightLargeKnob_Left)
AS530_RightLargeKnob_Right#(>H:AS530_RightLargeKnob_Right)
AS530_RightSmallKnob_Left#(>H:AS530_RightSmallKnob_Left)
AS530_RightSmallKnob_Push#(>H:AS530_RightSmallKnob_Push)
AS530_RightSmallKnob_Right#(>H:AS530_RightSmallKnob_Right)
AS530_VNAV_Push#(>H:AS530_VNAV_Push)
KAP140_Knob_Inner_DEC#(>H:KAP140_Knob_Inner_DEC)
KAP140_Knob_Inner_INC#(>H:KAP140_Knob_Inner_INC)
KAP140_Knob_Outer_DEC#(>H:KAP140_Knob_Outer_DEC)
KAP140_Knob_Outer_INC#(>H:KAP140_Knob_Outer_INC)
KAP140_Long_Push_BARO#(>H:KAP140_Long_Push_BARO)
KAP140_Push_ALT#(>H:KAP140_Push_ALT)
KAP140_Push_AP#(>H:KAP140_Push_AP)
KAP140_Push_APR#(>H:KAP140_Push_APR)
KAP140_Push_ARM#(>H:KAP140_Push_ARM)
KAP140_Push_BARO#(>H:KAP140_Push_BARO)
KAP140_Push_DN#(>H:KAP140_Push_DN)
KAP140_Push_HDG#(>H:KAP140_Push_HDG)
KAP140_Push_NAV#(>H:KAP140_Push_NAV)
KAP140_Push_REV#(>H:KAP140_Push_REV)
KAP140_Push_UP#(>H:KAP140_Push_UP)
TOGGLE_AVIONICS_MASTER#(>K:TOGGLE_AVIONICS_MASTER)
Transponder0#(>H:Transponder0)
Transponder1#(>H:Transponder1)
Transponder2#(>H:Transponder2)
Transponder3#(>H:Transponder3)
Transponder4#(>H:Transponder4)
Transponder5#(>H:Transponder5)
Transponder6#(>H:Transponder6)
Transponder7#(>H:Transponder7)
TransponderALT#(>H:TransponderALT)
TransponderCLR#(>H:TransponderCLR)
TransponderIDT#(>H:TransponderIDT)
TransponderOFF#(>H:TransponderOFF)
TransponderON#(>H:TransponderON)
TransponderSTBY#(>H:TransponderSTBY)
TransponderTST#(>H:TransponderTST)
TransponderVFR#(>H:TransponderVFR)
adf_AntAdf#(>H:adf_AntAdf)
adf_FltEt#(>H:adf_FltEt)
adf_SetRst#(>H:adf_SetRst)
adf_bfo#(>H:adf_bfo)
adf_frqTransfert#(>H:adf_frqTransfert)
oclock_control#(>H:oclock_control)
oclock_control_long#(>H:oclock_control_long)
oclock_oat#(>H:oclock_oat)
oclock_select#(>H:oclock_select)
//Microsoft/Generic/Camera
CAPTURE_SCREENSHOT#(>K:CAPTURE_SCREENSHOT)
CHASE_VIEW_NEXT#(>K:CHASE_VIEW_NEXT)
CHASE_VIEW_PREV#(>K:CHASE_VIEW_PREV)
CHASE_VIEW_TOGGLE#(>K:CHASE_VIEW_TOGGLE)
CLOSE_VIEW#(>K:CLOSE_VIEW)
EYEPOINT_BACK#(>K:EYEPOINT_BACK)
EYEPOINT_DOWN#(>K:EYEPOINT_DOWN)
EYEPOINT_FORWARD#(>K:EYEPOINT_FORWARD)
EYEPOINT_LEFT#(>K:EYEPOINT_LEFT)
EYEPOINT_RIGHT#(>K:EYEPOINT_RIGHT)
EYEPOINT_UP#(>K:EYEPOINT_UP)
KNEEBOARD_VIEW#(>K:KNEEBOARD_VIEW)
NEW_VIEW#(>K:NEW_VIEW)
NEXT_SUB_VIEW#(>K:NEXT_SUB_VIEW)
NEXT_VIEW#(>K:NEXT_VIEW)
PAN_DOWN#(>K:PAN_DOWN)
PAN_LEFT#(>K:PAN_LEFT)
PAN_LEFT_DOWN#(>K:PAN_LEFT_DOWN)
PAN_LEFT_UP#(>K:PAN_LEFT_UP)
PAN_RIGHT#(>K:PAN_RIGHT)
PAN_RIGHT_DOWN#(>K:PAN_RIGHT_DOWN)
PAN_RIGHT_UP#(>K:PAN_RIGHT_UP)
PAN_TILT_LEFT#(>K:PAN_TILT_LEFT)
PAN_TILT_RIGHT#(>K:PAN_TILT_RIGHT)
PAN_UP#(>K:PAN_UP)
PREV_SUB_VIEW#(>K:PREV_SUB_VIEW)
PREV_VIEW#(>K:PREV_VIEW)
VIEW_ALWAYS_PAN_DOWN#(>K:VIEW_ALWAYS_PAN_DOWN)
VIEW_ALWAYS_PAN_UP#(>K:VIEW_ALWAYS_PAN_UP)
VIEW_AXIS_INDICATOR_CYCLE#(>K:VIEW_AXIS_INDICATOR_CYCLE)
VIEW_CAMERA_SELECT_START#(>K:VIEW_CAMERA_SELECT_START)
VIEW_CHASE_DISTANCE_ADD#(>K:VIEW_CHASE_DISTANCE_ADD)
VIEW_CHASE_DISTANCE_SUB#(>K:VIEW_CHASE_DISTANCE_SUB)
VIEW_COCKPIT_FORWARD#(>K:VIEW_COCKPIT_FORWARD)
VIEW_DOWN#(>K:VIEW_DOWN)
VIEW_FORWARD#(>K:VIEW_FORWARD)
VIEW_FORWARD_LEFT#(>K:VIEW_FORWARD_LEFT)
VIEW_FORWARD_LEFT_UP#(>K:VIEW_FORWARD_LEFT_UP)
VIEW_FORWARD_RIGHT#(>K:VIEW_FORWARD_RIGHT)
VIEW_FORWARD_RIGHT_UP#(>K:VIEW_FORWARD_RIGHT_UP)
VIEW_FORWARD_UP#(>K:VIEW_FORWARD_UP)
VIEW_LEFT#(>K:VIEW_LEFT)
VIEW_LEFT_UP#(>K:VIEW_LEFT_UP)
VIEW_LINKING_TOGGLE#(>K:VIEW_LINKING_TOGGLE)
VIEW_MAP_ORIENTATION_CYCLE#(>K:VIEW_MAP_ORIENTATION_CYCLE)
VIEW_MODE#(>K:VIEW_MODE)
VIEW_MODE_REV#(>K:VIEW_MODE_REV)
VIEW_PANEL_ALPHA_DEC#(>K:VIEW_PANEL_ALPHA_DEC)
VIEW_PANEL_ALPHA_INC#(>K:VIEW_PANEL_ALPHA_INC)
VIEW_PANEL_ALPHA_SELECT#(>K:VIEW_PANEL_ALPHA_SELECT)
VIEW_PREVIOUS_TOGGLE#(>K:VIEW_PREVIOUS_TOGGLE)
VIEW_REAR#(>K:VIEW_REAR)
VIEW_REAR_LEFT#(>K:VIEW_REAR_LEFT)
VIEW_REAR_LEFT_UP#(>K:VIEW_REAR_LEFT_UP)
VIEW_REAR_RIGHT#(>K:VIEW_REAR_RIGHT)
VIEW_REAR_RIGHT_UP#(>K:VIEW_REAR_RIGHT_UP)
VIEW_REAR_UP#(>K:VIEW_REAR_UP)
VIEW_RIGHT#(>K:VIEW_RIGHT)
VIEW_RIGHT_UP#(>K:VIEW_RIGHT_UP)
VIEW_TRACK_PAN_TOGGLE#(>K:VIEW_TRACK_PAN_TOGGLE)
VIEW_UP#(>K:VIEW_UP)
VIEW_VIRTUAL_COCKPIT_FORWARD#(>K:VIEW_VIRTUAL_COCKPIT_FORWARD)
VIEW_WINDOW_TITLES_TOGGLE#(>K:VIEW_WINDOW_TITLES_TOGGLE)
VIEW_WINDOW_TO_FRONT#(>K:VIEW_WINDOW_TO_FRONT)
ZOOM_1X#(>K:ZOOM_1X)
ZOOM_IN#(>K:ZOOM_IN)
ZOOM_IN_FINE#(>K:ZOOM_IN_FINE)
ZOOM_MINUS#(>K:ZOOM_MINUS)
ZOOM_OUT#(>K:ZOOM_OUT)
ZOOM_OUT_FINE#(>K:ZOOM_OUT_FINE)
ZOOM_PLUS#(>K:ZOOM_PLUS)
//Microsoft/Generic/Controls
AILERONS_LEFT#(>K:AILERONS_LEFT)
AILERONS_RIGHT#(>K:AILERONS_RIGHT)
AILERON_TRIM_LEFT#(>K:AILERON_TRIM_LEFT)
AILERON_TRIM_RIGHT#(>K:AILERON_TRIM_RIGHT)
BRAKES#(>K:BRAKES)
BRAKES_LEFT#(>K:BRAKES_LEFT)
BRAKES_RIGHT#(>K:BRAKES_RIGHT)
CENTER_AILER_RUDDER#(>K:CENTER_AILER_RUDDER)
DEC_AUTOBRAKE_CONTROL#(>K:DEC_AUTOBRAKE_CONTROL)
ELEV_DOWN#(>K:ELEV_DOWN)
ELEV_TRIM_DN#(>K:ELEV_TRIM_DN)
ELEV_TRIM_UP#(>K:ELEV_TRIM_UP)
ELEV_UP#(>K:ELEV_UP)
FLAPS_1#(>K:FLAPS_1)
FLAPS_2#(>K:FLAPS_2)
FLAPS_3#(>K:FLAPS_3)
FLAPS_DECR#(>K:FLAPS_DECR)
FLAPS_DOWN#(>K:FLAPS_DOWN)
FLAPS_INCR#(>K:FLAPS_INCR)
FLAPS_UP#(>K:FLAPS_UP)
INC_AUTOBRAKE_CONTROL#(>K:INC_AUTOBRAKE_CONTROL)
PARKING_BRAKES_TOGGLE#(>K:PARKING_BRAKES)
PARKING_BRAKES_OFF#0 (>K:PARKING_BRAKE_SET)
PARKING_BRAKES_ON#1 (>K:PARKING_BRAKE_SET)
ROTOR_BRAKE#(>K:ROTOR_BRAKE)
RUDDER_CENTER#(>K:RUDDER_CENTER)
RUDDER_LEFT#(>K:RUDDER_LEFT)
RUDDER_RIGHT#(>K:RUDDER_RIGHT)
RUDDER_TRIM_LEFT#(>K:RUDDER_TRIM_LEFT)
RUDDER_TRIM_RIGHT#(>K:RUDDER_TRIM_RIGHT)
SPOILERS_ARM_OFF#(>K:SPOILERS_ARM_OFF)
SPOILERS_ARM_ON#(>K:SPOILERS_ARM_ON)
SPOILERS_ARM_TOGGLE#(>K:SPOILERS_ARM_TOGGLE)
SPOILERS_OFF#(>K:SPOILERS_OFF)
SPOILERS_ON#(>K:SPOILERS_ON)
SPOILERS_TOGGLE#(>K:SPOILERS_TOGGLE)
TOGGLE_LEFT_BRAKE_FAILURE#(>K:TOGGLE_LEFT_BRAKE_FAILURE)
TOGGLE_RIGHT_BRAKE_FAILURE#(>K:TOGGLE_RIGHT_BRAKE_FAILURE)
TOGGLE_TOTAL_BRAKE_FAILURE#(>K:TOGGLE_TOTAL_BRAKE_FAILURE)
//Microsoft/Generic/Electrical
APU_GENERATOR_SWITCH_TOGGLE#(>K:APU_GENERATOR_SWITCH_TOGGLE)
APU_OFF_SWITCH#(>K:APU_OFF_SWITCH)
APU_STARTER#(>K:APU_STARTER)
TOGGLE_ALTERNATOR1#(>K:TOGGLE_ALTERNATOR1)
TOGGLE_ALTERNATOR2#(>K:TOGGLE_ALTERNATOR2)
TOGGLE_ALTERNATOR3#(>K:TOGGLE_ALTERNATOR3)
TOGGLE_ALTERNATOR4#(>K:TOGGLE_ALTERNATOR4)
TOGGLE_ELECTRICAL_FAILURE#(>K:TOGGLE_ELECTRICAL_FAILURE)
TOGGLE_MASTER_ALTERNATOR#(>K:TOGGLE_MASTER_ALTERNATOR)
TOGGLE_MASTER_BATTERY#(>K:TOGGLE_MASTER_BATTERY)
TOGGLE_MASTER_BATTERY_ALTERNATOR#(>K:TOGGLE_MASTER_BATTERY_ALTERNATOR)
//Microsoft/Generic/Engines
DEC_THROTTLE#(>K:DEC_THROTTLE)
ENGINE#(>K:ENGINE)
ENGINE_AUTO_SHUTDOWN#(>K:ENGINE_AUTO_SHUTDOWN)
ENGINE_AUTO_START#(>K:ENGINE_AUTO_START)
ENGINE_PRIMER#(>K:ENGINE_PRIMER)
INC_THROTTLE#(>K:INC_THROTTLE)
JET_STARTER#(>K:JET_STARTER)
MIXTURE1_DECR#(>K:MIXTURE1_DECR)
MIXTURE1_DECR_SMALL#(>K:MIXTURE1_DECR_SMALL)
MIXTURE1_INCR#(>K:MIXTURE1_INCR)
MIXTURE1_INCR_SMALL#(>K:MIXTURE1_INCR_SMALL)
MIXTURE1_LEAN#(>K:MIXTURE1_LEAN)
MIXTURE1_RICH#(>K:MIXTURE1_RICH)
MIXTURE2_DECR#(>K:MIXTURE2_DECR)
MIXTURE2_DECR_SMALL#(>K:MIXTURE2_DECR_SMALL)
MIXTURE2_INCR#(>K:MIXTURE2_INCR)
MIXTURE2_INCR_SMALL#(>K:MIXTURE2_INCR_SMALL)
MIXTURE2_LEAN#(>K:MIXTURE2_LEAN)
MIXTURE2_RICH#(>K:MIXTURE2_RICH)
MIXTURE3_DECR#(>K:MIXTURE3_DECR)
MIXTURE3_DECR_SMALL#(>K:MIXTURE3_DECR_SMALL)
MIXTURE3_INCR#(>K:MIXTURE3_INCR)
MIXTURE3_INCR_SMALL#(>K:MIXTURE3_INCR_SMALL)
MIXTURE3_LEAN#(>K:MIXTURE3_LEAN)
MIXTURE3_RICH#(>K:MIXTURE3_RICH)
MIXTURE4_DECR#(>K:MIXTURE4_DECR)
MIXTURE4_DECR_SMALL#(>K:MIXTURE4_DECR_SMALL)
MIXTURE4_INCR#(>K:MIXTURE4_INCR)
MIXTURE4_INCR_SMALL#(>K:MIXTURE4_INCR_SMALL)
MIXTURE4_LEAN#(>K:MIXTURE4_LEAN)
MIXTURE4_RICH#(>K:MIXTURE4_RICH)
MIXTURE_DECR#(>K:MIXTURE_DECR)
MIXTURE_DECR_SMALL#(>K:MIXTURE_DECR_SMALL)
MIXTURE_INCR#(>K:MIXTURE_INCR)
MIXTURE_INCR_SMALL#(>K:MIXTURE_INCR_SMALL)
MIXTURE_LEAN#(>K:MIXTURE_LEAN)
MIXTURE_RICH#(>K:MIXTURE_RICH)
THROTTLE1_CUT#(>K:THROTTLE1_CUT)
THROTTLE1_DECR#(>K:THROTTLE1_DECR)
THROTTLE1_DECR_SMALL#(>K:THROTTLE1_DECR_SMALL)
THROTTLE1_FULL#(>K:THROTTLE1_FULL)
THROTTLE1_INCR#(>K:THROTTLE1_INCR)
THROTTLE1_INCR_SMALL#(>K:THROTTLE1_INCR_SMALL)
THROTTLE2_CUT#(>K:THROTTLE2_CUT)
THROTTLE2_DECR#(>K:THROTTLE2_DECR)
THROTTLE2_DECR_SMALL#(>K:THROTTLE2_DECR_SMALL)
THROTTLE2_FULL#(>K:THROTTLE2_FULL)
THROTTLE2_INCR#(>K:THROTTLE2_INCR)
THROTTLE2_INCR_SMALL#(>K:THROTTLE2_INCR_SMALL)
THROTTLE3_CUT#(>K:THROTTLE3_CUT)
THROTTLE3_DECR#(>K:THROTTLE3_DECR)
THROTTLE3_DECR_SMALL#(>K:THROTTLE3_DECR_SMALL)
THROTTLE3_FULL#(>K:THROTTLE3_FULL)
THROTTLE3_INCR#(>K:THROTTLE3_INCR)
THROTTLE3_INCR_SMALL#(>K:THROTTLE3_INCR_SMALL)
THROTTLE4_CUT#(>K:THROTTLE4_CUT)
THROTTLE4_DECR#(>K:THROTTLE4_DECR)
THROTTLE4_DECR_SMALL#(>K:THROTTLE4_DECR_SMALL)
THROTTLE4_FULL#(>K:THROTTLE4_FULL)
THROTTLE4_INCR#(>K:THROTTLE4_INCR)
THROTTLE4_INCR_SMALL#(>K:THROTTLE4_INCR_SMALL)
THROTTLE_10#(>K:THROTTLE_10)
THROTTLE_20#(>K:THROTTLE_20)
THROTTLE_30#(>K:THROTTLE_30)
THROTTLE_40#(>K:THROTTLE_40)
THROTTLE_50#(>K:THROTTLE_50)
THROTTLE_60#(>K:THROTTLE_60)
THROTTLE_70#(>K:THROTTLE_70)
THROTTLE_80#(>K:THROTTLE_80)
THROTTLE_90#(>K:THROTTLE_90)
THROTTLE_CUT#(>K:THROTTLE_CUT)
THROTTLE_DECR#Engines
THROTTLE_DECR_SMALL#(>K:THROTTLE_DECR_SMALL)
THROTTLE_FULL#(>K:THROTTLE_FULL)
THROTTLE_INCR#(>K:THROTTLE_INCR)
THROTTLE_INCR_SMALL#(>K:THROTTLE_INCR_SMALL)
TOGGLE_ENGINE1_FAILURE#(>K:TOGGLE_ENGINE1_FAILURE)
TOGGLE_ENGINE2_FAILURE#(>K:TOGGLE_ENGINE2_FAILURE)
TOGGLE_ENGINE3_FAILURE#(>K:TOGGLE_ENGINE3_FAILURE)
TOGGLE_ENGINE4_FAILURE#(>K:TOGGLE_ENGINE4_FAILURE)
//Microsoft/Generic/Environment
SIMUI_WINDOW_HIDESHOW#(>K:SIMUI_WINDOW_HIDESHOW)
SIM_RATE#(>K:SIM_RATE)
SIM_RATE_DECR#(>K:SIM_RATE_DECR)
SIM_RATE_INCR#(>K:SIM_RATE_INCR)
//Microsoft/Generic/Flight Instrumentation
GYRO_DRIFT_DEC#(>K:GYRO_DRIFT_DEC)
GYRO_DRIFT_INC#(>K:GYRO_DRIFT_INC)
HEADING_BUG_DEC#(>K:HEADING_BUG_DEC)
HEADING_BUG_INC#(>K:HEADING_BUG_INC)
HEADING_BUG_SELECT#(>K:HEADING_BUG_SELECT)
KOHLSMAN_DEC#(>K:KOHLSMAN_DEC)
KOHLSMAN_INC#(>K:KOHLSMAN_INC)
//Microsoft/Generic/Fuel
FUEL_DUMP_TOGGLE#(>K:FUEL_DUMP_TOGGLE)
FUEL_PUMP#(>K:FUEL_PUMP)
FUEL_SELECTOR_2_ALL#(>K:FUEL_SELECTOR_2_ALL)
FUEL_SELECTOR_2_CENTER#(>K:FUEL_SELECTOR_2_CENTER)
FUEL_SELECTOR_2_LEFT#(>K:FUEL_SELECTOR_2_LEFT)
FUEL_SELECTOR_2_LEFT_AUX#(>K:FUEL_SELECTOR_2_LEFT_AUX)
FUEL_SELECTOR_2_LEFT_MAIN#(>K:FUEL_SELECTOR_2_LEFT_MAIN)
FUEL_SELECTOR_2_OFF#(>K:FUEL_SELECTOR_2_OFF)
FUEL_SELECTOR_2_RIGHT#(>K:FUEL_SELECTOR_2_RIGHT)
FUEL_SELECTOR_2_RIGHT_AUX#(>K:FUEL_SELECTOR_2_RIGHT_AUX)
FUEL_SELECTOR_2_RIGHT_MAIN#(>K:FUEL_SELECTOR_2_RIGHT_MAIN)
FUEL_SELECTOR_3_ALL#(>K:FUEL_SELECTOR_3_ALL)
FUEL_SELECTOR_3_CENTER#(>K:FUEL_SELECTOR_3_CENTER)
FUEL_SELECTOR_3_LEFT#(>K:FUEL_SELECTOR_3_LEFT)
FUEL_SELECTOR_3_LEFT_AUX#(>K:FUEL_SELECTOR_3_LEFT_AUX)
FUEL_SELECTOR_3_LEFT_MAIN#(>K:FUEL_SELECTOR_3_LEFT_MAIN)
FUEL_SELECTOR_3_OFF#(>K:FUEL_SELECTOR_3_OFF)
FUEL_SELECTOR_3_RIGHT#(>K:FUEL_SELECTOR_3_RIGHT)
FUEL_SELECTOR_3_RIGHT_AUX#(>K:FUEL_SELECTOR_3_RIGHT_AUX)
FUEL_SELECTOR_3_RIGHT_MAIN#(>K:FUEL_SELECTOR_3_RIGHT_MAIN)
FUEL_SELECTOR_4_ALL#(>K:FUEL_SELECTOR_4_ALL)
FUEL_SELECTOR_4_CENTER#(>K:FUEL_SELECTOR_4_CENTER)
FUEL_SELECTOR_4_LEFT#(>K:FUEL_SELECTOR_4_LEFT)
FUEL_SELECTOR_4_LEFT_AUX#(>K:FUEL_SELECTOR_4_LEFT_AUX)
FUEL_SELECTOR_4_LEFT_MAIN#(>K:FUEL_SELECTOR_4_LEFT_MAIN)
FUEL_SELECTOR_4_OFF#(>K:FUEL_SELECTOR_4_OFF)
FUEL_SELECTOR_4_RIGHT#(>K:FUEL_SELECTOR_4_RIGHT)
FUEL_SELECTOR_4_RIGHT_AUX#(>K:FUEL_SELECTOR_4_RIGHT_AUX)
FUEL_SELECTOR_4_RIGHT_MAIN#(>K:FUEL_SELECTOR_4_RIGHT_MAIN)
FUEL_SELECTOR_ALL#(>K:FUEL_SELECTOR_ALL)
FUEL_SELECTOR_CENTER#(>K:FUEL_SELECTOR_CENTER)
FUEL_SELECTOR_LEFT#(>K:FUEL_SELECTOR_LEFT)
FUEL_SELECTOR_LEFT_AUX#(>K:FUEL_SELECTOR_LEFT_AUX)
FUEL_SELECTOR_LEFT_MAIN#(>K:FUEL_SELECTOR_LEFT_MAIN)
FUEL_SELECTOR_OFF#(>K:FUEL_SELECTOR_OFF)
FUEL_SELECTOR_RIGHT#(>K:FUEL_SELECTOR_RIGHT)
FUEL_SELECTOR_RIGHT_AUX#(>K:FUEL_SELECTOR_RIGHT_AUX)
FUEL_SELECTOR_RIGHT_MAIN#(>K:FUEL_SELECTOR_RIGHT_MAIN)
MANUAL_FUEL_PRESSURE_PUMP#(>K:MANUAL_FUEL_PRESSURE_PUMP)
REQUEST_FUEL_KEY#(>K:REQUEST_FUEL_KEY)
TOGGLE_ELECT_FUEL_PUMP#(>K:TOGGLE_ELECT_FUEL_PUMP)
TOGGLE_ELECT_FUEL_PUMP1#(>K:TOGGLE_ELECT_FUEL_PUMP1)
TOGGLE_ELECT_FUEL_PUMP2#(>K:TOGGLE_ELECT_FUEL_PUMP2)
TOGGLE_ELECT_FUEL_PUMP3#(>K:TOGGLE_ELECT_FUEL_PUMP3)
TOGGLE_ELECT_FUEL_PUMP4#(>K:TOGGLE_ELECT_FUEL_PUMP4)
TOGGLE_FUEL_VALVE_ALL#(>K:TOGGLE_FUEL_VALVE_ALL)
TOGGLE_FUEL_VALVE_ENG1#(>K:TOGGLE_FUEL_VALVE_ENG1)
TOGGLE_FUEL_VALVE_ENG2#(>K:TOGGLE_FUEL_VALVE_ENG2)
TOGGLE_FUEL_VALVE_ENG3#(>K:TOGGLE_FUEL_VALVE_ENG3)
TOGGLE_FUEL_VALVE_ENG4#(>K:TOGGLE_FUEL_VALVE_ENG4)
//Microsoft/Generic/Gear
GEAR_DOWN#(>K:GEAR_DOWN)
GEAR_TOGGLE#(>K:GEAR_TOGGLE)
GEAR_UP#(>K:GEAR_UP)
//Microsoft/Generic/Interaction
TOGGLE_JETWAY#(>K:TOGGLE_JETWAY)
TOGGLE_PUSHBACK#(>K:TOGGLE_PUSHBACK)
TOW_PLANE_RELEASE#(>K:TOW_PLANE_RELEASE)
TOW_PLANE_REQUEST#(>K:TOW_PLANE_REQUEST)
TUG_DISABLE#(>K:TUG_DISABLE)
TUG_HEADING#(>K:TUG_HEADING)
TUG_SPEED#(>K:TUG_SPEED)
//Microsoft/Generic/Lights
ALL_LIGHTS_TOGGLE#(>K:ALL_LIGHTS_TOGGLE)
LANDING_LIGHTS_OFF#(>K:LANDING_LIGHTS_OFF)
LANDING_LIGHTS_ON#(>K:LANDING_LIGHTS_ON)
LANDING_LIGHTS_TOGGLE#(>K:LANDING_LIGHTS_TOGGLE)
LANDING_LIGHT_DOWN#(>K:LANDING_LIGHT_DOWN)
LANDING_LIGHT_HOME#(>K:LANDING_LIGHT_HOME)
LANDING_LIGHT_LEFT#(>K:LANDING_LIGHT_LEFT)
LANDING_LIGHT_RIGHT#(>K:LANDING_LIGHT_RIGHT)
LANDING_LIGHT_UP#(>K:LANDING_LIGHT_UP)
PANEL_LIGHTS_OFF#(>K:PANEL_LIGHTS_OFF)
PANEL_LIGHTS_ON#(>K:PANEL_LIGHTS_ON)
PANEL_LIGHTS_SET__#(>K:PANEL_LIGHTS_SET )
STROBES_OFF#(>K:STROBES_OFF)
STROBES_ON#(>K:STROBES_ON)
STROBES_TOGGLE#(>K:STROBES_TOGGLE)
TOGGLE_BEACON_LIGHTS#(>K:TOGGLE_BEACON_LIGHTS)
TOGGLE_CABIN_LIGHTS#(>K:TOGGLE_CABIN_LIGHTS)
TOGGLE_LOGO_LIGHTS#(>K:TOGGLE_LOGO_LIGHTS)
TOGGLE_NAV_LIGHTS#(>K:TOGGLE_NAV_LIGHTS)
TOGGLE_RECOGNITION_LIGHTS#(>K:TOGGLE_RECOGNITION_LIGHTS)
TOGGLE_TAXI_LIGHTS#(>K:TOGGLE_TAXI_LIGHTS)
TOGGLE_WING_LIGHTS#(>K:TOGGLE_WING_LIGHTS)
//Microsoft/Generic/Radio
ADF_100_DEC#(>K:ADF_100_DEC)
ADF_100_INC#(>K:ADF_100_INC)
ADF_10_DEC#(>K:ADF_10_DEC)
ADF_10_INC#(>K:ADF_10_INC)
ADF_1_DEC#(>K:ADF_1_DEC)
ADF_1_INC#(>K:ADF_1_INC)
COM1_TRANSMIT_SELECT#(>K:COM1_TRANSMIT_SELECT)
COM1_VOLUME_DEC#(>K:COM1_VOLUME_DEC)
COM1_VOLUME_INC#(>K:COM1_VOLUME_INC)
COM1_VOLUME_SET#@ 10.23 / (>K:COM1_VOLUME_SET)
COM2_RADIO_FRACT_DEC#(>K:COM2_RADIO_FRACT_DEC)
COM2_RADIO_FRACT_DEC_CARRY#(>K:COM2_RADIO_FRACT_DEC_CARRY)
COM2_RADIO_FRACT_INC#(>K:COM2_RADIO_FRACT_INC)
COM2_RADIO_FRACT_INC_CARRY#(>K:COM2_RADIO_FRACT_INC_CARRY)
COM2_RADIO_SWAP#(>K:COM2_RADIO_SWAP)
COM2_RADIO_WHOLE_DEC#(>K:COM2_RADIO_WHOLE_DEC)
COM2_RADIO_WHOLE_INC#(>K:COM2_RADIO_WHOLE_INC)
COM2_TRANSMIT_SELECT#(>K:COM2_TRANSMIT_SELECT)
COM2_VOLUME_SET#@ 10.23 / (>K:COM2_VOLUME_SET)
COM_RADIO#(>K:COM_RADIO)
COM_RADIO_FRACT_DEC#(>K:COM_RADIO_FRACT_DEC)
COM_RADIO_FRACT_DEC_CARRY#(>K:COM_RADIO_FRACT_DEC_CARRY)
COM_RADIO_FRACT_INC#(>K:COM_RADIO_FRACT_INC)
COM_RADIO_FRACT_INC_CARRY#(>K:COM_RADIO_FRACT_INC_CARRY)
COM_RADIO_WHOLE_DEC#(>K:COM_RADIO_WHOLE_DEC)
COM_RADIO_WHOLE_INC#(>K:COM_RADIO_WHOLE_INC)
COM_RECEIVE_ALL_TOGGLE#(>K:COM_RECEIVE_ALL_TOGGLE)
COM_STBY_RADIO_SWAP#(>K:COM_STBY_RADIO_SWAP)
DME#(>K:DME)
DME1_TOGGLE#(>K:DME1_TOGGLE)
DME2_TOGGLE#(>K:DME2_TOGGLE)
DME_SELECT#(>K:DME_SELECT)
FREQUENCY_SWAP#(>K:FREQUENCY_SWAP)
MARKER_SOUND_TOGGLE#(>K:MARKER_SOUND_TOGGLE)
NAV1_RADIO_FRACT_DEC#(>K:NAV1_RADIO_FRACT_DEC)
NAV1_RADIO_FRACT_DEC_CARRY#(>K:NAV1_RADIO_FRACT_DEC_CARRY)
NAV1_RADIO_FRACT_INC#(>K:NAV1_RADIO_FRACT_INC)
NAV1_RADIO_FRACT_INC_CARRY#(>K:NAV1_RADIO_FRACT_INC_CARRY)
NAV1_RADIO_SWAP#(>K:NAV1_RADIO_SWAP)
NAV1_RADIO_WHOLE_DEC#(>K:NAV1_RADIO_WHOLE_DEC)
NAV1_RADIO_WHOLE_INC#(>K:NAV1_RADIO_WHOLE_INC)
NAV2_RADIO_FRACT_DEC#(>K:NAV2_RADIO_FRACT_DEC)
NAV2_RADIO_FRACT_DEC_CARRY#(>K:NAV2_RADIO_FRACT_DEC_CARRY)
NAV2_RADIO_FRACT_INC#(>K:NAV2_RADIO_FRACT_INC)
NAV2_RADIO_FRACT_INC_CARRY#(>K:NAV2_RADIO_FRACT_INC_CARRY)
NAV2_RADIO_SWAP#(>K:NAV2_RADIO_SWAP)
NAV2_RADIO_WHOLE_DEC#(>K:NAV2_RADIO_WHOLE_DEC)
NAV2_RADIO_WHOLE_INC#(>K:NAV2_RADIO_WHOLE_INC)
NAV_RADIO#(>K:NAV_RADIO)
RADIO_ADF2_IDENT_DISABLE#(>K:RADIO_ADF2_IDENT_DISABLE)
RADIO_ADF2_IDENT_ENABLE#(>K:RADIO_ADF2_IDENT_ENABLE)
RADIO_ADF2_IDENT_TOGGLE#(>K:RADIO_ADF2_IDENT_TOGGLE)
RADIO_ADF_IDENT_DISABLE#(>K:RADIO_ADF_IDENT_DISABLE)
RADIO_ADF_IDENT_ENABLE#(>K:RADIO_ADF_IDENT_ENABLE)
RADIO_ADF_IDENT_TOGGLE#(>K:RADIO_ADF_IDENT_TOGGLE)
RADIO_DME1_IDENT_DISABLE#(>K:RADIO_DME1_IDENT_DISABLE)
RADIO_DME1_IDENT_ENABLE#(>K:RADIO_DME1_IDENT_ENABLE)
RADIO_DME1_IDENT_TOGGLE#(>K:RADIO_DME1_IDENT_TOGGLE)
RADIO_DME2_IDENT_DISABLE#(>K:RADIO_DME2_IDENT_DISABLE)
RADIO_DME2_IDENT_ENABLE#(>K:RADIO_DME2_IDENT_ENABLE)
RADIO_DME2_IDENT_TOGGLE#(>K:RADIO_DME2_IDENT_TOGGLE)
RADIO_SELECTED_DME_IDENT_DISABLE#(>K:RADIO_SELECTED_DME_IDENT_DISABLE)
RADIO_SELECTED_DME_IDENT_ENABLE#(>K:RADIO_SELECTED_DME_IDENT_ENABLE)
RADIO_SELECTED_DME_IDENT_TOGGLE#(>K:RADIO_SELECTED_DME_IDENT_TOGGLE)
RADIO_VOR1_IDENT_DISABLE#(>K:RADIO_VOR1_IDENT_DISABLE)
RADIO_VOR1_IDENT_ENABLE#(>K:RADIO_VOR1_IDENT_ENABLE)
RADIO_VOR1_IDENT_TOGGLE#(>K:RADIO_VOR1_IDENT_TOGGLE)
RADIO_VOR2_IDENT_DISABLE#(>K:RADIO_VOR2_IDENT_DISABLE)
RADIO_VOR2_IDENT_ENABLE#(>K:RADIO_VOR2_IDENT_ENABLE)
RADIO_VOR2_IDENT_TOGGLE#(>K:RADIO_VOR2_IDENT_TOGGLE)
TOGGLE_DME#(>K:TOGGLE_DME)
VOR1_OBI_DEC#(>K:VOR1_OBI_DEC)
VOR1_OBI_INC#(>K:VOR1_OBI_INC)
VOR2_OBI_DEC#(>K:VOR2_OBI_DEC)
VOR2_OBI_INC#(>K:VOR2_OBI_INC)
VOR_OBS#(>K:VOR_OBS)
XPNDR#(>K:XPNDR)
XPNDR_1000_DEC#(>K:XPNDR_1000_DEC)
XPNDR_1000_INC#(>K:XPNDR_1000_INC)
XPNDR_100_DEC#(>K:XPNDR_100_DEC)
XPNDR_100_INC#(>K:XPNDR_100_INC)
XPNDR_10_DEC#(>K:XPNDR_10_DEC)
XPNDR_10_INC#(>K:XPNDR_10_INC)
XPNDR_1_DEC#(>K:XPNDR_1_DEC)
XPNDR_1_INC#(>K:XPNDR_1_INC)
XPNDR_DEC_CARRY#(>K:XPNDR_DEC_CARRY)
XPNDR_INC_CARRY#(>K:XPNDR_INC_CARRY)
//Microsoft/Generic/Unsorted
ADF_CARD_DEC#(>K:ADF_CARD_DEC)
ADF_CARD_INC#(>K:ADF_CARD_INC)
AIRSPEED_BUG_SELECT#(>K:AIRSPEED_BUG_SELECT)
ALTITUDE_BUG_SELECT#(>K:ALTITUDE_BUG_SELECT)
ATC#(>K:ATC)
ATC_MENU_0#(>K:ATC_MENU_0)
ATC_MENU_1#(>K:ATC_MENU_1)
ATC_MENU_2#(>K:ATC_MENU_2)
ATC_MENU_3#(>K:ATC_MENU_3)
ATC_MENU_4#(>K:ATC_MENU_4)
ATC_MENU_5#(>K:ATC_MENU_5)
ATC_MENU_6#(>K:ATC_MENU_6)
ATC_MENU_7#(>K:ATC_MENU_7)
ATC_MENU_8#(>K:ATC_MENU_8)
ATC_MENU_8#(>K:ATC_MENU_8)
ATC_MENU_9#(>K:ATC_MENU_9)
ATTITUDE_BARS_POSITION_DOWN#(>K:ATTITUDE_BARS_POSITION_DOWN)
ATTITUDE_BARS_POSITION_UP#(>K:ATTITUDE_BARS_POSITION_UP)
ATTITUDE_CAGE_BUTTON#(>K:ATTITUDE_CAGE_BUTTON)
AUTORUDDER_TOGGLE#(>K:AUTORUDDER_TOGGLE)
AUTO_THROTTLE_ARM#(>K:AUTO_THROTTLE_ARM)
AUTO_THROTTLE_TO_GA#(>K:AUTO_THROTTLE_TO_GA)
AXIS_PAN_HEADING#(>K:AXIS_PAN_HEADING)
AXIS_PAN_PITCH#(>K:AXIS_PAN_PITCH)
AXIS_PAN_TILT#(>K:AXIS_PAN_TILT)
BAROMETRIC#(>K:BAROMETRIC)
BLEED_AIR_SOURCE_CONTROL_DEC#(>K:BLEED_AIR_SOURCE_CONTROL_DEC)
BLEED_AIR_SOURCE_CONTROL_INC#(>K:BLEED_AIR_SOURCE_CONTROL_INC)
CLOCK_HOURS_DEC#(>K:CLOCK_HOURS_DEC)
CLOCK_HOURS_INC#(>K:CLOCK_HOURS_INC)
CLOCK_MINUTES_DEC#(>K:CLOCK_MINUTES_DEC)
CLOCK_MINUTES_INC#(>K:CLOCK_MINUTES_INC)
CLOCK_SECONDS_ZERO#(>K:CLOCK_SECONDS_ZERO)
CROSS_FEED_OFF#(>K:CROSS_FEED_OFF)
CROSS_FEED_OPEN#(>K:CROSS_FEED_OPEN)
CROSS_FEED_TOGGLE#(>K:CROSS_FEED_TOGGLE)
DEC_COWL_FLAPS#(>K:DEC_COWL_FLAPS)
DEC_COWL_FLAPS1#(>K:DEC_COWL_FLAPS1)
DEC_COWL_FLAPS2#(>K:DEC_COWL_FLAPS2)
DEC_COWL_FLAPS3#(>K:DEC_COWL_FLAPS3)
DEC_COWL_FLAPS4#(>K:DEC_COWL_FLAPS4)
DEC_DECISION_HEIGHT#(>K:DEC_DECISION_HEIGHT)
DEMO_STOP#(>K:DEMO_STOP)
EGT#(>K:EGT)
EGT1_DEC#(>K:EGT1_DEC)
EGT1_INC#(>K:EGT1_INC)
EGT2_DEC#(>K:EGT2_DEC)
EGT2_INC#(>K:EGT2_INC)
EGT3_DEC#(>K:EGT3_DEC)
EGT3_INC#(>K:EGT3_INC)
EGT4_DEC#(>K:EGT4_DEC)
EGT4_INC#(>K:EGT4_INC)
EGT_DEC#(>K:EGT_DEC)
EGT_INC#(>K:EGT_INC)
FLIGHT_MAP#(>K:FLIGHT_MAP)
FLY_BY_WIRE_ELAC_TOGGLE#(>K:FLY_BY_WIRE_ELAC_TOGGLE)
FLY_BY_WIRE_FAC_TOGGLE#(>K:FLY_BY_WIRE_FAC_TOGGLE)
FLY_BY_WIRE_SEC_TOGGLE#(>K:FLY_BY_WIRE_SEC_TOGGLE)
FREEZE_ALTITUDE_TOGGLE#(>K:FREEZE_ALTITUDE_TOGGLE)
FREEZE_ATTITUDE_TOGGLE#(>K:FREEZE_ATTITUDE_TOGGLE)
FREEZE_LATITUDE_LONGITUDE_TOGGLE#(>K:FREEZE_LATITUDE_LONGITUDE_TOGGLE)
GAUGE_KEYSTROKE#(>K:GAUGE_KEYSTROKE)
GEAR_PUMP#(>K:GEAR_PUMP)
GPWS_SWITCH_TOGGLE#(>K:GPWS_SWITCH_TOGGLE)
HOIST_DEPLOY_TOGGLE#(>K:HOIST_DEPLOY_TOGGLE)
HOIST_SWITCH_EXTEND#(>K:HOIST_SWITCH_EXTEND)
HOIST_SWITCH_RETRACT#(>K:HOIST_SWITCH_RETRACT)
HYDRAULIC_SWITCH_TOGGLE#(>K:HYDRAULIC_SWITCH_TOGGLE)
INC_COWL_FLAPS#(>K:INC_COWL_FLAPS)
INC_COWL_FLAPS1#(>K:INC_COWL_FLAPS1)
INC_COWL_FLAPS2#(>K:INC_COWL_FLAPS2)
INC_COWL_FLAPS3#(>K:INC_COWL_FLAPS3)
INC_COWL_FLAPS4#(>K:INC_COWL_FLAPS4)
INC_DECISION_HEIGHT#(>K:INC_DECISION_HEIGHT)
INVOKE_HELP#(>K:INVOKE_HELP)
JOYSTICK_CALIBRATE#(>K:JOYSTICK_CALIBRATE)
MAGNETO#(>K:MAGNETO)
MAGNETO1_BOTH#(>K:MAGNETO1_BOTH)
MAGNETO1_DECR#(>K:MAGNETO1_DECR)
MAGNETO1_INCR#(>K:MAGNETO1_INCR)
MAGNETO1_LEFT#(>K:MAGNETO1_LEFT)
MAGNETO1_OFF#(>K:MAGNETO1_OFF)
MAGNETO1_RIGHT#(>K:MAGNETO1_RIGHT)
MAGNETO1_START#(>K:MAGNETO1_START)
MAGNETO2_BOTH#(>K:MAGNETO2_BOTH)
MAGNETO2_DECR#(>K:MAGNETO2_DECR)
MAGNETO2_INCR#(>K:MAGNETO2_INCR)
MAGNETO2_LEFT#(>K:MAGNETO2_LEFT)
MAGNETO2_OFF#(>K:MAGNETO2_OFF)
MAGNETO2_RIGHT#(>K:MAGNETO2_RIGHT)
MAGNETO2_START#(>K:MAGNETO2_START)
MAGNETO3_BOTH#(>K:MAGNETO3_BOTH)
MAGNETO3_DECR#(>K:MAGNETO3_DECR)
MAGNETO3_INCR#(>K:MAGNETO3_INCR)
MAGNETO3_LEFT#(>K:MAGNETO3_LEFT)
MAGNETO3_OFF#(>K:MAGNETO3_OFF)
MAGNETO3_RIGHT#(>K:MAGNETO3_RIGHT)
MAGNETO3_START#(>K:MAGNETO3_START)
MAGNETO4_BOTH#(>K:MAGNETO4_BOTH)
MAGNETO4_DECR#(>K:MAGNETO4_DECR)
MAGNETO4_INCR#(>K:MAGNETO4_INCR)
MAGNETO4_LEFT#(>K:MAGNETO4_LEFT)
MAGNETO4_OFF#(>K:MAGNETO4_OFF)
MAGNETO4_RIGHT#(>K:MAGNETO4_RIGHT)
MAGNETO4_START#(>K:MAGNETO4_START)
MAGNETO_BOTH#(>K:MAGNETO_BOTH)
MAGNETO_DECR#(>K:MAGNETO_DECR)
MAGNETO_INCR#(>K:MAGNETO_INCR)
MAGNETO_LEFT#(>K:MAGNETO_LEFT)
MAGNETO_OFF#(>K:MAGNETO_OFF)
MAGNETO_RIGHT#(>K:MAGNETO_RIGHT)
MAGNETO_START#(>K:MAGNETO_START)
MAP_ZOOM_FINE_IN#(>K:MAP_ZOOM_FINE_IN)
MAP_ZOOM_FINE_OUT#(>K:MAP_ZOOM_FINE_OUT)
MINUS#(>K:MINUS)
MINUS_SHIFT#(>K:MINUS_SHIFT)
MOUSE_LOOK_TOGGLE#(>K:MOUSE_LOOK_TOGGLE)
MP_ACTIVATE_CHAT#(>K:MP_ACTIVATE_CHAT)
MP_BROADCAST_VOICE_CAPTURE_START#(>K:MP_BROADCAST_VOICE_CAPTURE_START)
MP_BROADCAST_VOICE_CAPTURE_STOP#(>K:MP_BROADCAST_VOICE_CAPTURE_STOP)
MP_CHAT#(>K:MP_CHAT)
MP_PLAYER_CYCLE#(>K:MP_PLAYER_CYCLE)
MP_PLAYER_FOLLOW#(>K:MP_PLAYER_FOLLOW)
MP_TRANSFER_CONTROL#(>K:MP_TRANSFER_CONTROL)
MP_VOICE_CAPTURE_START#(>K:MP_VOICE_CAPTURE_START)
MP_VOICE_CAPTURE_STOP#(>K:MP_VOICE_CAPTURE_STOP)
NEW_MAP#(>K:NEW_MAP)
NITROUS_TANK_VALVE_TOGGLE#(>K:NITROUS_TANK_VALVE_TOGGLE)
PANEL_1#(>K:PANEL_1)
PANEL_2#(>K:PANEL_2)
PANEL_3#(>K:PANEL_3)
PANEL_4#(>K:PANEL_4)
PANEL_5#(>K:PANEL_5)
PANEL_6#(>K:PANEL_6)
PANEL_7#(>K:PANEL_7)
PANEL_8#(>K:PANEL_8)
PANEL_9#(>K:PANEL_9)
PANEL_HUD_NEXT#(>K:PANEL_HUD_NEXT)
PANEL_HUD_PREVIOUS#(>K:PANEL_HUD_PREVIOUS)
PANEL_ID_CLOSE#(>K:PANEL_ID_CLOSE)
PANEL_ID_OPEN#(>K:PANEL_ID_OPEN)
PANEL_ID_TOGGLE#(>K:PANEL_ID_TOGGLE)
PAUSE_OFF#(>K:PAUSE_OFF)
PAUSE_ON#(>K:PAUSE_ON)
PAUSE_TOGGLE#(>K:PAUSE_TOGGLE)
PLUS#(>K:PLUS)
PLUS_SHIFT#(>K:PLUS_SHIFT)
POINT_OF_INTEREST_CYCLE_NEXT#(>K:POINT_OF_INTEREST_CYCLE_NEXT)
POINT_OF_INTEREST_CYCLE_PREVIOUS#(>K:POINT_OF_INTEREST_CYCLE_PREVIOUS)
POINT_OF_INTEREST_TOGGLE_POINTER#(>K:POINT_OF_INTEREST_TOGGLE_POINTER)
PRESSURIZATION_CLIMB_RATE_DEC#(>K:PRESSURIZATION_CLIMB_RATE_DEC)
PRESSURIZATION_CLIMB_RATE_INC#(>K:PRESSURIZATION_CLIMB_RATE_INC)
PRESSURIZATIPRESSURE_ALT_DEC#(>K:PRESSURIZATIPRESSURE_ALT_DEC)
PRESSURIZATIPRESSURE_ALT_INC#(>K:PRESSURIZATIPRESSURE_ALT_INC)
PROP_PITCH1_DECR#(>K:PROP_PITCH1_DECR)
PROP_PITCH1_DECR_SMALL#(>K:PROP_PITCH1_DECR_SMALL)
PROP_PITCH1_HI#(>K:PROP_PITCH1_HI)
PROP_PITCH1_INCR#(>K:PROP_PITCH1_INCR)
PROP_PITCH1_INCR_SMALL#(>K:PROP_PITCH1_INCR_SMALL)
PROP_PITCH1_LO#(>K:PROP_PITCH1_LO)
PROP_PITCH2_DECR#(>K:PROP_PITCH2_DECR)
PROP_PITCH2_DECR_SMALL#(>K:PROP_PITCH2_DECR_SMALL)
PROP_PITCH2_HI#(>K:PROP_PITCH2_HI)
PROP_PITCH2_INCR#(>K:PROP_PITCH2_INCR)
PROP_PITCH2_INCR_SMALL#(>K:PROP_PITCH2_INCR_SMALL)
PROP_PITCH2_LO#(>K:PROP_PITCH2_LO)
PROP_PITCH3_DECR#(>K:PROP_PITCH3_DECR)
PROP_PITCH3_DECR_SMALL#(>K:PROP_PITCH3_DECR_SMALL)
PROP_PITCH3_HI#(>K:PROP_PITCH3_HI)
PROP_PITCH3_INCR#(>K:PROP_PITCH3_INCR)
PROP_PITCH3_INCR_SMALL#(>K:PROP_PITCH3_INCR_SMALL)
PROP_PITCH3_LO#(>K:PROP_PITCH3_LO)
PROP_PITCH4_DECR#(>K:PROP_PITCH4_DECR)
PROP_PITCH4_DECR_SMALL#(>K:PROP_PITCH4_DECR_SMALL)
PROP_PITCH4_HI#(>K:PROP_PITCH4_HI)
PROP_PITCH4_INCR#(>K:PROP_PITCH4_INCR)
PROP_PITCH4_INCR_SMALL#(>K:PROP_PITCH4_INCR_SMALL)
PROP_PITCH4_LO#(>K:PROP_PITCH4_LO)
PROP_PITCH_DECR#(>K:PROP_PITCH_DECR)
PROP_PITCH_DECR_SMALL#(>K:PROP_PITCH_DECR_SMALL)
PROP_PITCH_HI#(>K:PROP_PITCH_HI)
PROP_PITCH_INCR#(>K:PROP_PITCH_INCR)
PROP_PITCH_INCR_SMALL#(>K:PROP_PITCH_INCR_SMALL)
PROP_PITCH_LO#(>K:PROP_PITCH_LO)
READOUTS_FLIGHT#(>K:READOUTS_FLIGHT)
READOUTS_SLEW#(>K:READOUTS_SLEW)
REFRESH_SCENERY#(>K:REFRESH_SCENERY)
RELEASE_DROPPABLE_OBJECTS#(>K:RELEASE_DROPPABLE_OBJECTS)
RELOAD_PANELS#(>K:RELOAD_PANELS)
RELOAD_USER_AIRCRAFT#(>K:RELOAD_USER_AIRCRAFT)
REPAIR_AND_REFUEL#(>K:REPAIR_AND_REFUEL)
RETRACT_FLOAT_SWITCH_DEC#(>K:RETRACT_FLOAT_SWITCH_DEC)
RETRACT_FLOAT_SWITCH_INC#(>K:RETRACT_FLOAT_SWITCH_INC)
ROTOR_CLUTCH_SWITCH_TOGGLE#(>K:ROTOR_CLUTCH_SWITCH_TOGGLE)
ROTOR_GOV_SWITCH_TOGGLE#(>K:ROTOR_GOV_SWITCH_TOGGLE)
ROTOR_LATERAL_TRIM_DEC#(>K:ROTOR_LATERAL_TRIM_DEC)
ROTOR_LATERAL_TRIM_INC#(>K:ROTOR_LATERAL_TRIM_INC)
SELECT_1#(>K:SELECT_1)
SELECT_2#(>K:SELECT_2)
SELECT_3#(>K:SELECT_3)
SELECT_4#(>K:SELECT_4)
SITUATION_SAVE#(>K:SITUATION_SAVE)
SLEW_AHEAD_MINUS#(>K:SLEW_AHEAD_MINUS)
SLEW_AHEAD_PLUS#(>K:SLEW_AHEAD_PLUS)
SLEW_ALTIT_DN_FAST#(>K:SLEW_ALTIT_DN_FAST)
SLEW_ALTIT_DN_SLOW#(>K:SLEW_ALTIT_DN_SLOW)
SLEW_ALTIT_FREEZE#(>K:SLEW_ALTIT_FREEZE)
SLEW_ALTIT_MINUS#(>K:SLEW_ALTIT_MINUS)
SLEW_ALTIT_PLUS#(>K:SLEW_ALTIT_PLUS)
SLEW_ALTIT_UP_FAST#(>K:SLEW_ALTIT_UP_FAST)
SLEW_ALTIT_UP_SLOW#(>K:SLEW_ALTIT_UP_SLOW)
SLEW_BANK_MINUS#(>K:SLEW_BANK_MINUS)
SLEW_BANK_PLUS#(>K:SLEW_BANK_PLUS)
SLEW_FREEZE#(>K:SLEW_FREEZE)
SLEW_HEADING_MINUS#(>K:SLEW_HEADING_MINUS)
SLEW_HEADING_PLUS#(>K:SLEW_HEADING_PLUS)
SLEW_LEFT#(>K:SLEW_LEFT)
SLEW_OFF#(>K:SLEW_OFF)
SLEW_ON#(>K:SLEW_ON)
SLEW_PITCH_DN_FAST#(>K:SLEW_PITCH_DN_FAST)
SLEW_PITCH_DN_SLOW#(>K:SLEW_PITCH_DN_SLOW)
SLEW_PITCH_FREEZE#(>K:SLEW_PITCH_FREEZE)
SLEW_PITCH_MINUS#(>K:SLEW_PITCH_MINUS)
SLEW_PITCH_PLUS#(>K:SLEW_PITCH_PLUS)
SLEW_PITCH_UP_FAST#(>K:SLEW_PITCH_UP_FAST)
SLEW_PITCH_UP_SLOW#(>K:SLEW_PITCH_UP_SLOW)
SLEW_RIGHT#(>K:SLEW_RIGHT)
SLEW_TOGGLE#(>K:SLEW_TOGGLE)
SLING_PICKUP_RELEASE#(>K:SLING_PICKUP_RELEASE)
SMOKE_OFF#(>K:SMOKE_OFF)
SMOKE_ON#(>K:SMOKE_ON)
SMOKE_TOGGLE#(>K:SMOKE_TOGGLE)
SOUND_OFF#(>K:SOUND_OFF)
SOUND_ON#(>K:SOUND_ON)
SOUND_TOGGLE#(>K:SOUND_TOGGLE)
STEERING_DEC#(>K:STEERING_DEC)
STEERING_INC#(>K:STEERING_INC)
TAKEOFF_ASSIST_ARM_TOGGLE#(>K:TAKEOFF_ASSIST_ARM_TOGGLE)
TAKEOFF_ASSIST_FIRE#(>K:TAKEOFF_ASSIST_FIRE)
TOGGLE_AFTERBURNER#(>K:TOGGLE_AFTERBURNER)
TOGGLE_AFTERBURNER1#(>K:TOGGLE_AFTERBURNER1)
TOGGLE_AFTERBURNER2#(>K:TOGGLE_AFTERBURNER2)
TOGGLE_AFTERBURNER3#(>K:TOGGLE_AFTERBURNER3)
TOGGLE_AFTERBURNER4#(>K:TOGGLE_AFTERBURNER4)
TOGGLE_AIRCRAFT_EXIT#(>K:TOGGLE_AIRCRAFT_EXIT)
TOGGLE_AIRCRAFT_LABELS#(>K:TOGGLE_AIRCRAFT_LABELS)
TOGGLE_AIRPORT_NAME_DISPLAY#(>K:TOGGLE_AIRPORT_NAME_DISPLAY)
TOGGLE_ALL_STARTERS#(>K:TOGGLE_ALL_STARTERS)
TOGGLE_ALTERNATE_STATIC#(>K:TOGGLE_ALTERNATE_STATIC)
TOGGLE_AUTOFEATHER_ARM#(>K:TOGGLE_AUTOFEATHER_ARM)
TOGGLE_ELECTRIC_VACUUM_PUMP#(>K:TOGGLE_ELECTRIC_VACUUM_PUMP)
TOGGLE_FEATHER_SWITCHES#(>K:TOGGLE_FEATHER_SWITCHES)
TOGGLE_FEATHER_SWITCH_1#(>K:TOGGLE_FEATHER_SWITCH_1)
TOGGLE_FEATHER_SWITCH_2#(>K:TOGGLE_FEATHER_SWITCH_2)
TOGGLE_FEATHER_SWITCH_3#(>K:TOGGLE_FEATHER_SWITCH_3)
TOGGLE_FEATHER_SWITCH_4#(>K:TOGGLE_FEATHER_SWITCH_4)
TOGGLE_GPS_DRIVES_NAV1#(>K:TOGGLE_GPS_DRIVES_NAV1)
TOGGLE_HYDRAULIC_FAILURE#(>K:TOGGLE_HYDRAULIC_FAILURE)
TOGGLE_LAUNCH_BAR_SWITCH#(>K:TOGGLE_LAUNCH_BAR_SWITCH)
TOGGLE_MASTER_IGNITION_SWITCH#(>K:TOGGLE_MASTER_IGNITION_SWITCH)
TOGGLE_PRIMER#(>K:TOGGLE_PRIMER)
TOGGLE_PRIMER1#(>K:TOGGLE_PRIMER1)
TOGGLE_PRIMER2#(>K:TOGGLE_PRIMER2)
TOGGLE_PRIMER3#(>K:TOGGLE_PRIMER3)
TOGGLE_PRIMER4#(>K:TOGGLE_PRIMER4)
TOGGLE_PROPELLER_SYNC#(>K:TOGGLE_PROPELLER_SYNC)
TOGGLE_RACERESULTS_WINDOW#(>K:TOGGLE_RACERESULTS_WINDOW)
TOGGLE_STARTER1#(>K:TOGGLE_STARTER1)
TOGGLE_STARTER2#(>K:TOGGLE_STARTER2)
TOGGLE_STARTER3#(>K:TOGGLE_STARTER3)
TOGGLE_STARTER4#(>K:TOGGLE_STARTER4)
TOGGLE_STATIC_PORT_BLOCKAGE#(>K:TOGGLE_STATIC_PORT_BLOCKAGE)
TOGGLE_TAILWHEEL_LOCK#(>K:TOGGLE_TAILWHEEL_LOCK)
TOGGLE_TAIL_HOOK_HANDLE#(>K:TOGGLE_TAIL_HOOK_HANDLE)
TOGGLE_TURN_INDICATOR_SWITCH#(>K:TOGGLE_TURN_INDICATOR_SWITCH)
TOGGLE_VACUUM_FAILURE#(>K:TOGGLE_VACUUM_FAILURE)
TOGGLE_VARIOMETER_SWITCH#(>K:TOGGLE_VARIOMETER_SWITCH)
TOGGLE_WATER_BALLAST_VALVE#(>K:TOGGLE_WATER_BALLAST_VALVE)
TOGGLE_WATER_RUDDER#(>K:TOGGLE_WATER_RUDDER)
TOGGLE_WING_FOLD#(>K:TOGGLE_WING_FOLD)
TRUE_AIRSPEED_CAL_DEC#(>K:TRUE_AIRSPEED_CAL_DEC)
TRUE_AIRSPEED_CAL_INC#(>K:TRUE_AIRSPEED_CAL_INC)
TURBINE_IGNITION_SWITCH_TOGGLE#(>K:TURBINE_IGNITION_SWITCH_TOGGLE)
VIDEO_RECORD_TOGGLE#(>K:VIDEO_RECORD_TOGGLE)
VIRTUAL_COPILOT_ACTION#(>K:VIRTUAL_COPILOT_ACTION)
VIRTUAL_COPILOT_TOGGLE#(>K:VIRTUAL_COPILOT_TOGGLE)
VSI_BUG_SELECT#(>K:VSI_BUG_SELECT)
YAXIS_INVERT_TOGGLE#(>K:YAXIS_INVERT_TOGGLE)
//Microsoft/Generic/Warning System
CABIN_NO_SMOKING_ALERT_SWITCH_TOGGLE#(>K:CABIN_NO_SMOKING_ALERT_SWITCH_TOGGLE)
CABIN_SEATBELTS_ALERT_SWITCH_TOGGLE#(>K:CABIN_SEATBELTS_ALERT_SWITCH_TOGGLE)
EXTINGUISH_ENGINE_FIRE#(>K:EXTINGUISH_ENGINE_FIRE)
//Microsoft/Longitude/Avionics
AS3000_TSC_Vertical_BottomKnob_Large_DEC#(>H:AS3000_TSC_Vertical_BottomKnob_Large_DEC)
AS3000_TSC_Vertical_BottomKnob_Large_INC#(>H:AS3000_TSC_Vertical_BottomKnob_Large_INC)
AS3000_TSC_Vertical_BottomKnob_Push#(>H:AS3000_TSC_Vertical_BottomKnob_Push)
AS3000_TSC_Vertical_BottomKnob_Push_Long#(>H:AS3000_TSC_Vertical_BottomKnob_Push_Long)
AS3000_TSC_Vertical_BottomKnob_Small_DEC#(>H:AS3000_TSC_Vertical_BottomKnob_Small_DEC)
AS3000_TSC_Vertical_BottomKnob_Small_INC#(>H:AS3000_TSC_Vertical_BottomKnob_Small_INC)
AS3000_TSC_Vertical_TopKnob_Large_DEC#(>H:AS3000_TSC_Vertical_TopKnob_Large_DEC)
AS3000_TSC_Vertical_TopKnob_Large_INC#(>H:AS3000_TSC_Vertical_TopKnob_Large_INC)
AS3000_TSC_Vertical_TopKnob_Small_DEC#(>H:AS3000_TSC_Vertical_TopKnob_Small_DEC)
AS3000_TSC_Vertical_TopKnob_Small_INC#(>H:AS3000_TSC_Vertical_TopKnob_Small_INC)
//PMDG/DC-6/Anti-Ice
PMDGDC6_AIRFOIL_HEAT_TOGGLE#21601 (>K:ROTOR_BRAKE)
PMDGDC6_CABIN_HEAT_TOGGLE#21401 (>K:ROTOR_BRAKE
PMDGDC6_CARB_1_TOGGLE#21801 (>K:ROTOR_BRAKE)
PMDGDC6_CARB_2_TOGGLE#21901 (>K:ROTOR_BRAKE)
PMDGDC6_CARB_3_TOGGLE#22001 (>K:ROTOR_BRAKE)
PMDGDC6_CARB_4_TOGGLE#22101 (>K:ROTOR_BRAKE)
PMDGDC6_ENG_1_COWL_DEC#12408 (>K:ROTOR_BRAKE)
PMDGDC6_ENG_1_COWL_INC#12407 (>K:ROTOR_BRAKE)
PMDGDC6_ENG_2_COWL_DEC#12508 (>K:ROTOR_BRAKE)
PMDGDC6_ENG_2_COWL_INC#12507 (>K:ROTOR_BRAKE)
PMDGDC6_ENG_3_COWL_DEC#12608 (>K:ROTOR_BRAKE)
PMDGDC6_ENG_3_COWL_INC#12607 (>K:ROTOR_BRAKE)
PMDGDC6_ENG_4_COWL_DEC#12708 (>K:ROTOR_BRAKE)
PMDGDC6_ENG_4_COWL_INC#12707 (>K:ROTOR_BRAKE)
PMDGDC6_PITOT_TOGGLE#09601 (>K:ROTOR_BRAKE)
PMDGDC6_PROP_DEICE_TOGGLE#21701 (>K:ROTOR_BRAKE)
//PMDG/DC-6/Autopilot
PMDGDC6_AP_ALT_HOLD_TOGGLE#43601 (>K:ROTOR_BRAKE)
PMDGDC6_AP_ALT_HOLD_TOGGLE#43607 (>K:ROTOR_BRAKE)
PMDGDC6_AP_APPR#44508 (>K:ROTOR_BRAKE) (SLEEP:100) 44508 (>K:ROTOR_BRAKE) (SLEEP:100) 44507 (>K:ROTOR_BRAKE) (SLEEP:100) 44507 (>K:ROTOR_BRAKE)
PMDGDC6_AP_GYROPILOT#(L:dc6_445_obj, enum) 1 == if{ 44508 (>K:ROTOR_BRAKE) } 
PMDGDC6_AP_HDG_DOWN#44208 (>K:ROTOR_BRAKE)
PMDGDC6_AP_HDG_UP#44207 (>K:ROTOR_BRAKE)
PMDGDC6_AP_LEVER_TOGGLE#40401 (>K:ROTOR_BRAKE)
PMDGDC6_AP_LOC#44508 (>K:ROTOR_BRAKE) (SLEEP:100) 44508 (>K:ROTOR_BRAKE) (SLEEP:100) 44507 (>K:ROTOR_BRAKE)
PMDGDC6_AP_MODE_DEC#44508 (>K:ROTOR_BRAKE)
PMDGDC6_AP_MODE_INC#44507 (>K:ROTOR_BRAKE)
PMDGDC6_AP_MODE_TOGGLE#(L:dc6_445_dir) s1 (L:dc6_445_obj, enum) 2 == if{ 44508 s1 } (L:dc6_445_obj, enum) 0 == if{ 44507 s1 } (L:dc6_445_obj, enum) 1 == (L:dc6_445_dir) 0 == and if{ 44507 s1 } l1 (>K:ROTOR_BRAKE) l1 (>L:dc6_445_dir)
PMDGDC6_AP_NAV_OFF#(L:dc6_445_obj, enum) 1 == if{ 44508 (>K:ROTOR_BRAKE) } 
PMDGDC6_AP_NAV_ON#(L:dc6_445_obj, enum) 0 == if{ 44507 (>K:ROTOR_BRAKE) } els{ (L:dc6_445_obj, enum) 2 == if{ 44508 (>K:ROTOR_BRAKE) } }
PMDGDC6_AP_PITCH_DOWN#44007 (>K:ROTOR_BRAKE)
PMDGDC6_AP_PITCH_UP#44008 (>K:ROTOR_BRAKE)
PMDGDC6_AP_TOGGLE#43407 (>K:ROTOR_BRAKE)
PMDGDC6_AUTOPILOT_LEVER_TOGGLE#40401 (>K:ROTOR_BRAKE)
PMDGDC6_AUTOPILOT_TOGGLE#43401 (>K:ROTOR_BRAKE)
//PMDG/DC-6/Engines
PMDGDC6_SUPERCHARGER_1_TOGGLE#128101 (>K:ROTOR_BRAKE)
PMDGDC6_SUPERCHARGER_2_TOGGLE#128201 (>K:ROTOR_BRAKE)
PMDGDC6_SUPERCHARGER_3_TOGGLE##128301 (>K:ROTOR_BRAKE)
PMDGDC6_SUPERCHARGER_4_TOGGLE#128401 (>K:ROTOR_BRAKE)
//PMDG/DC-6/Fuel
PMDGDC6_ALT_FUEL_BOOST_1_TOGGLE#(L:dc6_073_dir) s1 (L:dc6_073_obj, enum) 2 == if{ 07308 s1 } (L:dc6_073_obj, enum) 0 == if{ 07307 s1 } (L:dc6_073_obj, enum) 1 == (L:dc6_073_dir) 0 == and if{ 07307 s1 } l1 (>K:ROTOR_BRAKE) l1 (>L:dc6_073_dir)
PMDGDC6_ALT_FUEL_BOOST_2_TOGGLE#(L:dc6_074_dir) s1 (L:dc6_074_obj, enum) 2 == if{ 07408 s1 } (L:dc6_074_obj, enum) 0 == if{ 07407 s1 } (L:dc6_074_obj, enum) 1 == (L:dc6_074_dir) 0 == and if{ 07407 s1 } l1 (>K:ROTOR_BRAKE) l1 (>L:dc6_074_dir)
PMDGDC6_ALT_FUEL_BOOST_3_TOGGLE#(L:dc6_075_dir) s1 (L:dc6_075_obj, enum) 2 == if{ 07508 s1 } (L:dc6_075_obj, enum) 0 == if{ 07507 s1 } (L:dc6_075_obj, enum) 1 == (L:dc6_075_dir) 0 == and if{ 07507 s1 } l1 (>K:ROTOR_BRAKE) l1 (>L:dc6_075_dir)
PMDGDC6_ALT_FUEL_BOOST_4_TOGGLE#(L:dc6_075_dir) s1 (L:dc6_075_obj, enum) 2 == if{ 07508 s1 } (L:dc6_075_obj, enum) 0 == if{ 07507 s1 } (L:dc6_075_obj, enum) 1 == (L:dc6_075_dir) 0 == and if{ 07507 s1 } l1 (>K:ROTOR_BRAKE) l1 (>L:dc6_075_dir) PMDGDC6_ALT_FUEL_BOOST_4_TOGGLE#(L:dc6_076_dir) s1 (L:dc6_076_obj, enum) 2 == if{ 07608 s1 } (L:dc6_076_obj, enum) 0 == if{ 07607 s1 } (L:dc6_076_obj, enum) 1 == (L:dc6_076_dir) 0 == and if{ 07607 s1 } l1 (>K:ROTOR_BRAKE) l1 (>L:dc6_076_dir)
//PMDG/DC-6/Gear
PMDGDC6_GEAR_DOWN#40507 (>K:ROTOR_BRAKE)
PMDGDC6_GEAR_UP#40508 (>K:ROTOR_BRAKE)
PMDGDC6_GUST_LOCK_OFF#0 (>L:dc6_398_obj, bool)
PMDGDC6_GUST_LOCK_ON#1 (>L:dc6_398_obj, bool)
//PMDG/DC-6/Miscellaneous
PMDGDC6_TABLET_ABORT#>0 (>L:AfeBeforeStart, number) 0 (>L:AfeAfterStart, bool) 0 (>L:AfeBeforeTakeoff, bool) 0 (>L:AfeTakeoffDry, bool) 0 (>L:AfeTakeoffWet, bool) 0 (>L:AfeCruise, bool) 0 (>L:AfeDescent, bool) 0 (>L:AfeInRange, bool) 0 (>L:AfeBeforeLanding, bool) 0 (>L:AfeAfterLanding, bool) 0 (>L:AfeParking, bool) 29 (>K:ROTOR_BRAKE)
PMDGDC6_TABLET_AFTER_LANDING#0 (>L:AfeBeforeStart, number) 0 (>L:AfeAfterStart, bool) 0 (>L:AfeBeforeTakeoff, bool) 0 (>L:AfeTakeoffDry, bool) 0 (>L:AfeTakeoffWet, bool) 0 (>L:AfeCruise, bool) 0 (>L:AfeDescent, bool) 0 (>L:AfeInRange, bool) 0 (>L:AfeBeforeLanding, bool) 0 (>L:AfeParking, bool) (L:AfeAfterLanding, bool) ! (>L:AfeAfterLanding, bool) (L:AfeAfterLanding, bool) if{ 25 (>K:ROTOR_BRAKE) } els{ 26 (>K:ROTOR_BRAKE) }
PMDGDC6_TABLET_AFTER_START#0 (>L:AfeBeforeStart, number) 0 (>L:AfeBeforeTakeoff, bool) 0 (>L:AfeTakeoffDry, bool) 0 (>L:AfeTakeoffWet, bool) 0 (>L:AfeCruise, bool) 0 (>L:AfeDescent, bool) 0 (>L:AfeInRange, bool) 0 (>L:AfeBeforeLanding, bool) 0 (>L:AfeAfterLanding, bool) 0 (>L:AfeParking, bool) (L:AfeAfterStart, bool) ! (>L:AfeAfterStart, bool) (L:AfeAfterStart, bool) if{ 9 (>K:ROTOR_BRAKE) } els{ 10 (>K:ROTOR_BRAKE) }
PMDGDC6_TABLET_BEFORE_LANDING#0 (>L:AfeBeforeStart, number) 0 (>L:AfeAfterStart, bool) 0 (>L:AfeBeforeTakeoff, bool) 0 (>L:AfeTakeoffDry, bool) 0 (>L:AfeTakeoffWet, bool) 0 (>L:AfeCruise, bool) 0 (>L:AfeDescent, bool) 0 (>L:AfeInRange, bool) 0 (>L:AfeAfterLanding, bool) 0 (>L:AfeParking, bool) (L:AfeBeforeLanding, bool) ! (>L:AfeBeforeLanding, bool) (L:AfeBeforeLanding, bool) if{ 23 (>K:ROTOR_BRAKE) } els{ 24 (>K:ROTOR_BRAKE) }
PMDGDC6_TABLET_BEFORE_START#0 (>L:AfeAfterStart, bool) 0 (>L:AfeBeforeTakeoff, bool) 0 (>L:AfeTakeoffDry, bool) 0 (>L:AfeTakeoffWet, bool) 0 (>L:AfeCruise, bool) 0 (>L:AfeDescent, bool) 0 (>L:AfeInRange, bool) 0 (>L:AfeBeforeLanding, bool) 0 (>L:AfeAfterLanding, bool) 0 (>L:AfeParking, bool) (L:AfeBeforeStart, bool) ! (>L:AfeBeforeStart, bool) (L:AfeBeforeStart, bool) if{ 7 (>K:ROTOR_BRAKE) } els{ 8 (>K:ROTOR_BRAKE) }
PMDGDC6_TABLET_BEFORE_TAKEOFF#0 (>L:AfeBeforeStart, number) 0 (>L:AfeAfterStart, bool) 0 (>L:AfeTakeoffDry, bool) 0 (>L:AfeTakeoffWet, bool) 0 (>L:AfeCruise, bool) 0 (>L:AfeDescent, bool) 0 (>L:AfeInRange, bool) 0 (>L:AfeBeforeLanding, bool) 0 (>L:AfeAfterLanding, bool) 0 (>L:AfeParking, bool) (L:AfeBeforeTakeoff, bool) ! (>L:AfeBeforeTakeoff, bool) (L:AfeBeforeTakeoff, bool) if{ 11 (>K:ROTOR_BRAKE) } els{ 12 (>K:ROTOR_BRAKE) }
PMDGDC6_TABLET_CRUISE#0 (>L:AfeBeforeStart, number) 0 (>L:AfeAfterStart, bool) 0 (>L:AfeBeforeTakeoff, bool) 0 (>L:AfeTakeoffDry, bool) 0 (>L:AfeTakeoffWet, bool) 0 (>L:AfeDescent, bool) 0 (>L:AfeInRange, bool) 0 (>L:AfeBeforeLanding, bool) 0 (>L:AfeAfterLanding, bool) 0 (>L:AfeParking, bool) (L:AfeCruise, bool) ! (>L:AfeCruise, bool) (L:AfeCruise, bool) if{ 17 (>K:ROTOR_BRAKE) } els{ 18 (>K:ROTOR_BRAKE) }
PMDGDC6_TABLET_DESCENT#0 (>L:AfeBeforeStart, number) 0 (>L:AfeAfterStart, bool) 0 (>L:AfeBeforeTakeoff, bool) 0 (>L:AfeTakeoffDry, bool) 0 (>L:AfeTakeoffWet, bool) 0 (>L:AfeCruise, bool) 0 (>L:AfeInRange, bool) 0 (>L:AfeBeforeLanding, bool) 0 (>L:AfeAfterLanding, bool) 0 (>L:AfeParking, bool) (L:AfeDescent, bool) ! (>L:AfeDescent, bool) (L:AfeDescent, bool) if{ 19 (>K:ROTOR_BRAKE) } els{ 20 (>K:ROTOR_BRAKE) }
PMDGDC6_TABLET_IN_RANGE#0 (>L:AfeBeforeStart, number) 0 (>L:AfeAfterStart, bool) 0 (>L:AfeBeforeTakeoff, bool) 0 (>L:AfeTakeoffDry, bool) 0 (>L:AfeTakeoffWet, bool) 0 (>L:AfeCruise, bool) 0 (>L:AfeDescent, bool) 0 (>L:AfeBeforeLanding, bool) 0 (>L:AfeAfterLanding, bool) 0 (>L:AfeParking, bool) (L:AfeInRange, bool) ! (>L:AfeInRange, bool) (L:AfeInRange, bool) if{ 21 (>K:ROTOR_BRAKE) } els{ 22 (>K:ROTOR_BRAKE) }
PMDGDC6_TABLET_PARKING#0 (>L:AfeBeforeStart, number) 0 (>L:AfeAfterStart, bool) 0 (>L:AfeBeforeTakeoff, bool) 0 (>L:AfeTakeoffDry, bool) 0 (>L:AfeTakeoffWet, bool) 0 (>L:AfeCruise, bool) 0 (>L:AfeDescent, bool) 0 (>L:AfeInRange, bool) 0 (>L:AfeBeforeLanding, bool) 0 (>L:AfeAfterLanding, bool) (L:AfeParking, bool) ! (>L:AfeParking, bool) (L:AfeParking, bool) if{ 27 (>K:ROTOR_BRAKE) } els{ 28 (>K:ROTOR_BRAKE) }
PMDGDC6_TABLET_TAKEOFF_DRY#0 (>L:AfeBeforeStart, number) 0 (>L:AfeAfterStart, bool) 0 (>L:AfeBeforeTakeoff, bool) 0 (>L:AfeTakeoffWet, bool) 0 (>L:AfeCruise, bool) 0 (>L:AfeDescent, bool) 0 (>L:AfeInRange, bool) 0 (>L:AfeBeforeLanding, bool) 0 (>L:AfeAfterLanding, bool) 0 (>L:AfeParking, bool) (L:AfeTakeoffDry, bool) ! (>L:AfeTakeoffDry, bool) (L:AfeTakeoffDry, bool) if{ 13 (>K:ROTOR_BRAKE) } els{ 14 (>K:ROTOR_BRAKE) }
PMDGDC6_TABLET_TAKEOFF_WET#0 (>L:AfeBeforeStart, number) 0 (>L:AfeAfterStart, bool) 0 (>L:AfeBeforeTakeoff, bool) 0 (>L:AfeTakeoffDry, bool) 0 (>L:AfeCruise, bool) 0 (>L:AfeDescent, bool) 0 (>L:AfeInRange, bool) 0 (>L:AfeBeforeLanding, bool) 0 (>L:AfeAfterLanding, bool) 0 (>L:AfeParking, bool) (L:AfeTakeoffWet, bool) ! (>L:AfeTakeoffWet, bool) (L:AfeTakeoffWet, bool) if{ 15 (>K:ROTOR_BRAKE) } els{ 16 (>K:ROTOR_BRAKE) }
//Working Title/CJ4/Air Condition / Pressurization
WT_CJ4_CABIN_TEMP_DEC#(L:PASSENGER_KNOB_HEAT_2) 4 - 0 max (>L:PASSENGER_KNOB_HEAT_2)
WT_CJ4_CABIN_TEMP_INC#(L:PASSENGER_KNOB_HEAT_2) 4 + 100 min (>L:PASSENGER_KNOB_HEAT_2)
WT_CJ4_CLIMATE_CONTROL_COMPON#2 (>L:CLIMATE_CONTROL) (* COMP ON *) 2
WT_CJ4_CLIMATE_CONTROL_NORM#1 (>L:CLIMATE_CONTROL) (* NORM *) 1
WT_CJ4_CLIMATE_CONTROL_OFF#0 (>L:CLIMATE_CONTROL) (* OFF *) 0
WT_CJ4_COCKPIT_TEMP_DEC#(L:PASSENGER_KNOB_HEAT_1) 4 - 0 max (>L:PASSENGER_KNOB_HEAT_1)
WT_CJ4_COCKPIT_TEMP_INC#(L:PASSENGER_KNOB_HEAT_1) 4 + 100 min (>L:PASSENGER_KNOB_HEAT_1)
WT_CJ4_COPILOT_FAN_DEC#(L:PASSENGER_KNOB_AIR_2) 4 - 0 max (>L:PASSENGER_KNOB_AIR_2)
WT_CJ4_COPILOT_FAN_INC#(L:PASSENGER_KNOB_AIR_2) 4 + 100 min (>L:PASSENGER_KNOB_AIR_2)
WT_CJ4_PILOT_FAN_DEC#(L:PASSENGER_KNOB_AIR_1) 4 - 0 max (>L:PASSENGER_KNOB_AIR_1)
WT_CJ4_PILOT_FAN_INC#(L:PASSENGER_KNOB_AIR_1) 4 + 100 min (>L:PASSENGER_KNOB_AIR_1)
WT_CJ4_PRESSOURCE_FRESH#4 (>L:PRESSOURCE) (* FRESH *) 4
WT_CJ4_PRESSOURCE_L#1 (>L:PRESSOURCE) (* LEFT *) 1
WT_CJ4_PRESSOURCE_NORM#2 (>L:PRESSOURCE) (* NORM *) 2
WT_CJ4_PRESSOURCE_OFF#0 (>L:PRESSOURCE) (* OFF *) 0
WT_CJ4_PRESSOURCE_R#3 (>L:PRESSOURCE) (* RIGHT *) 3
WT_CJ4_PRESSURE_DUMP_PUSH#(>K:PRESSURIZATION_PRESSURE_DUMP_SWITCH)
//Working Title/CJ4/Anti-Ice
WT_CJ4_ANTIICE_ENG_LEFT_TOG#(>K:ANTI_ICE_TOGGLE_ENG1)
WT_CJ4_ANTIICE_ENG_LR_TOG#(>K:ANTI_ICE_TOGGLE_ENG1) (>K:ANTI_ICE_TOGGLE_ENG2)
WT_CJ4_ANTIICE_ENG_RIGHT_TOG#(>K:ANTI_ICE_TOGGLE_ENG2)
WT_CJ4_ANTIICE_PITOTS_TOG#(>K:PITOT_HEAT_TOGGLE)
WT_CJ4_ANTIICE_PITOT_1_OFF#1 (>K:PITOT_HEAT_OFF)
WT_CJ4_ANTIICE_PITOT_1_ON#1 (>K:PITOT_HEAT_ON)
WT_CJ4_ANTIICE_PITOT_1_TOG#1 (>K:PITOT_HEAT_TOGGLE) 
WT_CJ4_ANTIICE_PITOT_2_OFF#2 (>K:PITOT_HEAT_OFF)
WT_CJ4_ANTIICE_PITOT_2_ON#2 (>K:PITOT_HEAT_ON)
WT_CJ4_ANTIICE_PITOT_2_TOG#2 (>K:PITOT_HEAT_TOGGLE) 
WT_CJ4_ANTIICE_WINGENG_LEFT_TOG#(L:DEICE_Airframe_1) ! (>L:DEICE_Airframe_1) (L:DEICE_Airframe_1) ! (L:DEICE_Airframe_2) ! and (A:STRUCTURAL DEICE SWITCH, Bool) == if{ (>K:TOGGLE_STRUCTURAL_DEICE) }
WT_CJ4_ANTIICE_WINGENG_LR_TOG#(L:DEICE_Airframe_1) ! d (>L:DEICE_Airframe_1) (>L:DEICE_Airframe_2) (L:DEICE_Airframe_1) ! (A:STRUCTURAL DEICE SWITCH, Bool) == if{ (>K:TOGGLE_STRUCTURAL_DEICE) }
WT_CJ4_ANTIICE_WINGENG_RIGHT_TOG#(L:DEICE_Airframe_2) ! (>L:DEICE_Airframe_2) (L:DEICE_Airframe_1) ! (L:DEICE_Airframe_2) ! and (A:STRUCTURAL DEICE SWITCH, Bool) == if{ (>K:TOGGLE_STRUCTURAL_DEICE) }
WT_CJ4_WING_LIGHT_TOG#1 (L:LIGHTING_WING_1) ! d (>L:LIGHTING_WING_1) (>K:2:WING_LIGHTS_SET)
//Working Title/CJ4/Autopilot
WT_CJ4_AP_ALT_ALERT_CANCEL# 0 (>L:WT_CJ4_Altitude_Alerter_Active) 1 (>L:WT_CJ4_Altitude_Alerter_Cancel)
WT_CJ4_AP_ALT_FAST_DEC#1000 (>K:AP_ALT_VAR_DEC)
WT_CJ4_AP_ALT_FAST_INC#1000 (>K:AP_ALT_VAR_INC)
WT_CJ4_AP_ALT_PRESSED#(>H:WT_CJ4_AP_ALT_PRESSED)
WT_CJ4_AP_ALT_VAR_DEC#100 (>K:AP_ALT_VAR_DEC)
WT_CJ4_AP_ALT_VAR_INC#100 (>K:AP_ALT_VAR_INC)
WT_CJ4_AP_APPR_PRESSED#(>H:WT_CJ4_AP_APPR_PRESSED)
WT_CJ4_AP_BC_PRESSED#(>H:WT_CJ4_AP_BC_PRESSED)
WT_CJ4_AP_CRS1_DEC#(L:WT_CJ4_LNAV_MODE, Number) 2 == if{ (A:NAV OBS:2, degree) 1 - dnor (>K:VOR2_SET) } els{ (A:NAV OBS:1, degree) 1 - dnor (>K:VOR1_SET) }
WT_CJ4_AP_CRS1_INC#(L:WT_CJ4_LNAV_MODE, Number) 2 == if{ (A:NAV OBS:2, degree) 1 + dnor (>K:VOR2_SET) } els{ (A:NAV OBS:1, degree) 1 + dnor (>K:VOR1_SET) }
WT_CJ4_AP_CRS1_PRESSED#(L:WT_CJ4_LNAV_MODE, Number) 2 == if{ (A:HEADING INDICATOR, degrees) (>K:VOR2_SET) } els{ (A:HEADING INDICATOR, degrees) (>K:VOR1_SET) }
WT_CJ4_AP_FD_PRESSED#(>H:WT_CJ4_AP_FD_TOGGLE)
WT_CJ4_AP_FLC_PRESSED#(>H:WT_CJ4_AP_FLC_PRESSED)
WT_CJ4_AP_HALFBANK_PRESSED#(A:AUTOPILOT MAX BANK, degrees) 16 < if{ (>K:AP_MAX_BANK_INC) } els{ (>K:AP_MAX_BANK_DEC) }
WT_CJ4_AP_HDG_DEC#1 (>K:HEADING_BUG_DEC)
WT_CJ4_AP_HDG_FAST_DEC#(A:AUTOPILOT HEADING LOCK DIR:1, Degrees) 5 - dnor (>K:1:HEADING_BUG_SET)
WT_CJ4_AP_HDG_FAST_INC#(A:AUTOPILOT HEADING LOCK DIR:1, Degrees) 5 + dnor (>K:1:HEADING_BUG_SET)
WT_CJ4_AP_HDG_INC#1 (>K:HEADING_BUG_INC)
WT_CJ4_AP_HDG_PRESSED#(>H:WT_CJ4_AP_HDG_PRESSED)
WT_CJ4_AP_HDG_SYNC#(A:HEADING INDICATOR, degrees) (>K:HEADING_BUG_SET)
WT_CJ4_AP_MASTER_OFF#(A:AUTOPILOT DISENGAGED, Bool) if{ 0 (>K:AUTOPILOT_DISENGAGE_SET) } els{ 1 (>K:AUTOPILOT_DISENGAGE_SET) }
WT_CJ4_AP_MASTER_ON#(A:AUTOPILOT DISENGAGED, Bool) ! if{ (>K:AP_MASTER) (A:AUTOPILOT MASTER, Bool) ! if{ (>H:Generic_Autopilot_Manual_Off) } }
WT_CJ4_AP_NAV_PRESSED#(>H:WT_CJ4_AP_NAV_PRESSED)
WT_CJ4_AP_SPEED_DEC#(L:XMLVar_AirspeedIsInMach, Bool) if{ (>K:AP_MACH_VAR_DEC) } els{ (>K:AP_SPD_VAR_DEC) }
WT_CJ4_AP_SPEED_FAST_DEC#(L:XMLVAR_AirSpeedIsInMach) if{ (>K:AP_MACH_VAR_DEC) } els{ (A:AUTOPILOT AIRSPEED HOLD VAR, knot) 10 - 10 / near 10 * 0 max (>K:AP_SPD_VAR_SET) }
WT_CJ4_AP_SPEED_FAST_INC#(L:XMLVAR_AirSpeedIsInMach) if{ (>K:AP_MACH_VAR_INC) } els{ (A:AUTOPILOT AIRSPEED HOLD VAR, knot) 10 + 10 / ceil 10 * 0 max (>K:AP_SPD_VAR_SET) }
WT_CJ4_AP_SPEED_INC#(L:XMLVar_AirspeedIsInMach, Bool) if{ (>K:AP_MACH_VAR_INC) } els{ (>K:AP_SPD_VAR_INC) }
WT_CJ4_AP_SPEED_PRESSED#(L:XMLVAR_AirSpeedIsInMach, Bool) ! (>L:XMLVAR_AirSpeedIsInMach, Bool)
WT_CJ4_AP_VNAV_PRESSED#(>H:WT_CJ4_AP_VNAV_PRESSED)
WT_CJ4_AP_VS_DEC#(A:AUTOPILOT VERTICAL HOLD, bool) if{ (>K:AP_VS_VAR_DEC) } els{ (>K:AP_PITCH_REF_INC_DN) }
WT_CJ4_AP_VS_INC#(A:AUTOPILOT VERTICAL HOLD, bool) if{ (>K:AP_VS_VAR_INC) } els{ (>K:AP_PITCH_REF_INC_UP) }
WT_CJ4_AP_VS_PRESSED#(>H:WT_CJ4_AP_VS_PRESSED)
WT_CJ4_AP_XFR_PRESSED#(L:XMLVAR_PushXFR) ! (>L:XMLVAR_PushXFR)
WT_CJ4_AP_YD_PRESSED#(>K:YAW_DAMPER_TOGGLE)
//Working Title/CJ4/Avionics
CJ4_Generic_Upr_TILT_DEC#(>H:CJ4_Generic_Upr_TILT_DEC)
CJ4_Generic_Upr_TILT_INC#(>H:CJ4_Generic_Upr_TILT_INC)
Generic_Lwr_DATA_DEC#(>H:Generic_Lwr_DATA_DEC)
Generic_Lwr_DATA_INC#(>H:Generic_Lwr_DATA_INC)
Generic_Lwr_DATA_PUSH#(>H:Generic_Lwr_DATA_PUSH)
Generic_Lwr_DATA_PUSH_LONG#(>H:Generic_Lwr_DATA_PUSH_LONG)
Generic_Lwr_JOYSTICK_DOWN#(>H:Generic_Lwr_JOYSTICK_DOWN)
Generic_Lwr_JOYSTICK_LEFT#(>H:Generic_Lwr_JOYSTICK_LEFT)
Generic_Lwr_JOYSTICK_RIGHT#(>H:Generic_Lwr_JOYSTICK_RIGHT)
Generic_Lwr_JOYSTICK_UP#(>H:Generic_Lwr_JOYSTICK_UP)
Generic_Lwr_MENU_ADV_DEC#(>H:Generic_Lwr_MENU_ADV_DEC)
Generic_Lwr_MENU_ADV_INC#(>H:Generic_Lwr_MENU_ADV_INC)
Generic_Lwr_Push_CAS_PAGE#(>H:Generic_Lwr_Push_CAS_PAGE)
Generic_Lwr_Push_CKLST_1#(>H:Generic_Lwr_Push_CKLST_1)
Generic_Lwr_Push_Chart_1#(>H:Generic_Lwr_Push_Chart_1)
Generic_Lwr_Push_ENG#(>H:Generic_Lwr_Push_ENG)
Generic_Lwr_Push_ESC#(>H:Generic_Lwr_Push_ESC)
Generic_Lwr_Push_LWR_MENU#(>H:Generic_Lwr_Push_LWR_MENU)
Generic_Lwr_Push_MEM1_1#(>H:Generic_Lwr_Push_MEM1_1)
Generic_Lwr_Push_MEM2_1#(>H:Generic_Lwr_Push_MEM2_1)
Generic_Lwr_Push_MEM3_1#(>H:Generic_Lwr_Push_MEM3_1)
Generic_Lwr_Push_NAV_DATA#(>H:Generic_Lwr_Push_NAV_DATA)
Generic_Lwr_Push_PASSBRIEF_1#(>H:Generic_Lwr_Push_PASSBRIEF_1)
Generic_Lwr_Push_SYS#(>H:Generic_Lwr_Push_SYS)
Generic_Lwr_Push_TERR_WX#(>H:Generic_Lwr_Push_TERR_WX)
Generic_Lwr_Push_TFC#(>H:Generic_Lwr_Push_TFC)
Generic_Lwr_Push_UPR_MENU#(>H:Generic_Lwr_Push_UPR_MENU)
Generic_Lwr_Push_ZOOM_DEC#(>H:Generic_Lwr_Push_ZOOM_DEC)
Generic_Lwr_Push_ZOOM_INC#(>H:Generic_Lwr_Push_ZOOM_INC)
Generic_Upr_Data_DEC#(>H:Generic_Upr_Data_DEC)
Generic_Upr_Data_INC#(>H:Generic_Upr_Data_INC)
Generic_Upr_Data_PUSH#(>H:Generic_Upr_Data_PUSH)
Generic_Upr_MENU_ADV_DEC#(>H:Generic_Upr_MENU_ADV_DEC)
Generic_Upr_MENU_ADV_INC#(>H:Generic_Upr_MENU_ADV_INC)
Generic_Upr_Push_ESC#(>H:Generic_Upr_Push_ESC)
Generic_Upr_Push_ET#(>H:Generic_Upr_Push_ET)
Generic_Upr_Push_FRMT#(>H:Generic_Upr_Push_FRMT)
Generic_Upr_Push_NAV#(>H:Generic_Upr_Push_NAV)
Generic_Upr_Push_PFD_MENU#(>H:Generic_Upr_Push_PFD_MENU)
Generic_Upr_Push_REFS_MENU#(>H:Generic_Upr_Push_REFS_MENU)
Generic_Upr_Push_TERR_WX#(>H:Generic_Upr_Push_TERR_WX)
Generic_Upr_Push_TFC#(>H:Generic_Upr_Push_TFC)
Generic_Upr_RANGE_DEC#(>H:Generic_Upr_RANGE_DEC)
Generic_Upr_RANGE_INC#(>H:Generic_Upr_RANGE_INC)
WT_CJ4_BARO1_DEC#(L:XMLVAR_Baro1_ForcedToSTD) ! if{ 1 (>K:KOHLSMAN_DEC) (A:KOHLSMAN SETTING MB:1, mbars) 16 * (>L:XMLVAR_Baro1_SavedPressure) } els{ (L:XMLVAR_Baro1_SavedPressure) 5 - (>L:XMLVAR_Baro1_SavedPressure) }
WT_CJ4_BARO1_INC#(L:XMLVAR_Baro1_ForcedToSTD) ! if{ 1 (>K:KOHLSMAN_INC) (A:KOHLSMAN SETTING MB:1, mbars) 16 * (>L:XMLVAR_Baro1_SavedPressure) } els{ (L:XMLVAR_Baro1_SavedPressure) 5 + (>L:XMLVAR_Baro1_SavedPressure) } 
WT_CJ4_BARO1_STD_PUSH#(L:XMLVAR_Baro1_ForcedToSTD) ! (>L:XMLVAR_Baro1_ForcedToSTD) (L:XMLVAR_Baro1_ForcedToSTD) if{ (A:KOHLSMAN SETTING MB:1, mbars) 16 * (>L:XMLVAR_Baro1_SavedPressure) 1 (>K:BAROMETRIC_STD_PRESSURE) } els{ 1 (L:XMLVAR_Baro1_SavedPressure, number) (>K:2:KOHLSMAN_SET) 2 (L:XMLVAR_Baro1_SavedPressure, number) (>K:2:KOHLSMAN_SET) }
WT_CJ4_BARO2_DEC#(L:XMLVAR_Baro1_ForcedToSTD) ! if{ 1 (>K:KOHLSMAN_DEC) (A:KOHLSMAN SETTING MB:1, mbars) 16 * (>L:XMLVAR_Baro1_SavedPressure) } els{ (L:XMLVAR_Baro1_SavedPressure) 5 - (>L:XMLVAR_Baro1_SavedPressure) }
WT_CJ4_BARO2_INC#(L:XMLVAR_Baro1_ForcedToSTD) ! if{ 1 (>K:KOHLSMAN_INC) (A:KOHLSMAN SETTING MB:1, mbars) 16 * (>L:XMLVAR_Baro1_SavedPressure) } els{ (L:XMLVAR_Baro1_SavedPressure) 5 + (>L:XMLVAR_Baro1_SavedPressure) }
WT_CJ4_BARO2_STD_PUSH#(L:XMLVAR_Baro1_ForcedToSTD) ! (>L:XMLVAR_Baro1_ForcedToSTD) (L:XMLVAR_Baro1_ForcedToSTD) if{ (A:KOHLSMAN SETTING MB:1, mbars) 16 * (>L:XMLVAR_Baro1_SavedPressure) 1 (>K:BAROMETRIC_STD_PRESSURE) } els{ 1 (L:XMLVAR_Baro1_SavedPressure) (>K:2:KOHLSMAN_SET) 2 (L:XMLVAR_Baro1_SavedPressure) (>K:2:KOHLSMAN_SET) } 
WT_CJ4_BARO3_DEC#(L:XMLVAR_Baro2_ForcedToSTD) ! if{ 2 (>K:KOHLSMAN_DEC) (A:KOHLSMAN SETTING MB:1, mbars) 16 * (>L:XMLVAR_Baro2_SavedPressure) } els{ (L:XMLVAR_Baro2_SavedPressure) 5 - (>L:XMLVAR_Baro2_SavedPressure) } 
WT_CJ4_BARO3_INC#(L:XMLVAR_Baro2_ForcedToSTD) ! if{ 2 (>K:KOHLSMAN_INC) (A:KOHLSMAN SETTING MB:1, mbars) 16 * (>L:XMLVAR_Baro2_SavedPressure) } els{ (L:XMLVAR_Baro2_SavedPressure) 5 + (>L:XMLVAR_Baro2_SavedPressure) } 
//Working Title/CJ4/Controls
AILERON_TRIM_LEFT_WING_DN#(A:AUTOPILOT MASTER, bool) ! if{ (A:RUDDER TRIM PCT, percent) 0.6250 - 163.83 * -16383 max 16383 min (>K:RUDDER_TRIM_SET_EX1) } 2 (>L:XMLVAR_RudderTrim_Switch_1)
AILERON_TRIM_RIGHT_WING_DN#(A:AILERON TRIM PCT, percent) 1 + 163.83 * -16383 max 16383 min (>K:AILERON_TRIM_SET_EX1) }
RUDDER_TRIM_NOSE_LEFT#(A:AUTOPILOT MASTER, bool) ! if{ (A:RUDDER TRIM PCT, percent) 0.6250 - 163.83 * -16383 max 16383 min (>K:RUDDER_TRIM_SET_EX1) }
RUDDER_TRIM_NOSE_RIGHT#(A:AUTOPILOT MASTER, bool) ! if{ (A:RUDDER TRIM PCT, percent) 0.6250 + 163.83 * -16383 max 16383 min (>K:RUDDER_TRIM_SET_EX1) }
SEC_ELEV_TRIM_ENABLE_TOGGLE#(L:SEC_ELEV_TRIM_ENABLE) ! (>L:SEC_ELEV_TRIM_ENABLE)
SECONDARY_ELEV_TRIM_NOSE_DOWN#(L:SEC_ELEV_TRIM_ENABLE) if{ (A:ELEVATOR TRIM PCT, percent) 0.666667 - 163.83 * 16383 min -16383 max (>K:ELEVATOR_TRIM_SET) }
SECONDARY_ELEV_TRIM_NOSE_UP#(L:SEC_ELEV_TRIM_ENABLE) if{ (A:ELEVATOR TRIM PCT, percent) 0.666667 + 163.83 * 16383 min -16383 max (>K:ELEVATOR_TRIM_SET) }
//Working Title/CJ4/Electrical
WT_CJ4_AVIONICS_FTL_EMER_TOG#4 1 (>K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE) 23 (>K:ELECTRICAL_CIRCUIT_TOGGLE) 5 2 (>K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE) 24 (>K:ELECTRICAL_CIRCUIT_TOGGLE) 0 (>L:XMLVAR_AVIONICS_IsComposite) 49 (>K:ELECTRICAL_CIRCUIT_TOGGLE) (L:WT_CJ4_EMER_LIGHT_ARMED) ! (>L:WT_CJ4_EMER_LIGHT_ARMED)
WT_CJ4_AVIONICS_MASTER_DSP#1 (>A:BUS LOOKUP INDEX, number) (A:BUS CONNECTION ON:4, bool) if{ 4 1 (>K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE) } (A:CIRCUIT SWITCH ON:23, bool) if{ 23 (>K:ELECTRICAL_CIRCUIT_TOGGLE) } 2 (>A:BUS LOOKUP INDEX, number) (A:BUS CONNECTION ON:5, bool) ! if{ 5 2 (>K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE) } (A:CIRCUIT SWITCH ON:24, bool) ! if{ 24 (>K:ELECTRICAL_CIRCUIT_TOGGLE) } 1 (>L:XMLVAR_AVIONICS_IsComposite)
WT_CJ4_AVIONICS_MASTER_OFF#1 (>A:BUS LOOKUP INDEX, number) (A:BUS CONNECTION ON:4, bool) if{ 4 1 (>K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE) } (A:CIRCUIT SWITCH ON:23, bool) if{ 23 (>K:ELECTRICAL_CIRCUIT_TOGGLE) } 2 (>A:BUS LOOKUP INDEX, number) (A:BUS CONNECTION ON:5, bool) if{ 5 2 (>K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE) } (A:CIRCUIT SWITCH ON:24, bool) if{ 24 (>K:ELECTRICAL_CIRCUIT_TOGGLE) } 0 (>L:XMLVAR_AVIONICS_IsComposite)
WT_CJ4_AVIONICS_MASTER_ON#1 (>A:BUS LOOKUP INDEX, number) (A:BUS CONNECTION ON:4, bool) ! if{ 4 1 (>K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE) } (A:CIRCUIT SWITCH ON:23, bool) ! if{ 23 (>K:ELECTRICAL_CIRCUIT_TOGGLE) } 2 (>A:BUS LOOKUP INDEX, number) (A:BUS CONNECTION ON:5, bool) ! if{ 5 2 (>K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE) } (A:CIRCUIT SWITCH ON:24, bool) ! if{ 24 (>K:ELECTRICAL_CIRCUIT_TOGGLE) } 0 (>L:XMLVAR_AVIONICS_IsComposite)
WT_CJ4_EMER_LIGHT_ARM#1 (>L:WT_CJ4_EMER_LIGHT_ARMED) }
WT_CJ4_EMER_LIGHT_OFF#0 (>L:WT_CJ4_EMER_LIGHT_ARMED) }
WT_CJ4_EMER_LIGHT_TOG#(L:WT_CJ4_EMER_LIGHT_ARMED) ! (>L:WT_CJ4_EMER_LIGHT_ARMED)
WT_CJ4_GENERATOR_L_OFF#(A:GENERAL ENG MASTER ALTERNATOR:1, bool) if{ (>K:TOGGLE_ALTERNATOR1) }
WT_CJ4_GENERATOR_L_ON#(A:GENERAL ENG MASTER ALTERNATOR:1, bool) ! if{ (>K:TOGGLE_ALTERNATOR1) }
WT_CJ4_GENERATOR_R_OFF#(A:GENERAL ENG MASTER ALTERNATOR:2, bool) if{ (>K:TOGGLE_ALTERNATOR2) }
WT_CJ4_GENERATOR_R_ON#(A:GENERAL ENG MASTER ALTERNATOR:2, bool) ! if{ (>K:TOGGLE_ALTERNATOR2) }
WT_CJ4_GEN_LR_TOG#(>K:TOGGLE_ALTERNATOR1) (>K:TOGGLE_ALTERNATOR2)
WT_CJ4_GEN_L_RESET#1 (>L:MF_WTCJ4_Alternator_1_Reset,bool)
WT_CJ4_GEN_R_RESET#1 (>L:MF_WTCJ4_Alternator_2_Reset,bool)
WT_CJ4_MASTER_BATTERY_EMER#(A:ELECTRICAL MASTER BATTERY:1, bool) ! if{ 1 (>K:TOGGLE_MASTER_BATTERY) } 1 (>L:XMLVAR_Essential_Bus_ON) 1 (>A:BUS LOOKUP INDEX, Number) (A:BUS CONNECTION ON:2, Bool) (L:XMLVAR_Essential_Bus_ON) == if{ 2 1 (>K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE) } (L:XMLVAR_Essential_Bus_ON) if{ 1 (>A:BUS LOOKUP INDEX, Number) (A:BUS CONNECTION ON:3, Bool) if{ 1 3 (>K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE) } 2 (>A:BUS LOOKUP INDEX, Number) (A:BUS CONNECTION ON:3, Bool) ! if{ 2 3 (>K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE) } } els{ 1 (>A:BUS LOOKUP INDEX, Number) (A:BUS CONNECTION ON:3, Bool) ! if{ 1 3 (>K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE) } 2 (>A:BUS LOOKUP INDEX, Number) (A:BUS CONNECTION ON:3, Bool) if{ 2 3 (>K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE) } }
WT_CJ4_MASTER_BATTERY_OFF#(A:ELECTRICAL MASTER BATTERY:1, bool) if{ 1 (>K:TOGGLE_MASTER_BATTERY) } 0 (>L:XMLVAR_Essential_Bus_ON) 1 (>A:BUS LOOKUP INDEX, Number) (A:BUS CONNECTION ON:2, Bool) (L:XMLVAR_Essential_Bus_ON) == if{ 2 1 (>K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE) } (L:XMLVAR_Essential_Bus_ON) if{ 1 (>A:BUS LOOKUP INDEX, Number) (A:BUS CONNECTION ON:3, Bool) if{ 1 3 (>K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE) } 2 (>A:BUS LOOKUP INDEX, Number) (A:BUS CONNECTION ON:3, Bool) ! if{ 2 3 (>K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE) } } els{ 1 (>A:BUS LOOKUP INDEX, Number) (A:BUS CONNECTION ON:3, Bool) ! if{ 1 3 (>K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE) } 2 (>A:BUS LOOKUP INDEX, Number) (A:BUS CONNECTION ON:3, Bool) if{ 2 3 (>K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE) } }
WT_CJ4_MASTER_BATTERY_ON#(A:ELECTRICAL MASTER BATTERY:1, bool) ! if{ 1 (>K:TOGGLE_MASTER_BATTERY) } 0 (>L:XMLVAR_Essential_Bus_ON) 1 (>A:BUS LOOKUP INDEX, Number) (A:BUS CONNECTION ON:2, Bool) (L:XMLVAR_Essential_Bus_ON) == if{ 2 1 (>K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE) } (L:XMLVAR_Essential_Bus_ON) if{ 1 (>A:BUS LOOKUP INDEX, Number) (A:BUS CONNECTION ON:3, Bool) if{ 1 3 (>K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE) } 2 (>A:BUS LOOKUP INDEX, Number) (A:BUS CONNECTION ON:3, Bool) ! if{ 2 3 (>K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE) } } els{ 1 (>A:BUS LOOKUP INDEX, Number) (A:BUS CONNECTION ON:3, Bool) ! if{ 1 3 (>K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE) } 2 (>A:BUS LOOKUP INDEX, Number) (A:BUS CONNECTION ON:3, Bool) if{ 2 3 (>K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE) } }
WT_CJ4_STBY_FTL_OFF#(A:CIRCUIT SWITCH ON:49,bool) if{ 49 (>K:ELECTRICAL_CIRCUIT_TOGGLE) }
WT_CJ4_STBY_FTL_ON#(A:CIRCUIT SWITCH ON:49,bool) ! if{ 49 (>K:ELECTRICAL_CIRCUIT_TOGGLE) }
WT_CJ4_STBY_FTL_TOG#49 (>K:ELECTRICAL_CIRCUIT_TOGGLE)
//Working Title/CJ4/Engines
WT_CJ4_ENG_RUNSTOP_L_PUSH#(A:GENERAL ENG MIXTURE LEVER POSITION:1, Percent) 0 > if{ (>K:MIXTURE1_LEAN) (A:GENERAL ENG FUEL VALVE:1, Bool) if{ (>K:TOGGLE_FUEL_VALVE_ENG1) } (A:TURB ENG IGNITION SWITCH EX1:1, enum) 0 == if{ 0 (>K:TURBINE_IGNITION_SWITCH_SET1) } } els{ (>K:MIXTURE1_RICH) (A:GENERAL ENG FUEL VALVE:1, Bool) ! if{ (>K:TOGGLE_FUEL_VALVE_ENG1) } (A:TURB ENG IGNITION SWITCH EX1:1, enum) 0 == if{ 1 (>K:TURBINE_IGNITION_SWITCH_SET1) } }
WT_CJ4_ENG_RUNSTOP_R_PUSH#(A:GENERAL ENG MIXTURE LEVER POSITION:2, Percent) 0 > if{ (>K:MIXTURE2_LEAN) (A:GENERAL ENG FUEL VALVE:2, Bool) if{ (>K:TOGGLE_FUEL_VALVE_ENG2) } (A:TURB ENG IGNITION SWITCH EX1:2, enum) 0 == if{ 0 (>K:TURBINE_IGNITION_SWITCH_SET2) } } els{ (>K:MIXTURE2_RICH) (A:GENERAL ENG FUEL VALVE:2, Bool) ! if{ (>K:TOGGLE_FUEL_VALVE_ENG2) } (A:TURB ENG IGNITION SWITCH EX1:2, enum) 0 == if{ 1 (>K:TURBINE_IGNITION_SWITCH_SET2) } }
WT_CJ4_ENG_START_DISENG#(A:GENERAL ENG STARTER:1, Bool) if{ (>K:TOGGLE_STARTER1) } (A:GENERAL ENG STARTER:2, Bool) if{ (>K:TOGGLE_STARTER2) }
WT_CJ4_ENG_START_LEFT#(>K:TOGGLE_STARTER1)
WT_CJ4_ENG_START_RIGHT#(>K:TOGGLE_STARTER2)
WT_CJ4_IGNITION_MAN_L_PUSH#2 1 (A:TURB ENG IGNITION SWITCH EX1:1, enum) 1 == ? (>K:TURBINE_IGNITION_SWITCH_SET1)
WT_CJ4_IGNITION_MAN_R_PUSH#2 1 (A:TURB ENG IGNITION SWITCH EX1:2, enum) 1 == ? (>K:TURBINE_IGNITION_SWITCH_SET2)
//Working Title/CJ4/Fuel
WT_CJ4_FUEL_BOOST_MAN_L#(>K:TOGGLE_ELECT_FUEL_PUMP1)
WT_CJ4_FUEL_BOOST_MAN_R#(>K:TOGGLE_ELECT_FUEL_PUMP2)
WT_CJ4_FUEL_XFER_LTK#(* CROSSFEED RIGHT TO LEFT *) (A:CIRCUIT SWITCH ON:45, bool) if{ 45 (>K:ELECTRICAL_CIRCUIT_TOGGLE) } (A:CIRCUIT SWITCH ON:46, bool) ! if{ 46 (>K:ELECTRICAL_CIRCUIT_TOGGLE) }
WT_CJ4_FUEL_XFER_OFF#(* OFF *) (A:CIRCUIT SWITCH ON:45, bool) if{ 45 (>K:ELECTRICAL_CIRCUIT_TOGGLE) } (A:CIRCUIT SWITCH ON:46, bool) if{ 46 (>K:ELECTRICAL_CIRCUIT_TOGGLE) }
WT_CJ4_FUEL_XFER_RTK#(* CROSSFEED LEFT TO RIGHT *) (A:CIRCUIT SWITCH ON:45, bool) ! if{ 45 (>K:ELECTRICAL_CIRCUIT_TOGGLE) } (A:CIRCUIT SWITCH ON:46, bool) if{ 46 (>K:ELECTRICAL_CIRCUIT_TOGGLE) }
//Working Title/CJ4/Lights
WT_CJ4_BEACON_LIGHT_OFF#0 (>L:LIGHTING_BEACON_1) 1 0 (>K:2:BEACON_LIGHTS_SET)
WT_CJ4_BEACON_LIGHT_ON#1 (>L:LIGHTING_BEACON_1) 1 1 (>K:2:BEACON_LIGHTS_SET)
WT_CJ4_BEACON_LIGHT_TOG#1 (L:LIGHTING_BEACON_1) ! d (>L:LIGHTING_BEACON_1) (>K:2:BEACON_LIGHTS_SET)
WT_CJ4_CABIN1_LIGHT_DEC#(L:LIGHTING_CABIN_1) 5 - 0 max 100 min d (>L:LIGHTING_CABIN_1) 5 (>K:2:LIGHT_POTENTIOMETER_SET) (A:LIGHT CABIN:1, Bool) (L:LIGHTING_CABIN_1) 0 > != if{ 1 (L:LIGHTING_CABIN_1) (>K:2:CABIN_LIGHTS_SET) }
WT_CJ4_CABIN1_LIGHT_INC#(L:LIGHTING_CABIN_1) 5 + 0 max 100 min d (>L:LIGHTING_CABIN_1) 5 (>K:2:LIGHT_POTENTIOMETER_SET) (A:LIGHT CABIN:1, Bool) (L:LIGHTING_CABIN_1) 0 > != if{ 1 (L:LIGHTING_CABIN_1) (>K:2:CABIN_LIGHTS_SET) }
WT_CJ4_CABIN1_LIGHT_TOGGLE#(A:LIGHT CABIN:1, Bool) ! if{ 1 1 (>K:2:CABIN_LIGHTS_SET) 100 5 (>K:2:LIGHT_POTENTIOMETER_SET) } els{ 0 5 (>K:2:LIGHT_POTENTIOMETER_SET) 1 0 (>K:2:CABIN_LIGHTS_SET) }
WT_CJ4_CABIN2_LIGHT_DEC#(L:LIGHTING_CABIN_2) 5 - 0 max 100 min d (>L:LIGHTING_CABIN_2) 6 (>K:2:LIGHT_POTENTIOMETER_SET) (A:LIGHT CABIN:2, Bool) (L:LIGHTING_CABIN_2) 0 > != if{ 2 (L:LIGHTING_CABIN_2) (>K:2:CABIN_LIGHTS_SET)
WT_CJ4_CABIN2_LIGHT_INC#(L:LIGHTING_CABIN_2) 5 + 0 max 100 min d (>L:LIGHTING_CABIN_2) 6 (>K:2:LIGHT_POTENTIOMETER_SET) (A:LIGHT CABIN:2, Bool) (L:LIGHTING_CABIN_2) 0 > != if{ 2 (L:LIGHTING_CABIN_2) (>K:2:CABIN_LIGHTS_SET)
WT_CJ4_CABIN2_LIGHT_TOGGLE#(A:LIGHT CABIN:2, Bool) ! if{ 2 1 (>K:2:CABIN_LIGHTS_SET) 100 6 (>K:2:LIGHT_POTENTIOMETER_SET) } els{ 0 6 (>K:2:LIGHT_POTENTIOMETER_SET) 2 0 (>K:2:CABIN_LIGHTS_SET) }
WT_CJ4_FLOOD_LIGHT_DEC#(L:LIGHTING_CABIN_3) 5 - 0 max 100 min d (>L:LIGHTING_CABIN_3) 4 (>K:2:LIGHT_POTENTIOMETER_SET) (A:LIGHT CABIN:3, Bool) (L:LIGHTING_CABIN_3) 0 > != if{ 3 (L:LIGHTING_CABIN_3) (>K:2:CABIN_LIGHTS_SET)
WT_CJ4_FLOOD_LIGHT_INC#(L:LIGHTING_CABIN_3) 5 + 0 max 100 min d (>L:LIGHTING_CABIN_3) 4 (>K:2:LIGHT_POTENTIOMETER_SET) (A:LIGHT CABIN:3, Bool) (L:LIGHTING_CABIN_3) 0 > != if{ 3 (L:LIGHTING_CABIN_3) (>K:2:CABIN_LIGHTS_SET)
WT_CJ4_FLOOD_LIGHT_TOGGLE#(A:LIGHT CABIN:3, Bool) ! if{ 3 1 (>K:2:CABIN_LIGHTS_SET) 100 4 (>K:2:LIGHT_POTENTIOMETER_SET) } els{ 0 4 (>K:2:LIGHT_POTENTIOMETER_SET) 3 0 (>K:2:CABIN_LIGHTS_SET) }
WT_CJ4_LANDING_LIGHTS_OFF#(A:LIGHT LANDING, Bool) if{ (>K:LANDING_LIGHTS_TOGGLE) }
WT_CJ4_LANDING_LIGHTS_ON#(A:LIGHT LANDING, Bool) ! if{ (>K:LANDING_LIGHTS_TOGGLE) (A:LIGHT TAXI, Bool) if{ (>K:TOGGLE_TAXI_LIGHTS) } (A:LIGHT RECOGNITION, Bool) if{ (>K:TOGGLE_RECOGNITION_LIGHTS) } }
WT_CJ4_LANDING_LIGHTS_TOGGLE#(>K:LANDING_LIGHTS_TOGGLE) (A:LIGHT TAXI, Bool) if{ (>K:TOGGLE_TAXI_LIGHTS) } (A:LIGHT RECOGNITION, Bool) if{ (>K:TOGGLE_RECOGNITION_LIGHTS) }
WT_CJ4_LOGO_LIGHT_TOGGLE#1 (L:LIGHTING_LOGO_1) ! d (>L:LIGHTING_LOGO_1) (>K:2:LOGO_LIGHTS_SET)
WT_CJ4_MFD1_LIGHT_DEC#(L:LIGHTING_POTENTIOMETER_17) 5 - 0 max 100 min d (>L:LIGHTING_POTENTIOMETER_17) 17 (>K:2:LIGHT_POTENTIOMETER_SET)
WT_CJ4_MFD1_LIGHT_INC#(L:LIGHTING_POTENTIOMETER_17) 5 + 0 max 100 min d (>L:LIGHTING_POTENTIOMETER_17) 17 (>K:2:LIGHT_POTENTIOMETER_SET)
WT_CJ4_MFD2_LIGHT_DEC#(L:LIGHTING_POTENTIOMETER_18) 5 - 0 max 100 min d (>L:LIGHTING_POTENTIOMETER_18) 18 (>K:2:LIGHT_POTENTIOMETER_SET)
WT_CJ4_MFD2_LIGHT_INC#(L:LIGHTING_POTENTIOMETER_18) 5 + 0 max 100 min d (>L:LIGHTING_POTENTIOMETER_18) 18 (>K:2:LIGHT_POTENTIOMETER_SET)
WT_CJ4_NAV_LIGHT_OFF#0 (>L:LIGHTING_NAV_1) 1 0 (>K:2:NAV_LIGHTS_SET)
WT_CJ4_NAV_LIGHT_ON#1 (>L:LIGHTING_NAV_1) 1 1 (>K:2:NAV_LIGHTS_SET)
WT_CJ4_NAV_LIGHT_TOG#1 (L:LIGHTING_NAV_1) ! d (>L:LIGHTING_NAV_1) (>K:2:NAV_LIGHTS_SET)
WT_CJ4_PANEL_LIGHTS_DEC#(L:LIGHTING_Knob_Master, number) 10 - 10 max (>L:LIGHTING_Knob_Master, number) 
WT_CJ4_PANEL_LIGHTS_INC#(L:LIGHTING_Knob_Master, number) 10 + 100 min (>L:LIGHTING_Knob_Master, number)
WT_CJ4_PANEL_LIGHTS_TOGGLE#(L:LIGHTING_Knob_Master, number) 90 > if{ 90 (>L:LIGHTING_Knob_Master, number) } els{ 100 (>L:LIGHTING_Knob_Master, number) }
WT_CJ4_PFD1_LIGHT_DEC#(L:LIGHTING_POTENTIOMETER_15) 5 - 0 max 100 min d (>L:LIGHTING_POTENTIOMETER_15) 15 (>K:2:LIGHT_POTENTIOMETER_SET)
WT_CJ4_PFD1_LIGHT_INC#(L:LIGHTING_POTENTIOMETER_15) 5 + 0 max 100 min d (>L:LIGHTING_POTENTIOMETER_15) 15 (>K:2:LIGHT_POTENTIOMETER_SET)
WT_CJ4_PFD2_LIGHT_DEC#(L:LIGHTING_POTENTIOMETER_16) 5 - 0 max 100 min d (>L:LIGHTING_POTENTIOMETER_16) 16 (>K:2:LIGHT_POTENTIOMETER_SET)
WT_CJ4_PFD2_LIGHT_INC#(L:LIGHTING_POTENTIOMETER_16) 5 + 0 max 100 min d (>L:LIGHTING_POTENTIOMETER_16) 16 (>K:2:LIGHT_POTENTIOMETER_SET)
WT_CJ4_RECOGNITION_LIGHTS_OFF#(A:LIGHT RECOGNITION, Bool) if{ (>K:TOGGLE_RECOGNITION_LIGHTS) }
WT_CJ4_RECOGNITION_LIGHTS_ON#(A:LIGHT RECOGNITION, Bool) ! if{ (>K:TOGGLE_RECOGNITION_LIGHTS) (A:LIGHT TAXI, Bool) if{ (>K:TOGGLE_TAXI_LIGHTS) } (A:LIGHT LANDING, Bool) if{ (>K:LANDING_LIGHTS_TOGGLE) } }
WT_CJ4_RECOGNITION_LIGHTS_TOGGLE#(>K:TOGGLE_RECOGNITION_LIGHTS) (A:LIGHT TAXI, Bool) if{ (>K:TOGGLE_TAXI_LIGHTS) } (A:LIGHT LANDING, Bool) if{ (>K:LANDING_LIGHTS_TOGGLE) }
WT_CJ4_SAFETY_LIGHT_TOGGLE#(L:SAFETY_LIGHT_ON) ! (>L:SAFETY_LIGHT_ON)
WT_CJ4_SEATBELT_LIGHT_TOGGLE#(L:SEATBELT_LIGHT_ON) ! (>L:SEATBELT_LIGHT_ON)
WT_CJ4_STROBE_LIGHT_OFF#0 (>L:LIGHTING_STROBE_1) 1 0 (>K:2:STROBES_SET)
WT_CJ4_STROBE_LIGHT_ON#1 (>L:LIGHTING_STROBE_1) 1 1 (>K:2:STROBES_SET)
WT_CJ4_STROBE_LIGHT_TOG#1 (L:LIGHTING_STROBE_1) ! d (>L:LIGHTING_STROBE_1) (>K:2:STROBES_SET)
WT_CJ4_TAXI_LIGHTS_OFF#(A:LIGHT TAXI, Bool) if{ (>K:TOGGLE_TAXI_LIGHTS) }
WT_CJ4_TAXI_LIGHTS_ON#(A:LIGHT TAXI, Bool) ! if{ (>K:TOGGLE_TAXI_LIGHTS) (A:LIGHT LANDING, Bool) if{ (>K:LANDING_LIGHTS_TOGGLE) } (A:LIGHT RECOGNITION, Bool) if{ (>K:TOGGLE_RECOGNITION_LIGHTS) } }
WT_CJ4_TAXI_LIGHTS_TOGGLE#(>K:TOGGLE_TAXI_LIGHTS) (A:LIGHT LANDING, Bool) if{ (>K:LANDING_LIGHTS_TOGGLE) } (A:LIGHT RECOGNITION, Bool) if{ (>K:TOGGLE_RECOGNITION_LIGHTS) }
//Working Title/CJ4/Navigation
CJ4_FMC_1_BTN_0#(>H:CJ4_FMC_1_BTN_0)
CJ4_FMC_1_BTN_1#(>H:CJ4_FMC_1_BTN_1)
CJ4_FMC_1_BTN_2#(>H:CJ4_FMC_1_BTN_2)
CJ4_FMC_1_BTN_3#(>H:CJ4_FMC_1_BTN_3)
CJ4_FMC_1_BTN_4#(>H:CJ4_FMC_1_BTN_4)
CJ4_FMC_1_BTN_5#(>H:CJ4_FMC_1_BTN_5)
CJ4_FMC_1_BTN_6#(>H:CJ4_FMC_1_BTN_6)
CJ4_FMC_1_BTN_7#(>H:CJ4_FMC_1_BTN_7)
CJ4_FMC_1_BTN_8#(>H:CJ4_FMC_1_BTN_8)
CJ4_FMC_1_BTN_9#(>H:CJ4_FMC_1_BTN_9)
CJ4_FMC_1_BTN_A#(>H:CJ4_FMC_1_BTN_A)
CJ4_FMC_1_BTN_B#(>H:CJ4_FMC_1_BTN_B)
CJ4_FMC_1_BTN_C#(>H:CJ4_FMC_1_BTN_C)
CJ4_FMC_1_BTN_CLR#(>H:CJ4_FMC_1_BTN_CLR)
CJ4_FMC_1_BTN_CLR_Long#(>H:CJ4_FMC_1_BTN_CLR_Long)
CJ4_FMC_1_BTN_D#(>H:CJ4_FMC_1_BTN_D)
CJ4_FMC_1_BTN_DEPARR#(>H:CJ4_FMC_1_BTN_DEPARR)
CJ4_FMC_1_BTN_DIR#(>H:CJ4_FMC_1_BTN_DIR)
CJ4_FMC_1_BTN_DIV#(>H:CJ4_FMC_1_BTN_DIV)
CJ4_FMC_1_BTN_DOT#(>H:CJ4_FMC_1_BTN_DOT)
CJ4_FMC_1_BTN_DSPL_MENU#(>H:CJ4_FMC_1_BTN_DSPL_MENU)
CJ4_FMC_1_BTN_E#(>H:CJ4_FMC_1_BTN_E)
CJ4_FMC_1_BTN_EXEC#(>H:CJ4_FMC_1_BTN_EXEC)
CJ4_FMC_1_BTN_F#(>H:CJ4_FMC_1_BTN_F)
CJ4_FMC_1_BTN_FPLN#(>H:CJ4_FMC_1_BTN_FPLN)
CJ4_FMC_1_BTN_G#(>H:CJ4_FMC_1_BTN_G)
CJ4_FMC_1_BTN_H#(>H:CJ4_FMC_1_BTN_H)
CJ4_FMC_1_BTN_I#(>H:CJ4_FMC_1_BTN_I)
CJ4_FMC_1_BTN_IDX#(>H:CJ4_FMC_1_BTN_IDX)
CJ4_FMC_1_BTN_J#(>H:CJ4_FMC_1_BTN_J)
CJ4_FMC_1_BTN_K#(>H:CJ4_FMC_1_BTN_K)
CJ4_FMC_1_BTN_L#(>H:CJ4_FMC_1_BTN_L)
CJ4_FMC_1_BTN_L1#(>H:CJ4_FMC_1_BTN_L1)
CJ4_FMC_1_BTN_L2#(>H:CJ4_FMC_1_BTN_L2)
CJ4_FMC_1_BTN_L3#(>H:CJ4_FMC_1_BTN_L3)
CJ4_FMC_1_BTN_L4#(>H:CJ4_FMC_1_BTN_L4)
CJ4_FMC_1_BTN_L5#(>H:CJ4_FMC_1_BTN_L5)
CJ4_FMC_1_BTN_L6#(>H:CJ4_FMC_1_BTN_L6)
CJ4_FMC_1_BTN_LEGS#(>H:CJ4_FMC_1_BTN_LEGS)
CJ4_FMC_1_BTN_M#(>H:CJ4_FMC_1_BTN_M)
CJ4_FMC_1_BTN_MFD_ADV#(>H:CJ4_FMC_1_BTN_MFD_ADV)
CJ4_FMC_1_BTN_MFD_DATA#(>H:CJ4_FMC_1_BTN_MFD_DATA)
CJ4_FMC_1_BTN_MSG#(>H:CJ4_FMC_1_BTN_MSG)
CJ4_FMC_1_BTN_N#(>H:CJ4_FMC_1_BTN_N)
CJ4_FMC_1_BTN_NEXTPAGE#(>H:CJ4_FMC_1_BTN_NEXTPAGE)
CJ4_FMC_1_BTN_O#(>H:CJ4_FMC_1_BTN_O)
CJ4_FMC_1_BTN_P#(>H:CJ4_FMC_1_BTN_P)
CJ4_FMC_1_BTN_PERF#(>H:CJ4_FMC_1_BTN_PERF)
CJ4_FMC_1_BTN_PLUSMINUS#(>H:CJ4_FMC_1_BTN_PLUSMINUS)
CJ4_FMC_1_BTN_PREVPAGE#(>H:CJ4_FMC_1_BTN_PREVPAGE)
CJ4_FMC_1_BTN_Q#(>H:CJ4_FMC_1_BTN_Q)
CJ4_FMC_1_BTN_R#(>H:CJ4_FMC_1_BTN_R)
CJ4_FMC_1_BTN_R1#(>H:CJ4_FMC_1_BTN_R1)
CJ4_FMC_1_BTN_R2#(>H:CJ4_FMC_1_BTN_R2)
CJ4_FMC_1_BTN_R3#(>H:CJ4_FMC_1_BTN_R3)
CJ4_FMC_1_BTN_R4#(>H:CJ4_FMC_1_BTN_R4)
CJ4_FMC_1_BTN_R5#(>H:CJ4_FMC_1_BTN_R5)
CJ4_FMC_1_BTN_R6#(>H:CJ4_FMC_1_BTN_R6)
CJ4_FMC_1_BTN_S#(>H:CJ4_FMC_1_BTN_S)
CJ4_FMC_1_BTN_SP#(>H:CJ4_FMC_1_BTN_SP)
CJ4_FMC_1_BTN_T#(>H:CJ4_FMC_1_BTN_T)
CJ4_FMC_1_BTN_TUN#(>H:CJ4_FMC_1_BTN_TUN)
CJ4_FMC_1_BTN_U#(>H:CJ4_FMC_1_BTN_U)
CJ4_FMC_1_BTN_V#(>H:CJ4_FMC_1_BTN_V)
CJ4_FMC_1_BTN_W#(>H:CJ4_FMC_1_BTN_W)
CJ4_FMC_1_BTN_X#(>H:CJ4_FMC_1_BTN_X)
CJ4_FMC_1_BTN_Y#(>H:CJ4_FMC_1_BTN_Y)
CJ4_FMC_1_BTN_Z#(>H:CJ4_FMC_1_BTN_Z)
//Working Title/CJ4/Radio
WT_CJ4_ADF1_TOG#(>K:RADIO_ADF_IDENT_TOGGLE)
WT_CJ4_COM1COM2_ACTIVE_TOG#1 0 (A:COM TRANSMIT:1,bool) ? d (>K:PILOT_TRANSMITTER_SET) (>K:COPILOT_TRANSMITTER_SET)
WT_CJ4_COM1_ACTIVE_PUSH#0 (>K:PILOT_TRANSMITTER_SET) 0 (>K:COPILOT_TRANSMITTER_SET)
WT_CJ4_COM1_ON_TOGGLE#0 100 (A:COM VOLUME:1, Percent) 0 > ? (>K:COM1_VOLUME_SET)
WT_CJ4_COM1_VOLUME_DEC# (>K:COM1_VOLUME_DEC)
WT_CJ4_COM1_VOLUME_INC# (>K:COM1_VOLUME_INC)
WT_CJ4_COM2_ACTIVE_PUSH#1 (>K:PILOT_TRANSMITTER_SET) 1 (>K:COPILOT_TRANSMITTER_SET)
WT_CJ4_COM2_ON_TOGGLE#0 100 (A:COM VOLUME:2, Percent) 0 > ? (>K:COM2_VOLUME_SET)
WT_CJ4_COM2_VOLUME_DEC# (>K:COM2_VOLUME_DEC)
WT_CJ4_COM2_VOLUME_INC# (>K:COM2_VOLUME_INC)
WT_CJ4_DME1_TOG#(>K:RADIO_DME1_IDENT_TOGGLE)
WT_CJ4_DME2_TOG#(>K:RADIO_DME2_IDENT_TOGGLE)
WT_CJ4_MKR_MUTE_PRESS#1 (>K:MARKER_BEACON_TEST_MUTE)
WT_CJ4_MKR_MUTE_RELEASE#0 (>K:MARKER_BEACON_TEST_MUTE)
WT_CJ4_MKR_TOG#(>K:MARKER_SOUND_TOGGLE)
WT_CJ4_NAV1_TOG#0 1 (A:NAV VOLUME:1, Percent) 0 > ? (>K:NAV1_VOLUME_SET)
WT_CJ4_NAV1_VOLUME_DEC#(>K:NAV1_VOLUME_DEC) 
WT_CJ4_NAV1_VOLUME_INC#(>K:NAV1_VOLUME_INC) 
WT_CJ4_NAV2_TOG#0 1 (A:NAV VOLUME:2, Percent) 0 > ? (>K:NAV2_VOLUME_SET)
WT_CJ4_NAV2_VOLUME_DEC#(>K:NAV2_VOLUME_DEC) 
WT_CJ4_NAV2_VOLUME_INC#(>K:NAV2_VOLUME_INC) 
WT_CJ4_SPKR_TOG#(>K:TOGGLE_SPEAKER)
//Working Title/CJ4/Warning System
WT_CJ4_MASTER_CAUTION_PUSH#1 (>L:Generic_Master_Caution_Active) 1 (>L:MF_Master_Caution_Test) (>H:Generic_Master_Caution_Push)
WT_CJ4_MASTER_CAUTION_RELEASE#0 (>L:MF_Master_Caution_Test)
WT_CJ4_MASTER_WARNING_PUSH#1 (>L:Generic_Master_Warning_Active) 1 (>L:MF_Master_Warning_Test) (>H:Generic_Master_Warning_Push)
WT_CJ4_MASTER_WARNING_RELEASE#0 (>L:MF_Master_Warning_Test)
