//Flysimware/Cessna 414A/Avionics
Garmin_Alt_Alerter_1000s_DEC#(L:GENERIC_ALERTER_THOUSANDTHS) 11 >  if{  (L:GENERIC_ALERTER_THOUSANDTHS, number) 11.111 - (>L:GENERIC_ALERTER_THOUSANDTHS, number)  10 div (>L:Alerter_GENERIC_ALERTER_THOUSANDTHS, number)  }  els{  (L:GENERIC_ALERTER_TEN_THOUSANDTHS) 11 >  if{  (L:GENERIC_ALERTER_TEN_THOUSANDTHS, number) 11.111 - (>L:GENERIC_ALERTER_TEN_THOUSANDTHS, number)  10 div (>L:Alerter_GENERIC_ALERTER_TEN_THOUSANDTHS, number)  99.999 (>L:GENERIC_ALERTER_THOUSANDTHS, number)  10 div (>L:Alerter_GENERIC_ALERTER_THOUSANDTHS, number)  } } 
Garmin_Alt_Alerter_1000s_INC#(L:GENERIC_ALERTER_THOUSANDTHS, number) 99 <  if{  (L:GENERIC_ALERTER_THOUSANDTHS, number) 11.111 + (>L:GENERIC_ALERTER_THOUSANDTHS, number)  10 div (>L:Alerter_GENERIC_ALERTER_THOUSANDTHS, number)  }  els{  0 (>L:GENERIC_ALERTER_THOUSANDTHS, number) (>L:Alerter_GENERIC_ALERTER_THOUSANDTHS, number)  (L:GENERIC_ALERTER_TEN_THOUSANDTHS, number) 11.111 + (>L:GENERIC_ALERTER_TEN_THOUSANDTHS, number) 10 div (>L:Alerter_GENERIC_ALERTER_TEN_THOUSANDTHS, number)  } 
Garmin_Alt_Alerter_100s_DEC#(L:GENERIC_ALERTER_HUNDREDTHS) 11 >  if{  (L:GENERIC_ALERTER_HUNDREDTHS, number) 11.111 - (>L:GENERIC_ALERTER_HUNDREDTHS, number)  10 div (>L:Alerter_GENERIC_ALERTER_HUNDREDTHS, number)  } 
Garmin_Alt_Alerter_100s_INC#(L:GENERIC_ALERTER_HUNDREDTHS) 99 <  if{  (L:GENERIC_ALERTER_HUNDREDTHS, number) 11.111 + (>L:GENERIC_ALERTER_HUNDREDTHS, number)  10 div (>L:Alerter_GENERIC_ALERTER_HUNDREDTHS, number)  } 
Garmin_Alt_Alerter_Altitude_Arm#(L:ALT_ARM_SWITCH) ! (>L:ALT_ARM_SWITCH)
Honeywell_Alt_Alerter_1000s_DEC#(>H:KNOB_ALT_SEL_1000_DEC)
Honeywell_Alt_Alerter_1000s_INC#(>H:KNOB_ALT_SEL_1000_INC)
Honeywell_Alt_Alerter_100s_DEC#(>H:KNOB_ALT_SEL_100_DEC)
Honeywell_Alt_Alerter_100s_INC#(>H:KNOB_ALT_SEL_100_INC)
//Aerosoft/CRJ 550-700-1000/Air Condition / Pressurization
ASCRJ_AIRC_AFT_CARGO_AIRCOND_SWITCH#(L:ASCRJ_AIRC_AFT_CARGO, Bool) ! (>L:ASCRJ_AIRC_AFT_CARGO)
ASCRJ_AIRC_PACK_L_SWITCH# (L:ASCRJ_AIRC_PACK_L, Bool) ! (>L:ASCRJ_AIRC_PACK_L)
ASCRJ_AIRC_PACK_R_SWITCH# (L:ASCRJ_AIRC_PACK_R, Bool) ! (>L:ASCRJ_AIRC_PACK_R)
ASCRJ_AIRC_RECIC_FAN_SWCH_OFF#0 (>L:ASCRJ_AIRC_RECIRC_FAN)
ASCRJ_AIRC_RECIC_FAN_SWCH_ON#1 (>L:ASCRJ_AIRC_RECIRC_FAN)
ASCRJ_AIRC_RECIRC_FAN_SWITCH#(L:ASCRJ_AIRC_RECIRC_FAN, Bool) ! (>L:ASCRJ_AIRC_RECIRC_FAN)
ASCRJ_AIRC_RECIRC_FAN_SWITCH_OFF#0 (>L:ASCRJ_AIRC_RECIRC_FAN)
ASCRJ_AIRC_RECIRC_FAN_SWITCH_ON#1 (>L:ASCRJ_AIRC_RECIRC_FAN)
ASCRJ_AIRC_TEMPCTRL_CABIN_DEC# (L:ASCRJ_AIRC_TEMPCTRL_CABIN, Number) 0 > if{ (L:ASCRJ_AIRC_TEMPCTRL_CABIN, Number) -- (>L:ASCRJ_AIRC_TEMPCTRL_CABIN) }
ASCRJ_AIRC_TEMPCTRL_CABIN_INC# (L:ASCRJ_AIRC_TEMPCTRL_CABIN, Number) 26 < if{ (L:ASCRJ_AIRC_TEMPCTRL_CABIN, Number) ++ (>L:ASCRJ_AIRC_TEMPCTRL_CABIN) }
ASCRJ_AIRC_TEMPCTRL_CKPT_DEC# (L:ASCRJ_AIRC_TEMPCTRL_CKPT, Number) 0 > if{ (L:ASCRJ_AIRC_TEMPCTRL_CKPT, Number) -- (>L:ASCRJ_AIRC_TEMPCTRL_CKPT) }
ASCRJ_AIRC_TEMPCTRL_CKPT_INC# (L:ASCRJ_AIRC_TEMPCTRL_CKPT, Number) 26 < if{ (L:ASCRJ_AIRC_TEMPCTRL_CKPT, Number) ++ (>L:ASCRJ_AIRC_TEMPCTRL_CKPT) }
ASCRJ_OVHD_OXY_BUTTON_ON_PRESS#1 d (>L:ASCRJ_OVHD_OXY) (>L:ASCRJ_OVHD_OXY_ANIM) 1 (>L:ASCRJ_OVHD_OXY_GUARD) 15 (>L:ASCRJ_OVHD_OXY_GUARD_COUNT)
ASCRJ_OVHD_OXY_BUTTON_ON_RELEASE#0 (>L:ASCRJ_OVHD_OXY_ANIM)
ASCRJ_PRESS_EMER_DEPRESS_BTN_REL#0 (>L:ASCRJ_PRESS_EMER_DEPRESS_ANIM) 1 (>L:ASCRJ_PRESS_EMER_DEPRESS)
ASCRJ_PRESS_EMER_DEPRESS_PRESS#1 (>L:ASCRJ_PRESS_EMER_DEPRESS_ANIM)
ASCRJ_PRESS_LDG_ELEV_KNOB_DEC# (L:ASCRJ_PRESS_LDG_ELEV, Number) 10 - dnor (>L:ASCRJ_PRESS_LDG_ELEV) (ASCRJ_PRESS_LDG_ELEV_CHANGE, Number) -- (>L:ASCRJ_PRESS_LDG_ELEV_CHANGE)
ASCRJ_PRESS_LDG_ELEV_KNOB_INC# (L:ASCRJ_PRESS_LDG_ELEV, Number) 10 + dnor (>L:ASCRJ_PRESS_LDG_ELEV) (ASCRJ_PRESS_LDG_ELEV_CHANGE, Number) ++ (>L:ASCRJ_PRESS_LDG_ELEV_CHANGE)
ASCRJ_PRESS_PRESS_CONT_BTN_PRESS#1 (>L:ASCRJ_PRESS_PRESS_CONT_ANIM)
ASCRJ_PRESS_PRESS_CONT_BTN_REL#0 (>L:ASCRJ_PRESS_PRESS_CONT_ANIM)
ASCRJ_ROT_LDG_ELEV_KNOB_DEC_FAST# (L:ASCRJ_PRESS_LDG_ELEV, Number) 1000 - dnor (>L:ASCRJ_PRESS_LDG_ELEV) (ASCRJ_PRESS_LDG_ELEV_CHANGE, Number) -- (>L:ASCRJ_PRESS_LDG_ELEV_CHANGE)
ASCRJ_ROT_LDG_ELEV_KNOB_INC_FAST# (L:ASCRJ_PRESS_LDG_ELEV, Number) 1000 + dnor (>L:ASCRJ_PRESS_LDG_ELEV) (ASCRJ_PRESS_LDG_ELEV_CHANGE, Number) ++ (>L:ASCRJ_PRESS_LDG_ELEV_CHANGE)
//Aerosoft/CRJ 550-700-1000/Anti-Ice
ASCRJ_AICE_COWL_L_SWITCH#(L:ASCRJ_AICE_COWL_L, Bool) ! (>L:ASCRJ_AICE_COWL_L)
ASCRJ_AICE_COWL_L_SWITCH_OFF#0 (>L:ASCRJ_AICE_COWL_L)
ASCRJ_AICE_COWL_L_SWITCH_ON#1 (>L:ASCRJ_AICE_COWL_L)
ASCRJ_AICE_COWL_R_SWITCH#(L:ASCRJ_AICE_COWL_R, Bool) ! (>L:ASCRJ_AICE_COWL_R)
ASCRJ_AICE_COWL_R_SWITCH_OFF#0 (>L:ASCRJ_AICE_COWL_R)
ASCRJ_AICE_COWL_R_SWITCH_ON#1 (>L:ASCRJ_AICE_COWL_R)
ASCRJ_AICE_PHEAT_L_SWITCH#(L:ASCRJ_AICE_PHEAT_L, Bool) ! (>L:ASCRJ_AICE_PHEAT_L)
ASCRJ_AICE_PHEAT_L_SWITCH_OFF#0 (>L:ASCRJ_AICE_PHEAT_L)
ASCRJ_AICE_PHEAT_L_SWITCH_ON#1 (>L:ASCRJ_AICE_PHEAT_L)
ASCRJ_AICE_PHEAT_R_SWITCH#(L:ASCRJ_AICE_PHEAT_R, Bool) ! (>L:ASCRJ_AICE_PHEAT_R)
ASCRJ_AICE_PHEAT_R_SWITCH_OFF#0 (>L:ASCRJ_AICE_PHEAT_R)
ASCRJ_AICE_PHEAT_R_SWITCH_ON#1 (>L:ASCRJ_AICE_PHEAT_R)
ASCRJ_AICE_WING_SWITCH#(L:ASCRJ_AICE_WING, Bool) ! (>L:ASCRJ_AICE_WING)
ASCRJ_AICE_WING_SWITCH_OFF#0 (>L:ASCRJ_AICE_WING)
ASCRJ_AICE_WING_SWITCH_ON#1 (>L:ASCRJ_AICE_WING)
ASCRJ_AICE_WSHLD_L_SWITCH#(L:ASCRJ_AICE_WSHLD_L, Number) 0 == if{ 1 (>L:ASCRJ_AICE_WSHLD_L, Number) } els{ (L:ASCRJ_AICE_WSHLD_L, Number) 1 == if{ 2 (>L:ASCRJ_AICE_WSHLD_L, Number) } els{ (L:ASCRJ_AICE_WSHLD_L, Number) 2 == if{ 0 (>L:ASCRJ_AICE_WSHLD_L, Number) }
ASCRJ_AICE_WSHLD_L_SWITCH_HIGH#2 (>L:ASCRJ_AICE_WSHLD_L, Number)
ASCRJ_AICE_WSHLD_L_SWITCH_LOW#1 (>L:ASCRJ_AICE_WSHLD_L, Number)
ASCRJ_AICE_WSHLD_L_SWITCH_OFF#0 (>L:ASCRJ_AICE_WSHLD_L, Number)
ASCRJ_AICE_WSHLD_R_SWITCH#(L:ASCRJ_AICE_WSHLD_R, Number) 0 == if{ 1 (>L:ASCRJ_AICE_WSHLD_R, Number) } els{ (L:ASCRJ_AICE_WSHLD_R, Number) 1 == if{ 2 (>L:ASCRJ_AICE_WSHLD_R, Number) } els{ (L:ASCRJ_AICE_WSHLD_R, Number) 2 == if{ 0 (>L:ASCRJ_AICE_WSHLD_R, Number) }
ASCRJ_AICE_WSHLD_R_SWITCH_HIGH#2 (>L:ASCRJ_AICE_WSHLD_R, Number)
ASCRJ_AICE_WSHLD_R_SWITCH_LOW#1 (>L:ASCRJ_AICE_WSHLD_R, Number)
ASCRJ_AICE_WSHLD_R_SWITCH_OFF#0 (>L:ASCRJ_AICE_WSHLD_R, Number)
ASCRJ_AICE_WSHLD_TEST_BTN_PRESS#1 (>L:ASCRJ_AICE_WSHLD_TEST_ANIM)
ASCRJ_AICE_WSHLD_TEST_BTN_REL#0 (>L:ASCRJ_AICE_WSHLD_TEST_ANIM)
//Aerosoft/CRJ 550-700-1000/Autopilot
ASCRJ_AP_TOGGLE#(L:ASCRJ_FCP_AP_ENG_LED) if{ 1 (>L:ASCRJ_FCP_AP_DISC) }  els{ 0 (>L:ASCRJ_FCP_AP_DISC) 1 (>L:ASCRJ_FCP_AP_ENG) }
ASCRJ_FCP_12BANK_PRESS#1 (>L:ASCRJ_FCP_12BANK)
ASCRJ_FCP_12BANK_RELEASE#0 (>L:ASCRJ_FCP_12BANK)
ASCRJ_FCP_ALT_CANCEL_PRESS#1 (>L:ASCRJ_FCP_ALT_CANCEL)
ASCRJ_FCP_ALT_CANCEL_RELEASE#0 (>L:ASCRJ_FCP_ALT_CANCEL)
ASCRJ_FCP_ALT_PRESS#1 (>L:ASCRJ_FCP_ALT)
ASCRJ_FCP_ALT_RELEASE#0 (>L:ASCRJ_FCP_ALT)
ASCRJ_FCP_ALT_SEL_DEC#(L:ASCRJ_FCP_ALT_CHANGE, 1) -- (>L:ASCRJ_FCP_ALT_CHANGE)
ASCRJ_FCP_ALT_SEL_INC#(L:ASCRJ_FCP_ALT_CHANGE, 1) ++ (>L:ASCRJ_FCP_ALT_CHANGE)
ASCRJ_FCP_APPR_PRESS#1 (>L:ASCRJ_FCP_APPR)
ASCRJ_FCP_APPR_RELEASE#0 (>L:ASCRJ_FCP_APPR)
ASCRJ_FCP_AP_DISC_PRESS#(L:ASCRJ_FCP_AP_DISC, Bool) ! (>L:ASCRJ_FCP_AP_DISC)
ASCRJ_FCP_AP_DISC_RELEASE#(L:ASCRJ_FCP_AP_DISC, Bool) ! (>L:ASCRJ_FCP_AP_DISC)
ASCRJ_FCP_AP_ENG_PRESS#1 (>L:ASCRJ_FCP_AP_ENG)
ASCRJ_FCP_AP_ENG_RELEASE#0 (>L:ASCRJ_FCP_AP_ENG)
ASCRJ_FCP_BC_PRESS#1 (>L:ASCRJ_FCP_BC)
ASCRJ_FCP_BC_RELEASE#0 (>L:ASCRJ_FCP_BC)
ASCRJ_FCP_CRS1_DIRECT_PRESS#1 (>L:ASCRJ_FCP_CRS1_DIRECT)
ASCRJ_FCP_CRS1_DIRECT_RELEASE#0 (>L:ASCRJ_FCP_CRS1_DIRECT)
ASCRJ_FCP_CRS1_SEL_DEC#(L:ASCRJ_FCP_CRS1_CHANGE, 1) -- (>L:ASCRJ_FCP_CRS1_CHANGE)
ASCRJ_FCP_CRS1_SEL_INC#(L:ASCRJ_FCP_CRS1_CHANGE, 1) ++ (>L:ASCRJ_FCP_CRS1_CHANGE)
ASCRJ_FCP_CRS2_DIRECT_PRESS#1 (>L:ASCRJ_FCP_CRS2_DIRECT)
ASCRJ_FCP_CRS2_DIRECT_RELEASE#0 (>L:ASCRJ_FCP_CRS2_DIRECT)
ASCRJ_FCP_CRS2_SEL_DEC#(L:ASCRJ_FCP_CRS2_CHANGE, 1) -- (>L:ASCRJ_FCP_CRS2_CHANGE)
ASCRJ_FCP_CRS2_SEL_INC#(L:ASCRJ_FCP_CRS2_CHANGE, 1) ++ (>L:ASCRJ_FCP_CRS2_CHANGE)
ASCRJ_FCP_FD1_PRESS#1 (>L:ASCRJ_FCP_FD1)
ASCRJ_FCP_FD1_RELEASE#0 (>L:ASCRJ_FCP_FD1)
ASCRJ_FCP_FD2_PRESS#1 (>L:ASCRJ_FCP_FD2)
ASCRJ_FCP_FD2_RELEASE#0 (>L:ASCRJ_FCP_FD2)
ASCRJ_FCP_HDG_PRESS#1 (>L:ASCRJ_FCP_HDG)
ASCRJ_FCP_HDG_RELEASE#0 (>L:ASCRJ_FCP_HDG)
ASCRJ_FCP_HDG_SEL_DEC#(L:ASCRJ_FCP_HDG_CHANGE, 1) -- (>L:ASCRJ_FCP_HDG_CHANGE)
ASCRJ_FCP_HDG_SEL_INC#(L:ASCRJ_FCP_HDG_CHANGE, 1) ++ (>L:ASCRJ_FCP_HDG_CHANGE)
ASCRJ_FCP_HDG_SYNC_PRESS#1 (>L:ASCRJ_FCP_HDG_SYNC)
ASCRJ_FCP_HDG_SYNC_RELEASE#0 (>L:ASCRJ_FCP_HDG_SYNC)
ASCRJ_FCP_IAS_MACH_PRESS#1 (>L:ASCRJ_FCP_IAS_MACH)
ASCRJ_FCP_IAS_MACH_RELEASE#0 (>L:ASCRJ_FCP_IAS_MACH)
ASCRJ_FCP_NAV_PRESS#1 (>L:ASCRJ_FCP_NAV)
ASCRJ_FCP_NAV_RELEASE#0 (>L:ASCRJ_FCP_NAV)
ASCRJ_FCP_SPEED_MODE_PRESS#1 (>L:ASCRJ_FCP_SPEED_MODE)
ASCRJ_FCP_SPEED_MODE_RELEASE#0 (>L:ASCRJ_FCP_SPEED_MODE)
ASCRJ_FCP_SPEED_PRESS#1 (>L:ASCRJ_FCP_SPEED)
ASCRJ_FCP_SPEED_RELEASE#0 (>L:ASCRJ_FCP_SPEED)
ASCRJ_FCP_SPEED_SEL_DEC#(L:ASCRJ_FCP_SPEED_CHANGE, 1) -- (>L:ASCRJ_FCP_SPEED_CHANGE)
ASCRJ_FCP_SPEED_SEL_INC#(L:ASCRJ_FCP_SPEED_CHANGE, 1) ++ (>L:ASCRJ_FCP_SPEED_CHANGE)
ASCRJ_FCP_TURB_PRESS#1 (>L:ASCRJ_FCP_TURB)
ASCRJ_FCP_TURB_RELEASE#0 (>L:ASCRJ_FCP_TURB)
ASCRJ_FCP_VNAV_PRESS#1 (>L:ASCRJ_FCP_VNAV)
ASCRJ_FCP_VNAV_RELEASE#0 (>L:ASCRJ_FCP_VNAV)
ASCRJ_FCP_VS_PRESS#1 (>L:ASCRJ_FCP_VS)
ASCRJ_FCP_VS_RELEASE#0 (>L:ASCRJ_FCP_VS)
ASCRJ_FCP_WHEEL_SEL_DEC#(L:ASCRJ_FCP_WHEEL_CHANGE, 1) -- (>L:ASCRJ_FCP_WHEEL_CHANGE)
ASCRJ_FCP_WHEEL_SEL_INC#(L:ASCRJ_FCP_WHEEL_CHANGE, 1) ++ (>L:ASCRJ_FCP_WHEEL_CHANGE)
ASCRJ_FCP_XFR_PRESS#1 (>L:ASCRJ_FCP_XFR)
ASCRJ_FCP_XFR_RELEASE#0 (>L:ASCRJ_FCP_XFR)
ASCRJ_TQ_TOGA_SWITCH#1 (>L:ASCRJ_TQ_TOGA_1)
//Aerosoft/CRJ 550-700-1000/Avionics
ASCRJ_ECAM_AICE_PRESS#1 (>L:ASCRJ_ECAM_AICE)
ASCRJ_ECAM_AICE_RELEASE#0 (>L:ASCRJ_ECAM_AICE) 
ASCRJ_ECAM_CAS_PRESS#1 (>L:ASCRJ_ECAM_CAS)
ASCRJ_ECAM_CAS_RELEASE#0 (>L:ASCRJ_ECAM_CAS)
ASCRJ_ECAM_DOORS_PRESS#1 (>L:ASCRJ_ECAM_DOORS)
ASCRJ_ECAM_DOORS_RELEASE#0 (>L:ASCRJ_ECAM_DOORS) 
ASCRJ_ECAM_DOWN_PRESS#1 (>L:ASCRJ_ECAM_DOWN)
ASCRJ_ECAM_DOWN_RELEASE#0 (>L:ASCRJ_ECAM_DOWN)
ASCRJ_ECAM_ECS#1 (>L:ASCRJ_ECAM_ECS) 
ASCRJ_ECAM_ELEC_PRESS#1 (>L:ASCRJ_ECAM_ELEC)
ASCRJ_ECAM_ELEC_RELEASE#0 (>L:ASCRJ_ECAM_ELEC) 
ASCRJ_ECAM_FCTL_PRESS#1 (>L:ASCRJ_ECAM_FCTL)
ASCRJ_ECAM_FCTL_RELEASE#0 (>L:ASCRJ_ECAM_FCTL) 
ASCRJ_ECAM_FUEL_PRESS#1 (>L:ASCRJ_ECAM_FUEL)
ASCRJ_ECAM_FUEL_RELEASE#0 (>L:ASCRJ_ECAM_FUEL) 
ASCRJ_ECAM_HYD_PRESS#1 (>L:ASCRJ_ECAM_HYD)
ASCRJ_ECAM_HYD_RELEASE#0 (>L:ASCRJ_ECAM_HYD) 
ASCRJ_ECAM_MENU_PRESS#1 (>L:ASCRJ_ECAM_MENU)
ASCRJ_ECAM_MENU_RELEASE#0 (>L:ASCRJ_ECAM_MENU) 
ASCRJ_ECAM_PRI_PRESS#1 (>L:ASCRJ_ECAM_PRI)
ASCRJ_ECAM_SEL_PRESS#1 (>L:ASCRJ_ECAM_SEL)
ASCRJ_ECAM_SEL_RELEASE#0 (>L:ASCRJ_ECAM_SEL) 
ASCRJ_ECAM_STAT_PRESS#1 (>L:ASCRJ_ECAM_STAT)
ASCRJ_ECAM_STAT_RELEASE#0 (>L:ASCRJ_ECAM_STAT)
ASCRJ_ECAM_STEP_PRESS#1 (>L:ASCRJ_ECAM_STEP)
ASCRJ_ECAM_UP_PRESS#1 (>L:ASCRJ_ECAM_UP)
ASCRJ_ECAM_UP_RELEASE#0 (>L:ASCRJ_ECAM_UP)
ASCRJ_LSP_CLCK_CHR_BTN_PRESS#1 (>L:ASCRJ_LSP_CLCK_CHR)
ASCRJ_LSP_CLCK_CHR_BTN_RELEASE#0 (>L:ASCRJ_LSP_CLCK_CHR)
//Aerosoft/CRJ 550-700-1000/Electrical
ASCRJ_APU_PWRFUEL_PRESS#1 (>L:ASCRJ_APU_PWRFUEL_ANIM)
ASCRJ_APU_PWRFUEL_RELEASE#0 (>L:ASCRJ_APU_PWRFUEL_ANIM) 1 (>L:ASCRJ_APU_PWRFUEL)
ASCRJ_APU_STARTSTOP_PRESS#2 (>L:ASCRJ_APU_STARTSTOP_ANIM)
ASCRJ_APU_STARTSTOP_RELEASE#(L:ASCRJ_APU_STARTSTOP) ! s0 (>L:ASCRJ_APU_STARTSTOP) l0 (>L:ASCRJ_APU_STARTSTOP_ANIM)
ASCRJ_APU_STARTSTOP_TOGGLE#(L:ASCRJ_APU_STARTSTOP) ! (>L:ASCRJ_APU_STARTSTOP)
ASCRJ_ELEC_ACESSXFER#(L:ASCRJ_ELEC_ACESSXFER, Bool) ! (>L:ASCRJ_ELEC_ACESSXFER)
ASCRJ_ELEC_APUGEN#(L:ASCRJ_ELEC_APUGEN, Bool) ! (>L:ASCRJ_ELEC_APUGEN)
ASCRJ_ELEC_APUGEN_OFF#0 (>L:ASCRJ_ELEC_APUGEN)
ASCRJ_ELEC_APUGEN_RESET#1 (>L:ASCRJ_ELEC_APUGEN)
ASCRJ_ELEC_AUTOXFER1#(L:ASCRJ_ELEC_AUTOXFER1, Bool) ! (>L:ASCRJ_ELEC_AUTOXFER1)
ASCRJ_ELEC_AUTOXFER2#(L:ASCRJ_ELEC_AUTOXFER2, Bool) ! (>L:ASCRJ_ELEC_AUTOXFER2)
ASCRJ_ELEC_BATTMASTER_SWITCH#(L:ASCRJ_ELEC_BATTMASTER, Bool) ! (>L:ASCRJ_ELEC_BATTMASTER)
ASCRJ_ELEC_BATTMASTER_SWITCH_OFF#0 (>L:ASCRJ_ELEC_BATTMASTER)
ASCRJ_ELEC_BATTMASTER_SWITCH_ON#1 (>L:ASCRJ_ELEC_BATTMASTER)
ASCRJ_ELEC_DCSERVICE#(L:ASCRJ_ELEC_DCSERVICE, Bool) ! (>L:ASCRJ_ELEC_DCSERVICE)
ASCRJ_ELEC_DCSERVICE_OFF#0 (>L:ASCRJ_ELEC_DCSERVICE)
ASCRJ_ELEC_DCSERVICE_ON#1 (>L:ASCRJ_ELEC_DCSERVICE)
ASCRJ_ELEC_GEN1#(L:ASCRJ_ELEC_GEN1, Bool) ! (>L:ASCRJ_ELEC_GEN1)
ASCRJ_ELEC_GEN1_OFF#0 (>L:ASCRJ_ELEC_GEN1)
ASCRJ_ELEC_GEN1_RESET#1 (>L:ASCRJ_ELEC_GEN1)
ASCRJ_ELEC_GEN2#(L:ASCRJ_ELEC_GEN2, Bool) ! (>L:ASCRJ_ELEC_GEN2)
ASCRJ_ELEC_GEN2_OFF#0 (>L:ASCRJ_ELEC_GEN2)
ASCRJ_ELEC_GEN2_RESET#1 (>L:ASCRJ_ELEC_GEN2)
ASCRJ_ELEC_GPU_INUSE_SWITCH# (L:ASCRJ_ELEC_GPU, Bool) ! (>L:ASCRJ_ELEC_GPU)
ASCRJ_ELEC_IDG1#(L:ASCRJ_ELEC_IDG1, Bool) ! (>L:ASCRJ_ELEC_IDG1)
ASCRJ_ELEC_IDG2#(L:ASCRJ_ELEC_IDG2, Bool) ! (>L:ASCRJ_ELEC_IDG2)
ASCRJ_FIRE_TEST_BTN_PRESS#1 (>L:ASCRJ_FIRE_TEST_BTN_ANIM) 1 (>L:ASCRJ_FIRE_TEST)
ASCRJ_FIRE_TEST_BTN_RELEASE#0 (>L:ASCRJ_FIRE_TEST_BTN_ANIM) 0 (>L:ASCRJ_FIRE_TEST)
ASCRJ_HYDRO_SOV_L_PRESS#2 (>L:ASCRJ_HYDR_SOV1_ANIM)
ASCRJ_HYDRO_SOV_L_REL#(L:ASCRJ_HYDR_SOV1_ANIM, Number) 2 == if{ (L:ASCRJ_HYDR_SOV1, Bool) ! (>L:ASCRJ_HYDR_SOV1) (L:ASCRJ_HYDR_SOV1) if{ 1 (>L:ASCRJ_HYDR_SOV1_ANIM) } els{ 0 (>L:ASCRJ_HYDR_SOV1_ANIM) } }
ASCRJ_HYDRO_SOV_R_PRESS#2 (>L:ASCRJ_HYDR_SOV2_ANIM)
ASCRJ_HYDRO_SOV_R_REL#(L:ASCRJ_HYDR_SOV2_ANIM, Number) 2 == if{ (L:ASCRJ_HYDR_SOV2, Bool) ! (>L:ASCRJ_HYDR_SOV2) (L:ASCRJ_HYDR_SOV2) if{ 1 (>L:ASCRJ_HYDR_SOV2_ANIM) } els{ 0 (>L:ASCRJ_HYDR_SOV2_ANIM) } }
ASCRJ_IRS1_KNOB_SWITCH#(L:ASCRJ_IRS1_KNOB, Number) 0 == if{ 1 (>L:ASCRJ_IRS1_KNOB, Number) } els{ (L:ASCRJ_IRS1_KNOB, Number) 1 == if{ 2 (>L:ASCRJ_IRS1_KNOB, Number) } els{ (L:ASCRJ_IRS1_KNOB, Number) 2 == if{ 0 (>L:ASCRJ_IRS1_KNOB, Number) }
ASCRJ_IRS2_KNOB_SWITCH#(L:ASCRJ_IRS2_KNOB, Number) 0 == if{ 1 (>L:ASCRJ_IRS2_KNOB, Number) } els{ (L:ASCRJ_IRS2_KNOB, Number) 1 == if{ 2 (>L:ASCRJ_IRS2_KNOB, Number) } els{ (L:ASCRJ_IRS2_KNOB, Number) 2 == if{ 0 (>L:ASCRJ_IRS2_KNOB, Number) }
ASCRJ_LAMP_TEST_SWITCH#(L:ASCRJ_ENG_LAMPTEST, Number) ++ 3 % (>L:ASCRJ_ENG_LAMPTEST, Number)
ASCRJ_MASTER_CAUT_PRESS#1 (>L:ASCRJ_MASTER_CAUT)
ASCRJ_MASTER_CAUT_RELEASE#0 (>L:ASCRJ_MASTER_CAUT)
ASCRJ_MASTER_WARN_PRESS#1 (>L:ASCRJ_MASTER_WARN)
ASCRJ_MASTER_WARN_RELEASE#0 (>L:ASCRJ_MASTER_WARN)
//Aerosoft/CRJ 550-700-1000/Engines
ASCRJ_CONT_IGN_BTN#1 (>L:ASCRJ_ENGS_CONT_IGN)
ASCRJ_CONT_IGN_BTN_PRESS#2 (>L:ASCRJ_ENGS_CONT_IGN_ANIM)
ASCRJ_CONT_IGN_BTN_REL#(L:ASCRJ_ENGS_CONT_IGN, Bool) ! (>L:ASCRJ_ENGS_CONT_IGN) 0 (>L:ASCRJ_ENGS_CONT_IGN_ANIM)
ASCRJ_ENGS_START_L_PRESS#1 (>L:ASCRJ_ENGS_START_L_ANIM)
ASCRJ_ENGS_START_L_RELEASE#0 (>L:ASCRJ_ENGS_START_L_ANIM) 1 (>L:ASCRJ_ENGS_START_L)
ASCRJ_ENGS_START_R_PRESS#1 (>L:ASCRJ_ENGS_START_R_ANIM)
ASCRJ_ENGS_START_R_RELEASE#0 (>L:ASCRJ_ENGS_START_R_ANIM) 1 (>L:ASCRJ_ENGS_START_R)
ASCRJ_ENGS_STOP_L_PRESS#1 (>L:ASCRJ_ENGS_STOP_L_ANIM)
ASCRJ_ENGS_STOP_L_RELEASE#0 (>L:ASCRJ_ENGS_STOP_L_ANIM) 1 (>L:ASCRJ_ENGS_STOP_L)
ASCRJ_ENGS_STOP_R_PRESS#1 (>L:ASCRJ_ENGS_STOP_R_ANIM)
ASCRJ_ENGS_STOP_R_RELEASE#0 (>L:ASCRJ_ENGS_STOP_R_ANIM) 1 (>L:ASCRJ_ENGS_STOP_R)
ASCRJ_FUEL_PUMP_L_SWITCH# (L:ASCRJ_FUEL_PUMP_L, Bool) ! (>L:ASCRJ_FUEL_PUMP_L)
ASCRJ_FUEL_PUMP_R_SWITCH# (L:ASCRJ_FUEL_PUMP_R, Bool) ! (>L:ASCRJ_FUEL_PUMP_R)
ASCRJ_REV_1_ARM_SWITCH_TOGGLE# (L:ASCRJ_TQ_REV1_MODE, Bool) ! (>L:ASCRJ_TQ_REV1_MODE)
ASCRJ_REV_2_ARM_SWITCH_TOGGLE# (L:ASCRJ_TQ_REV2_MODE, Bool) ! (>L:ASCRJ_TQ_REV2_MODE)
ASCRJ_TQ_CUTOFF_1_LEVER#1 (>L:ASCRJ_TQ_CUTOFF_1)
ASCRJ_TQ_CUTOFF_2_LEVER#1 (>L:ASCRJ_TQ_CUTOFF_2)
ASCRJ_TQ_THROTTLE_1_POS_IDLE#400 (>L:ASCRJ_TQ_THROTTLE_1_POS)
ASCRJ_TQ_THROTTLE_1_POS_SHUTOFF#500 (>L:ASCRJ_TQ_THROTTLE_1_POS)
ASCRJ_TQ_THROTTLE_2_POS_IDLE#400 (>L:ASCRJ_TQ_THROTTLE_2_POS)
ASCRJ_TQ_THROTTLE_2_POS_SHUTOFF#500 (>L:ASCRJ_TQ_THROTTLE_2_POS)
//Aerosoft/CRJ 550-700-1000/Flight Controls
ASCRJ_FLAPS_DECR#(L:ASCRJ_FLAPS_SET,number) -- 0 max (>L:ASCRJ_FLAPS_SET,number)
ASCRJ_FLAPS_INCR#(L:ASCRJ_FLAPS_SET,number) ++ 5 min (>L:ASCRJ_FLAPS_SET,number)
ASCRJ_GLD_MODE_SWITCH3_PRESS#(L:ASCRJ_TQ_SPLR_MODE, Number) -- (>L:ASCRJ_TQ_SPLR_MODE) (L:ASCRJ_TQ_SPLR_MODE, Number) 0 == if{ 2 (>L:ASCRJ_TQ_SPLR_MODE_TIMER_0) } 
ASCRJ_GLD_MODE_SWITCH3_RELEASE#(L:ASCRJ_TQ_SPLR_MODE, Number) ++ (>L:ASCRJ_TQ_SPLR_MODE) (L:ASCRJ_TQ_SPLR_MODE, Number) 2 == if{ 2 (>L:ASCRJ_TQ_SPLR_MODE_TIMER_2) } 
ASCRJ_MACH_TRIM_SWITCH# (L:ASCRJ_MACH_TRIM, Bool) ! (>L:ASCRJ_MACH_TRIM)
ASCRJ_STAB_TRIM_CH_1_SWITCH# (L:ASCRJ_STAB_TRIM_CH1_TRIGGER, Bool) ! (>L:ASCRJ_STAB_TRIM_CH1_TRIGGER)
ASCRJ_STAB_TRIM_CH_2_SWITCH# (L:ASCRJ_STAB_TRIM_CH2_TRIGGER, Bool) ! (>L:ASCRJ_STAB_TRIM_CH2_TRIGGER)
ASCRJ_YD1_SWITCH# (L:ASCRJ_YD1, Bool) ! (>L:ASCRJ_YD1)
ASCRJ_YD2_SWITCH# (L:ASCRJ_YD2, Bool) ! (>L:ASCRJ_YD2)
ASCRJ_YD_DISC_SWITCH# (L:ASCRJ_YD_DISC, Bool) ! (>L:ASCRJ_YD_DISC)
//Aerosoft/CRJ 550-700-1000/Flight Instrumentation
ASCRJ_DIM_BRT_BTN#1 (>L:ASCRJ_DIM_BRT) 
ASCRJ_HUD_ACT_BTN#1 (>L:ASCRJ_HUD_ACT) 
ASCRJ_HUD_BRT_BTN#1 (>L:ASCRJ_HUD_BRT)
ASCRJ_HUD_DIM_BTN#0 (>L:ASCRJ_HUD_DIM_BTN_ANIM)
ASCRJ_HUD_KEY_0_BTN#0 (>L:ASCRJ_HUD_KEY_0_BTN_ANIM)
ASCRJ_HUD_KEY_1#1 (>L:ASCRJ_HUD_KEY_1)
ASCRJ_HUD_KEY_1_BTN#0 (>L:ASCRJ_HUD_KEY_1_BTN_ANIM)
ASCRJ_HUD_KEY_3_BTN#1 (>L:ASCRJ_HUD_KEY_3)
ASCRJ_HUD_KEY_4_BTN#1 (>L:ASCRJ_HUD_KEY_4) 
ASCRJ_HUD_KEY_5_BTN#1 (>L:ASCRJ_HUD_KEY_5)
ASCRJ_HUD_KEY_6_BTN#1 (>L:ASCRJ_HUD_KEY_6) 
ASCRJ_HUD_KEY_7_BTN#1 (>L:ASCRJ_HUD_KEY_7) 
ASCRJ_HUD_KEY_9_BTN#1 (>L:ASCRJ_HUD_KEY_9)
ASCRJ_HUD_KEY_ENTER_BTN#1 (>L:ASCRJ_HUD_KEY_ENTER)
ASCRJ_HUD_KEY_TEST_BTN#1 (>L:ASCRJ_HUD_KEY_TEST)
ASCRJ_HUD_RWY_BTN#1 (>L:ASCRJ_HUD_RWY) 
ASCRJ_HUD_STBY_BTN#1 (>L:ASCRJ_HUD_STBY)
ASCRJ_LSP_BRG1_PRESS#1 (>L:ASCRJ_LSP_BRG1)
ASCRJ_LSP_BRG1_RELEASE#0 (>L:ASCRJ_LSP_BRG1)
ASCRJ_LSP_BRG2_PRESS#1 (>L:ASCRJ_LSP_BRG2)
ASCRJ_LSP_BRG2_RELEASE#0 (>L:ASCRJ_LSP_BRG2)
ASCRJ_LSP_HEIGHT_MODE_DA#(L:ASCRJ_LSP_HEIGHT_MODE, Number) 2 -- < if{ (L:ASCRJ_LSP_HEIGHT_MODE, Number) ++ (>L:ASCRJ_LSP_HEIGHT_MODE) 
ASCRJ_LSP_HEIGHT_MODE_MDA#(L:ASCRJ_LSP_HEIGHT_MODE, Number) 0 > if{ (L:ASCRJ_LSP_HEIGHT_MODE, Number) -- (>L:ASCRJ_LSP_HEIGHT_MODE) 
ASCRJ_LSP_HEIGHT_SEL_DEC#(L_ASCRJ_LSP_HEIGHT_SEL_ Number) 10 - DNOR (>L:ASCRJ_LSP_HEIGHT_SEL) (L:ASCRJ_LSP_HEIGHT_SEL_CHANGE, Number) -- (>L:ASCRJ_LSP_HEIGHT_SEL_CHANGE) 
ASCRJ_LSP_HEIGHT_SEL_INC#(L_ASCRJ_LSP_HEIGHT_SEL_ Number) 10 + DNOR (>L:ASCRJ_LSP_HEIGHT_SEL) (L:ASCRJ_LSP_HEIGHT_SEL_CHANGE, Number) ++ (>L:ASCRJ_LSP_HEIGHT_SEL_CHANGE) 
ASCRJ_LSP_RDR_PRESS#1 (>L:ASCRJ_LSP_RDR)
ASCRJ_LSP_RDR_RELEASE#0 (>L:ASCRJ_LSP_RDR)
ASCRJ_LSP_SEL_PRESS#1 (>L:ASCRJ_LSP_SEL)
ASCRJ_LSP_SEL_RELEASE#0 (>L:ASCRJ_LSP_SEL)
ASCRJ_LSP_SPEED_MODE_DEC#(L:ASCRJ_LSP_SPEED_MODE, Number) -- 0 max (>L:ASCRJ_LSP_SPEED_MODE) 
ASCRJ_LSP_SPEED_MODE_INC#(L:ASCRJ_LSP_SPEED_MODE, Number) ++ 2 min (>L:ASCRJ_LSP_SPEED_MODE) 
ASCRJ_LSP_SPEED_SEL#1 (>L:ASCRJ_LSP_SPEED_SEL)
ASCRJ_LSP_SPEED_SEL_DEC#(L:ASCRJ_LSP_SPEED_SEL, Number) 10 - dnor (>L:ASCRJ_LSP_SPEED_SEL) (L:ASCRJ_LSP_SPEED_SEL_CHANGE_, Number) -- (>L:ASCRJ_LSP_SPEED_SEL_CHANGE) 
ASCRJ_LSP_SPEED_SEL_INC#(L:ASCRJ_LSP_SPEED_SEL, Number) 10 + dnor (>L:ASCRJ_LSP_SPEED_SEL) (L:ASCRJ_LSP_SPEED_SEL_CHANGE, Number) ++ (>L:ASCRJ_LSP_SPEED_SEL_CHANGE) 
ASCRJ_HUD_ACT_BTN_ANIM#0 (>L:ASCRJ_HUD_ACT_BTN_ANIM)
ASCRJ_HUD_BRT_BTN_ANIM#0 (>L:ASCRJ_HUD_BRT_BTN_ANIM)
ASCRJ_HUD_GS_BTN#1 (>L:ASCRJ_HUD_GS) 
ASCRJ_HUD_GS_BTN_ANIM#0 (>L:ASCRJ_HUD_GS_BTN_ANIM) 
ASCRJ_HUD_KEY_0_BTN_ANIM#0 (>L:ASCRJ_HUD_KEY_0_BTN_ANIM)
ASCRJ_HUD_KEY_2#1 (>L:ASCRJ_HUD_KEY_2) 
ASCRJ_HUD_KEY_2_BTN_ANIM#0 (>L:ASCRJ_HUD_KEY_2_BTN_ANIM)
ASCRJ_HUD_KEY_3_BTN_ANIM#0 (>L:ASCRJ_HUD_KEY_3_BTN_ANIM)
ASCRJ_HUD_KEY_4_BTN_ANIM#0 (>L:ASCRJ_HUD_KEY_4_BTN_ANIM)
ASCRJ_HUD_KEY_5_BTN_ANIM#0 (>L:ASCRJ_HUD_KEY_5_BTN_ANIM)
ASCRJ_HUD_KEY_6_BTN_ANIM#0 (>L:ASCRJ_HUD_KEY_6_BTN_ANIM)
ASCRJ_HUD_KEY_7_BTN_ANIM#0 (>L:ASCRJ_HUD_KEY_7_BTN_ANIM)
ASCRJ_HUD_KEY_8#1 (>L:ASCRJ_HUD_KEY_8)
ASCRJ_HUD_KEY_8_BTN_ANIM#0 (>L:ASCRJ_HUD_KEY_8_BTN_ANIM)
ASCRJ_HUD_KEY_9_BTN_ANIM#0 (>L:ASCRJ_HUD_KEY_9_BTN_ANIM)
ASCRJ_HUD_KEY_ENTER_BTN_ANIM#0 (>L:ASCRJ_HUD_KEY_ENTER_BTN_ANIM)
ASCRJ_HUD_KEY_TEST_BTN_ANIM#0 (>L:ASCRJ_HUD_KEY_TEST_BTN_ANIM)
ASCRJ_HUD_KEY_TEST_BTN_ANIM_-_DUPLICATE#0 (>L:ASCRJ_HUD_KEY_TEST_BTN_ANIM)
ASCRJ_HUD_RWY_BTN_ANIM#0 (>L:ASCRJ_HUD_RWY_BTN_ANIM)
ASCRJ_HUD_STBY_BTN_ANIM#0 (>L:ASCRJ_HUD_STBY_BTN_ANIM)
ASCRJ_LSP_SPEED_SEL_-_DUPLICATE__OLD_#0 (>L:ASCRJ_LSP_SPEED_SEL) 0 (>L:ASCRJ_LSP_SPEED_SEL) 1 (>L:ASCRJ_LSP_SPEED_SET) 
//Aerosoft/CRJ 550-700-1000/Fuel
ASCRJ_FUEL_GRAVITY_FLOW_PRESS#2 (>L:ASCRJ_FUEL_GRAVITY_FLOW_ANIM)
ASCRJ_FUEL_GRAVITY_FLOW_REL#(L:ASCRJ_FUEL_GRAVITY_FLOW, Bool) ! (>L:ASCRJ_FUEL_GRAVITY_FLOW) 0 (>L:ASCRJ_FUEL_GRAVITY_FLOW_ANIM)
ASCRJ_FUEL_XFLOW_L_PRESS#2 (>L:ASCRJ_FUEL_XFLOW_L_ANIM)
ASCRJ_FUEL_XFLOW_L_REL#(L:ASCRJ_FUEL_XFLOW_L, Bool) ! (>L:ASCRJ_FUEL_XFLOW_L) 0 (>L:ASCRJ_FUEL_XFLOW_L_ANIM)
ASCRJ_FUEL_XFLOW_OVRD_PRESS#2 (>L:ASCRJ_FUEL_XFLOW_OVRD_ANIM)
ASCRJ_FUEL_XFLOW_OVRD_REL#(L:ASCRJ_FUEL_XFLOW_OVRD, Bool) ! (>L:ASCRJ_FUEL_XFLOW_OVRD) 0 (>L:ASCRJ_FUEL_XFLOW_OVRD_ANIM)
ASCRJ_FUEL_XFLOW_R_PRESS#2 (>L:ASCRJ_FUEL_XFLOW_R_ANIM)
ASCRJ_FUEL_XFLOW_R_REL#(L:ASCRJ_FUEL_XFLOW_R, Bool) ! (>L:ASCRJ_FUEL_XFLOW_R) 0 (>L:ASCRJ_FUEL_XFLOW_R_ANIM)
ASCRJ_L_FUEL_PUMP_PRESS#2 (>L:ASCRJ_FUEL_PUMP_L_ANIM)
ASCRJ_L_FUEL_PUMP_REL#(L:ASCRJ_FUEL_PUMP_L, Bool) ! (>L:ASCRJ_FUEL_PUMP_L) 0 (>L:ASCRJ_FUEL_PUMP_L_ANIM)
ASCRJ_R_FUEL_PUMP_PRESS#2 (>L:ASCRJ_FUEL_PUMP_R_ANIM)
ASCRJ_R_FUEL_PUMP_REL#(L:ASCRJ_FUEL_PUMP_R, Bool) ! (>L:ASCRJ_FUEL_PUMP_R) 0 (>L:ASCRJ_FUEL_PUMP_R_ANIM)
//Aerosoft/CRJ 550-700-1000/Gear
ASCRJ_GEAR_GEAR_LEVER_SWITCH_OFF#0 (>L:ASCRJ_GEAR_GEAR_LEVER)
ASCRJ_GEAR_GEAR_LEVER_SWITCH_ON#1 (>L:ASCRJ_GEAR_GEAR_LEVER)
ASCRJ_PARK_BRAKE_SWITCH_OFF#0 (>L:ASCRJ_PARK_BRAKE)
ASCRJ_PARK_BRAKE_SWITCH_ON#1 (>L:ASCRJ_PARK_BRAKE)
//Aerosoft/CRJ 550-700-1000/Hydraulic
ASCRJ_HYDRAULIC_L_HYD_SOV_GUARD_COUNT_TIMER#50 (>L:ASCRJ_HYDR_SOV1_GUARD_COUNT)
ASCRJ_HYDRAULIC_L_HYD_SOV_GUARD_SW#(L:ASCRJ_HYDR_SOV1_GUARD) ! (>L:ASCRJ_HYDR_SOV1_GUARD)
ASCRJ_HYDRAULIC_L_HYD_SOV_SW#(L:ASCRJ_HYDR_SOV1) ! (>L:ASCRJ_HYDR_SOV1)
ASCRJ_HYDRAULIC_R_HYD_SOV_GUARD_COUNT_TIMER#50 (>L:ASCRJ_HYDR_SOV2_GUARD_COUNT)
ASCRJ_HYDRAULIC_R_HYD_SOV_GUARD_SW#(L:ASCRJ_HYDR_SOV2_GUARD) ! (>L:ASCRJ_HYDR_SOV2_GUARD)
ASCRJ_HYDRAULIC_R_HYD_SOV_SW#(L:ASCRJ_HYDR_SOV2) ! (>L:ASCRJ_HYDR_SOV2)
ASCRJ_HYDR_PUMP_1_AUTO_SWITCH#2 (>L:ASCRJ_HYDR_PUMP_1, Number)
ASCRJ_HYDR_PUMP_1_BUTTON#(L:ASCRJ_HYDR_PUMP_1, Number) ++ 3 % (>L:ASCRJ_HYDR_PUMP_1, Number)
ASCRJ_HYDR_PUMP_1_OFF_SWITCH#1 (>L:ASCRJ_HYDR_PUMP_1, Number)
ASCRJ_HYDR_PUMP_1_ON_SWITCH#0 (>L:ASCRJ_HYDR_PUMP_1, Number)
ASCRJ_HYDR_PUMP_2_AUTO_SWITCH#2 (>L:ASCRJ_HYDR_PUMP_2, Number)
ASCRJ_HYDR_PUMP_2_BUTTON#(L:ASCRJ_HYDR_PUMP_2, Number) ++ 3 % (>L:ASCRJ_HYDR_PUMP_2, Number)
ASCRJ_HYDR_PUMP_2_OFF_SWITCH#1 (>L:ASCRJ_HYDR_PUMP_2, Number)
ASCRJ_HYDR_PUMP_2_ON_SWITCH#0 (>L:ASCRJ_HYDR_PUMP_2, Number)
ASCRJ_HYDR_PUMP_3A_BUTTON# (L:ASCRJ_HYDR_PUMP_3A, Bool) ! (>L:ASCRJ_HYDR_PUMP_3A)
ASCRJ_HYDR_PUMP_3A_ON-OFF_SWITCH#(L:ASCRJ_HYDR_PUMP_3A, Bool) ! (>L:ASCRJ_HYDR_PUMP_3A)
ASCRJ_HYDR_PUMP_3A_SWITCH_OFF#0 (>L:ASCRJ_HYDR_PUMP_3A)
ASCRJ_HYDR_PUMP_3A_SWITCH_ON#1 (>L:ASCRJ_HYDR_PUMP_3A)
ASCRJ_HYDR_PUMP_3B_AUTO_SWITCH#2 (>L:ASCRJ_HYDR_PUMP_3B, Number)
ASCRJ_HYDR_PUMP_3B_BUTTON#(L:ASCRJ_HYDR_PUMP_3B, Number) ++ 3 % (>L:ASCRJ_HYDR_PUMP_3B, Number)
ASCRJ_HYDR_PUMP_3B_OFF_SWITCH#1 (>L:ASCRJ_HYDR_PUMP_3B, Number)
ASCRJ_HYDR_PUMP_3B_ON_SWITCH#0 (>L:ASCRJ_HYDR_PUMP_3B, Number)
//Aerosoft/CRJ 550-700-1000/Lights
ASCRJ_DM_LT_CPT_DEC# (L:ASCRJ64_DM_LT_CPT, Number) 0 > if{ (L:ASCRJ64_DM_LT_CPT, Number) -- (>L:ASCRJ64_DM_LT_CPT) }
ASCRJ_DM_LT_CPT_INC# (L:ASCRJ64_DM_LT_CPT, Number) 26 < if{ (L:ASCRJ64_DM_LT_CPT, Number) ++ (>L:ASCRJ64_DM_LT_CPT) }
ASCRJ_DM_LT_FO_DEC# (L:ASCRJ64_DM_LT_FO, Number) 0 > if{ (L:ASCRJ64_DM_LT_FO, Number) -- (>L:ASCRJ64_DM_LT_FO) }
ASCRJ_DM_LT_FO_INC# (L:ASCRJ64_DM_LT_FO, Number) 26 < if{ (L:ASCRJ64_DM_LT_FO, Number) ++ (>L:ASCRJ64_DM_LT_FO) }
ASCRJ_EXTL_BEACON_SWITCH#(L:ASCRJ_EXTL_BEACON, Bool) ! (>L:ASCRJ_EXTL_BEACON)
ASCRJ_EXTL_BEACON_SWITCH_OFF#0 (>L:ASCRJ_EXTL_BEACON)
ASCRJ_EXTL_BEACON_SWITCH_ON#1 (>L:ASCRJ_EXTL_BEACON)
ASCRJ_EXTL_LOGO_SWITCH#(L:ASCRJ_EXTL_LOGO, Bool) ! (>L:ASCRJ_EXTL_LOGO)
ASCRJ_EXTL_LOGO_SWITCH_OFF#0 (>L:ASCRJ_EXTL_LOGO)
ASCRJ_EXTL_LOGO_SWITCH_ON#1 (>L:ASCRJ_EXTL_LOGO)
ASCRJ_EXTL_NAV_SWITCH#(L:ASCRJ_EXTL_NAV, Bool) ! (>L:ASCRJ_EXTL_NAV)
ASCRJ_EXTL_NAV_SWITCH_OFF#0 (>L:ASCRJ_EXTL_NAV)
ASCRJ_EXTL_NAV_SWITCH_ON#1 (>L:ASCRJ_EXTL_NAV)
ASCRJ_EXTL_STROBE_SWITCH#(L:ASCRJ_EXTL_STROBE, Bool) ! (>L:ASCRJ_EXTL_STROBE)
ASCRJ_EXTL_STROBE_SWITCH_OFF#0 (>L:ASCRJ_EXTL_STROBE)
ASCRJ_EXTL_STROBE_SWITCH_ON#1 (>L:ASCRJ_EXTL_STROBE)
ASCRJ_EXTL_WING_SWITCH#(L:ASCRJ_EXTL_WING, Bool) ! (>L:ASCRJ_EXTL_WING)
ASCRJ_EXTL_WING_SWITCH_OFF#0 (>L:ASCRJ_EXTL_WING)
ASCRJ_EXTL_WING_SWITCH_ON#1 (>L:ASCRJ_EXTL_WING)
ASCRJ_INTL_CB_PNL_BRT_DEC# (L:ASCRJ_INTL_CB_PNL_BRT, Number) 0 > if{ (L:ASCRJ_INTL_CB_PNL_BRT, Number) -- (>L:ASCRJ_INTL_CB_PNL_BRT) }
ASCRJ_INTL_CB_PNL_BRT_INC# (L:ASCRJ_INTL_CB_PNL_BRT, Number) 26 < if{ (L:ASCRJ_INTL_CB_PNL_BRT, Number) ++ (>L:ASCRJ_INTL_CB_PNL_BRT) }
ASCRJ_INTL_COMP_SWITCH_ON#2 (>L:ASCRJ_INTL_COMP)
ASCRJ_INTL_COMP_SWITCH_DIM#0 (>L:ASCRJ_INTL_COMP)
ASCRJ_INTL_COMP_SWITCH_OFF#1 (>L:ASCRJ_INTL_COMP)
ASCRJ_INTL_DOME_SWITCH_OFF#0 (>L:ASCRJ_INTL_DOME)
ASCRJ_INTL_DOME_SWITCH_ON#1 (>L:ASCRJ_INTL_DOME)
ASCRJ_INTL_DSPL_BRT_DEC# (L:ASCRJ_INTL_DSPL_BRT, Number) 0 > if{ (L:ASCRJ_INTL_DSPL_BRT, Number) -- (>L:ASCRJ_INTL_DSPL_BRT) }
ASCRJ_INTL_DSPL_BRT_INC# (L:ASCRJ_INTL_DSPL_BRT, Number) 26 < if{ (L:ASCRJ_INTL_DSPL_BRT, Number) ++ (>L:ASCRJ_INTL_DSPL_BRT) }
ASCRJ_INTL_FLOOD_BRT_DEC# (L:ASCRJ_INTL_FLOOD_BRT, Number) 0 > if{ (L:ASCRJ_INTL_FLOOD_BRT, Number) -- (>L:ASCRJ_INTL_FLOOD_BRT) }
ASCRJ_INTL_FLOOD_BRT_INC# (L:ASCRJ_INTL_FLOOD_BRT, Number) 26 < if{ (L:ASCRJ_INTL_FLOOD_BRT, Number) ++ (>L:ASCRJ_INTL_FLOOD_BRT) }
ASCRJ_INTL_INTEG_BRT_DEC# (L:ASCRJ_INTL_INTEG_BRT, Number) 0 > if{ (L:ASCRJ_INTL_INTEG_BRT, Number) -- (>L:ASCRJ_INTL_INTEG_BRT) }
ASCRJ_INTL_INTEG_BRT_INC# (L:ASCRJ_INTL_INTEG_BRT, Number) 26 < if{ (L:ASCRJ_INTL_INTEG_BRT, Number) ++ (>L:ASCRJ_INTL_INTEG_BRT) }
ASCRJ_INTL_OVHD_DEC# (L:ASCRJ_INTL_OVHD, Number) 0 > if{ (L:ASCRJ_INTL_OVHD, Number) -- (>L:ASCRJ_INTL_OVHD) }
ASCRJ_INTL_OVHD_INC# (L:ASCRJ_INTL_OVHD, Number) 26 < if{ (L:ASCRJ_INTL_OVHD, Number) ++ (>L:ASCRJ_INTL_OVHD) }
ASCRJ_LSP_DSPL_DEC# (L:ASCRJ_LSP_DSPL, Number) 0 > if{ (L:ASCRJ_LSP_DSPL, Number) -- (>L:ASCRJ_LSP_DSPL) }
ASCRJ_LSP_DSPL_INC# (L:ASCRJ_LSP_DSPL, Number) 26 < if{ (L:ASCRJ_LSP_DSPL, Number) ++ (>L:ASCRJ_LSP_DSPL) }
ASCRJ_LSP_FLOOD_DEC# (L:ASCRJ_LSP_FLOOD, Number) 0 > if{ (L:ASCRJ_LSP_FLOOD, Number) -- (>L:ASCRJ_LSP_FLOOD) }
ASCRJ_LSP_FLOOD_INC# (L:ASCRJ_LSP_FLOOD, Number) 26 < if{ (L:ASCRJ_LSP_FLOOD, Number) ++ (>L:ASCRJ_LSP_FLOOD) }
ASCRJ_LSP_INTEG_DEC# (L:ASCRJ_LSP_INTEG, Number) 0 > if{ (L:ASCRJ_LSP_INTEG, Number) -- (>L:ASCRJ_LSP_INTEG) }
ASCRJ_LSP_INTEG_INC# (L:ASCRJ_LSP_INTEG, Number) 26 < if{ (L:ASCRJ_LSP_INTEG, Number) ++ (>L:ASCRJ_LSP_INTEG) }
ASCRJ_OVHD_ELT_SWITCH_OFF#0 (>L:ASCRJ_OVHD_ELT)
ASCRJ_OVHD_ELT_SWITCH_ON#1 (>L:ASCRJ_OVHD_ELT)
ASCRJ_OVHD_ELT_SWITCH_XXX#1 (>L:ASCRJ_OVHD_ELT, Number)
ASCRJ_OVHD_EMER_LTS_SWITCH#(L:ASCRJ_OVHD_EMER_LTS, Number) 0 == if{ 1 (>L:ASCRJ_OVHD_EMER_LTS, Number) } els{ (L:ASCRJ_OVHD_EMER_LTS, Number) 1 == if{ 2 (>L:ASCRJ_OVHD_EMER_LTS, Number) } els{ (L:ASCRJ_OVHD_EMER_LTS, Number) 2 == if{ 0 (>L:ASCRJ_OVHD_EMER_LTS, Number) }
ASCRJ_OVHD_EMER_LTS_SWITCH_ARM#0 (>L:ASCRJ_OVHD_EMER_LTS, Number)
ASCRJ_OVHD_EMER_LTS_SWITCH_OFF#1 (>L:ASCRJ_OVHD_EMER_LTS, Number)
ASCRJ_OVHD_EMER_LTS_SWITCH_ON#2 (>L:ASCRJ_OVHD_EMER_LTS, Number)
ASCRJ_OVHD_LDG_LEFT_SWITCH#(L:ASCRJ_OVHD_LDG_LEFT, Bool) ! (>L:ASCRJ_OVHD_LDG_LEFT)
ASCRJ_OVHD_LDG_LTS_LEFT_SWITCH_OFF#0 (>L:ASCRJ_OVHD_LDG_LEFT)
ASCRJ_OVHD_LDG_LTS_LEFT_SWITCH_ON#1 (>L:ASCRJ_OVHD_LDG_LEFT)
ASCRJ_OVHD_LDG_LTS_NOSE_SWITCH_OFF#0 (>L:ASCRJ_OVHD_LDG_NOSE)
ASCRJ_OVHD_LDG_LTS_NOSE_SWITCH_ON#1 (>L:ASCRJ_OVHD_LDG_NOSE)
ASCRJ_OVHD_LDG_LTS_RIGHT_SWITCH_OFF#0 (>L:ASCRJ_OVHD_LDG_RIGHT)
ASCRJ_OVHD_LDG_LTS_RIGHT_SWITCH_ON#1 (>L:ASCRJ_OVHD_LDG_RIGHT)
ASCRJ_OVHD_LDG_NOSE_SWITCH#(L:ASCRJ_OVHD_LDG_NOSE, Bool) ! (>L:ASCRJ_OVHD_LDG_NOSE)
ASCRJ_OVHD_LDG_RIGHT_SWITCH#(L:ASCRJ_OVHD_LDG_RIGHT, Bool) ! (>L:ASCRJ_OVHD_LDG_RIGHT)
ASCRJ_OVHD_TAXI_LTS_SWITCH_OFF#0 (>L:ASCRJ_OVHD_TAXI)
ASCRJ_OVHD_TAXI_LTS_SWITCH_ON#1 (>L:ASCRJ_OVHD_TAXI)
ASCRJ_OVHD_TAXI_SWITCH#(L:ASCRJ_OVHD_TAXI, Bool) ! (>L:ASCRJ_OVHD_TAXI)
ASCRJ_RSP_DSPL_DEC# (L:ASCRJ_RSP_DSPL, Number) 0 > if{ (L:ASCRJ_RSP_DSPL, Number) -- (>L:ASCRJ_RSP_DSPL) }
ASCRJ_RSP_DSPL_INC# (L:ASCRJ_RSP_DSPL, Number) 26 < if{ (L:ASCRJ_RSP_DSPL, Number) ++ (>L:ASCRJ_RSP_DSPL) }
ASCRJ_RSP_FLOOD_DEC# (L:ASCRJ_RSP_FLOOD, Number) 0 > if{ (L:ASCRJ_RSP_FLOOD, Number) -- (>L:ASCRJ_RSP_FLOOD) }
ASCRJ_RSP_FLOOD_INC# (L:ASCRJ_RSP_FLOOD, Number) 26 < if{ (L:ASCRJ_RSP_FLOOD, Number) ++ (>L:ASCRJ_RSP_FLOOD) }
ASCRJ_RSP_INTEG_DEC# (L:ASCRJ_RSP_INTEG, Number) 0 > if{ (L:ASCRJ_RSP_INTEG, Number) -- (>L:ASCRJ_RSP_INTEG) }
ASCRJ_RSP_INTEG_INC# (L:ASCRJ_RSP_INTEG, Number) 26 < if{ (L:ASCRJ_RSP_INTEG, Number) ++ (>L:ASCRJ_RSP_INTEG) }
//Aerosoft/CRJ 550-700-1000/Navigation
ASCRJ_LSP_BARO_CHANGE_DEC#(L:ASCRJ_LSP_BARO_CHANGE, 2) -- (>L:ASCRJ_LSP_BARO_CHANGE)
ASCRJ_LSP_BARO_CHANGE_INC#(L:ASCRJ_LSP_BARO_CHANGE, 2) ++ (>L:ASCRJ_LSP_BARO_CHANGE)
ASCRJ_LSP_BARO_STD_PRESS#1 (>L:ASCRJ_LSP_BARO_STD)
ASCRJ_LSP_BARO_STD_RELEASE#0 (>L:ASCRJ_LSP_BARO_STD)
ASCRJ_LSP_FORMAT_CHANGE_ENCOD_DEC#(L:ASCRJ_LSP_FORMAT, Number) 10 - dnor (>L:ASCRJ_LSP_FORMAT) (L:ASCRJ_LSP_FORMAT_CHANGE, Number) -- (>L:ASCRJ_LSP_FORMAT_CHANGE)
ASCRJ_LSP_FORMAT_CHANGE_ENCOD_INC#(L:ASCRJ_LSP_FORMAT, Number) 10 + dnor (>L:ASCRJ_LSP_FORMAT) (L:ASCRJ_LSP_FORMAT_CHANGE, Number) ++ (>L:ASCRJ_LSP_FORMAT_CHANGE)
ASCRJ_LSP_NAV_SOURCE_CHANGE_DEC#(L:ASCRJ_LSP_NAV_SOURCE_CHANGE, 1) -- (>L:ASCRJ_LSP_NAV_SOURCE_CHANGE)
ASCRJ_LSP_NAV_SOURCE_CHANGE_INC#(L:ASCRJ_LSP_NAV_SOURCE_CHANGE, 1) ++ (>L:ASCRJ_LSP_NAV_SOURCE_CHANGE)
ASCRJ_LSP_NAV_SOURCE_XSIDE_PRESS#1 (>L:ASCRJ_LSP_NAV_SOURCE_XSIDE)
ASCRJ_LSP_NAV_SOURCE_XSIDE_RELEASE#0 (>L:ASCRJ_LSP_NAV_SOURCE_XSIDE)
ASCRJ_LSP_ZOOM_RANGE_CHANGE_DEC#(L:ASCRJ_LSP_RANGE_CHANGE, 1) -- (>L:ASCRJ_LSP_RANGE_CHANGE)
ASCRJ_LSP_ZOOM_RANGE_CHANGE_INC#(L:ASCRJ_LSP_RANGE_CHANGE, 1) ++ (>L:ASCRJ_LSP_RANGE_CHANGE)
ASCRJ_MCDU1_BRT_DEC# (L:ASCRJ_MCDU1_BRT_CHANGE, Number) -- (>L:ASCRJ_MCDU1_BRT_CHANGE)
ASCRJ_MCDU1_BRT_INC# (L:ASCRJ_MCDU1_BRT_CHANGE, Number) ++ (>L:ASCRJ_MCDU1_BRT_CHANGE)
ASCRJ_MCDU2_BRT_DEC# (L:ASCRJ_MCDU2_BRT_CHANGE, Number) -- (>L:ASCRJ_MCDU2_BRT_CHANGE)
ASCRJ_MCDU2_BRT_INC# (L:ASCRJ_MCDU2_BRT_CHANGE, Number) ++ (>L:ASCRJ_MCDU2_BRT_CHANGE)
BARO_Hpa_In#1 (>L:ASCRJ_LSP_HPA_IN) 1 (>L:ASCRJ_RSP_HPA_IN)
//Aerosoft/CRJ 550-700-1000/Passengers/Crew
ASCRJ_OVHD_NO_SMOKING_SWITCH#1 (L:ASCRJ_OVHD_NO_SMOKING, Number) 0 == if{ 1 (>L:ASCRJ_OVHD_NO_SMOKING, Number) } els{ (L:ASCRJ_OVHD_NO_SMOKING, Number) 1 == if{ 2 (>L:ASCRJ_OVHD_NO_SMOKING, Number) } els{ (L:ASCRJ_OVHD_NO_SMOKING, Number) 2 == if{ 0 (>L:ASCRJ_OVHD_NO_SMOKING, Number) }
ASCRJ_OVHD_NO_SMOKING_SWITCH_AUTO#0 (>L:ASCRJ_OVHD_NO_SMOKING, Number)
ASCRJ_OVHD_NO_SMOKING_SWITCH_OFF#1 (>L:ASCRJ_OVHD_NO_SMOKING, Number)
ASCRJ_OVHD_NO_SMOKING_SWITCH_ON#2 (>L:ASCRJ_OVHD_NO_SMOKING, Number)
ASCRJ_OVHD_SEATBELTS_SWITCH_AUTO#0 (>L:ASCRJ_OVHD_SEAT_BELTS, Number)
ASCRJ_OVHD_SEATBELTS_SWITCH_OFF#1 (>L:ASCRJ_OVHD_SEAT_BELTS, Number)
ASCRJ_OVHD_SEATBELTS_SWITCH_ON#2 (>L:ASCRJ_OVHD_SEAT_BELTS, Number)
ASCRJ_OVHD_SEAT_BELTS_SWITCH#1 (L:ASCRJ_OVHD_SEAT_BELTS, Number) 0 == if{ 1 (>L:ASCRJ_OVHD_SEAT_BELTS, Number) } els{ (L:ASCRJ_OVHD_SEAT_BELTS, Number) 1 == if{ 2 (>L:ASCRJ_OVHD_SEAT_BELTS, Number) } els{ (L:ASCRJ_OVHD_SEAT_BELTS, Number) 2 == if{ 0 (>L:ASCRJ_OVHD_SEAT_BELTS, Number) }
//Aerosoft/CRJ 550-700-1000/Radio
ASCRJ_RTU1_IDENT_PRESS#1 (>L:ASCRJ_RTU1_IDENT)
ASCRJ_RTU1_KNOB_INNER_DEC# (L:ASCRJ_RTU1_KNOB_INNER, Number) 10 - dnor (>L:ASCRJ_RTU1_KNOB_INNER) (ASCRJ_RTU1_KNOB_INNER_CHANGE, Number) -- (>L:ASCRJ_RTU1_KNOB_INNER_CHANGE)
ASCRJ_RTU1_KNOB_INNER_INC# (L:ASCRJ_RTU1_KNOB_INNER, Number) 10 + dnor (>L:ASCRJ_RTU1_KNOB_INNER) (ASCRJ_RTU1_KNOB_INNER_CHANGE, Number) ++ (>L:ASCRJ_RTU1_KNOB_INNER_CHANGE)
ASCRJ_RTU1_KNOB_OUTER_INC# (L:ASCRJ_RTU1_KNOB_OUTER, Number) 10 + dnor (>L:ASCRJ_RTU1_KNOB_OUTER) (ASCRJ_RTU1_KNOB_OUTER_CHANGE, Number) ++ (>L:ASCRJ_RTU1_KNOB_OUTER_CHANGE)
ASCRJ_RTU1_LSK1L_SWITCH_PRESS#1 (>L:ASCRJ_RTU1_LSK1L)
ASCRJ_RTU1_LSK1R_SWITCH_PRESS#1 (>L:ASCRJ_RTU1_LSK1R)
ASCRJ_RTU1_LSK2L_SWITCH_PRESS#1 (>L:ASCRJ_RTU1_LSK2L)
ASCRJ_RTU1_LSK2R_SWITCH_PRESS#1 (>L:ASCRJ_RTU1_LSK2R)
ASCRJ_RTU1_LSK3L_SWITCH_PRESS#1 (>L:ASCRJ_RTU1_LSK3L)
ASCRJ_RTU1_LSK3R_SWITCH_PRESS#1 (>L:ASCRJ_RTU1_LSK3R)
ASCRJ_RTU1_LSK4L_SWITCH_PRESS#1 (>L:ASCRJ_RTU1_LSK4L)
ASCRJ_RTU1_LSK4R_SWITCH_PRESS#1 (>L:ASCRJ_RTU1_LSK4R)
ASCRJ_XPDR_ATC_SEL_PRESS_PRESS#1 (>L:ASCRJ_XPDR_ATC_SEL)
ASCRJ_XPDR_ATC_SEL_PRESS_RELEASE#0 (>L:ASCRJ_XPDR_ATC_SEL)
ASCRJ_XPDR_ATC_SEL_SWITCH# (L:ASCRJ_XPDR_ATC_SEL, Number) 0 == if{ 1 (>L:ASCRJ_XPDR_ATC_SEL, Number) } els{ (L:ASCRJ_XPDR_ATC_SEL, Number) 1 == if{ 2 (>L:ASCRJ_XPDR_ATC_SEL, Number) } els{ (L:ASCRJ_XPDR_ATC_SEL, Number) 2 == if{ 0 (>L:ASCRJ_XPDR_ATC_SEL, Number) }
ASCRJ_RTU1_KNOB_OUTER_DEC# (L:ASCRJ_RTU1_KNOB_OUTER, Number) 10 - dnor (>L:ASCRJ_RTU1_KNOB_OUTER) (ASCRJ_RTU1_KNOB_OUTER_CHANGE, Number) -- (>L:ASCRJ_RTU1_KNOB_OUTER_CHANGE)
//Aerosoft/CRJ 550-700-1000/Warning System
FIRE_DETECTION_FIREX_MONITOR_TEST_SWITCH#(L:ASCRJ_FIRE_TEST) ! (>L:ASCRJ_FIRE_TEST)
//Asobo/DA40NG/Anti-Ice
DA40NG_PITOT_OFF#1 0 (>K:2:PITOT_HEAT_SET) 0 (>L:DEICE_Pitot_1)
DA40NG_PITOT_ON#1 1 (>K:2:PITOT_HEAT_SET) 1 (>L:DEICE_Pitot_1)
//Asobo/Baron G58/Anti-Ice
G58_PROP_DEICE_OFF#0 s0 (A:PROP DEICE SWITCH:1, Bool) != if{(>K:TOGGLE_PROPELLER_DEICE) } l0 (>L:DEICE_Propeller_1)
G58_PROP_DEICE_ON#1 s0 (A:PROP DEICE SWITCH:1, Bool) != if{(>K:TOGGLE_PROPELLER_DEICE) } l0 (>L:DEICE_Propeller_1)
//Asobo/DA40NG/Controls
DA40NG_FLAPS_DECR#(>K:FLAPS_DECR)
DA40NG_FLAPS_INCR#(>K:FLAPS_INCR)
//Asobo/Baron G58/Electrical
G58_MAGNETO1_BOTH#3 (>K:MAGNETO1_SET) (A:GENERAL ENG STARTER:1, Bool) if{ 0 (>K:SET_STARTER1_HELD) }
G58_MAGNETO1_LEFT#2 (>K:MAGNETO1_SET) (A:GENERAL ENG STARTER:1, Bool) if{ 0 (>K:SET_STARTER1_HELD) }
G58_MAGNETO1_OFF#0 (>K:MAGNETO1_SET) (A:GENERAL ENG STARTER:1, Bool) if{ 0 (>K:SET_STARTER1_HELD) }
G58_MAGNETO1_RIGHT#1 (>K:MAGNETO1_SET) (A:GENERAL ENG STARTER:1, Bool) if{ 0 (>K:SET_STARTER1_HELD) }
G58_MAGNETO1_START#4 (>K:MAGNETO1_SET) (A:GENERAL ENG STARTER:1, Bool) if{ 1 (>K:SET_STARTER1_HELD) }
G58_MAGNETO2_BOTH#3 (>K:MAGNETO2_SET) (A:GENERAL ENG STARTER:2, Bool) if{ 0 (>K:SET_STARTER2_HELD) }
G58_MAGNETO2_LEFT#2 (>K:MAGNETO2_SET) (A:GENERAL ENG STARTER:2, Bool) if{ 0 (>K:SET_STARTER2_HELD) }
G58_MAGNETO2_OFF#0 (>K:MAGNETO2_SET) (A:GENERAL ENG STARTER:2, Bool) if{ 0 (>K:SET_STARTER2_HELD) }
G58_MAGNETO2_RIGHT#1 (>K:MAGNETO2_SET) (A:GENERAL ENG STARTER:2, Bool) if{ 0 (>K:SET_STARTER2_HELD) }
G58_MAGNETO2_START#4 (>K:MAGNETO2_SET) (A:GENERAL ENG STARTER:2, Bool) if{ 1 (>K:SET_STARTER2_HELD) }
G58_MASTER_BATTERY_1_OFF#(A:ELECTRICAL MASTER BATTERY:1, bool) if{ 1 (>K:TOGGLE_MASTER_BATTERY) }
G58_MASTER_BATTERY_1_ON#(A:ELECTRICAL MASTER BATTERY:1, bool) ! if{ 1 (>K:TOGGLE_MASTER_BATTERY) }
G58_MASTER_BATTERY_2_OFF#(A:ELECTRICAL MASTER BATTERY:2, bool) if{ 2 (>K:TOGGLE_MASTER_BATTERY) }
G58_MASTER_BATTERY_2_ON#(A:ELECTRICAL MASTER BATTERY:2, bool) ! if{ 2 (>K:TOGGLE_MASTER_BATTERY) }
//Asobo/DA40NG/Fuel
DA40NG_FUEL_TRANSFER_OFF#(A:FUEL TRANSFER PUMP ON:1, Bool) ! if{ 1 (>K:FUEL_TRANSFER_CUSTOM_INDEX_TOGGLE) }
DA40NG_FUEL_TRANSFER_ON#(A:FUEL TRANSFER PUMP ON:1, Bool) ! if{ 1 (>K:FUEL_TRANSFER_CUSTOM_INDEX_TOGGLE) }
Fuel_Pump_Switch_Off#0 s0 (A:GENERAL ENG FUEL PUMP SWITCH EX1:1, Enum) != if{ l0 (>K:ELECT_FUEL_PUMP1_SET)
Fuel_Pump_Switch_On#1 s0 (A:GENERAL ENG FUEL PUMP SWITCH EX1:1, Enum) != if{ l0 (>K:ELECT_FUEL_PUMP1_SET)
Fuel_Tank_Selector_Left#2 s0 (A:FUEL TANK SELECTOR:1, Enum) != if{ l0 (>K:FUEL_SELECTOR_SET) }
Fuel_Tank_Selector_Off#0 s0 (A:FUEL TANK SELECTOR:1, Enum) != if{ l0 (>K:FUEL_SELECTOR_SET) }
Fuel_Tank_Selector_Right#3 s0 (A:FUEL TANK SELECTOR:1, Enum) != if{ l0 (>K:FUEL_SELECTOR_SET) }
//Asobo/DA40NG/Gear
DA40NG_PARKING_BRAKE_OFF#0 (>K:PARKING_BRAKE_SET)
DA40NG_PARKING_BRAKE_ON#1 (>K:PARKING_BRAKE_SET)
//Asobo/DA40NG/Lights
DA40NG_LANDING_OFF#1 0 (>K:2:LANDING_LIGHTS_SET) 0 (>L:LIGHTING_LANDING_1)
DA40NG_LANDING_ON#1 1 (>K:2:LANDING_LIGHTS_SET) 1 (>L:LIGHTING_LANDING_1)
DA40NG_POSITION_OFF#1 0 (>K:2:NAV_LIGHTS_SET) 0 (>L:LIGHTING_NAV_1) 
DA40NG_POSITION_ON#1 1 (>K:2:NAV_LIGHTS_SET) 1 (>L:LIGHTING_NAV_1) 
DA40NG_STROBE_OFF#1 0 (>K:2:STROBES_SET) 0 (>L:LIGHTING_STROBE_1) 
DA40NG_STROBE_ON#1 1 (>K:2:STROBES_SET) 1 (>L:LIGHTING_STROBE_1) 
DA40NG_TAXI_OFF#1 0 (>K:2:TAXI_LIGHTS_SET) 1 (>L:LIGHTING_TAXI_1)
DA40NG_TAXI_ON#1 1 (>K:2:TAXI_LIGHTS_SET) 1 (>L:LIGHTING_TAXI_1)
//Asobo/330 Extra/Avionics
AS3X_1_CLR_Push#(>H:AS3X_1_CLR_Push)
AS3X_1_DIRECTTO#(>H:AS3X_1_DIRECTTO)
AS3X_1_ENT_Push#(>H:AS3X_1_ENT_Push)
AS3X_1_FPL_Push#(>H:AS3X_1_FPL_Push)
AS3X_1_JOYSTICK_DOWN#(>H:AS3X_1_JOYSTICK_DOWN)
AS3X_1_JOYSTICK_LEFT#(>H:AS3X_1_JOYSTICK_LEFT)
AS3X_1_JOYSTICK_PUSH#(>H:AS3X_1_JOYSTICK_PUSH)
AS3X_1_JOYSTICK_RIGHT#(>H:AS3X_1_JOYSTICK_RIGHT)
AS3X_1_JOYSTICK_UP#(>H:AS3X_1_JOYSTICK_UP)
AS3X_1_MENU_Push#(>H:AS3X_1_MENU_Push)
AS3X_1_NRST_Push#(>H:AS3X_1_NRST_Push)
AS3X_1_RNG_Dezoom#(>H:AS3X_1_RNG_Dezoom)
AS3X_1_RNG_Zoom#(>H:AS3X_1_RNG_Zoom)
AS3X_1_SOFTKEYS_1#(>H:AS3X_1_SOFTKEYS_1)
AS3X_1_SOFTKEYS_2#(>H:AS3X_1_SOFTKEYS_2)
AS3X_1_SOFTKEYS_3#(>H:AS3X_1_SOFTKEYS_3)
AS3X_1_SOFTKEYS_4#(>H:AS3X_1_SOFTKEYS_4)
AS3X_1_SOFTKEYS_5#(>H:AS3X_1_SOFTKEYS_5)
AS3X_1_TURN_DEC#(>H:AS3X_1_TURN_DEC)
AS3X_1_TURN_INC#(>H:AS3X_1_TURN_INC)
AS3X_2_CLR_Push#(>H:AS3X_2_CLR_Push)
AS3X_2_DIRECTTO#(>H:AS3X_2_DIRECTTO)
AS3X_2_ENT_Push#(>H:AS3X_2_ENT_Push)
AS3X_2_FPL_Push#(>H:AS3X_2_FPL_Push)
AS3X_2_JOYSTICK_DOWN#(>H:AS3X_2_JOYSTICK_DOWN)
AS3X_2_JOYSTICK_LEFT#(>H:AS3X_2_JOYSTICK_LEFT)
AS3X_2_JOYSTICK_PUSH#(>H:AS3X_2_JOYSTICK_PUSH)
AS3X_2_JOYSTICK_RIGHT#(>H:AS3X_2_JOYSTICK_RIGHT)
AS3X_2_JOYSTICK_UP#(>H:AS3X_2_JOYSTICK_UP)
AS3X_2_MENU_Push#(>H:AS3X_2_MENU_Push)
AS3X_2_NRST_Push#(>H:AS3X_2_NRST_Push)
AS3X_2_RNG_Dezoom#(>H:AS3X_2_RNG_Dezoom)
AS3X_2_RNG_Zoom#(>H:AS3X_2_RNG_Zoom)
AS3X_2_SOFTKEYS_1#(>H:AS3X_2_SOFTKEYS_1)
AS3X_2_SOFTKEYS_2#(>H:AS3X_2_SOFTKEYS_2)
AS3X_2_SOFTKEYS_3#(>H:AS3X_2_SOFTKEYS_3)
AS3X_2_SOFTKEYS_4#(>H:AS3X_2_SOFTKEYS_4)
AS3X_2_SOFTKEYS_5#(>H:AS3X_2_SOFTKEYS_5)
AS3X_2_TURN_DEC#(>H:AS3X_2_TURN_DEC)
AS3X_2_TURN_INC#(>H:AS3X_2_TURN_INC)
//Asobo/747-8i/ADIRS
IRS_1_NAV#2 (>L:747_IRS_KNOB_1)
IRS_2_NAV#2 (>L:747_IRS_KNOB_2)
IRS_3_NAV#2 (>L:747_IRS_KNOB_3)
//Asobo/747-8i/Anti-Ice
WINDSHIELD_DEICE#(>K:WINDSHIELD_DEICE_TOGGLE)
//Asobo/747-8i/Autopilot
Autopilot_Heading_Hold_Press#(>K:AP_HDG_HOLD_ON) (>H:B747_8_FMC_1_AP_HEADING_HOLD)
Autopilot_Heading_Select_Dec#1 (A:AUTOPILOT HEADING LOCK DIR:1, degrees) 1 - dnor (>K:2:HEADING_BUG_SET)
Autopilot_Heading_Select_Inc#1 (A:AUTOPILOT HEADING LOCK DIR:1, degrees) 1 + dnor (>K:2:HEADING_BUG_SET)
Autopilot_Heading_Select_Press#(>H:B747_8_FMC_1_AP_HEADING_SEL)
AP_ALT#(>H:B747_8_FMC_1_AP_ALT)
AP_APP_ARMED#(>H:B747_8_FMC_1_AP_APP_ARMED)
AP_FLCH#(>H:B747_8_FMC_1_AP_FLCH)
AP_LNAV#(>H:B747_8_FMC_1_AP_LNAV)
AP_VNAV#(>H:B747_8_FMC_1_AP_VNAV)
AP_VSPEED#(>H:B747_8_FMC_1_AP_VSPEED)
HDG_HOLD#(>H:B747_8_FMC_1_AP_HEADING_HOLD)
//Asobo/747-8i/EFIS
B747_8_BARO_DEC#(>K:KOHLSMAN_DEC)
B747_8_BARO_INC#(>K:KOHLSMAN_INC)
B747_8_BTN_ARPT#(>H:B747_8_MFD_BTN_ARPT) (>H:B747_8_PFD_BTN_ARPT) and
B747_8_BTN_DATA#(>H:B747_8_MFD_BTN_DATA) (>H:B747_8_PFD_BTN_DATA) and
B747_8_BTN_POS#(>H:B747_8_MFD_BTN_POS) (>H:B747_8_PFD_BTN_POS) and
B747_8_BTN_STA#(>H:B747_8_MFD_BTN_STA) (>H:B747_8_PFD_BTN_STA) and
B747_8_BTN_TERR#(>H:B747_8_MFD_BTN_TERR) (>H:B747_8_PFD_BTN_TERR) and
B747_8_BTN_WPT#(>H:B747_8_MFD_BTN_WPT) (>H:B747_8_PFD_BTN_WPT) and
B747_8_BTN_WXR#(>H:B747_8_MFD_BTN_WXR) (>H:B747_8_PFD_BTN_WXR) and
B747_8_MFD_NAV_MODE_APP#0 (>L:B747_8_MFD_NAV_MODE)
B747_8_MFD_NAV_MODE_DEC#(L:B747_8_MFD_NAV_MODE) 0 > if{ 1 if{ (L:B747_8_MFD_NAV_MODE) 1 - (>L:B747_8_MFD_NAV_MODE) } }
B747_8_MFD_NAV_MODE_INC#(L:B747_8_MFD_NAV_MODE) 3 < if{ 1 if{ (L:B747_8_MFD_NAV_MODE) 1 + (>L:B747_8_MFD_NAV_MODE) } }
B747_8_MFD_NAV_MODE_MAP#2 (>L:B747_8_MFD_NAV_MODE)
B747_8_MFD_NAV_MODE_PLN#3 (>L:B747_8_MFD_NAV_MODE)
B747_8_MFD_NAV_MODE_VOR#1 (>L:B747_8_MFD_NAV_MODE)
B747_8_MFD_Range_0_25#0 (>L:B747_8_MFD_Range)
B747_8_MFD_Range_0_5#1 (>L:B747_8_MFD_Range)
B747_8_MFD_Range_1#2 (>L:B747_8_MFD_Range)
B747_8_MFD_Range_10#5 (>L:B747_8_MFD_Range)
B747_8_MFD_Range_160#9 (>L:B747_8_MFD_Range)
B747_8_MFD_Range_2#3 (>L:B747_8_MFD_Range)
B747_8_MFD_Range_20#6 (>L:B747_8_MFD_Range)
B747_8_MFD_Range_320#10 (>L:B747_8_MFD_Range)
B747_8_MFD_Range_40#7 (>L:B747_8_MFD_Range)
B747_8_MFD_Range_5#4 (>L:B747_8_MFD_Range)
B747_8_MFD_Range_640#11 (>L:B747_8_MFD_Range)
B747_8_MFD_Range_80#8 (>L:B747_8_MFD_Range)
B747_8_MFD_Range_DEC#(L:B747_8_MFD_Range) 0 > if{ 1 if{ (L:B747_8_MFD_Range) 1 - (>L:B747_8_MFD_Range) } }
B747_8_MFD_Range_INC#(L:B747_8_MFD_Range) 11 < if{ 1 if{ (L:B747_8_MFD_Range) 1 + (>L:B747_8_MFD_Range) } }
B747_8_PFD_FPV#(>H:B747_8_PFD_FPV)
B747_8_PFD_MTRS#(>H:B747_8_PFD_MTRS)
B747_8_PFD_Mins_DEC#(>H:B747_8_PFD_Mins_DEC)
B747_8_PFD_Mins_INC#(>H:B747_8_PFD_Mins_INC)
B747_8_PFD_Mins_Press#(>H:B747_8_PFD_Mins_Press)
B747_8_XMLVAR_Baro_Selector_HPA_1_HPA#1 (>L:B747_8_XMLVAR_Baro_Selector_HPA_1)
B747_8_XMLVAR_Baro_Selector_HPA_1_IN#0 (>L:B747_8_XMLVAR_Baro_Selector_HPA_1)
B747_8_XMLVAR_Mins_Selector_Baro_BARO#1 (>L:B747_8_XMLVAR_Mins_Selector_Baro)
B747_8_XMLVAR_Mins_Selector_Baro_RADIO#0 (>L:B747_8_XMLVAR_Mins_Selector_Baro)
B747_8_XMLVAR_NAV_AID_SWITCH_L1_State_ADF#2 (>L:B747_8_XMLVAR_NAV_AID_SWITCH_L1_State)
B747_8_XMLVAR_NAV_AID_SWITCH_L1_State_OFF#1 (>L:B747_8_XMLVAR_NAV_AID_SWITCH_L1_State)
B747_8_XMLVAR_NAV_AID_SWITCH_L1_State_VOR#0 (>L:B747_8_XMLVAR_NAV_AID_SWITCH_L1_State)
B747_8_XMLVAR_NAV_AID_SWITCH_L2_State_ADF#2 (>L:B747_8_XMLVAR_NAV_AID_SWITCH_L2_State)
B747_8_XMLVAR_NAV_AID_SWITCH_L2_State_OFF#1 (>L:B747_8_XMLVAR_NAV_AID_SWITCH_L2_State)
B747_8_XMLVAR_NAV_AID_SWITCH_L2_State_VOR#0 (>L:B747_8_XMLVAR_NAV_AID_SWITCH_L2_State)
XMLVAR_Baro1_ForcedToSTD#(L:XMLVAR_Baro1_ForcedToSTD) ! (>L:XMLVAR_Baro1_ForcedToSTD)
//Asobo/747-8i/EICAS
B747_8_EICAS_CHANGE_PAGE_chkl#(>H:B747_8_EICAS_2_EICAS_CHANGE_PAGE_chkl)
B747_8_EICAS_CHANGE_PAGE_drs#(>H:B747_8_EICAS_2_EICAS_CHANGE_PAGE_drs)
B747_8_EICAS_CHANGE_PAGE_ecs#(>H:B747_8_EICAS_2_EICAS_CHANGE_PAGE_ecs)
B747_8_EICAS_CHANGE_PAGE_elec#(>H:B747_8_EICAS_2_EICAS_CHANGE_PAGE_elec)
B747_8_EICAS_CHANGE_PAGE_eng#(>H:B747_8_EICAS_2_EICAS_CHANGE_PAGE_eng) 
B747_8_EICAS_CHANGE_PAGE_ftcl#(>H:B747_8_EICAS_2_EICAS_CHANGE_PAGE_ftcl)
B747_8_EICAS_CHANGE_PAGE_fuel#(>H:B747_8_EICAS_2_EICAS_CHANGE_PAGE_fuel)
B747_8_EICAS_CHANGE_PAGE_gear#(>H:B747_8_EICAS_2_EICAS_CHANGE_PAGE_gear)
B747_8_EICAS_CHANGE_PAGE_hyd#B747_8_EICAS_2_EICAS_CHANGE_PAGE_hyd)
B747_8_EICAS_CHANGE_PAGE_info#(>H:B747_8_EICAS_2_EICAS_CHANGE_PAGE_info)
B747_8_EICAS_CHANGE_PAGE_nav#(>H:B747_8_EICAS_2_EICAS_CHANGE_PAGE_nav)
B747_8_EICAS_CHANGE_PAGE_stat#(>H:B747_8_EICAS_2_EICAS_CHANGE_PAGE_stat)
//Asobo/747-8i/Electrical
APU_GENERATOR#1 (>K:APU_GENERATOR_SWITCH_TOGGLE)
APU_OFF#0 (>L:XMLVAR_APU_StarterKnob_Pos) ! (>K:APU_OFF_SWITCH)
APU_START#(L:XMLVAR_APU_StarterKnob_Pos) ! 2 (>L:XMLVAR_APU_StarterKnob_Pos) (>K:APU_STARTER) 
BATTERY_OFF#(A:ELECTRICAL MASTER BATTERY:1, Bool) l0 != if{ 1 (>K:TOGGLE_MASTER_BATTERY) } 0 (>A:BUS LOOKUP INDEX, Number) (A:BUS CONNECTION ON:7, Bool) l0 != if{ 6 7 (>K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE) }
BATTERY_ON# 1 sp0 (A:ELECTRICAL MASTER BATTERY:1, Bool) l0 != if{ 1 (>K:TOGGLE_MASTER_BATTERY) } 1 sp0 6 (>A:BUS LOOKUP INDEX, Number) (A:BUS CONNECTION ON:7, Bool) l0 != if{ 6 7 (>K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE) } 
EXTERNAL_POWER_OFF#0 (>L:ELECTRICAL_ExternalPower_1) 0 (>L:ELECTRICAL_ExternalPower_2) 0 (>K:TOGGLE_EXTERNAL_POWER)
EXTERNAL_POWER_ON# (>K:TOGGLE_EXTERNAL_POWER) 1 (>L:ELECTRICAL_ExternalPower_1) 1 (>L:ELECTRICAL_ExternalPower_2) 
Overhead_Master_Battery_Toggle#6 7 (>K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE)
//Asobo/747-8i/Engine
ENG_1_FUEL_CONTROL_OFF#5 (>K:FUELSYSTEM_VALVE_TOGGLE)
ENG_1_FUEL_CONTROL_ON#(A:FUELSYSTEM VALVE SWITCH:5, Bool) != if{ 5 (>K:FUELSYSTEM_VALVE_TOGGLE) }
ENG_1_START#1 (>K:1:STARTER1_SET) 1 (>K:1:TURBINE_IGNITION_SWITCH_SET1)
ENG_2_FUEL_CONTROL_OFF#6 (>K:FUELSYSTEM_VALVE_TOGGLE)
ENG_2_FUEL_CONTROL_ON#(A:FUELSYSTEM VALVE SWITCH:6, Bool) != if{ 6 (>K:FUELSYSTEM_VALVE_TOGGLE) }
ENG_2_START#1 (>K:1:STARTER2_SET) 1 (>K:1:TURBINE_IGNITION_SWITCH_SET2)
ENG_3_FUEL_CONTROL_OFF#7 (>K:FUELSYSTEM_VALVE_TOGGLE)
ENG_3_FUEL_CONTROL_ON#(A:FUELSYSTEM VALVE SWITCH:7, Bool) != if{ 7 (>K:FUELSYSTEM_VALVE_TOGGLE) }
ENG_3_START#1 (>K:1:STARTER3_SET) 1 (>K:1:TURBINE_IGNITION_SWITCH_SET3) 
ENG_4_FUEL_CONTROL_OFF#8 (>K:FUELSYSTEM_VALVE_TOGGLE)
ENG_4_FUEL_CONTROL_ON#(A:FUELSYSTEM VALVE SWITCH:8, Bool) != if{ 8 (>K:FUELSYSTEM_VALVE_TOGGLE) }
ENG_4_START#1 (>K:1:STARTER4_SET) 1 (>K:1:TURBINE_IGNITION_SWITCH_SET4)
//Asobo/747-8i/Fuel
B747_8_FUEL_Pump_Ctr_Tank_L_OFF#0 (A:FUELSYSTEM PUMP SWITCH:1, Bool) != if{ 1 (>K:FUELSYSTEM_PUMP_TOGGLE) }
B747_8_FUEL_Pump_Ctr_Tank_L_ON#1 (A:FUELSYSTEM PUMP SWITCH:1, Bool) != if{ 1 (>K:FUELSYSTEM_PUMP_TOGGLE) }
B747_8_FUEL_Pump_Ctr_Tank_R_OFF#0 (A:FUELSYSTEM PUMP SWITCH:2, Bool) != if{ 2 (>K:FUELSYSTEM_PUMP_TOGGLE) }
B747_8_FUEL_Pump_Ctr_Tank_R_ON#1 (A:FUELSYSTEM PUMP SWITCH:2, Bool) != if{ 2 (>K:FUELSYSTEM_PUMP_TOGGLE) }
CENTRE_PUMPS_OFF#(A:FUELSYSTEM PUMP SWITCH:1, Bool) != if{ 1 (>K:FUELSYSTEM_PUMP_TOGGLE) } (A:FUELSYSTEM PUMP SWITCH:2, Bool) != if{ 2 (>K:FUELSYSTEM_PUMP_TOGGLE) } (A:FUELSYSTEM PUMP SWITCH:15, Bool) != if{ 15 (>K:FUELSYSTEM_PUMP_TOGGLE) } (A:FUELSYSTEM PUMP SWITCH:16, Bool) != if{ 16 (>K:FUELSYSTEM_PUMP_TOGGLE) }
CENTRE_PUMPS_ON#1 (>K:FUELSYSTEM_PUMP_TOGGLE) 2 (>K:FUELSYSTEM_PUMP_TOGGLE) 15 (>K:FUELSYSTEM_PUMP_TOGGLE) 16 (>K:FUELSYSTEM_PUMP_TOGGLE) 
LEFT_PUMPS_OFF#(A:FUELSYSTEM PUMP SWITCH:3, Bool) != if{ 3 (>K:FUELSYSTEM_PUMP_TOGGLE) }  (A:FUELSYSTEM PUMP SWITCH:5, Bool) != if{ 5 (>K:FUELSYSTEM_PUMP_TOGGLE) }  (A:FUELSYSTEM PUMP SWITCH:7, Bool) != if{ 7 (>K:FUELSYSTEM_PUMP_TOGGLE) }  (A:FUELSYSTEM PUMP SWITCH:8, Bool) != if{ 8 (>K:FUELSYSTEM_PUMP_TOGGLE) }  (A:FUELSYSTEM PUMP SWITCH:6, Bool) != if{ 6 (>K:FUELSYSTEM_PUMP_TOGGLE) }  (A:FUELSYSTEM PUMP SWITCH:4, Bool) != if{ 4 (>K:FUELSYSTEM_PUMP_TOGGLE) }
LEFT_PUMPS_ON# 7 (>K:FUELSYSTEM_PUMP_TOGGLE) 8 (>K:FUELSYSTEM_PUMP_TOGGLE) 4 (>K:FUELSYSTEM_PUMP_TOGGLE) 6 (>K:FUELSYSTEM_PUMP_TOGGLE) 
RIGHT_PUMPS_OFF#(A:FUELSYSTEM PUMP SWITCH:9, Bool) != if{ 9 (>K:FUELSYSTEM_PUMP_TOGGLE) }  (A:FUELSYSTEM PUMP SWITCH:11, Bool) != if{ 11 (>K:FUELSYSTEM_PUMP_TOGGLE) }  (A:FUELSYSTEM PUMP SWITCH:12, Bool) != if{ 12 (>K:FUELSYSTEM_PUMP_TOGGLE) }  (A:FUELSYSTEM PUMP SWITCH:13, Bool) != if{ 13 (>K:FUELSYSTEM_PUMP_TOGGLE) }  A:FUELSYSTEM PUMP SWITCH:10, Bool) != if{ 10 (>K:FUELSYSTEM_PUMP_TOGGLE) }  (A:FUELSYSTEM PUMP SWITCH:14, Bool) != if{ 14 (>K:FUELSYSTEM_PUMP_TOGGLE) } 
RIGHT_PUMPS_ON#9 (>K:FUELSYSTEM_PUMP_TOGGLE) 11 (>K:FUELSYSTEM_PUMP_TOGGLE) 12 (>K:FUELSYSTEM_PUMP_TOGGLE) 13 (>K:FUELSYSTEM_PUMP_TOGGLE) 10 (>K:FUELSYSTEM_PUMP_TOGGLE) 14 (>K:FUELSYSTEM_PUMP_TOGGLE) 
//Asobo/747-8i/Navigation
B747_8_FMC_1_BTN_0#(>H:B747_8_FMC_1_BTN_0)
B747_8_FMC_1_BTN_1#(>H:B747_8_FMC_1_BTN_1)
B747_8_FMC_1_BTN_2#(>H:B747_8_FMC_1_BTN_2)
B747_8_FMC_1_BTN_3#(>H:B747_8_FMC_1_BTN_3)
B747_8_FMC_1_BTN_4#(>H:B747_8_FMC_1_BTN_4)
B747_8_FMC_1_BTN_5#(>H:B747_8_FMC_1_BTN_5)
B747_8_FMC_1_BTN_6#(>H:B747_8_FMC_1_BTN_6)
B747_8_FMC_1_BTN_7#(>H:B747_8_FMC_1_BTN_7)
B747_8_FMC_1_BTN_8#(>H:B747_8_FMC_1_BTN_8)
B747_8_FMC_1_BTN_9#(>H:B747_8_FMC_1_BTN_9)
B747_8_FMC_1_BTN_A#(>H:B747_8_FMC_1_BTN_A)
B747_8_FMC_1_BTN_ATC#(>H:B747_8_FMC_1_BTN_ATC)
B747_8_FMC_1_BTN_B#(>H:B747_8_FMC_1_BTN_B)
B747_8_FMC_1_BTN_BRT_DIM#(>H:B747_8_FMC_1_BTN_BRT_DIM)
B747_8_FMC_1_BTN_C#(>H:B747_8_FMC_1_BTN_C)
B747_8_FMC_1_BTN_CLR#(>H:B747_8_FMC_1_BTN_CLR)
B747_8_FMC_1_BTN_D#(>H:B747_8_FMC_1_BTN_D)
B747_8_FMC_1_BTN_DEL#(>H:B747_8_FMC_1_BTN_DEL)
B747_8_FMC_1_BTN_DEPARR#(>H:B747_8_FMC_1_BTN_DEPARR)
B747_8_FMC_1_BTN_DIV#(>H:B747_8_FMC_1_BTN_DIV)
B747_8_FMC_1_BTN_DOT#(>H:B747_8_FMC_1_BTN_DOT)
B747_8_FMC_1_BTN_E#(>H:B747_8_FMC_1_BTN_E)
B747_8_FMC_1_BTN_EXEC#(>H:B747_8_FMC_1_BTN_EXEC)
B747_8_FMC_1_BTN_F#(>H:B747_8_FMC_1_BTN_F)
B747_8_FMC_1_BTN_FIX#(>H:B747_8_FMC_1_BTN_FIX)
B747_8_FMC_1_BTN_FMCCOMM#(>H:B747_8_FMC_1_BTN_FMCCOMM)
B747_8_FMC_1_BTN_G#(>H:B747_8_FMC_1_BTN_G)
B747_8_FMC_1_BTN_H#(>H:B747_8_FMC_1_BTN_H)
B747_8_FMC_1_BTN_HOLD#(>H:B747_8_FMC_1_BTN_HOLD)
B747_8_FMC_1_BTN_I#(>H:B747_8_FMC_1_BTN_I)
B747_8_FMC_1_BTN_INIT#(>H:B747_8_FMC_1_BTN_INIT)
B747_8_FMC_1_BTN_J#(>H:B747_8_FMC_1_BTN_J)
B747_8_FMC_1_BTN_K#(>H:B747_8_FMC_1_BTN_K)
B747_8_FMC_1_BTN_L#(>H:B747_8_FMC_1_BTN_L)
B747_8_FMC_1_BTN_L1#(>H:B747_8_FMC_1_BTN_L1)
B747_8_FMC_1_BTN_L2#(>H:B747_8_FMC_1_BTN_L2)
B747_8_FMC_1_BTN_L3#(>H:B747_8_FMC_1_BTN_L3)
B747_8_FMC_1_BTN_L4#(>H:B747_8_FMC_1_BTN_L4)
B747_8_FMC_1_BTN_L5#(>H:B747_8_FMC_1_BTN_L5)
B747_8_FMC_1_BTN_L6#(>H:B747_8_FMC_1_BTN_L6)
B747_8_FMC_1_BTN_LEGS#(>H:B747_8_FMC_1_BTN_LEGS)
B747_8_FMC_1_BTN_M#(>H:B747_8_FMC_1_BTN_M)
B747_8_FMC_1_BTN_MENU#(>H:B747_8_FMC_1_BTN_MENU)
B747_8_FMC_1_BTN_N#(>H:B747_8_FMC_1_BTN_N)
B747_8_FMC_1_BTN_NAVRAD#(>H:B747_8_FMC_1_BTN_NAVRAD)
B747_8_FMC_1_BTN_NEXTPAGE#(>H:B747_8_FMC_1_BTN_NEXTPAGE)
B747_8_FMC_1_BTN_O#(>H:B747_8_FMC_1_BTN_O)
B747_8_FMC_1_BTN_P#(>H:B747_8_FMC_1_BTN_P)
B747_8_FMC_1_BTN_PLUSMINUS#(>H:B747_8_FMC_1_BTN_PLUSMINUS)
B747_8_FMC_1_BTN_PREVPAGE#(>H:B747_8_FMC_1_BTN_PREVPAGE)
B747_8_FMC_1_BTN_PROG#(>H:B747_8_FMC_1_BTN_PROG)
B747_8_FMC_1_BTN_Q#(>H:B747_8_FMC_1_BTN_Q)
B747_8_FMC_1_BTN_R#(>H:B747_8_FMC_1_BTN_R)
B747_8_FMC_1_BTN_R1#(>H:B747_8_FMC_1_BTN_R1)
B747_8_FMC_1_BTN_R2#(>H:B747_8_FMC_1_BTN_R2)
B747_8_FMC_1_BTN_R3#(>H:B747_8_FMC_1_BTN_R3)
B747_8_FMC_1_BTN_R4#(>H:B747_8_FMC_1_BTN_R4)
B747_8_FMC_1_BTN_R5#(>H:B747_8_FMC_1_BTN_R5)
B747_8_FMC_1_BTN_R6#(>H:B747_8_FMC_1_BTN_R6)
B747_8_FMC_1_BTN_RTE#(>H:B747_8_FMC_1_BTN_RTE)
B747_8_FMC_1_BTN_S#(>H:B747_8_FMC_1_BTN_S)
B747_8_FMC_1_BTN_SP#(>H:B747_8_FMC_1_BTN_SP)
B747_8_FMC_1_BTN_T#(>H:B747_8_FMC_1_BTN_T)
B747_8_FMC_1_BTN_U#(>H:B747_8_FMC_1_BTN_U)
B747_8_FMC_1_BTN_V#(>H:B747_8_FMC_1_BTN_V)
B747_8_FMC_1_BTN_VNAV#(>H:B747_8_FMC_1_BTN_VNAV)
B747_8_FMC_1_BTN_W#(>H:B747_8_FMC_1_BTN_W)
B747_8_FMC_1_BTN_X#(>H:B747_8_FMC_1_BTN_X)
B747_8_FMC_1_BTN_Y#(>H:B747_8_FMC_1_BTN_Y)
B747_8_FMC_1_BTN_Z#(>H:B747_8_FMC_1_BTN_Z)
//Asobo/A320/Electrical
ASOA320_MASTER_BATTERY_1_OFF#(A:ELECTRICAL MASTER BATTERY:1, Bool) if{ 1 (>K:TOGGLE_MASTER_BATTERY) } 0 sp0 10 (>A:BUS LOOKUP INDEX, Number) (A:BUS CONNECTION ON:6, Bool) l0 != if{ 10 6 (>K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE) }
ASOA320_MASTER_BATTERY_1_ON#(A:ELECTRICAL MASTER BATTERY:1, Bool) ! if{ 1 (>K:TOGGLE_MASTER_BATTERY) } 1 sp0 10 (>A:BUS LOOKUP INDEX, Number) (A:BUS CONNECTION ON:6, Bool) l0 != if{ 10 6 (>K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE) }
//Asobo/A320/Lights
ASOA320_OH_EXTLT_RWY_OFF#(A:LIGHT TAXI:2, Bool) if{ 2 (>K:TOGGLE_TAXI_LIGHTS) 3 (>K:TOGGLE_TAXI_LIGHTS) }
ASOA320_OH_EXTLT_RWY_ON#(A:LIGHT TAXI:2, Bool) ! if{ 2 (>K:TOGGLE_TAXI_LIGHTS) 3 (>K:TOGGLE_TAXI_LIGHTS) }
ASOA320_OH_EXTLT_RWY_TOG#2 (>K:TOGGLE_TAXI_LIGHTS) 3 (>K:TOGGLE_TAXI_LIGHTS)
ASOA320_OH_STROBES_TOG_AUTO#(A:LIGHT STROBE:0, Percent) ! if{ 0 (>K:STROBES_TOGGLE) } 1 (>L:STROBE_1_Auto)
ASOA320_OH_STROBES_TOG_OFF#(A:LIGHT STROBE:0, Percent) if{ 0 (>K:STROBES_TOGGLE) } 0 (>L:STROBE_1_Auto)
ASOA320_OH_STROBES_TOG_ON#(A:LIGHT STROBE:0, Percent) ! if{ 0 (>K:STROBES_TOGGLE) } 0 (>L:STROBE_1_Auto)
//Asobo/Baron G58/Controls
G58_COWL_FLAP_CLOSE#0 (>K:COWLFLAP1_SET)
G58_COWL_FLAP_OPEN#16383 (>K:COWLFLAP1_SET)
//Asobo/Baron G58/Fuel
G58_Fuel_Boost_Pump_L_Switch_Hi#1 s0 (A:GENERAL ENG FUEL PUMP SWITCH EX1:1, Enum) != if{ l0 (>K:ELECT_FUEL_PUMP1_SET) }
G58_Fuel_Boost_Pump_L_Switch_Lo#1 s0 (A:GENERAL ENG FUEL PUMP SWITCH EX1:1, Enum) != if{ l0 (>K:ELECT_FUEL_PUMP1_SET) }
G58_Fuel_Boost_Pump_L_Switch_Off#0 s0 (A:GENERAL ENG FUEL PUMP SWITCH EX1:1, Enum) != if{ l0 (>K:ELECT_FUEL_PUMP1_SET) }
//Asobo/Baron G58/Lights
G58_LEFT_LANDING_LIGHT_OFF#1 (>K:LANDING_LIGHTS_OFF)
G58_LEFT_LANDING_LIGHT_ON#1 (>K:LANDING_LIGHTS_ON)
G58_RIGHT_LANDING_LIGHT_OFF#2 (>K:LANDING_LIGHTS_OFF)
G58_RIGHT_LANDING_LIGHT_ON#2 (>K:LANDING_LIGHTS_ON)
//Asobo/Baron G58/Safety
G58_ELT_ARM#(A:ELT ACTIVATED, Bool) if{ (>K:ELT_OFF) }
G58_ELT_ON#(A:ELT ACTIVATED, Bool) ! if{ (>K:ELT_ON) }
//Asobo/Bonanza G36/Avionics
G36_AVIONICS_OFF#(A:CIRCUIT SWITCH ON:24, Bool) 1 == if{ 1 (>K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE) 24 (>K:ELECTRICAL_CIRCUIT_TOGGLE) }
G36_AVIONICS_ON#(A:CIRCUIT SWITCH ON:24, Bool) 0 == if{ 1 (>K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE) 24 (>K:ELECTRICAL_CIRCUIT_TOGGLE) }
//Asobo/Bonanza G36/Electrical
G36_ALTERNATOR_1_OFF#(A:GENERAL ENG MASTER ALTERNATOR:1, Bool) 1 == if{ 1 (>K:TOGGLE_ALTERNATOR1) }
G36_ALTERNATOR_1_ON#(A:GENERAL ENG MASTER ALTERNATOR:1, Bool) 0 == if{ 1 (>K:TOGGLE_ALTERNATOR1) }
G36_ALTERNATOR_2_OFF#(A:GENERAL ENG MASTER ALTERNATOR:2, Bool) 1 == if{ 1 (>K:TOGGLE_ALTERNATOR2) }
G36_ALTERNATOR_2_ON#(A:GENERAL ENG MASTER ALTERNATOR:2, Bool) 0 == if{ 1 (>K:TOGGLE_ALTERNATOR2) }
G36_BATTERY_1_OFF#(A:ELECTRICAL MASTER BATTERY:1, Bool) 1 == if{ 1 (>K:TOGGLE_MASTER_BATTERY) }
G36_BATTERY_1_ON#(A:ELECTRICAL MASTER BATTERY:1, Bool) 0 == if{ 1 (>K:TOGGLE_MASTER_BATTERY) }
G36_BATTERY_2_OFF#(A:ELECTRICAL MASTER BATTERY:2, Bool) 1 == if{ 2 (>K:TOGGLE_MASTER_BATTERY) }
G36_BATTERY_2_ON#(A:ELECTRICAL MASTER BATTERY:2, Bool) 0 == if{ 2 (>K:TOGGLE_MASTER_BATTERY) }
//Asobo/Bonanza G36/Fuel
G36_FUEL_PUMP_HIGH#1 (>K:ELECT_FUEL_PUMP1_SET) 1 (>L:XMLVAR_FUEL_Pump1_High_ON)
G36_FUEL_PUMP_OFF#0 (>K:ELECT_FUEL_PUMP1_SET) 0 (>L:XMLVAR_FUEL_Pump1_High_ON)
G36_FUEL_PUMP_ON#1 (>K:ELECT_FUEL_PUMP1_SET) 0 (>L:XMLVAR_FUEL_Pump1_High_ON)
//Asobo/Bonanza G36/Lights
G36_LIGHTING_KNOB_FLOOD_DEC#(A:LIGHT POTENTIOMETER:5, Percent) 10 - 0 max 5 (>K:2:LIGHT_POTENTIOMETER_SET)
G36_LIGHTING_KNOB_FLOOD_INC#(A:LIGHT POTENTIOMETER:5, Percent) 10 + 100 min 5 (>K:2:LIGHT_POTENTIOMETER_SET)
G36_LIGHTING_SWITCH_FLOOD#0 (>K:GLARESHIELD_LIGHTS_TOGGLE)
G36_LIGHT_FLOOD_OFF#0 (>K:GLARESHIELD_LIGHTS_SET)
G36_LIGHT_FLOOD_ON#1 (>K:GLARESHIELD_LIGHTS_SET)
G36_LIGHT_KNOB_AVIONICS_DEC#(A:LIGHT POTENTIOMETER:14, Percent) 1 - 0 max 14 (>K:2:LIGHT_POTENTIOMETER_SET)
G36_LIGHT_KNOB_AVIONICS_INC#(A:LIGHT POTENTIOMETER:14, Percent) 1 + 100 min 14 (>K:2:LIGHT_POTENTIOMETER_SET)
G36_LIGHT_KNOB_GLARESHIELD_DEC#(A:LIGHT POTENTIOMETER:5, Percent) 1 - 0 max 5 (>K:2:LIGHT_POTENTIOMETER_SET)
G36_LIGHT_KNOB_GLARESHIELD_INC#(A:LIGHT POTENTIOMETER:5, Percent) 1 + 100 min 5 (>K:2:LIGHT_POTENTIOMETER_SET)
G36_LIGHT_KNOB_PANEL_DEC#(A:LIGHT POTENTIOMETER:3, Percent) 1 - 0 max 3 (>K:2:LIGHT_POTENTIOMETER_SET)
G36_LIGHT_KNOB_PANEL_INC#(A:LIGHT POTENTIOMETER:3, Percent) 1 + 100 min 3 (>K:2:LIGHT_POTENTIOMETER_SET)
G36_LIGHT_KNOB_SUBPANEL_DEC#(A:LIGHT POTENTIOMETER:2, Percent) 1 - 0 max 2 (>K:2:LIGHT_POTENTIOMETER_SET)
G36_LIGHT_KNOB_SUBPANEL_INC#(A:LIGHT POTENTIOMETER:2, Percent) 1 + 100 min 2 (>K:2:LIGHT_POTENTIOMETER_SET)
G36_LIGHT_PANEL_OFF#0 (>K:PANEL_LIGHTS_SET)
G36_LIGHT_PANEL_ON#1 (>K:PANEL_LIGHTS_SET)
//Asobo/C208 Caravan/Electrical
C208_AVIONICS1_OFF#0 (>K:AVIONICS_MASTER_1_SET)
C208_AVIONICS1_ON#1 (>K:AVIONICS_MASTER_1_SET)
C208_AVIONICS2_OFF#0 (>K:AVIONICS_MASTER_2_SET)
C208_AVIONICS2_ON#1 (>K:AVIONICS_MASTER_2_SET)
//Asobo/C208 Caravan/Fuel
Fuel_Condition_Lever_Cutoff#0 (>L:Condition_Lever_CutOff_1) 0 (>K:SET_FUEL_VALVE_ENG1) 0 (>A:TURB ENG CONDITION LEVER POSITION:1,enum) 
Fuel_Condition_Lever_High_Idle#2 (>L:Condition_Lever_CutOff_1) 0 (L:ENG FUEL VALVE:1, Bool) != if{ 1 (>K:SET_FUEL_VALVE_ENG1) } 2 (>A:TURB ENG CONDITION LEVER POSITION:1,enum) 
Fuel_Condition_Lever_Low_Idle#1 (>L:Condition_Lever_CutOff_1) 0 (L:ENG FUEL VALVE:1, Bool) != if{ 1 (>K:SET_FUEL_VALVE_ENG1) } 1 (>A:TURB ENG CONDITION LEVER POSITION:1,enum)
//Asobo/C208 Caravan/Lights
C208_LEFT_LANDING_LIGHT_OFF#1 (>K:LANDING_LIGHTS_OFF)
C208_LEFT_LANDING_LIGHT_ON#1 (>K:LANDING_LIGHTS_ON)
C208_RIGHT_LANDING_LIGHT_OFF#2 (>K:LANDING_LIGHTS_OFF)
C208_RIGHT_LANDING_LIGHT_ON#2 (>K:LANDING_LIGHTS_ON)
//Asobo/Cessna 172 Classic/Avionics
C172N_Airspeed_True_Calibrator_Knob_Dec#(A:AIRSPEED TRUE CALIBRATE, degrees) -- 0 max (>A:AIRSPEED TRUE CALIBRATE, degrees)
C172N_Airspeed_True_Calibrator_Knob_Inc#(A:AIRSPEED TRUE CALIBRATE, degrees) ++ 30 min (>A:AIRSPEED TRUE CALIBRATE, degrees)
//Asobo/Cessna 172 Classic/Electrical
C172N_Avionics_Bus_1_Switch_Off#0 (A:CIRCUIT SWITCH ON:39, Bool) != if{ 39 (>K:ELECTRICAL_CIRCUIT_TOGGLE) } (A:CIRCUIT SWITCH ON:39, Bool) 1 (A:1:BUS CONNECTION ON:4, Bool) != if{ 4 1 (>K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE) }
C172N_Avionics_Bus_1_Switch_On#1 (A:CIRCUIT SWITCH ON:39, Bool) != if{ 39 (>K:ELECTRICAL_CIRCUIT_TOGGLE) } (A:CIRCUIT SWITCH ON:39, Bool) 1 (A:1:BUS CONNECTION ON:4, Bool) != if{ 4 1 (>K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE) }
C172N_Avionics_Bus_2_Switch_Off#0 (A:CIRCUIT SWITCH ON:40, Bool) != if{ 40 (>K:ELECTRICAL_CIRCUIT_TOGGLE) } (A:CIRCUIT SWITCH ON:40, Bool) 1 (A:1:BUS CONNECTION ON:4, Bool) != if{ 4 1 (>K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE) }
C172N_Avionics_Bus_2_Switch_On#1 (A:CIRCUIT SWITCH ON:40, Bool) != if{ 40 (>K:ELECTRICAL_CIRCUIT_TOGGLE) } (A:CIRCUIT SWITCH ON:40, Bool) 1 (A:1:BUS CONNECTION ON:4, Bool) != if{ 4 1 (>K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE) }
//Asobo/Cessna 172/Anti-Ice
C_172_Pitot_Heat_Toggle_#1 (L:DEICE_Pitot_1) ! (>K:2:PITOT_HEAT_SET)
C_172_PITOT_HEAT_OFF#(A:PITOT HEAT, Bool) 1 == if{ (>K:PITOT_HEAT_TOGGLE) }
C_172_PITOT_HEAT_ON#(A:PITOT HEAT, Bool) 0 == if{ (>K:PITOT_HEAT_TOGGLE) }
//Asobo/Cessna 172/Autopilot
C_172_AP#(A:AUTOPILOT DISENGAGED, Bool) ! if{ (>K:AP_MASTER) (A:AUTOPILOT MASTER, Bool) if{ (A:AUTOPILOT FLIGHT DIRECTOR ACTIVE, Bool) ! if{ 1 (>K:TOGGLE_FLIGHT_DIRECTOR) } } (A:AUTOPILOT MASTER, bool) ! if{ (H:Generic_Autopilot_Manual_Off) } }
C_172_AP_ALT#(>K:AP_ALT_HOLD)
C_172_AP_APR#(A:AUTOPILOT APPROACH HOLD,Bool) (A:AUTOPILOT GLIDESLOPE HOLD, Bool) ! and if{ (>K:AP_APR_HOLD) } (>K:AP_APR_HOLD)
C_172_AP_FLC#(>K:FLIGHT_LEVEL_CHANGE) (A:AIRSPEED INDICATED, knots) (>K:AP_SPD_VAR_SET)
C_172_AP_HDG#(>K:AP_PANEL_HEADING_HOLD)
C_172_AP_NAV#(>K:AP_NAV1_HOLD)
C_172_AP_NOSE_DN#(A:AUTOPILOT VERTICAL HOLD, Bool) if{ (>K:AP_VS_VAR_DEC) (>H:AP_UP) } (A:AUTOPILOT FLIGHT LEVEL CHANGE, Bool) if{ (>K:AP_SPD_VAR_DEC) } (A:AUTOPILOT PITCH HOLD, Bool) if{ (>K:AP_PITCH_REF_INC_DN) }
C_172_AP_NOSE_UP#(A:AUTOPILOT VERTICAL HOLD, Bool) if{ (>K:AP_VS_VAR_INC) (>H:AP_DN) } (A:AUTOPILOT FLIGHT LEVEL CHANGE, Bool) if{ (>K:AP_SPD_VAR_INC) } (A:AUTOPILOT PITCH HOLD, Bool) if{ (>K:AP_PITCH_REF_INC_UP) }
C_172_AP_VS#(>K:AP_PANEL_VS_HOLD)
C_172_FD#(A:AUTOPILOT MASTER, bool) ! if{ 0 (>K:TOGGLE_FLIGHT_DIRECTOR) }
//Asobo/Cessna 172/Avionics
C_172_AVIONICS_BUS_1_OFF#(A:CIRCUIT SWITCH ON:24, Bool) if{ 24 (>K:ELECTRICAL_CIRCUIT_TOGGLE) } (A:CIRCUIT SWITCH ON:24, Bool) 1 (>A:BUS LOOKUP INDEX, Number) (A:BUS CONNECTION ON:4, Bool) != if{ 4 1 (>K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE) }
C_172_AVIONICS_BUS_1_ON#(A:CIRCUIT SWITCH ON:24, Bool) ! if{ 24 (>K:ELECTRICAL_CIRCUIT_TOGGLE) } (A:CIRCUIT SWITCH ON:24, Bool) 1 (>A:BUS LOOKUP INDEX, Number) (A:BUS CONNECTION ON:4, Bool) != if{ 4 1 (>K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE) }
C_172_AVIONICS_BUS_2_OFF#(A:CIRCUIT SWITCH ON:25, Bool) if{ 25 (>K:ELECTRICAL_CIRCUIT_TOGGLE) } (A:CIRCUIT SWITCH ON:25, Bool) 2 (>A:BUS LOOKUP INDEX, Number) (A:BUS CONNECTION ON:5, Bool) != if{ 5 2 (>K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE) }
C_172_AVIONICS_BUS_2_ON#(A:CIRCUIT SWITCH ON:25, Bool) ! if{ 25 (>K:ELECTRICAL_CIRCUIT_TOGGLE) } (A:CIRCUIT SWITCH ON:25, Bool) 2 (>A:BUS LOOKUP INDEX, Number) (A:BUS CONNECTION ON:5, Bool) != if{ 5 2 (>K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE) }
C_172_XPNDR_VFR#1200 (>L:my xpndr code, number) (L:my xpndr code, bco16) (>K:XPNDR_SET)
//Asobo/Cessna 172/Electrical
C172_ALTERNATOR_OFF#(A:GENERAL ENG MASTER ALTERNATOR:1, Bool) 1 == if{ 1 (>K:TOGGLE_ALTERNATOR1) }
C172_ALTERNATOR_ON#(A:GENERAL ENG MASTER ALTERNATOR:1, Bool) 0 == if{ 1 (>K:TOGGLE_ALTERNATOR1) }
C172_BATTERY_OFF#(A:ELECTRICAL MASTER BATTERY:1, Bool) 1 == if{ 1 (>K:TOGGLE_MASTER_BATTERY) }
C172_BATTERY_ON#(A:ELECTRICAL MASTER BATTERY:1, Bool) 0 == if{ 1 (>K:TOGGLE_MASTER_BATTERY) }
C_172_STBYBATTERY_OFF#(L:XMLVAR_BatterySTBY_SwitchState) 0 == if{ 2 (>K:TOGGLE_MASTER_BATTERY) }
C_172_STBYBATTERY_ON#(L:XMLVAR_BatterySTBY_SwitchState) 1 == if{ 2 (>K:TOGGLE_MASTER_BATTERY) }
C_172_STBYBATTERY_TEST_OFF#0 (>L:XMLVAR_STBYBattery_IsHeld)
C_172_STBYBATTERY_TEST_ON#1 (>L:XMLVAR_STBYBattery_Test) 1 (>L:XMLVAR_STBYBattery_IsHeld)
//Asobo/Cessna 172/Engine
Magneto_Switch_Both#3 (>K:MAGNETO1_SET) (A:GENERAL ENG STARTER:1, Bool) if{ 0 (>K:SET_STARTER1_HELD) }
Magneto_Switch_Left#2 (>K:MAGNETO1_SET) (A:GENERAL ENG STARTER:1, Bool) if{ 0 (>K:SET_STARTER1_HELD) }
Magneto_Switch_Off#0 (>K:MAGNETO1_SET) (A:GENERAL ENG STARTER:1, Bool) if{ 0 (>K:SET_STARTER1_HELD) }
Magneto_Switch_Right#1 (>K:MAGNETO1_SET) (A:GENERAL ENG STARTER:1, Bool) if{ 0 (>K:SET_STARTER1_HELD) }
Magneto_Switch_Start#3 (>K:MAGNETO1_SET) (A:GENERAL ENG STARTER:1, Bool) ! if{ 1 (>K:SET_STARTER1_HELD) }
//Asobo/Cessna 172/Environment
TOGGLE_ALTERNATE_AIR#(>K:TOGGLE_ALTERNATE_STATIC)
//Asobo/Cessna 172/Fuel
C_172_BOTH_FUEL_TANKS#1 (>K:FUEL_SELECTOR_SET)
C_172_FUEL_PUMP_OFF#0 s0 (A:GENERAL ENG FUEL PUMP SWITCH EX1:1, Enum) != if{ l0 (>K:ELECT_FUEL_PUMP1_SET)
C_172_FUEL_PUMP_ON#1 s0 (A:GENERAL ENG FUEL PUMP SWITCH EX1:1, Enum) != if{ l0 (>K:ELECT_FUEL_PUMP1_SET)
C_172_FUEL_SHUTOFF_VALVE_CLOSE#(A:GENERAL ENG FUEL VALVE:1, Bool) 1 == if{ (>K:TOGGLE_FUEL_VALVE_ENG1) }
C_172_FUEL_SHUTOFF_VALVE_OPEN#(A:GENERAL ENG FUEL VALVE:1, Bool) 0 == if{ (>K:TOGGLE_FUEL_VALVE_ENG1) }
C_172_LEFT_FUEL_TANK#2 (>K:FUEL_SELECTOR_SET)
C_172_RIGHT_FUEL_TANK#3 (>K:FUEL_SELECTOR_SET)
//Asobo/Cessna 172/Lights
C_172_AVIONICS_LIGHT_DEC#(L:LIGHTING_POTENTIOMETER_4) 5 - 0 max d (>L:LIGHTING_POTENTIOMETER_4) 4 (>K:2:LIGHT_POTENTIOMETER_SET) 
C_172_AVIONICS_LIGHT_INC#(L:LIGHTING_POTENTIOMETER_4) 5 + 100 min d (>L:LIGHTING_POTENTIOMETER_4) 4 (>K:2:LIGHT_POTENTIOMETER_SET) 
C_172_COPILOT_CABIN_LIGHT_DEC#(A:LIGHT CABIN POWER SETTING:2, Percent) 10 - 0 max 2 (>K:2:CABIN_LIGHTS_POWER_SETTING_SET) (A:LIGHT CABIN:2, Bool) (A:LIGHT CABIN POWER SETTING:2, Percent) 0 == and if{ 2 0 (>K:2:CABIN_LIGHTS_SET) }
C_172_COPILOT_CABIN_LIGHT_INC#(A:LIGHT CABIN:2, Bool) ! if{ 2 1 (>K:2:CABIN_LIGHTS_SET) } (A:LIGHT CABIN POWER SETTING:2, Percent) 10 + 100 min 2 (>K:2:CABIN_LIGHTS_POWER_SETTING_SET)
C_172_LIGHTS_LANDING_OFF#1 0 (>K:2:LANDING_LIGHTS_SET) 0 (>L:LIGHTING_LANDING_1)
C_172_LIGHTS_LANDING_ON#1 1 (>K:2:LANDING_LIGHTS_SET) 1 (>L:LIGHTING_LANDING_1)
C_172_PANEL_LIGHT_DEC#(L:LIGHTING_POTENTIOMETER_3, percent) 5 - 0 max d (>L:LIGHTING_POTENTIOMETER_3) 3 (>K:2:LIGHT_POTENTIOMETER_SET)
C_172_PANEL_LIGHT_INC#(L:LIGHTING_POTENTIOMETER_3, percent) 5 + 100 min d (>L:LIGHTING_POTENTIOMETER_3) 3 (>K:2:LIGHT_POTENTIOMETER_SET)
C_172_PEDESTRAL_LIGHT_DEC#(L:LIGHTING_PEDESTRAL_1) 5 - 0 max d (>L:LIGHTING_PEDESTRAL_1) 1 (>K:2:PEDESTRAL_LIGHTS_POWER_SETTING_SET)
C_172_PEDESTRAL_LIGHT_INC#(L:LIGHTING_PEDESTRAL_1) 5 + 100 min d (>L:LIGHTING_PEDESTRAL_1) 1 (>K:2:PEDESTRAL_LIGHTS_POWER_SETTING_SET)
C_172_PILOT_CABIN_LIGHT_DEC#(A:LIGHT CABIN POWER SETTING:1, Percent) 10 - 0 max 1 (>K:2:CABIN_LIGHTS_POWER_SETTING_SET) (A:LIGHT CABIN:1, Bool) (A:LIGHT CABIN POWER SETTING:1, Percent) 0 == and if{ 1 0 (>K:2:CABIN_LIGHTS_SET) }
C_172_PILOT_CABIN_LIGHT_INC#(A:LIGHT CABIN:1, Bool) ! if{ 1 1 (>K:2:CABIN_LIGHTS_SET) } (A:LIGHT CABIN POWER SETTING:1, Percent) 10 + 100 min 1 (>K:2:CABIN_LIGHTS_POWER_SETTING_SET)
C_172_STBY_INSTRUMENTS_LIGHT_DEC#(A:LIGHT PANEL POWER SETTING:1, Percent) 10 - 0 max 1 (>K:2:PANEL_LIGHTS_POWER_SETTING_SET) (A:LIGHT PANEL:1, Bool) (A:LIGHT PANEL POWER SETTING:1, Percent) 0 == and if{ 1 0 (>K:2:PANEL_LIGHTS_SET) }
C_172_STBY_INSTRUMENTS_LIGHT_INC#(A:LIGHT PANEL:1, Bool) ! if{ 1 1 (>K:2:PANEL_LIGHTS_SET) } (A:LIGHT PANEL POWER SETTING:1, Percent) 10 + 100 min 1 (>K:2:PANEL_LIGHTS_POWER_SETTING_SET)
//Asobo/Cessna 172/Safety
C172_SAFETY_Light_Test_On#(>K:ANNUNCIATOR_SWITCH_ON) 0 (>L:XMLVAR_WarningsAttenuated)
C172_SAFETY_Lights_Test_Off#(>K:ANNUNCIATOR_SWITCH_OFF) 0 (>L:XMLVAR_WarningsAttenuated)
//Asobo/DA40NG/Electrical
Electric_Master_Switch_Off#1 (>K:MASTER_BATTERY_OFF) 1 (>K:ALTERNATOR_OFF) (A:GENERAL ENG STARTER:1, Bool) if{ 0 (>K:SET_STARTER1_HELD) }
Electric_Master_Switch_On#1 (>K:MASTER_BATTERY_ON) 1 (>K:ALTERNATOR_ON) (A:GENERAL ENG STARTER:1, Bool) if{ 0 (>K:SET_STARTER1_HELD) }
Electric_Master_Switch_Start#1 (>K:MASTER_BATTERY_ON) 1 (>K:ALTERNATOR_ON) 1 (>K:SET_STARTER1_HELD)
Electrical_Avionics_Master_Off#0 s0 (A:CIRCUIT SWITCH ON:22, Bool) != if{ 22 (>K:ELECTRICAL_CIRCUIT_TOGGLE) } (A:CIRCUIT SWITCH ON:22, Bool) 1 (>A:BUS LOOKUP INDEX, Number) (A:BUS CONNECTION ON:4, Bool) != if{ 4 1 (>K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE) } s0 (A:CIRCUIT SWITCH ON:23, Bool) != if{ 23 (>K:ELECTRICAL_CIRCUIT_TOGGLE) } (A:CIRCUIT SWITCH ON:23, Bool) 2 (>A:BUS LOOKUP INDEX, Number) (A:BUS CONNECTION ON:5, Bool) != if{ 5 2 (>K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE) }
Electrical_Avionics_Master_On#1 s0 (A:CIRCUIT SWITCH ON:22, Bool) != if{ 22 (>K:ELECTRICAL_CIRCUIT_TOGGLE) } (A:CIRCUIT SWITCH ON:22, Bool) 1 (>A:BUS LOOKUP INDEX, Number) (A:BUS CONNECTION ON:4, Bool) != if{ 4 1 (>K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE) } s0 (A:CIRCUIT SWITCH ON:23, Bool) != if{ 23 (>K:ELECTRICAL_CIRCUIT_TOGGLE) } (A:CIRCUIT SWITCH ON:23, Bool) 2 (>A:BUS LOOKUP INDEX, Number) (A:BUS CONNECTION ON:5, Bool) != if{ 5 2 (>K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE) }
Electrical_Essential_Bus_Off#0 s0 l0 1 (>A:BUS LOOKUP INDEX, Number) (A:BUS CONNECTION ON:2, Bool) == if{ 2 1 (>K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE) } l0 if{ 1 (>A:BUS LOOKUP INDEX, Number) (A:BUS CONNECTION ON:3, Bool) if{ 1 3 (>K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE) } 2 (>A:BUS LOOKUP INDEX, Number) (A:BUS CONNECTION ON:3, Bool) ! if{ 2 3 (>K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE) } } els{ 1 (>A:BUS LOOKUP INDEX, Number) (A:BUS CONNECTION ON:3, Bool) ! if{ 1 3 (>K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE) } 2 (>A:BUS LOOKUP INDEX, Number) (A:BUS CONNECTION ON:3, Bool) if{ 2 3 (>K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE) } } l0 (>L:ELECTRICAL_EssentialBus_2) 
Electrical_Essential_Bus_On#1 s0 l0 1 (>A:BUS LOOKUP INDEX, Number) (A:BUS CONNECTION ON:2, Bool) == if{ 2 1 (>K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE) } l0 if{ 1 (>A:BUS LOOKUP INDEX, Number) (A:BUS CONNECTION ON:3, Bool) if{ 1 3 (>K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE) } 2 (>A:BUS LOOKUP INDEX, Number) (A:BUS CONNECTION ON:3, Bool) ! if{ 2 3 (>K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE) } } els{ 1 (>A:BUS LOOKUP INDEX, Number) (A:BUS CONNECTION ON:3, Bool) ! if{ 1 3 (>K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE) } 2 (>A:BUS LOOKUP INDEX, Number) (A:BUS CONNECTION ON:3, Bool) if{ 2 3 (>K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE) } } l0 (>L:ELECTRICAL_EssentialBus_2)
//Asobo/DA40NG/Engines
Engine_Master_Switch_Off#0 s0 (A:RECIP ENG ENGINE MASTER SWITCH:1, Bool) != if{ (>K:ENGINE_MASTER_1_TOGGLE) }
Engine_Master_Switch_On#1 s0 (A:RECIP ENG ENGINE MASTER SWITCH:1, Bool) != if{ (>K:ENGINE_MASTER_1_TOGGLE) }
//Asobo/DA62/Anti-Ice
DA62_DE-ICE_High#0 (>L:DA62_ANTI-ICE_SWITCH, Number)
DA62_DE-ICE_Normal#1 (>L:DA62_ANTI-ICE_SWITCH, Number)
DA62_DE-ICE_OFF#2 (>L:DA62_ANTI-ICE_SWITCH, Number)
//Asobo/DA62/Engine and FADEC System
DA62_LH_ECU_A#0 (>L:DA62_ECU_L)
DA62_LH_ECU_AUTO#1 (>L:DA62_ECU_L)
DA62_LH_ECU_B#2 (>L:DA62_ECU_L)
DA62_LH_ECU_TEST_OFF#0 (>L:FADEC_ECUTEST_BUTTON_L_IsDown)
DA62_LH_ECU_TEST_ON#1 (>L:FADEC_ECUTEST_BUTTON_L_IsDown)
DA62_RH_ECU_A#0 (>L:DA62_ECU_R)
DA62_RH_ECU_AUTO#1 (>L:DA62_ECU_R)
DA62_RH_ECU_B#2 (>L:DA62_ECU_R)
DA62_RH_ECU_TEST_OFF#0 (>L:FADEC_ECUTEST_BUTTON_R_IsDown)
DA62_RH_ECU_TEST_ON#1 (>L:FADEC_ECUTEST_BUTTON_R_IsDown)
//Asobo/DA62/Engine
DA62_LEFT_ENGINE_MASTER_TOGGLE#(>K:ENGINE_MASTER_1_TOGGLE) 
DA62_RIGHT_ENGINE_MASTER_TOGGLE#(>K:ENGINE_MASTER_2_TOGGLE) 
//Asobo/DA62/Fuel
DA62_LH_AUX_FUEL_PUMP_TOGGLE#1 (>K:FUEL_TRANSFER_CUSTOM_INDEX_TOGGLE)
DA62_LH_Fuel_Control_Crossfeed#(A:FUEL TANK SELECTOR:1, enum) 20 != if{ (>K:FUEL_SELECTOR_RIGHT_MAIN) }
DA62_LH_Fuel_Control_Off#(A:FUEL TANK SELECTOR:1, enum) 0 != if{ (>K:FUEL_SELECTOR_OFF) }
DA62_LH_Fuel_Control_On#(A:FUEL TANK SELECTOR:1, enum) 19 != if{ (>K:FUEL_SELECTOR_LEFT_MAIN) }
DA62_RH_AUX_FUEL_PUMP_TOGGLE#2 (>K:FUEL_TRANSFER_CUSTOM_INDEX_TOGGLE)
DA62_RH_Fuel_Control_Crossfeed#(A:FUEL TANK SELECTOR:2, enum) 19 != if{ (>K:FUEL_SELECTOR_2_LEFT_MAIN) }
DA62_RH_Fuel_Control_Off#(A:FUEL TANK SELECTOR:2, enum) 0 != if{ (>K:FUEL_SELECTOR_2_OFF) }
DA62_RH_Fuel_Control_On#(A:FUEL TANK SELECTOR:2, enum) 20 != if{ (>K:FUEL_SELECTOR_2_RIGHT_MAIN) }
//Asobo/King Air 350i/Autopilot
KA_ALT#(>K:AP_ALT_HOLD)
KA_ALT_DEC#100 (>K:AP_ALT_VAR_DEC)
KA_ALT_FAST_DEC#1000 (>K:AP_ALT_VAR_DEC)
KA_ALT_FAST_INC#1000 (>K:AP_ALT_VAR_INC)
KA_ALT_INC#100 (>K:AP_ALT_VAR_INC)
KA_ALT_SET#(A:INDICATED ALTITUDE, feet) (>K:AP_ALT_VAR_SET_ENGLISH) (>H:AP_KNOB)
KA_AP#(A:AUTOPILOT DISENGAGED, Bool) ! if{ (>K:AP_MASTER) (A:AUTOPILOT MASTER, Bool) if{ (A:AUTOPILOT FLIGHT DIRECTOR ACTIVE, Bool) ! if{ 1 (>K:TOGGLE_FLIGHT_DIRECTOR) } } (L:XMLVAR_APTrim) 0 == if{ (A:AUTOPILOT YAW DAMPER, Bool) ! (A:AUTOPILOT MASTER, bool) and if{ (K:YAW_DAMPER_TOGGLE) } } (A:AUTOPILOT MASTER, Bool) ! if{ (H:Generic_Autopilot_Manual_Off) } }
KA_APPR#(A:AUTOPILOT APPROACH HOLD,Bool) (A:AUTOPILOT GLIDESLOPE HOLD,Bool) ! and if{ (>K:AP_APR_HOLD) } (>K:AP_APR_HOLD)
KA_BANK#(>K:AP_MAX_BANK_INC)
KA_CRS_DEC#(>K:VOR1_OBI_DEC)
KA_CRS_INC#(>K:VOR1_OBI_INC)
KA_CRS_SET#(A:HEADING INDICATOR,degrees) (>K:VOR1_SET)
KA_FD1#(A:AUTOPILOT MASTER, bool) ! if{ 1 (>K:TOGGLE_FLIGHT_DIRECTOR) }
KA_FLC#(>K:FLIGHT_LEVEL_CHANGE) (A:AIRSPEED INDICATED, knots) (>K:AP_SPD_VAR_SET)
KA_HDG#(>K:AP_PANEL_HEADING_HOLD)
KA_HDG_DEC#(>K:HEADING_BUG_DEC)
KA_HDG_FAST_DEC#(A:AUTOPILOT HEADING LOCK DIR:1, Degrees) 5 - (>K:1:HEADING_BUG_SET)
KA_HDG_FAST_INC#(A:AUTOPILOT HEADING LOCK DIR:1, Degrees) 5 + (>K:1:HEADING_BUG_SET)
KA_HDG_INC#(>K:HEADING_BUG_INC)
KA_NAV#(>K:AP_NAV1_HOLD)
KA_PUSHDISCO#(A:>K:AUTOPILOT DISENGAGED, bool) if{ 0(>K:AUTOPILOT_DISENGAGE_SET)} els{ 1(>K:AUTOPILOT_DISENGAGE_SET) }
KA_Push_Heading#(A:HEADING INDICATOR,degrees) (>K:HEADING_BUG_SET)
KA_SPD_DEC#(L:XMLVAR_AirSpeedIsInMach) if{ (>K:AP_MACH_VAR_DEC) } els{ (>K:AP_SPD_VAR_DEC) }
KA_SPD_INC#(L:XMLVAR_AirSpeedIsInMach) if{ (>K:AP_MACH_VAR_INC) } els{ (>K:AP_SPD_VAR_INC) }
KA_VNAV#(L:XMLVAR_VNAVButtonValue) ! (>L:XMLVAR_VNAVButtonValue)
KA_VS#(>K:AP_PANEL_VS_HOLD)
KA_VS_DEC#(A:AUTOPILOT VERTICAL HOLD, bool) if{ (>K:AP_VS_VAR_INC) } els{ (>K:AP_PITCH_REF_INC_UP) }
KA_VS_INC#(A:AUTOPILOT VERTICAL HOLD, bool) if{ (>K:AP_VS_VAR_DEC) } els{ (>K:AP_PITCH_REF_INC_DN) }
KA_YD#(>K:YAW_DAMPER_TOGGLE)
//Asobo/King Air 350i/Engines
KA_ENG1_START_TOGGLE#(A:GENERAL ENG STARTER ACTIVE:1, Bool) 0 == if{ 2 (>K:TURBINE_IGNITION_SWITCH_SET1) 1 (>K:SET_STARTER1_HELD) } els{ 0 (>K:SET_STARTER1_HELD) 0 (>K:TURBINE_IGNITION_SWITCH_SET1) 0 (>K:TOGGLE_STARTER1) }
KA_ENG2_START_TOGGLE#(A:GENERAL ENG STARTER ACTIVE:2, Bool) 0 == if{ 2 (>K:TURBINE_IGNITION_SWITCH_SET2) 1 (>K:SET_STARTER2_HELD) } els{ 0 (>K:SET_STARTER2_HELD) 0 (>K:TURBINE_IGNITION_SWITCH_SET2) 0 (>K:TOGGLE_STARTER2) }
//Asobo/King Air 350i/Lights
KA_LEFT_LANDING_LIGHT_OFF#1 (>K:LANDING_LIGHTS_OFF)
KA_LEFT_LANDING_LIGHT_ON#1 (>K:LANDING_LIGHTS_ON)
KA_RECOGNITION_LIGHTS_OFF#(A:LIGHT RECOGNITION, Bool) if{ (>K:TOGGLE_RECOGNITION_LIGHTS) }
KA_RECOGNITION_LIGHTS_ON#(A:LIGHT RECOGNITION, Bool) ! if{ (>K:TOGGLE_RECOGNITION_LIGHTS) }
KA_RIGHT_LANDING_LIGHT_OFF#2 (>K:LANDING_LIGHTS_OFF)
KA_RIGHT_LANDING_LIGHT_ON#2 (>K:LANDING_LIGHTS_ON)
//Asobo/Longitude/Avionics
AS3000_TSC_Vertical_BottomKnob_Large_DEC#(>H:AS3000_TSC_Vertical_BottomKnob_Large_DEC)
AS3000_TSC_Vertical_BottomKnob_Large_INC#(>H:AS3000_TSC_Vertical_BottomKnob_Large_INC)
AS3000_TSC_Vertical_BottomKnob_Push#(>H:AS3000_TSC_Vertical_BottomKnob_Push)
AS3000_TSC_Vertical_BottomKnob_Push_Long#(>H:AS3000_TSC_Vertical_BottomKnob_Push_Long)
AS3000_TSC_Vertical_BottomKnob_Small_DEC#(>H:AS3000_TSC_Vertical_BottomKnob_Small_DEC)
AS3000_TSC_Vertical_BottomKnob_Small_INC#(>H:AS3000_TSC_Vertical_BottomKnob_Small_INC)
AS3000_TSC_Vertical_TopKnob_Large_DEC#(>H:AS3000_TSC_Vertical_TopKnob_Large_DEC)
AS3000_TSC_Vertical_TopKnob_Large_INC#(>H:AS3000_TSC_Vertical_TopKnob_Large_INC)
AS3000_TSC_Vertical_TopKnob_Small_DEC#(>H:AS3000_TSC_Vertical_TopKnob_Small_DEC)
AS3000_TSC_Vertical_TopKnob_Small_INC#(>H:AS3000_TSC_Vertical_TopKnob_Small_INC)
//Asobo/Longitude/Electrical
LONGITUDE_TOGGLE_ALTERNATOR_1_SWITCH_1#1 (>K:TOGGLE_ALTERNATOR1)
LONGITUDE_TOGGLE_ALTERNATOR_2_SWITCH_2#1 (>K:TOGGLE_ALTERNATOR2)
LONGITUDE_TOGGLE_EXTERNAL_POWER_SWITCH#1 (>K:TOGGLE_EXTERNAL_POWER)
LONGITUDE_TOGGLE_MASTER_BATTERY_SWITCH_1#1 (>K:TOGGLE_MASTER_BATTERY)
LONGITUDE_TOGGLE_MASTER_BATTERY_SWITCH_2#2 (>K:TOGGLE_MASTER_BATTERY)
//Asobo/Longitude/Lights
LONGITUDE_LANDING_LIGHTS_L_TOGGLE#(>K:LANDING_LIGHTS_L_TOGGLE)
LONGITUDE_LANDING_LIGHTS_R_TOGGLE#(>K:LANDING_LIGHTS_R_TOGGLE)
LONGITUDE_PULSE_LIGHTS_TOGGLE#(>K:PULSE_LIGHTS_TOGGLE)
LONGITUDE_RECOG_LIGHTS_TOGGLE#(>K:RECOG_LIGHTS_TOGGLE)
LONGITUDE_TAIL_FLOOD_LIGHTS_TOGGLE#0 (>K:TOGGLE_LOGO_LIGHTS)
LONGITUDE_TAXI_LIGHTS_TOGGLE#(>K:TAXI_LIGHTS_TOGGLE)
LONGITUDE_WING_INSP_LIGHTS_TOGGLE#0 (>K:TOGGLE_WING_LIGHTS)
//Asobo/TBM 580/Avionics
AS3000_TSC_Horizontal_BottomKnob_Push#(>H:AS3000_TSC_Horizontal_BottomKnob_Push)
AS3000_TSC_Horizontal_BottomKnob_Small_DEC#(>H:AS3000_TSC_Horizontal_BottomKnob_Small_DEC)
AS3000_TSC_Horizontal_BottomKnob_Small_INC#(>H:AS3000_TSC_Horizontal_BottomKnob_Small_INC)
AS3000_TSC_Horizontal_SoftKey_1#(>H:AS3000_TSC_Horizontal_SoftKey_1)
AS3000_TSC_Horizontal_SoftKey_2#(>H:AS3000_TSC_Horizontal_SoftKey_2)
AS3000_TSC_Horizontal_SoftKey_3#(>H:AS3000_TSC_Horizontal_SoftKey_3)
AS3000_TSC_Horizontal_TopKnob_Large_DEC#(>H:AS3000_TSC_Horizontal_TopKnob_Large_DEC)
AS3000_TSC_Horizontal_TopKnob_Large_INC#(>H:AS3000_TSC_Horizontal_TopKnob_Large_INC)
AS3000_TSC_Horizontal_TopKnob_Push#(>H:AS3000_TSC_Horizontal_TopKnob_Push)
AS3000_TSC_Horizontal_TopKnob_Push_Long#(>H:AS3000_TSC_Horizontal_TopKnob_Push_Long)
AS3000_TSC_Horizontal_TopKnob_Small_DEC#(>H:AS3000_TSC_Horizontal_TopKnob_Small_DEC)
AS3000_TSC_Horizontal_TopKnob_Small_INC#(>H:AS3000_TSC_Horizontal_TopKnob_Small_INC)
//Asobo/TBM 930/Air Condition / Pressurization
TBM930_BLEED_AIR_AUTO#0 (>K:BLEED_AIR_SOURCE_CONTROL_SET)
TBM930_BLEED_AIR_MAX#3 (>K:BLEED_AIR_SOURCE_CONTROL_SET)
TBM930_BLEED_AIR_OFF#1 (>K:BLEED_AIR_SOURCE_CONTROL_SET)
//Asobo/TBM 930/Anti-Ice
TBM930_AIRFRAME_DE_ICE_OFF#(A:STRUCTURAL DEICE SWITCH, Bool) if{ (>K:TOGGLE_STRUCTURAL_DEICE) }
TBM930_AIRFRAME_DE_ICE_ON#(A:STRUCTURAL DEICE SWITCH, Bool) ! if{ (>K:TOGGLE_STRUCTURAL_DEICE) }
TBM930_ICE_LIGHT_OFF#0 0 (>K:2:WING_LIGHTS_SET) 0 (>L:LIGHTING_WING_1)
TBM930_ICE_LIGHT_ON#1 1 (>K:2:WING_LIGHTS_SET) 1 (>L:LIGHTING_WING_1)
TBM930_INERT_SEP_OFF#(A:ENG·ANTI·ICE:1,·Bool)·if{·(>K:ANTI_ICE_TOGGLE_ENG1)·}
TBM930_INERT_SEP_ON#(A:ENG ANTI ICE:1, Bool) ! if{ (>K:ANTI_ICE_TOGGLE_ENG1) }
TBM930_LTS_TEST_OFF#0 (>L:XMLVAR_LTS_TEST)
TBM930_LTS_TEST_ON#1 (>L:XMLVAR_LTS_Test)
TBM930_LTS_TEST_TOGGLE#(L:XMLVAR_LTS_TEST, Number) ! (>L:XMLVAR_LTS_TEST)
TBM930_PITOT_L_OFF#1 0 (>K:2:PITOT_HEAT_SET) 0 (>L:DEICE_Pitot_1)
TBM930_PITOT_L_ON#1 1 (>K:2:PITOT_HEAT_SET) 1 (>L:DEICE_Pitot_1)
TBM930_PITOT_R_OFF#2 0 (>K:2:PITOT_HEAT_SET) 0 (>L:DEICE_Pitot_2)
TBM930_PITOT_R_ON#2 1 (>K:2:PITOT_HEAT_SET) 1 (>L:DEICE_Pitot_2)
TBM930_PROP_DE_ICE_OFF#(A:PROP DEICE SWITCH:1, Bool) if{ (>K:TOGGLE_PROPELLER_DEICE) }
TBM930_PROP_DE_ICE_ON#(A:PROP DEICE SWITCH:1, Bool) ! if{ (>K:TOGGLE_PROPELLER_DEICE) }
TBM930_Pitot_L_TOG#(L:XMLVAR_Pitot_1) ! (>L:XMLVAR_Pitot_1) (L:XMLVAR_Pitot_1) ! (L:XMLVAR_Pitot_2) ! and (A:PITOT HEAT, bool) == if{ (>K:PITOT_HEAT_TOGGLE) }
TBM930_Pitot_R_TOG#2 (A:PITOT HEAT SWITCH:2) ! (>K:2:PITOT_HEAT_SET) (A:PITOT HEAT SWITCH:2) ! (>L:DEICE_Pitot_2)
TBM930_WINDSHIELD_OFF#0 (>K:WINDSHIELD_DEICE_SET)
TBM930_WINDSHIELD_ON#1 (>K:WINDSHIELD_DEICE_SET)
//Asobo/TBM 930/Autopilot
TBM930_AUTOPILOT_VNV_ON#1 (>L:XMLVAR_VNAVButtonValue)
TBM930_AP_BARO_3_DEC#2 (>K:KOHLSMAN_DEC) (>H:AP_BARO_Down)
TBM930_AP_BARO_3_INC#2 (>K:KOHLSMAN_INC) (>H:AP_BARO_Up)
TBM930_AP_CRS1_INC#(>K:VOR1_OBI_INC)
TBM930_AP_CRS1_SYNC#(A:HEADING INDICATOR, Radians) 57.29 * (>K:VOR1_SET)
TBM930_AP_CRS2_DEC#(>K:VOR2_OBI_DEC)
TBM930_AP_VNV_OFF#0 (>L:XMLVAR_VNAVButtonValue)
TBM930_AUTOPILOT_ALT_ON#(A:AUTOPILOT ALTITUDE LOCK, Bool) ! if{ (>K:AP_ALT_HOLD) }
TBM930_AUTOPILOT_ALT_TOGGLE#(>K:AP_ALT_HOLD)
TBM930_AUTOPILOT_APR_OFF#(>K:AP_APR_HOLD_OFF)
TBM930_AUTOPILOT_APR_TOGGLE#(>K:AP_APR_HOLD)
TBM930_AUTOPILOT_BC_OFF#(>K:AP_BC_HOLD_OFF)
TBM930_AUTOPILOT_CRS1_DEC#(>K:VOR1_OBI_DEC)
TBM930_AUTOPILOT_CRS2_INC#(>K:VOR2_OBI_INC)
TBM930_AUTOPILOT_CRS2_SYNC#(A:HEADING INDICATOR, Radians) 57.29 * (>K:VOR2_SET)
TBM930_AUTOPILOT_FD_ON#(A:AUTOPILOT FLIGHT DIRECTOR ACTIVE, Bool) ! if{ 1 (>K:TOGGLE_FLIGHT_DIRECTOR) }
TBM930_AUTOPILOT_FD_TOGGLE#1 (>K:TOGGLE_FLIGHT_DIRECTOR)
TBM930_AUTOPILOT_FLC_OFF#(A:AUTOPILOT FLIGHT LEVEL CHANGE, Bool) if{(>K:FLIGHT_LEVEL_CHANGE)}
TBM930_AUTOPILOT_FLC_TOGGLE#(>K:FLIGHT_LEVEL_CHANGE) (A:AIRSPEED INDICATED, Knots) (>K:AP_SPD_VAR_SET)
TBM930_AUTOPILOT_HDG_ON#(A:AUTOPILOT HEADING LOCK, Bool) ! if{ (>K:AP_PANEL_HEADING_HOLD) }
TBM930_AUTOPILOT_HDG_TOGGLE#(A:AUTOPILOT HEADING LOCK, Bool) ! (>K:AP_PANEL_HEADING_HOLD)
TBM930_AUTOPILOT_Heading_Sync#(A:HEADING INDICATOR, degrees) (>K:HEADING_BUG_SET)
TBM930_AUTOPILOT_IAS_DEC#(L:XMLVAR_AirSpeedIsInMach) if{ (>K:AP_MACH_VAR_DEC) } els{ (>K:AP_SPD_VAR_DEC) }
TBM930_AUTOPILOT_IAS_INC#(L:XMLVAR_AirSpeedIsInMach) if{ (>K:AP_MACH_VAR_INC) } els{ (>K:AP_SPD_VAR_INC) }
TBM930_AUTOPILOT_LVL_OFF#(A:AUTOPILOT WING LEVELER, Bool) if{ (>K:AP_WING_LEVELER) (A:AUTOPILOT MASTER, Bool) if{ (>K:AUTOPILOT_OFF) } (>K:AP_PITCH_LEVELER_OFF) }
TBM930_AUTOPILOT_MASTER_OFF#2 (>L:XMLVAR_APTrim) (A:AUTOPILOT DISENGAGED, Bool) ! if{ (>K:AUTOPILOT_DISENGAGE_TOGGLE) } (A:RUDDER TRIM DISABLED, Bool) ! if{ 1 (>K:RUDDER_TRIM_DISABLED_SET) } (A:AILERON TRIM DISABLED, Bool) ! if{ 1 (>K:AILERON_TRIM_DISABLED_SET) }
TBM930_AUTOPILOT_MASTER_ON#0 (>L:XMLVAR_APTrim) (A:AUTOPILOT DISENGAGED, Bool) if{ (>K:AUTOPILOT_DISENGAGE_TOGGLE) }
TBM930_AUTOPILOT_MASTER_TOGGLE#(A:AUTOPILOT DISENGAGED, Bool) if{ 0 (>L:XMLVAR_APTrim) (A:AUTOPILOT DISENGAGED, Bool) if{ (>K:AUTOPILOT_DISENGAGE_TOGGLE) } } els{ 2 (>L:XMLVAR_APTrim) (A:AUTOPILOT DISENGAGED, Bool) ! if{ (>K:AUTOPILOT_DISENGAGE_TOGGLE) } (A:RUDDER TRIM DISABLED, Bool) ! if{ 1 (>K:RUDDER_TRIM_DISABLED_SET) } (A:AILERON TRIM DISABLED, Bool) ! if{ 1 (>K:AILERON_TRIM_DISABLED_SET) } }
TBM930_AUTOPILOT_MASTER_TRIM_ONLY#1 (>L:XMLVAR_APTrim) (A:AUTOPILOT DISENGAGED, Bool) ! if{ (>K:AUTOPILOT_DISENGAGE_TOGGLE) } (A:RUDDER TRIM DISABLED, Bool) if{ 0 (>K:RUDDER_TRIM_DISABLED_SET) } (A:AILERON TRIM DISABLED, Bool) if{ 0 (>K:AILERON_TRIM_DISABLED_SET) }
TBM930_AUTOPILOT_MAX_BANK_ON#(A:AUTOPILOT MAX BANK, Radians) 0.5 > if{ (>K:AP_MAX_BANK_INC) }
TBM930_AUTOPILOT_MAX_BANK_TOGGLE#(>K:AP_MAX_BANK_INC)
TBM930_AUTOPILOT_NAV_TOGGLE#(>K:AP_NAV1_HOLD)
TBM930_AUTOPILOT_SPD_KTS#0 (>L:XMLVAR_AirSpeedIsInMach, Number)
TBM930_AUTOPILOT_SPD_MACH#1 (>L:XMLVAR_AirSpeedIsInMach, Number)
TBM930_AUTOPILOT_SPD_TOGGLE#(L:XMLVAR_AirSpeedIsInMach, Number) ! (>L:XMLVAR_AirSpeedIsInMach, Number)
TBM930_AUTOPILOT_TOGGLE#(A:AUTOPILOT DISENGAGED, Bool) ! if{ (>K:AP_MASTER) (L:XMLVAR_APTrim) 0 == if{ (A:AUTOPILOT YAW DAMPER, Bool) ! (A:AUTOPILOT MASTER, Bool) and if{ (>K:YAW_DAMPER_TOGGLE) } } (A:AUTOPILOT MASTER, Bool) ! if{ (>H:Generic_Autopilot_Manual_Off) } }
TBM930_AUTOPILOT_VNV_TOGGLE#(L:XMLVAR_VNAVButtonValue) ! (>L:XMLVAR_VNAVButtonValue)
TBM930_AUTOPILOT_VS_OFF#(A:AUTOPILOT VERTICAL HOLD, Bool) if{ (>K:AP_PANEL_VS_HOLD) }
TBM930_AUTOPILOT_VS_TOGGLE#(>K:AP_PANEL_VS_HOLD)
TBM930_AUTOPILOT_YD_OFF#(A:AUTOPILOT YAW DAMPER, Bool) if{ (>K:YAW_DAMPER_TOGGLE) }
TBM930_BARO_DEC#1 (>K:KOHLSMAN_DEC) (>H:AP_BARO_DOWN)
TBM930_BARO_INC#1 (>K:KOHLSMAN_INC) (>H:AP_BARO_UP)
TBM930_BARO_SYNC#1 (>K:BAROMETRIC)
//Asobo/TBM 930/Avionics
G3000_TSC_Bottom_Knob_Inc#(>H:AS3000_TSC_Horizontal_1_BottomKnob_Small_INC)
G3000_TSC_Bottom_Knob_Push#(>H:AS3000_TSC_Horizontal_1_BottomKnob_Push)
TSC_2_Bottom_Knob_DEC#(>H:AS3000_TSC_Horizontal_2_BottomKnob_Small_DEC)
TSC_2_Bottom_Knob_INC#(>H:AS3000_TSC_Horizontal_2_BottomKnob_Small_INC)
TSC_2_Softkey_1#(>H:AS3000_TSC_Horizontal_2_SoftKey_1) 1 (>O:_ButtonAnimVar) 
TSC_2_Softkey_2#(>H:AS3000_TSC_Horizontal_2_SoftKey_2) 1 (>O:_ButtonAnimVar) 
TSC_2_Softkey_3#(>H:AS3000_TSC_Horizontal_2_SoftKey_3) 1 (>O:_ButtonAnimVar) 
TBM930_PFD_1_SOFTKEYS_1#1 (>H:AS3000_PFD_1_SOFTKEYS_1)
TBM930_PFD_1_SOFTKEYS_10#1 (>H:AS3000_PFD_1_SOFTKEYS_10)
TBM930_PFD_1_SOFTKEYS_11#1 (>H:AS3000_PFD_1_SOFTKEYS_11)
TBM930_PFD_1_SOFTKEYS_12#1 (>H:AS3000_PFD_1_SOFTKEYS_12)
TBM930_PFD_1_SOFTKEYS_2#1 (>H:AS3000_PFD_1_SOFTKEYS_2)
TBM930_PFD_1_SOFTKEYS_3#1 (>H:AS3000_PFD_1_SOFTKEYS_3)
TBM930_PFD_1_SOFTKEYS_4#1 (>H:AS3000_PFD_1_SOFTKEYS_4)
TBM930_PFD_1_SOFTKEYS_5#1 (>H:AS3000_PFD_1_SOFTKEYS_5)
TBM930_PFD_1_SOFTKEYS_6#1 (>H:AS3000_PFD_1_SOFTKEYS_6)
TBM930_PFD_1_SOFTKEYS_7#1 (>H:AS3000_PFD_1_SOFTKEYS_7)
TBM930_PFD_1_SOFTKEYS_8#1 (>H:AS3000_PFD_1_SOFTKEYS_8)
TBM930_PFD_1_SOFTKEYS_9#1 (>H:AS3000_PFD_1_SOFTKEYS_9)
TBM930_PFD_2_SOFTKEYS_1#1 (>H:AS3000_PFD_2_SOFTKEYS_1)
TBM930_PFD_2_SOFTKEYS_10#1 (>H:AS3000_PFD_2_SOFTKEYS_10)
TBM930_PFD_2_SOFTKEYS_11#1 (>H:AS3000_PFD_2_SOFTKEYS_11)
TBM930_PFD_2_SOFTKEYS_12#1 (>H:AS3000_PFD_2_SOFTKEYS_12)
TBM930_PFD_2_SOFTKEYS_2#1 (>H:AS3000_PFD_2_SOFTKEYS_2)
TBM930_PFD_2_SOFTKEYS_3#1 (>H:AS3000_PFD_2_SOFTKEYS_3)
TBM930_PFD_2_SOFTKEYS_4#1 (>H:AS3000_PFD_2_SOFTKEYS_4)
TBM930_PFD_2_SOFTKEYS_5#1 (>H:AS3000_PFD_2_SOFTKEYS_5)
TBM930_PFD_2_SOFTKEYS_6#1 (>H:AS3000_PFD_2_SOFTKEYS_6)
TBM930_PFD_2_SOFTKEYS_7#1 (>H:AS3000_PFD_2_SOFTKEYS_7)
TBM930_PFD_2_SOFTKEYS_8#1 (>H:AS3000_PFD_2_SOFTKEYS_8)
TBM930_PFD_2_SOFTKEYS_9#1 (>H:AS3000_PFD_2_SOFTKEYS_9)
TBM930_PFD_3_SOFTKEYS_1#1 (>H:AS3000_PFD_3_SOFTKEYS_1)
TBM930_PFD_3_SOFTKEYS_10#1 (>H:AS3000_PFD_3_SOFTKEYS_10)
TBM930_PFD_3_SOFTKEYS_11#1 (>H:AS3000_PFD_3_SOFTKEYS_11)
TBM930_PFD_3_SOFTKEYS_12#1 (>H:AS3000_PFD_3_SOFTKEYS_12)
TBM930_PFD_3_SOFTKEYS_2#1 (>H:AS3000_PFD_3_SOFTKEYS_2)
TBM930_PFD_3_SOFTKEYS_3#1 (>H:AS3000_PFD_3_SOFTKEYS_3)
TBM930_PFD_3_SOFTKEYS_4#1 (>H:AS3000_PFD_3_SOFTKEYS_4)
TBM930_PFD_3_SOFTKEYS_5#1 (>H:AS3000_PFD_3_SOFTKEYS_5)
TBM930_PFD_3_SOFTKEYS_6#1 (>H:AS3000_PFD_3_SOFTKEYS_6)
TBM930_PFD_3_SOFTKEYS_7#1 (>H:AS3000_PFD_3_SOFTKEYS_7)
TBM930_PFD_3_SOFTKEYS_8#1 (>H:AS3000_PFD_3_SOFTKEYS_8)
TBM930_PFD_3_SOFTKEYS_9#1 (>H:AS3000_PFD_3_SOFTKEYS_9)
TSC_1_Softkey_1#(>H:AS3000_TSC_Horizontal_1_SoftKey_1) 1 (>O:_ButtonAnimVar) 
TSC_1_Softkey_2#(>H:AS3000_TSC_Horizontal_1_SoftKey_2) 1 (>O:_ButtonAnimVar) 
TSC_1_Softkey_3#(>H:AS3000_TSC_Horizontal_1_SoftKey_3) 1 (>O:_ButtonAnimVar) 
TSC_Bottom_Knob_DEC#(>H:AS3000_TSC_Horizontal_1_BottomKnob_Small_DEC)
TSC_1_TOP_BUTTON_PUSH#>H:AS3000_TSC_Horizontal_1_TopKnob_Push
//Asobo/TBM 930/Electrical
TBM930_ELECTRICAL_SOURCE_BATT#1 (>L:XMLVAR_ElecSource, Number) (A:ELECTRICAL MASTER BATTERY, Bool) ! if{ (>K:TOGGLE_MASTER_BATTERY) }
TBM930_ELECTRICAL_SOURCE_GPU#0 (>L:XMLVAR_ElecSource, Number) (A:ELECTRICAL MASTER BATTERY, Bool) if{ (>K:TOGGLE_MASTER_BATTERY) }
TBM930_ELECTRICAL_SOURCE_OFF#2 (>L:XMLVAR_ElecSource, Number) (A:ELECTRICAL MASTER BATTERY, Bool) if{ (>K:TOGGLE_MASTER_BATTERY) }
TBM930_GENERATOR_MAIN#1 (>L:XMLVAR_ElecGen, Number) (A:GENERAL ENG MASTER ALTERNATOR:1, Bool) ! if{ (>K:TOGGLE_ALTERNATOR1) }
TBM930_GENERATOR_OFF#2 (>L:XMLVAR_ElecGen, Number) (A:GENERAL ENG MASTER ALTERNATOR:1, Bool) if{ (>K:TOGGLE_ALTERNATOR1) }
TBM930_GENERATOR_STANDBY#0 (>L:XMLVAR_ElecGen, Number) (A:GENERAL ENG MASTER ALTERNATOR:1, Bool) ! if{ (>K:TOGGLE_ALTERNATOR1) }
//Asobo/TBM 930/Engines
TBM930_IGNITION_AUTO#1 (>A:TURB ENG IGNITION SWITCH EX1:1, Enum) 1 (>L:XMLVAR_Ignition)
TBM930_IGNITION_OFF#0 (>A:TURB ENG IGNITION SWITCH EX1:1, Enum) 0 (>L:XMLVAR_Ignition)
TBM930_IGNITION_ON#2 (>A:TURB ENG IGNITION SWITCH EX1:1, Enum) 0 (>L:XMLVAR_Ignition)
TBM930_STARTER_ABORT#2 (>L:XMLVAR_Starter, Number) (A:GENERAL ENG STARTER:1, Bool) if{ (>K:TOGGLE_STARTER1) }
TBM930_STARTER_ON#0 (>L:XMLVAR_Starter, Number) (A:GENERAL ENG STARTER:1, Bool) ! if{ (>K:TOGGLE_STARTER1) }
//Asobo/TBM 930/Fuel
TBM930_AUX_BP_AUTO#2 s0 (A:GENERAL ENG FUEL PUMP SWITCH EX1:1, Enum) != if{ l0 (>K:ELECT_FUEL_PUMP1_SET) } 
TBM930_AUX_BP_OFF#0 s0 (A:GENERAL ENG FUEL PUMP SWITCH EX1:1, Enum) != if{ l0 (>K:ELECT_FUEL_PUMP1_SET) }
TBM930_AUX_BP_ON#1 s0 (A:GENERAL ENG FUEL PUMP SWITCH EX1:1, Enum) != if{ l0 (>K:ELECT_FUEL_PUMP1_SET) } 
TBM930_FUEL_SELECTOR_AUTO#
TBM930_FUEL_SELECTOR_MANUAL#
TBM930_SHIFT_FUEL_TANK#(A:FUEL TANK SELECTOR:1, Enum) 2 == if{ (>K:FUEL_SELECTOR_RIGHT) } els{ (>K:FUEL_SELECTOR_LEFT) }
//Asobo/TBM 930/Gear
TBM930_LANDING_GEAR_DOWN#(>K:GEAR_DOWN)
TBM930_LANDING_GEAR_UP#(>K:GEAR_UP)
//Asobo/TBM 930/Lights
TBM930_DIMMER_OFF#
TBM930_DIMMER_ON#
TBM930_DIMMER_TOGGLE#
TBM930_LANDING_TAXI_OFF_State_0#1 (A:LIGHT LANDING, Bool) != if{ (>K:LANDING_LIGHTS_TOGGLE) } 0 (A:LIGHT LOGO, Bool) != if{ (>K:TOGGLE_LOGO_LIGHTS) } 0 (A:LIGHT TAXI, Bool) != if{ (>K:TOGGLE_TAXI_LIGHTS) } 0 (>L:XMLVAR_LANDING_TAXI_OFF_Switch_Position)
TBM930_LANDING_TAXI_OFF_State_1#0 (A:LIGHT LANDING, Bool) != if{ (>K:LANDING_LIGHTS_TOGGLE) } 1 (A:LIGHT TAXI, Bool) != if{ (>K:TOGGLE_TAXI_LIGHTS) } 1 (>L:XMLVAR_LANDING_TAXI_OFF_Switch_Position)
TBM930_LANDING_TAXI_OFF_State_2#0 (A:LIGHT LANDING, Bool) != if{ (>K:LANDING_LIGHTS_TOGGLE) } 0 (A:LIGHT TAXI, Bool) != if{ (>K:TOGGLE_TAXI_LIGHTS) } 2 (>L:XMLVAR_LANDING_TAXI_OFF_Switch_Position)
TBM930_NAV_LIGHT_OFF#(A:LIGHT NAV, Bool) if{ (>K:TOGGLE_NAV_LIGHTS) }
TBM930_NAV_LIGHT_ON#(A:LIGHT NAV, Bool) ! if{ (>K:TOGGLE_NAV_LIGHTS) }
TBM930_NAV_LIGHT_TOGGLE#(>K:TOGGLE_NAV_LIGHTS)
TBM930_PANEL_LIGHT_DEC#(A:LIGHT POTENTIOMETER:4, Percent) 5 - 0 max 4 (>K:2:LIGHT_POTENTIOMETER_SET) (A:LIGHT PANEL, Bool) (A:LIGHT POTENTIOMETER:4, Percent) 5 < and if{ 0 (>K:PANEL_LIGHTS_SET) }
TBM930_PANEL_LIGHT_INC#(A:LIGHT POTENTIOMETER:4, Percent) 5 + 100 min 4 (>K:2:LIGHT_POTENTIOMETER_SET) (A:LIGHT PANEL, Bool) ! (A:LIGHT POTENTIOMETER:4, Percent) 5 > and if{ 1 (>K:PANEL_LIGHTS_SET) }
TBM930_STROBE_LIGHT_OFF#(>K:STROBES_OFF)
TBM930_STROBE_LIGHT_ON#(>K:STROBES_ON)
TBM930_STROBE_LIGHT_TOGGLE#(>K:STROBES_TOGGLE)
TBM_ACCESS_LIGHT_ON#N/A Does not work without below workaround
TBM_CABIN_LIGHT_ON#N/A does not work without below work around
//Asobo/TBM 930/Miscellaneous
TBM930_BACK_DOOR_LEVER_SWITCH#(L:XMLVAR_TBM930_BackDoor_State) 100 * 0 > (A:SIM ON GROUND, Bool) (A:AIRSPEED TRUE, Knots) 30 < and or if{ (L:XMLVAR_TBM930_BackDoor_Unlock) if{ 2 (>K:TOGGLE_AIRCRAFT_EXIT_FAST) (L:XMLVAR_TBM930_BackDoor_State) ! (>L:XMLVAR_TBM930_BackDoor_State) } els{ (A:EXIT OPEN:1, Bool) if{ 0 (>L:XMLVAR_TBM930_BackDoor_State) 2 (>K:TOGGLE_AIRCRAFT_EXIT_FAST) } }
TBM930_BACK_DOOR_LOCK_SWITCH#(L:XMLVAR_TBM930_BackDoor_Unlock) ! (>L:XMLVAR_TBM930_BackDoor_Unlock)
TBM930_CARGO_DOOR_LEVER_SWITCH#(L:XMLVAR_TBM930_CargoDoor_State) 100 * 0 > (A:SIM ON GROUND, Bool) (A:AIRSPEED TRUE, Knots) 30 < and or if{ (A:SIM ON GROUND, Bool) (A:AIRSPEED TRUE, Knots) 30 < and if{ 3 (>K:TOGGLE_AIRCRAFT_EXIT_FAST) (L:XMLVAR_TBM930_CargoDoor_State) ! (>L:XMLVAR_TBM930_CargoDoor_State) } els{ (A:EXIT OPEN:2, Bool) if{ 0 (>L:XMLVAR_TBM930_CargoDoor_State) 3 (>K:TOGGLE_AIRCRAFT_EXIT_FAST) } }
TBM930_COPILOT_VISOR_LEFT-RIGHT_DEC#(L:XMLVAR_SunVisorX_2, Number) 0 > if{ (L:XMLVAR_SunVisorX_2, Number) -- (>L:XMLVAR_SunVisorX_2) }
TBM930_COPILOT_VISOR_LEFT-RIGHT_INC#(L:XMLVAR_SunVisorX_2, Number) 100 < if{ (L:XMLVAR_SunVisorX_2, Number) ++ (>L:XMLVAR_SunVisorX_2) }
TBM930_COPILOT_VISOR_UP-DOWN_DEC#(L:XMLVAR_SunVisorY_2, Number) 0 > if{ (L:XMLVAR_SunVisorY_2, Number) -- (>L:XMLVAR_SunVisorY_2) }
TBM930_COPILOT_VISOR_UP-DOWN_INC#(L:XMLVAR_SunVisorY_2, Number) 100 < if{ (L:XMLVAR_SunVisorY_2, Number) ++ (>L:XMLVAR_SunVisorY_2) }
TBM930_CRASH_BAR_DOWN#2 (>L:XMLVAR_ElecSource, Number) (A:ELECTRICAL MASTER BATTERY, Bool) if{ (>K:TOGGLE_MASTER_BATTERY) } 2 (>L:XMLVAR_ElecGen, Number) (A:GENERAL ENG MASTER ALTERNATOR:1, Bool) if{ (>K:TOGGLE_ALTERNATOR1) } 0 (>L:XMLVAR_CrashLeverPos, Number)
TBM930_CRASH_BAR_UP#1 (>L:XMLVAR_CrashLeverPos, Number)
TBM930_FRONT_DOOR_LEVER_SWITCH#(L:XMLVAR_TBM930_FrontDoor_State) 100 * 0 > (A:SIM ON GROUND, Bool) (A:AIRSPEED TRUE, Knots) 30 < and or if{ (L:XMLVAR_TBM930_FrontDoor_Unlock) if{ 1 (>K:TOGGLE_AIRCRAFT_EXIT_FAST) (L:XMLVAR_TBM930_FrontDoor_State) ! (>L:XMLVAR_TBM930_FrontDoor_State) } els{ (A:EXIT OPEN:0, Bool) if{ 0 (>L:XMLVAR_TBM930_FrontDoor_State) 1 (>K:TOGGLE_AIRCRAFT_EXIT_FAST) } }
TBM930_FRONT_DOOR_LOCK_SWITCH#(L:XMLVAR_TBM930_FrontDoor_Unlock) ! (>L:XMLVAR_TBM930_FrontDoor_Unlock)
TBM930_PILOT_VISOR_LEFT-RIGHT_DEC#(L:XMLVAR_SunVisorX_1, Number) 100 < if{ (L:XMLVAR_SunVisorX_1, Number) ++ (>L:XMLVAR_SunVisorX_1) }
TBM930_PILOT_VISOR_LEFT-RIGHT_INC#(L:XMLVAR_SunVisorX_1, Number) 0 > if{ (L:XMLVAR_SunVisorX_1, Number) -- (>L:XMLVAR_SunVisorX_1) }
TBM930_PILOT_VISOR_UP-DOWN_DEC#(L:XMLVAR_SunVisorY_1, Number) 0 > if{ (L:XMLVAR_SunVisorY_1, Number) -- (>L:XMLVAR_SunVisorY_1) }
TBM930_PILOT_VISOR_UP-DOWN_INC#(L:XMLVAR_SunVisorY_1, Number) 100 < if{ (L:XMLVAR_SunVisorY_1, Number) ++ (>L:XMLVAR_SunVisorY_1) }
TBM930_SHOW-HIDE_COPILOT_SWITCH#(L:XMLVAR_TBM930_HideCoPilot) ! (>L:XMLVAR_TBM930_HideCoPilot)
TBM930_SHOW-HIDE_PILOT_SWITCH#(L:XMLVAR_TBM930_HidePilot) ! (>L:XMLVAR_TBM930_HidePilot)
TBM930_SWAP_ACTION_LEFT-RIGHT_UP-DOWN_ENCODER_SWITCH#(L:TBM930_VISOR_SWAP_LR-UD_SWAP-SWITCH_POS) ! (>L:TBM930_VISOR_SWAP_LR-UD_SWAP-SWITCH_POS)
//Asobo/TBM 930/Warning System
TBM930_ELT_ARM#(>K:ELT_OFF)
TBM930_ELT_ON#(>K:ELT_ON) (E:SIMULATION TIME, seconds) (>L:XMLVAR_ELT_ACTIVATION_TIME, Number)
TBM930_ELT_TEST#3 (>L:XMLVAR_ELT_STATE, Number) (E:SIMULATION TIME, seconds) (>L:XMLVAR_ELT_TEST_TIME, Number)
TBM930_MASTER_CAUTION_PUSH#1 (>H:Generic_Master_Caution_Push, Number)
TBM930_MASTER_WARNING_PUSH#1 (>H:Generic_Master_Warning_Push, Number)
//Asobo/XCub/Anti-Ice
XCUB_CARB_HEAT_TOGGLE#(>K:ANTI_ICE_TOGGLE_ENG1)
//Asobo/XCub/Autopilot
XCUB_ALT_DEC_100#100 (>K:AP_ALT_VAR_DEC)
XCUB_ALT_DEC_1000#1000 (>K:AP_ALT_VAR_DEC)
XCUB_ALT_INC_1000#1000 (>K:AP_ALT_VAR_INC)
XCUB_AP_ALT_INC_100#100 (>K:AP_ALT_VAR_INC)
XCUB_AP_ALT_PUSH#(A:INDICATED ALTITUDE, feet) (>K:AP_ALT_VAR_SET_ENGLISH)
XCUB_AP_ALT_TOGGLE#(>K:AP_ALT_HOLD)
XCUB_AP_APR_TOGGLE#(>K:AP_APR_HOLD)
XCUB_AP_FD_TOGGLE#(A:AUTOPILOT MASTER, Bool) ! if{ 1 (>K:TOGGLE_FLIGHT_DIRECTOR) }
XCUB_AP_FLC_DEC_1#(>K:AP_SPD_VAR_DEC)
XCUB_AP_FLC_DEC_10#(A:AUTOPILOT AIRSPEED HOLD VAR, Knots) 10 - (>K:AP_SPD_VAR_SET)
XCUB_AP_FLC_INC_1#(>K:AP_SPD_VAR_INC)
XCUB_AP_FLC_INC_10#(A:AUTOPILOT AIRSPEED HOLD VAR, Knots) 10 + (>K:AP_SPD_VAR_SET)
XCUB_AP_FLC_TOGGLE#(>K:FLIGHT_LEVEL_CHANGE) (A:AUTOPILOT FLIGHT LEVEL CHANGE, bool) if { (A:AIRSPEED INDICATED, knots) (>K:AP_SPD_VAR_SET) }
XCUB_AP_HDG_DEC_1#1 (>K:HEADING_BUG_DEC)
XCUB_AP_HDG_DEC_5#5 (>K:HEADING_BUG_DEC)
XCUB_AP_HDG_INC_1#1 (>K:HEADING_BUG_INC)
XCUB_AP_HDG_INC_5#5 (>K:HEADING_BUG_INC)
XCUB_AP_HDG_TOGGLE#(>K:AP_PANEL_HEADING_HOLD)
XCUB_AP_NAV_TOGGLE#(>K:AP_NAV1_HOLD)
XCUB_AP_VS_DEC#(>K:AP_VS_VAR_DEC)
XCUB_AP_VS_INC#(>K:AP_VS_VAR_INC)
XCUB_AP_VS_TOGGLE#(>K:AP_PANEL_VS_HOLD)
//Asobo/XCub/Electrical
XCUB_ALT_FIELD_OFF#0 (>K:2:ALTERNATOR_SET) 
XCUB_ALT_FIELD_ON#1 (>K:2:ALTERNATOR_SET)
XCUB_ELECTRICAL_AVIONICS_OFF#0 (>K:AVIONICS_MASTER_SET)
XCUB_ELECTRICAL_AVIONICS_ON#1 (>K:AVIONICS_MASTER_SET)
XCUB_ELECTRICAL_STARTER_OFF#0 (>K:SET_STARTER1_HELD)
XCUB_ELECTRICAL_STARTER_ON#1 (>K:SET_STARTER1_HELD)
XCUB_MASTER_BATTERY_OFF#(A:ELECTRICAL MASTER BATTERY:1, Bool) if{ 1 (>K:TOGGLE_MASTER_BATTERY) }
XCUB_MASTER_BATTERY_ON#(A:ELECTRICAL MASTER BATTERY:1, Bool) ! if{ 1 (>K:TOGGLE_MASTER_BATTERY) }
//Asobo/XCub/Engine
XCUB_ENGINE_IGN_LH_OFF#(A:RECIP ENG LEFT MAGNETO:1, Bool) if{ (>K:MAGNETO1_LEFT) }
XCUB_ENGINE_IGN_LH_ON#(A:RECIP ENG LEFT MAGNETO:1, Bool) ! if{ (>K:MAGNETO1_LEFT) }
XCUB_ENGINE_IGN_RH_OFF#(A:RECIP ENG RIGHT MAGNETO:1, Bool) if{ (>K:MAGNETO1_RIGHT) }
XCUB_ENGINE_IGN_RH_ON#(A:RECIP ENG RIGHT MAGNETO:1, Bool) ! if{ (>K:MAGNETO1_RIGHT) }
XCUB_ENGINE_LH_OFF_RH_ON#(A:RECIP ENG RIGHT MAGNETO:1, Bool) ! if{ (>K:MAGNETO1_RIGHT) } (A:RECIP ENG LEFT MAGNETO:1, Bool) if{ (>K:MAGNETO1_LEFT) }
XCUB_ENGINE_LH_ON_RH_OFF#(A:RECIP ENG LEFT MAGNETO:1, Bool) ! if{ (>K:MAGNETO1_LEFT) } (A:RECIP ENG RIGHT MAGNETO:1, Bool) if{ (>K:MAGNETO1_RIGHT) }
XCUB_ENGINE_LH_ON_RH_ON#(A:RECIP ENG LEFT MAGNETO:1, Bool) ! if{ (>K:MAGNETO1_LEFT) } (A:RECIP ENG RIGHT MAGNETO:1, Bool) ! if{ (>K:MAGNETO1_RIGHT) }
//Asobo/XCub/Fuel
XCUB_FUEL_PUMP_OFF#0 (>K:ELECT_FUEL_PUMP1_SET) 
XCUB_FUEL_PUMP_ON#1 (>K:ELECT_FUEL_PUMP1_SET) 
XCUB_FUEL_SELECTOR_LEFT#(>K:FUEL_SELECTOR_LEFT)
XCUB_FUEL_SELECTOR_OFF#(>K:FUEL_SELECTOR_OFF)
XCUB_FUEL_SELECTOR_RIGHT#(>K:FUEL_SELECTOR_RIGHT)
XCUB_FUEL_SELECTOR_TOGGLE#(A:FUEL TANK SELECTOR:1, Enum) 2 == if{ (>K:FUEL_SELECTOR_RIGHT) } els{ (>K:FUEL_SELECTOR_LEFT) }
//Asobo/XCub/Gear
XCUB_PARKING_BRAKE_OFF#0 (>K:PARKING_BRAKE_SET)
XCUB_PARKING_BRAKE_ON#1 (>K:PARKING_BRAKE_SET)
//Asobo/XCub/Lights
XCUB_AUX_DIMMER#@ s0 (>L:LIGHTING_PANEL_1) l0 2 (>K:2:LIGHT_POTENTIOMETER_SET) 
XCUB_PLACARDS_DIMMER#@ s0 (>L:LIGHTING_PANEL_1) l0 3 (>K:2:LIGHT_POTENTIOMETER_SET) 
XCUB_NAV_OFF#0 s0 1 l0 (>K:2:NAV_LIGHTS_SET) l0 (>L:LIGHTING_NAV_1)
XCUB_NAV_ON#1 s0 1 l0 (>K:2:NAV_LIGHTS_SET) l0 (>L:LIGHTING_NAV_1)
XCUB_PULSE_ON#100 s0 7 (>K:2:LIGHT_POTENTIOMETER_SET) l0 (>L:LIGHTING_POTENTIOMETER_7)
XCUB_PULSE_STANDBY#0 s0 7 (>K:2:LIGHT_POTENTIOMETER_SET) l0 (>L:LIGHTING_POTENTIOMETER_7)
XCUB_STROBE_OFF#0 s0 1 l0 (>K:2:STROBES_SET) l0 (>L:LIGHTING_STROBE_1) 
XCUB_STROBE_ON#1 s0 1 l0 (>K:2:STROBES_SET) l0 (>L:LIGHTING_STROBE_1) 
//Bredok3d/737-MAX/EFIS
737_AS01B_PFD_Mins_DEC#(>H:AS01B_PFD_Mins_DEC)
737_AS01B_PFD_Mins_INC#(>H:AS01B_PFD_Mins_INC)
737_AS01B_PFD_Mins_Press#(>H:AS01B_PFD_Mins_Press)
737_XMLVAR_Mins_Selector_Baro_BARO#1 (>L:XMLVAR_Mins_Selector_Baro)
737_XMLVAR_Mins_Selector_Baro_RADIO#0 (>L:XMLVAR_Mins_Selector_Baro)
AS01B_MFD_1_AUTOPILOT_CTR#(>H:AS01B_MFD_1_AUTOPILOT_CTR)
AS01B_MFD_1_CHKL#(>H:AS01B_MFD_1_CHKL)
AS01B_MFD_1_COMM#(>H:AS01B_MFD_1_COMM)
AS01B_MFD_1_Cursor_DEC#(>H:AS01B_MFD_1_Cursor_DEC)
AS01B_MFD_1_Cursor_INC#(>H:AS01B_MFD_1_Cursor_INC)
AS01B_MFD_1_Cursor_Press#(>H:AS01B_MFD_1_Cursor_Press)
AS01B_MFD_1_EICAS#(>H:AS01B_MFD_1_EICAS)
AS01B_MFD_1_ENG#(>H:AS01B_MFD_1_ENG)
AS01B_MFD_1_INFO#(>H:AS01B_MFD_1_INFO)
AS01B_MFD_1_ND#(>H:AS01B_MFD_1_ND)
AS01B_MFD_1_Range_DEC#(>H:AS01B_MFD_1_Range_DEC)
AS01B_MFD_1_Range_INC#(>H:AS01B_MFD_1_Range_INC)
AS01B_MFD_1_SYS#(>H:AS01B_MFD_1_SYS)
AS01B_MFD_1_TERR#(>H:AS01B_MFD_1_TERR)
AS01B_MFD_1_TFC#(>H:AS01B_MFD_1_TFC)
AS01B_MFD_1_WXR#(>H:AS01B_MFD_1_WXR)
AS01B_MFD_2_AUTOPILOT_CTR#(>H:AS01B_MFD_2_AUTOPILOT_CTR)
AS01B_MFD_2_Cursor_DEC#(>H:AS01B_MFD_2_Cursor_DEC)
AS01B_MFD_2_Cursor_INC#(>H:AS01B_MFD_2_Cursor_INC)
AS01B_MFD_2_Cursor_Press#(>H:AS01B_MFD_2_Cursor_Press)
AS01B_MFD_2_Range_DEC#(>H:AS01B_MFD_2_Range_DEC)
AS01B_MFD_2_Range_INC#(>H:AS01B_MFD_2_Range_INC)
AS01B_PFD_Mins_DEC#(>H:AS01B_PFD_Mins_DEC)
AS01B_PFD_Mins_INC#(>H:AS01B_PFD_Mins_INC)
AS01B_PFD_Mins_Press#(>H:AS01B_PFD_Mins_Press)
KNOB_Baro_1_DEC#(L:XMLVAR_Baro1_ForcedToSTD) ! if{ 1 (>K:KOHLSMAN_DEC) }
KNOB_Baro_1_INC#(L:XMLVAR_Baro1_ForcedToSTD) ! if{ 1 (>K:KOHLSMAN_INC) }
KNOB_Baro_1_Press#(L:XMLVAR_Baro1_ForcedToSTD) ! (>L:XMLVAR_Baro1_ForcedToSTD) (L:XMLVAR_Baro1_ForcedToSTD) if{ (A:KOHLSMAN SETTING MB:1, mbars) 16 * (>L:XMLVAR_Baro1_SavedPressure) 1 (>K:BAROMETRIC_STD_PRESSURE) } els{ 1 (L:XMLVAR_Baro1_SavedPressure) (>K:2:KOHLSMAN_SET) }
KNOB_Baro_2_DEC#(L:XMLVAR_Baro1_ForcedToSTD) ! if{ 1 (>K:KOHLSMAN_DEC) }
KNOB_Baro_2_INC#(L:XMLVAR_Baro1_ForcedToSTD) ! if{ 1 (>K:KOHLSMAN_INC) }
KNOB_Baro_2_Press#(L:XMLVAR_Baro1_ForcedToSTD) ! (>L:XMLVAR_Baro1_ForcedToSTD) (L:XMLVAR_Baro1_ForcedToSTD) if{ (A:KOHLSMAN SETTING MB:1, mbars) 16 * (>L:XMLVAR_Baro1_SavedPressure) 1 (>K:BAROMETRIC_STD_PRESSURE) } els{ 1 (L:XMLVAR_Baro1_SavedPressure) (>K:2:KOHLSMAN_SET) }
XMLVAR_Baro_Selector_HPA_1_HPA#1 (>L:XMLVAR_Baro_Selector_HPA_1)
XMLVAR_Baro_Selector_HPA_1_IN#0 (>L:XMLVAR_Baro_Selector_HPA_1)
XMLVAR_Baro_Selector_HPA_2_HPA#1 (>L:XMLVAR_Baro_Selector_HPA_2)
XMLVAR_Baro_Selector_HPA_2_IN#0 (>L:XMLVAR_Baro_Selector_HPA_2)
XMLVAR_Mins_Selector_Baro_BARO#1 (>L:XMLVAR_Mins_Selector_Baro)
XMLVAR_Mins_Selector_Baro_RADIO#0 (>L:XMLVAR_Mins_Selector_Baro)
//Carenado/PA34/Autopilot
Autopilot_Master_On#(>K:AP_MASTER)
//Carenado/C170B/Lights
C170B_MAP_LIGHT_OFF#3 0 (>K:2:CABIN_LIGHTS_SET) 
C170B_MAP_LIGHT_ON#3 1 (>K:2:CABIN_LIGHTS_SET) 
C170B_MAP_LIGHT_TOGGLE#3 (>K:TOGGLE_CABIN_LIGHTS)
C170B_RED_CABIN_LIGHT_OFF#1 0 (>K:2:CABIN_LIGHTS_SET) 
C170B_RED_CABIN_LIGHT_ON#1 1 (>K:2:CABIN_LIGHTS_SET) 
C170B_RED_CABIN_LIGHT_TOGGLE#1 (>K:TOGGLE_CABIN_LIGHTS)
C170B_WHITE_CABIN_LIGHT_OFF#2 0 (>K:2:CABIN_LIGHTS_SET) 
C170B_WHITE_CABIN_LIGHT_ON#2 1 (>K:2:CABIN_LIGHTS_SET) 
C170B_WHITE_CABIN_LIGHT_TOGGLE#2 (>K:TOGGLE_CABIN_LIGHTS)
//Carenado/M20R OVATION/Autopilot
KAS297_ALT_ARM_PUSH#1 (>L:KAS297_ALT_ARM_PUSH)
KAS297_ALT_DEC_100# (L:CUSTOM_AP_ALT_VAR_SET_ENGLISH, feet) 100 - 0 max (>L:CUSTOM_AP_ALT_VAR_SET_ENGLISH, feet)
KAS297_ALT_DEC_1000# (L:CUSTOM_AP_ALT_VAR_SET_ENGLISH, feet) 1000 - 0 max (>L:CUSTOM_AP_ALT_VAR_SET_ENGLISH, feet)
KAS297_ALT_INC_100# (L:CUSTOM_AP_ALT_VAR_SET_ENGLISH, feet) (L:CUSTOM_AP_ALT_VAR_SET_ENGLISH, feet) 100 + (>L:CUSTOM_AP_ALT_VAR_SET_ENGLISH)
KAS297_ALT_INC_1000# (L:CUSTOM_AP_ALT_VAR_SET_ENGLISH, feet) (L:CUSTOM_AP_ALT_VAR_SET_ENGLISH, feet) 1000 + (>L:CUSTOM_AP_ALT_VAR_SET_ENGLISH)
KAS297_AP_SELECT_ALT_OR_VS# (L:GAUGE_ALT_ALERT_MODE, Number) 0 == if{ 1 (>L:GAUGE_ALT_ALERT_MODE, Number) } els{ (L:GAUGE_ALT_ALERT_MODE, Number) 1 == if{ 0 (>L:GAUGE_ALT_ALERT_MODE, Number) }
//FenixSim/A320/ADIRS
FNX320_ADIRS_ADR_1_Button_Press#1 (>L:S_OH_NAV_ADR1)
FNX320_ADIRS_ADR_1_Button_Release#0 (>L:S_OH_NAV_ADR1)
FNX320_ADIRS_ADR_2_Button_Press#1 (>L:S_OH_NAV_ADR2)
FNX320_ADIRS_ADR_2_Button_Release#0 (>L:S_OH_NAV_ADR2)
FNX320_ADIRS_ADR_3_Button_Press#1 (>L:S_OH_NAV_ADR3)
FNX320_ADIRS_ADR_3_Button_Release#0 (>L:S_OH_NAV_ADR3)
FNX320_ADIRS_Data_Selector_Knob_Dec#(L:S_OH_NAV_DATA_DISP) 0.1 - 0 max (>L:S_OH_NAV_DATA_DISP)
FNX320_ADIRS_Data_Selector_Knob_Inc#(L:S_OH_NAV_DATA_DISP) 0.1 + 1 min (>L:S_OH_NAV_DATA_DISP)
FNX320_ADIRS_IR_1_Knob_ATT#2 (>L:S_OH_NAV_IR1_MODE)
FNX320_ADIRS_IR_1_Knob_NAV#1 (>L:S_OH_NAV_IR1_MODE)
FNX320_ADIRS_IR_1_Knob_OFF#0 (>L:S_OH_NAV_IR1_MODE)
FNX320_ADIRS_IR_2_Knob_ATT#2 (>L:S_OH_NAV_IR2_MODE)
FNX320_ADIRS_IR_2_Knob_NAV#1 (>L:S_OH_NAV_IR2_MODE)
FNX320_ADIRS_IR_2_Knob_OFF#0 (>L:S_OH_NAV_IR2_MODE)
FNX320_ADIRS_IR_3_Knob_ATT#2 (>L:S_OH_NAV_IR3_MODE)
FNX320_ADIRS_IR_3_Knob_NAV#1 (>L:S_OH_NAV_IR3_MODE)
FNX320_ADIRS_IR_3_Knob_OFF#0 (>L:S_OH_NAV_IR3_MODE)
FNX320_ADIRS_Key_0_Press#1 (>L:S_OH_ADIRS_KEY_0)
FNX320_ADIRS_Key_0_Release#0 (>L:S_OH_ADIRS_KEY_0)
FNX320_ADIRS_Key_1_Press#1 (>L:S_OH_ADIRS_KEY_1)
FNX320_ADIRS_Key_1_Release#0 (>L:S_OH_ADIRS_KEY_1)
FNX320_ADIRS_Key_2_Press#1 (>L:S_OH_ADIRS_KEY_2)
FNX320_ADIRS_Key_2_Release#0 (>L:S_OH_ADIRS_KEY_2)
FNX320_ADIRS_Key_3_Press#1 (>L:S_OH_ADIRS_KEY_3)
FNX320_ADIRS_Key_3_Release#0 (>L:S_OH_ADIRS_KEY_3)
FNX320_ADIRS_Key_4_Press#1 (>L:S_OH_ADIRS_KEY_4)
FNX320_ADIRS_Key_4_Release#0 (>L:S_OH_ADIRS_KEY_4)
FNX320_ADIRS_Key_5_Press#1 (>L:S_OH_ADIRS_KEY_5)
FNX320_ADIRS_Key_5_Release#0 (>L:S_OH_ADIRS_KEY_5)
FNX320_ADIRS_Key_6_Press#1 (>L:S_OH_ADIRS_KEY_6)
FNX320_ADIRS_Key_6_Release#0 (>L:S_OH_ADIRS_KEY_6)
FNX320_ADIRS_Key_7_Press#1 (>L:S_OH_ADIRS_KEY_7)
FNX320_ADIRS_Key_7_Release#0 (>L:S_OH_ADIRS_KEY_7)
FNX320_ADIRS_Key_8_Press#1 (>L:S_OH_ADIRS_KEY_8)
FNX320_ADIRS_Key_8_Release#0 (>L:S_OH_ADIRS_KEY_8)
FNX320_ADIRS_Key_9_Press#1 (>L:S_OH_ADIRS_KEY_9)
FNX320_ADIRS_Key_9_Release#0 (>L:S_OH_ADIRS_KEY_9)
FNX320_ADIRS_Key_Clear_Press#1 (>L:S_OH_ADIRS_KEY_CLR)
FNX320_ADIRS_Key_Clear_Release#0 (>L:S_OH_ADIRS_KEY_CLR)
FNX320_ADIRS_Key_Enter_Press#1 (>L:S_OH_ADIRS_KEY_ENT)
FNX320_ADIRS_Key_Enter_Release#0 (>L:S_OH_ADIRS_KEY_ENT)
FNX320_ADIRS_System_Selector_Knob_Dec#(L:S_OH_NAV_SYS_DISP) 0.1 - 0 max (>L:S_OH_NAV_SYS_DISP)
FNX320_ADIRS_System_Selector_Knob_Inc#(L:S_OH_NAV_SYS_DISP) 0.1 + 1 min (>L:S_OH_NAV_SYS_DISP)
//FenixSim/A320/Air Conditioning and Pressurization
FNX230_Ventilation_Blower_Button_Press#(L:S_OH_PNEUMATIC_BLOWER) ! (>L:S_OH_PNEUMATIC_BLOWER) 1 (>L:S_OH_PNEUMATIC_BLOWER_Anim)
FNX230_Ventilation_Blower_Button_Release#(L:S_OH_PNEUMATIC_BLOWER) 0 == if{ 0 (>L:S_OH_PNEUMATIC_BLOWER_Anim) } (L:S_OH_PNEUMATIC_BLOWER) 1 == if{ 2 (>L:S_OH_PNEUMATIC_BLOWER_Anim) }
FNX230_Ventilation_Cabin_Fans_Button_Press#(L:S_OH_PNEUMATIC_CAB_FANS) ! (>L:S_OH_PNEUMATIC_CAB_FANS) 1 (>L:S_OH_PNEUMATIC_CAB_FANS_Anim)
FNX230_Ventilation_Cabin_Fans_Button_Release#(L:S_OH_PNEUMATIC_CAB_FANS) 0 == if{ 0 (>L:S_OH_PNEUMATIC_CAB_FANS_Anim) } (L:S_OH_PNEUMATIC_CAB_FANS) 1 == if{ 2 (>L:S_OH_PNEUMATIC_CAB_FANS_Anim) }
FNX230_Ventilation_Extract_Button_Press#(L:S_OH_PNEUMATIC_EXTRACT) ! (>L:S_OH_PNEUMATIC_EXTRACT) 1 (>L:S_OH_PNEUMATIC_EXTRACT_Anim)
FNX230_Ventilation_Extract_Button_Release#(L:S_OH_PNEUMATIC_EXTRACT) 0 == if{ 0 (>L:S_OH_PNEUMATIC_EXTRACT_Anim) } (L:S_OH_PNEUMATIC_EXTRACT) 1 == if{ 2 (>L:S_OH_PNEUMATIC_EXTRACT_Anim) }
FNX320_Pressurization_Ditching_Button_Press#(L:S_OH_PNEUMATIC_DITCHING) ! (>L:S_OH_PNEUMATIC_DITCHING) 1 (>L:S_OH_PNEUMATIC_DITCHING_Anim)
FNX320_Pressurization_Ditching_Button_Release#(L:S_OH_PNEUMATIC_DITCHING) 0 == if{ 0 (>L:S_OH_PNEUMATIC_DITCHING_Anim) } (L:S_OH_PNEUMATIC_DITCHING) 1 == if{ 2 (>L:S_OH_PNEUMATIC_DITCHING_Anim) }
FNX320_Pressurization_Landing_Elevation_Knob_Dec#(L:A_OH_PNEUMATIC_LDG_ELEV) 0.1 - 0 max (>L:A_OH_PNEUMATIC_LDG_ELEV)
FNX320_Pressurization_Landing_Elevation_Knob_Inc#(L:A_OH_PNEUMATIC_LDG_ELEV) 0.1 + 1 min (>L:A_OH_PNEUMATIC_LDG_ELEV)
FNX320_Pressurization_Manual_Vertical_Speed_Control_Down#2 (>L:S_OH_PNEUMATIC_PRESS_MAN)
FNX320_Pressurization_Manual_Vertical_Speed_Control_Mid#1 (>L:S_OH_PNEUMATIC_PRESS_MAN)
FNX320_Pressurization_Manual_Vertical_Speed_Control_Up#0 (>L:S_OH_PNEUMATIC_PRESS_MAN)
FNX320_Pressurization_Mode_Select_Button_Press#(L:S_OH_PNEUMATIC_PRESS_MODE) ! (>L:S_OH_PNEUMATIC_PRESS_MODE) 1 (>L:S_OH_PNEUMATIC_PRESS_MODE_Anim)
FNX320_Pressurization_Mode_Select_Button_Release#(L:S_OH_PNEUMATIC_PRESS_MODE) 0 == if{ 0 (>L:S_OH_PNEUMATIC_PRESS_MODE_Anim) } (L:S_OH_PNEUMATIC_PRESS_MODE) 1 == if{ 2 (>L:S_OH_PNEUMATIC_PRESS_MODE_Anim) }
//FenixSim/A320/Anti-Ice
FNX320_Icing_Engine_1_Button_Press#(L:S_OH_PNEUMATIC_ENG1_ANTI_ICE) ! (>L:S_OH_PNEUMATIC_ENG1_ANTI_ICE) 1 (>L:S_OH_PNEUMATIC_ENG1_ANTI_ICE_Anim)
FNX320_Icing_Engine_1_Button_Release#(L:S_OH_PNEUMATIC_ENG1_ANTI_ICE) 0 == if{ 0 (>L:S_OH_PNEUMATIC_ENG1_ANTI_ICE_Anim) } (L:S_OH_PNEUMATIC_ENG1_ANTI_ICE) 1 == if{ 2 (>L:S_OH_PNEUMATIC_ENG1_ANTI_ICE_Anim) }
FNX320_Icing_Engine_2_Button_Press#(L:S_OH_PNEUMATIC_ENG2_ANTI_ICE) ! (>L:S_OH_PNEUMATIC_ENG2_ANTI_ICE) 1 (>L:S_OH_PNEUMATIC_ENG2_ANTI_ICE_Anim)
FNX320_Icing_Engine_2_Button_Release#(L:S_OH_PNEUMATIC_ENG2_ANTI_ICE) 0 == if{ 0 (>L:S_OH_PNEUMATIC_ENG2_ANTI_ICE_Anim) } (L:S_OH_PNEUMATIC_ENG2_ANTI_ICE) 1 == if{ 2 (>L:S_OH_PNEUMATIC_ENG2_ANTI_ICE_Anim) }
FNX320_Icing_Probe_Heat_Button_Press#(L:S_OH_PROBE_HEAT) ! (>L:S_OH_PROBE_HEAT) 1 (>L:S_OH_PROBE_HEAT_Anim)
FNX320_Icing_Probe_Heat_Button_Release#(L:S_OH_PROBE_HEAT) 0 == if{ 0 (>L:S_OH_PROBE_HEAT_Anim) } (L:S_OH_PROBE_HEAT) 1 == if{ 2 (>L:S_OH_PROBE_HEAT_Anim) }
FNX320_Icing_Wing_Button_Press#(L:S_OH_PNEUMATIC_WING_ANTI_ICE) ! (>L:S_OH_PNEUMATIC_WING_ANTI_ICE) 1 (>L:S_OH_PNEUMATIC_WING_ANTI_ICE_Anim)
FNX320_Icing_Wing_Button_Release#(L:S_OH_PNEUMATIC_WING_ANTI_ICE) 0 == if{ 0 (>L:S_OH_PNEUMATIC_WING_ANTI_ICE_Anim) } (L:S_OH_PNEUMATIC_WING_ANTI_ICE) 1 == if{ 2 (>L:S_OH_PNEUMATIC_WING_ANTI_ICE_Anim) }
//FenixSim/A320/Autopilot
FNX320_Misc_Sidestick_AP_Disconnect_Captain_Button_Press#1 (>L:S_FC_CAPT_INST_DISCONNECT)
FNX320_Misc_Sidestick_AP_Disconnect_Captain_Button_Release#0 (>L:S_FC_CAPT_INST_DISCONNECT)
FNX320_Misc_Sidestick_AP_Disconnect_FO_Button_Press#1 (>L:S_FC_FO_INST_DISCONNECT)
FNX320_Misc_Sidestick_AP_Disconnect_FO_Button_Release#0 (>L:S_FC_FO_INST_DISCONNECT)
FNX320_FCU_ALTITUDE_KNOB_DEC#(L:E_FCU_ALTITUDE) -- (>L:E_FCU_ALTITUDE)
FNX320_FCU_ALTITUDE_KNOB_INC#(L:E_FCU_ALTITUDE) ++ (>L:E_FCU_ALTITUDE)
FNX320_FCU_ALTITUDE_KNOB_PULL#(L:S_FCU_ALTITUDE) ++ (>L:S_FCU_ALTITUDE)
FNX320_FCU_ALTITUDE_KNOB_PUSH#(L:S_FCU_ALTITUDE) -- (>L:S_FCU_ALTITUDE)
FNX320_FCU_ALTITUDE_SCALE_100#0 (>L:S_FCU_ALTITUDE_SCALE)
FNX320_FCU_ALTITUDE_SCALE_1000#1 (>L:S_FCU_ALTITUDE_SCALE)
FNX320_FCU_ALTITUDE_SCALE_TOGGLE#(L:S_FCU_ALTITUDE_SCALE, Bool) if{ 0 (>L:S_FCU_ALTITUDE_SCALE) } els{ 1 (>L:S_FCU_ALTITUDE_SCALE) }
FNX320_FCU_AP1_PUSH#(L:S_FCU_AP1) ++ (>L:S_FCU_AP1)
FNX320_FCU_AP1_RELEASE#(L:S_FCU_AP1) ++ (>L:S_FCU_AP1)
FNX320_FCU_AP2_PUSH#(L:S_FCU_AP2) ++ (>L:S_FCU_AP2)
FNX320_FCU_AP2_RELEASE#(L:S_FCU_AP2) ++ (>L:S_FCU_AP2)
FNX320_FCU_APPR_PUSH#(L:S_FCU_APPR) ++ (>L:S_FCU_APPR)
FNX320_FCU_APPR_RELEASE#(L:S_FCU_APPR) ++ (>L:S_FCU_APPR)
FNX320_FCU_ATHR_PUSH#(L:S_FCU_ATHR) ++ (>L:S_FCU_ATHR)
FNX320_FCU_ATHR_RELEASE#(L:S_FCU_ATHR) ++ (>L:S_FCU_ATHR)
FNX320_FCU_EFIS1_FD_PUSH#(L:S_FCU_EFIS1_FD) ++ (>L:S_FCU_EFIS1_FD)
FNX320_FCU_EFIS1_FD_RELEASE#(L:S_FCU_EFIS1_FD) ++ (>L:S_FCU_EFIS1_FD)
FNX320_FCU_EFIS1_LS_PUSH#(L:S_FCU_EFIS1_LS) ++ (>L:S_FCU_EFIS1_LS)
FNX320_FCU_EFIS1_LS_RELEASE#(L:S_FCU_EFIS1_LS) ++ (>L:S_FCU_EFIS1_LS)
FNX320_FCU_EFIS2_FD_PUSH#(L:S_FCU_EFIS2_FD) ++ (>L:S_FCU_EFIS2_FD)
FNX320_FCU_EFIS2_FD_RELEASE#(L:S_FCU_EFIS2_FD) (>L:S_FCU_EFIS2_FD
FNX320_FCU_EFIS2_LS_PUSH#(L:S_FCU_EFIS2_LS) ++ (>L:S_FCU_EFIS2_LS)
FNX320_FCU_EFIS2_LS_RELEASE#(L:S_FCU_EFIS2_LS) ++ (>L:S_FCU_EFIS2_LS)
FNX320_FCU_EXPED_PUSH#(L:S_FCU_EXPED) ++ (>L:S_FCU_EXPED)
FNX320_FCU_EXPED_RELEASE#(L:S_FCU_EXPED) ++ (>L:S_FCU_EXPED)
FNX320_FCU_HEADING_KNOB_DEC#(L:E_FCU_HEADING) -- (>L:E_FCU_HEADING)
FNX320_FCU_HEADING_KNOB_INC#(L:E_FCU_HEADING) ++ (>L:E_FCU_HEADING)
FNX320_FCU_HEADING_KNOB_PULL#(L:S_FCU_HEADING) ++ (>L:S_FCU_HEADING)
FNX320_FCU_HEADING_KNOB_PUSH#(L:S_FCU_HEADING) -- (>L:S_FCU_HEADING)
FNX320_FCU_LOC_PUSH#(L:S_FCU_LOC) ++ (>L:S_FCU_LOC)
FNX320_FCU_LOC_RELEASE#(L:S_FCU_LOC) ++ (>L:S_FCU_LOC)
FNX320_FCU_METRIC_ALT_PUSH#(L:S_FCU_METRIC_ALT) ++ (>L:S_FCU_METRIC_ALT)
FNX320_FCU_METRIC_ALT_RELEASE#(L:S_FCU_METRIC_ALT) ++ (>L:S_FCU_METRIC_ALT)
FNX320_FCU_SPD_MACH_PUSH#(L:S_FCU_SPD_MACH) ++ (>L:S_FCU_SPD_MACH)
FNX320_FCU_SPD_MACH_RELEASE#(L:S_FCU_SPD_MACH) ++ (>L:S_FCU_SPD_MACH)
FNX320_FCU_SPEED_KNOB_DEC#(L:E_FCU_SPEED) -- (>L:E_FCU_SPEED)
FNX320_FCU_SPEED_KNOB_INC#(L:E_FCU_SPEED) ++ (>L:E_FCU_SPEED)
FNX320_FCU_SPEED_KNOB_PULL#(L:S_FCU_SPEED) ++ (>L:S_FCU_SPEED)
FNX320_FCU_SPEED_KNOB_PUSH#(L:S_FCU_SPEED) -- (>L:S_FCU_SPEED)
FNX320_FCU_TRK_FPA_PUSH#(L:S_FCU_HDGVS_TRKFPA) ++ (>L:S_FCU_HDGVS_TRKFPA)
FNX320_FCU_TRK_FPA_RELEASE#(L:S_FCU_HDGVS_TRKFPA) ++ (>L:S_FCU_HDGVS_TRKFPA)
FNX320_FCU_VS_KNOB_DEC#(L:E_FCU_VS) -- (>L:E_FCU_VS)
FNX320_FCU_VS_KNOB_INC#(L:E_FCU_VS) ++ (>L:E_FCU_VS)
FNX320_FCU_VS_KNOB_PULL#(L:S_FCU_VERTICAL_SPEED) ++ (>L:S_FCU_VERTICAL_SPEED)
FNX320_FCU_VS_KNOB_PUSH#(L:S_FCU_VERTICAL_SPEED) -- (>L:S_FCU_VERTICAL_SPEED)
//FenixSim/A320/Avionics
FNX320_Glareshield_Autoland_Captain_Button_Press#1 (>L:S_MIP_AUTOLAND_CAPT)
FNX320_Glareshield_Autoland_Captain_Button_Release#0 (>L:S_MIP_AUTOLAND_CAPT)
FNX320_Glareshield_Autoland_FO_Button_Press#1 (>L:S_MIP_AUTOLAND_FO)
FNX320_Glareshield_Autoland_FO_Button_Release#0 (>L:S_MIP_AUTOLAND_FO)
FNX320_MainPanel_PFD_ND_Transfer_Captain_Button_Press#1 (>L:S_DISPLAY_PFDND_XFER_CAPT)
FNX320_MainPanel_PFD_ND_Transfer_Captain_Button_Release#0 (>L:S_DISPLAY_PFDND_XFER_CAPT)
FNX320_MainPanel_PFD_ND_Transfer_FO_Button_Press#1 (>L:S_DISPLAY_PFDND_XFER_FO)
FNX320_MainPanel_PFD_ND_Transfer_FO_Button_Release#0 (>L:S_DISPLAY_PFDND_XFER_FO)
FNX320_MainPanel_Standby_Altimeter_Imperial_Baro_Knob_Dec#(L:E_STANDBY_ALT_IMPERIAL_BARO) -- (>L:E_STANDBY_ALT_IMPERIAL_BARO)
FNX320_MainPanel_Standby_Altimeter_Imperial_Baro_Knob_Inc#(L:E_STANDBY_ALT_IMPERIAL_BARO) ++ (>L:E_STANDBY_ALT_IMPERIAL_BARO)
FNX320_MainPanel_Standby_Altimeter_Metric_Baro_Knob_Dec#(L:E_STANDBY_ALT_METRIC_BARO) -- (>L:E_STANDBY_ALT_METRIC_BARO)
FNX320_MainPanel_Standby_Altimeter_Metric_Baro_Knob_Inc#(L:E_STANDBY_ALT_METRIC_BARO) ++ (>L:E_STANDBY_ALT_METRIC_BARO)
FNX320_MainPanel_Standby_Attitude_Cage_Press#1 (>L:S_STANDBY_ATTITUDE_CAGE)
FNX320_MainPanel_Standby_Attitude_Cage_Release#0 (>L:S_STANDBY_ATTITUDE_CAGE)
FNX320_MainPanel_Standby_Baro_Knob_Dec#(L:E_MIP_ISFD_BARO) -- (>L:E_MIP_ISFD_BARO)
FNX320_MainPanel_Standby_Baro_Knob_Inc#(L:E_MIP_ISFD_BARO) ++ (>L:E_MIP_ISFD_BARO)
FNX320_MainPanel_Standby_Bugs_Button_Press#1 (>L:S_MIP_ISFD_BUGS)
FNX320_MainPanel_Standby_Bugs_Button_Release#0 (>L:S_MIP_ISFD_BUGS)
FNX320_MainPanel_Standby_LS_Button_Press#1 (>L:S_MIP_ISFD_LS)
FNX320_MainPanel_Standby_LS_Button_Release#0 (>L:S_MIP_ISFD_LS)
FNX320_MainPanel_Standby_Minus_Button_Press#1 (>L:S_MIP_ISFD_MINUS)
FNX320_MainPanel_Standby_Minus_Button_Release#0 (>L:S_MIP_ISFD_MINUS)
FNX320_MainPanel_Standby_Plus_Button_Press#1 (>L:S_MIP_ISFD_PLUS)
FNX320_MainPanel_Standby_Plus_Button_Release#0 (>L:S_MIP_ISFD_PLUS)
FNX320_MainPanel_Standby_RST_Button_Press#1 (>L:S_MIP_ISFD_RST)
FNX320_MainPanel_Standby_RST_Button_Release#0 (>L:S_MIP_ISFD_RST)
FNX320_MainPanel_Terrain_On_ND_Captain_Button_Press#1 (>L:S_MIP_GPWS_TERRAIN_ON_ND_CAPT)
FNX320_MainPanel_Terrain_On_ND_Captain_ButtonRelease#0 (>L:S_MIP_GPWS_TERRAIN_ON_ND_CAPT)
FNX320_MainPanel_Terrain_On_ND_FO_Button_Press#1 (>L:S_MIP_GPWS_TERRAIN_ON_ND_FO)
FNX320_MainPanel_Terrain_On_ND_FO_Button_Release#0 (>L:S_MIP_GPWS_TERRAIN_ON_ND_FO)
FNX320_Overhead_Avionics_Compt_Light_Button_Press#1 (>L:S_OH_LIGHTING_AVIONICS_COMPT)
FNX320_Overhead_Avionics_Compt_Light_Button_Release#0 (>L:S_OH_LIGHTING_AVIONICS_COMPT)
//FenixSim/A320/CPDLC
FNX320_MainPanel_CPDLC_Dim_Bright_Captain_Button_BRT#2 (>L:S_DCDU1_DIM_BRT)
FNX320_MainPanel_CPDLC_Dim_Bright_Captain_Button_DIM#0 (>L:S_DCDU1_DIM_BRT)
FNX320_MainPanel_CPDLC_Dim_Bright_Captain_Button_Mid#1 (>L:S_DCDU1_DIM_BRT)
FNX320_MainPanel_CPDLC_Dim_Bright_FO_Button_BRT#2 (>L:S_DCDU2_DIM_BRT)
FNX320_MainPanel_CPDLC_Dim_Bright_FO_Button_DIM#0 (>L:S_DCDU2_DIM_BRT)
FNX320_MainPanel_CPDLC_Dim_Bright_FO_Button_Mid#1 (>L:S_DCDU2_DIM_BRT)
FNX320_MainPanel_CPDLC_LSK_1_Left_Captain_Button_Press#1 (>L:S_DCDU1_LSK1L)
FNX320_MainPanel_CPDLC_LSK_1_Left_Captain_Button_Release#0 (>L:S_DCDU1_LSK1L)
FNX320_MainPanel_CPDLC_LSK_1_Left_FO_Button_Press#1 (>L:S_DCDU2_LSK1L)
FNX320_MainPanel_CPDLC_LSK_1_Left_FO_Button_Release#0 (>L:S_DCDU2_LSK1L)
FNX320_MainPanel_CPDLC_LSK_1_Right_Captain_Button_Press#1 (>L:S_DCDU1_LSK1R)
FNX320_MainPanel_CPDLC_LSK_1_Right_Captain_Button_Release#0 (>L:S_DCDU1_LSK1R)
FNX320_MainPanel_CPDLC_LSK_1_Right_FO_Button_Press#1 (>L:S_DCDU2_LSK1R)
FNX320_MainPanel_CPDLC_LSK_1_Right_FO_Button_Release#0 (>L:S_DCDU2_LSK1R)
FNX320_MainPanel_CPDLC_LSK_2_Left_Captain_Button_Press#1 (>L:S_DCDU1_LSK2L)
FNX320_MainPanel_CPDLC_LSK_2_Left_Captain_Button_Release#0 (>L:S_DCDU1_LSK2L)
FNX320_MainPanel_CPDLC_LSK_2_Left_FO_Button_Press#1 (>L:S_DCDU2_LSK2L)
FNX320_MainPanel_CPDLC_LSK_2_Left_FO_Button_Release#0 (>L:S_DCDU2_LSK2L)
FNX320_MainPanel_CPDLC_LSK_2_Right_Captain_Button_Press#1 (>L:S_DCDU1_LSK2R)
FNX320_MainPanel_CPDLC_LSK_2_Right_Captain_Button_Release#0 (>L:S_DCDU1_LSK2R)
FNX320_MainPanel_CPDLC_LSK_2_Right_FO_Button_Press#1 (>L:S_DCDU2_LSK2R)
FNX320_MainPanel_CPDLC_LSK_2_Right_FO_Button_Release#0 (>L:S_DCDU2_LSK2R)
FNX320_MainPanel_CPDLC_Message_Minus_Captain_Button_Press#1 (>L:S_DCDU1_MSGDWN)
FNX320_MainPanel_CPDLC_Message_Minus_Captain_Button_Release#0 (>L:S_DCDU1_MSGDWN)
FNX320_MainPanel_CPDLC_Message_Minus_FO_Button_Press#1 (>L:S_DCDU2_MSGDWN)
FNX320_MainPanel_CPDLC_Message_Minus_FO_Button_Release#0 (>L:S_DCDU2_MSGDWN)
FNX320_MainPanel_CPDLC_Message_Plus_Captain_Button_Press#1 (>L:S_DCDU1_MSGUP)
FNX320_MainPanel_CPDLC_Message_Plus_Captain_Button_Release#0 (>L:S_DCDU1_MSGUP)
FNX320_MainPanel_CPDLC_Message_Plus_FO_Button_Press#1 (>L:S_DCDU2_MSGUP)
FNX320_MainPanel_CPDLC_Message_Plus_FO_Button_Release#0 (>L:S_DCDU2_MSGUP)
FNX320_MainPanel_CPDLC_Page_Minus_Captain_Button_Press#1 (>L:S_DCDU1_PGUP)
FNX320_MainPanel_CPDLC_Page_Minus_Captain_Button_Release#0 (>L:S_DCDU1_PGUP)
FNX320_MainPanel_CPDLC_Page_Minus_FO_Button_Press#1 (>L:S_DCDU2_PGUP)
FNX320_MainPanel_CPDLC_Page_Minus_FO_Button_Release#0 (>L:S_DCDU2_PGUP)
FNX320_MainPanel_CPDLC_Page_Plus_Captain_Button_Press#1 (>L:S_DCDU1_PGDN)
FNX320_MainPanel_CPDLC_Page_Plus_Captain_Button_Release#0 (>L:S_DCDU1_PGDN)
FNX320_MainPanel_CPDLC_Page_Plus_FO_Button_Press#1 (>L:S_DCDU2_PGDN)
FNX320_MainPanel_CPDLC_Page_Plus_FO_Button_Release#0 (>L:S_DCDU2_PGDN)
FNX320_MainPanel_CPDLC_Print_Captain_Button_Press#1 (>L:S_DCDU1_PRINT)
FNX320_MainPanel_CPDLC_Print_Captain_Button_Release#0 (>L:S_DCDU1_PRINT)
FNX320_MainPanel_CPDLC_Print_FO_Button_Press#1 (>L:S_DCDU2_PRINT)
FNX320_MainPanel_CPDLC_Print_FO_Button_Release#0 (>L:S_DCDU2_PRINT)
//FenixSim/A320/Controls
FNX320_Glareshield_Sidestick_Priority_Captain_Button_Press#1 (>L:S_FC_CAPT_PRIORITY)
FNX320_Glareshield_Sidestick_Priority_Captain_Button_Release#0 (>L:S_FC_CAPT_PRIORITY)
FNX320_Glareshield_Sidestick_Priority_FO_Button_Press#1 (>L:S_FC_FO_PRIORITY)
FNX320_Glareshield_Sidestick_Priority_FO_Button_Release#0 (>L:S_FC_FO_PRIORITY)
FNX320_Pedestal_Rudder_Trim_Reset_Button_Press#1 (>L:S_FC_RUDDER_TRIM_RESET)
FNX320_Pedestal_Rudder_Trim_Reset_Button_Release#0 (>L:S_FC_RUDDER_TRIM_RESET)
//FenixSim/A320/ECAM
FNX320_ECAM_ALL_Button_Press#1 (>L:S_ECAM_ALL)
FNX320_ECAM_ALL_Button_Release#0 (>L:S_ECAM_ALL)
FNX320_ECAM_APU_Button_Press#1 (>L:S_ECAM_APU)
FNX320_ECAM_APU_Button_Release#0 (>L:S_ECAM_APU)
FNX320_ECAM_BLEED_Button_Press#1 (>L:S_ECAM_BLEED)
FNX320_ECAM_BLEED_Button_Release#0 (>L:S_ECAM_BLEED)
FNX320_ECAM_CLR_Left_Button_Press#1 (>L:S_ECAM_CLR_LEFT)
FNX320_ECAM_CLR_Left_Button_Release#0 (>L:S_ECAM_CLR_LEFT)
FNX320_ECAM_CLR_Right_Button_Press#1 (>L:S_ECAM_CLR_RIGHT)
FNX320_ECAM_CLR_Right_Button_Release#0 (>L:S_ECAM_CLR_RIGHT)
FNX320_ECAM_COND_Button_Press#1 (>L:S_ECAM_COND)
FNX320_ECAM_COND_Button_Release#0 (>L:S_ECAM_COND)
FNX320_ECAM_DOOR_Button_Press#1 (>L:S_ECAM_DOOR)
FNX320_ECAM_DOOR_Button_Release#0 (>L:S_ECAM_DOOR)
FNX320_ECAM_ELEC_Button_Press#1 (>L:S_ECAM_ELEC)
FNX320_ECAM_ELEC_Button_Release#0 (>L:S_ECAM_ELEC)
FNX320_ECAM_EMER_CANC_Button_Press#1 (>L:S_ECAM_EMER_CANCEL)
FNX320_ECAM_EMER_CANC_Button_Release#0 (>L:S_ECAM_EMER_CANCEL)
FNX320_ECAM_ENG_Button_Press#1 (>L:S_ECAM_ENGINE)
FNX320_ECAM_ENG_Button_Release#0 (>L:S_ECAM_ENGINE)
FNX320_ECAM_FCTL_Button_Press#1 (>L:S_ECAM_FCTL)
FNX320_ECAM_FCTL_Button_Release#0 (>L:S_ECAM_FCTL)
FNX320_ECAM_FUEL_Button_Press#1 (>L:S_ECAM_FUEL)
FNX320_ECAM_FUEL_Button_Release#0 (>L:S_ECAM_FUEL)
FNX320_ECAM_HYD_Button_Press#1 (>L:S_ECAM_HYD)
FNX320_ECAM_HYD_Button_Release#0 (>L:S_ECAM_HYD)
FNX320_ECAM_PRESS_Button_Press#1 (>L:S_ECAM_CAB_PRESS)
FNX320_ECAM_PRESS_Button_Release#0 (>L:S_ECAM_CAB_PRESS)
FNX320_ECAM_RCL_Button_Press#1 (>L:S_ECAM_RCL)
FNX320_ECAM_RCL_Button_Release#0 (>L:S_ECAM_RCL)
FNX320_ECAM_STS_Button_Press#1 (>L:S_ECAM_STATUS)
FNX320_ECAM_STS_Button_Release#0 (>L:S_ECAM_STATUS)
FNX320_ECAM_TO_CONFIG_Button_Press#1 (>L:S_ECAM_TO)
FNX320_ECAM_TO_CONFIG_Button_Release#0 (>L:S_ECAM_TO)
FNX320_ECAM_WHEEL_Button_Press#1 (>L:S_ECAM_WHEEL)
FNX320_ECAM_WHEEL_Button_Release#0 (>L:S_ECAM_WHEEL)
//FenixSim/A320/EFIS
FNX320_EFIS_1_ARPT_Button_Press#1 (>L:S_FCU_EFIS1_ARPT)
FNX320_EFIS_1_ARPT_Button_Release#0 (>L:S_FCU_EFIS1_ARPT)
FNX320_EFIS_1_CSTR_Button_Press#1 (>L:S_FCU_EFIS1_CSTR)
FNX320_EFIS_1_CSTR_Button_Release#0 (>L:S_FCU_EFIS1_CSTR)
FNX320_EFIS_1_NDB_Button_Press#1 (>L:S_FCU_EFIS1_NDB)
FNX320_EFIS_1_NDB_Button_Release#0 (>L:S_FCU_EFIS1_NDB)
FNX320_EFIS_1_VORD_Button_Press#1 (>L:S_FCU_EFIS1_VORD)
FNX320_EFIS_1_VORD_Button_Release#0 (>L:S_FCU_EFIS1_VORD)
FNX320_EFIS_1_WPT_Button_Press#1 (>L:S_FCU_EFIS1_WPT)
FNX320_EFIS_1_WPT_Button_Release#0 (>L:S_FCU_EFIS1_WPT)
FNX320_EFIS_2_ARPT_Button_Press#1 (>L:S_FCU_EFIS2_ARPT)
FNX320_EFIS_2_ARPT_Button_Release#0 (>L:S_FCU_EFIS2_ARPT)
FNX320_EFIS_2_CSTR_Button_Press#1 (>L:S_FCU_EFIS2_CSTR)
FNX320_EFIS_2_CSTR_Button_Release#0 (>L:S_FCU_EFIS2_CSTR)
FNX320_EFIS_2_NDB_Button_Press#1 (>L:S_FCU_EFIS2_NDB)
FNX320_EFIS_2_NDB_Button_Release#0 (>L:S_FCU_EFIS2_NDB)
FNX320_EFIS_2_VORD_Button_Press#1 (>L:S_FCU_EFIS2_VORD)
FNX320_EFIS_2_VORD_Button_Release#0 (>L:S_FCU_EFIS2_VORD)
FNX320_EFIS_2_WPT_Button_Press#1 (>L:S_FCU_EFIS2_WPT)
FNX320_EFIS_2_WPT_Button_Release#0 (>L:S_FCU_EFIS2_WPT)
FNX320_EFIS_1_NAV_1_SWITCH_ADF#0 (>L:S_FCU_EFIS1_NAV1)
FNX320_EFIS_1_NAV_1_SWITCH_OFF#1 (>L:S_FCU_EFIS1_NAV1)
FNX320_EFIS_1_NAV_1_SWITCH_VOR#2 (>L:S_FCU_EFIS1_NAV1)
FNX320_EFIS_1_NAV_2_SWITCH_ADF#0 (>L:S_FCU_EFIS1_NAV2)
FNX320_EFIS_1_NAV_2_SWITCH_OFF#1 (>L:S_FCU_EFIS1_NAV2) 
FNX320_EFIS_1_NAV_2_SWITCH_VOR#2 (>L:S_FCU_EFIS1_NAV2)
FNX320_EFIS_2_NAV_1_SWITCH_ADF#0 (>L:S_FCU_EFIS2_NAV1)
FNX320_EFIS_2_NAV_1_SWITCH_OFF#1 (>L:S_FCU_EFIS2_NAV1)
FNX320_EFIS_2_NAV_1_SWITCH_VOR#2 (>L:S_FCU_EFIS2_NAV1)
FNX320_EFIS_2_NAV_2_SWITCH_ADF#0 (>L:S_FCU_EFIS2_NAV2)
FNX320_EFIS_2_NAV_2_SWITCH_OFF#1 (>L:S_FCU_EFIS2_NAV2) 
FNX320_EFIS_2_NAV_2_SWITCH_VOR#2 (>L:S_FCU_EFIS2_NAV2)
FNX320_EFIS_L_BARO_KNOB_DEC#(L:E_FCU_EFIS1_BARO) -- (>L:E_FCU_EFIS1_BARO)
FNX320_EFIS_L_BARO_KNOB_INC#(L:E_FCU_EFIS1_BARO) ++ (>L:E_FCU_EFIS1_BARO)
FNX320_EFIS_L_BARO_MODE_HPA#1 (>L:S_FCU_EFIS1_BARO_MODE) 
FNX320_EFIS_L_BARO_MODE_INHG#0 (>L:S_FCU_EFIS1_BARO_MODE) 
FNX320_EFIS_L_BARO_MODE_TOG#(L:S_FCU_EFIS1_BARO_MODE) 0 == if{ 1 (>L:S_FCU_EFIS1_BARO_MODE) } els{ 0 (>L:S_FCU_EFIS1_BARO_MODE) } 
FNX320_EFIS_L_BARO_STD_OFF#0 (>L:S_FCU_EFIS1_BARO_STD)
FNX320_EFIS_L_BARO_STD_ON#1 (>L:S_FCU_EFIS1_BARO_STD)
FNX320_EFIS_L_BARO_STD_TOG#(L:S_FCU_EFIS1_BARO_STD) 0 == if{ 1 (>L:S_FCU_EFIS1_BARO_STD) } els{ 0 (>L:S_FCU_EFIS1_BARO_STD) } 
FNX320_EFIS_L_ND_MODE_ARC#3 (>L:S_FCU_EFIS1_ND_MODE)
FNX320_EFIS_L_ND_MODE_DEC#(L:S_FCU_EFIS1_ND_MODE) -- 0 max (>L:S_FCU_EFIS1_ND_MODE)
FNX320_EFIS_L_ND_MODE_INC#(L:S_FCU_EFIS1_ND_MODE) ++ 4 min (>L:S_FCU_EFIS1_ND_MODE)
FNX320_EFIS_L_ND_MODE_LS#0 (>L:S_FCU_EFIS1_ND_MODE)
FNX320_EFIS_L_ND_MODE_NAV#2 (>L:S_FCU_EFIS1_ND_MODE)
FNX320_EFIS_L_ND_MODE_PLAN#4 (>L:S_FCU_EFIS1_ND_MODE)
FNX320_EFIS_L_ND_MODE_VOR#1 (>L:S_FCU_EFIS1_ND_MODE)
FNX320_EFIS_L_ND_RANGE_10#0 (>L:S_FCU_EFIS1_ND_ZOOM)
FNX320_EFIS_L_ND_RANGE_160#4 (>L:S_FCU_EFIS1_ND_ZOOM)
FNX320_EFIS_L_ND_RANGE_20#1 (>L:S_FCU_EFIS1_ND_ZOOM)
FNX320_EFIS_L_ND_RANGE_320#5 (>L:S_FCU_EFIS1_ND_ZOOM)
FNX320_EFIS_L_ND_RANGE_40#2 (>L:S_FCU_EFIS1_ND_ZOOM)
FNX320_EFIS_L_ND_RANGE_80#3 (>L:S_FCU_EFIS1_ND_ZOOM)
FNX320_EFIS_L_ND_RANGE_DEC#(L:S_FCU_EFIS1_ND_ZOOM) -- 0 max (>L:S_FCU_EFIS1_ND_ZOOM)
FNX320_EFIS_L_ND_RANGE_INC#(L:S_FCU_EFIS1_ND_ZOOM) ++ 5 min (>L:S_FCU_EFIS1_ND_ZOOM)
FNX320_EFIS_R_BARO_KNOB_DEC#(L:E_FCU_EFIS2_BARO) -- (>L:E_FCU_EFIS2_BARO)
FNX320_EFIS_R_BARO_KNOB_INC#(L:E_FCU_EFIS2_BARO) ++ (>L:E_FCU_EFIS2_BARO)
FNX320_EFIS_R_BARO_MODE_HPA#1 (>L:S_FCU_EFIS2_BARO_MODE) 
FNX320_EFIS_R_BARO_MODE_INHG#0 (>L:S_FCU_EFIS2_BARO_MODE) 
FNX320_EFIS_R_BARO_MODE_TOG#(L:S_FCU_EFIS2_BARO_MODE) 0 == if{ 1 (>L:S_FCU_EFIS2_BARO_MODE) } els{ 0 (>L:S_FCU_EFIS2_BARO_MODE) } 
FNX320_EFIS_R_BARO_STD_OFF#0 (>L:S_FCU_EFIS2_BARO_STD) 
FNX320_EFIS_R_BARO_STD_ON#1 (>L:S_FCU_EFIS2_BARO_STD) 
FNX320_EFIS_R_BARO_STD_TOG#(L:S_FCU_EFIS2_BARO_STD) 0 == if{ 1 (>L:S_FCU_EFIS2_BARO_STD) } els{ 0 (>L:S_FCU_EFIS2_BARO_STD) } 
FNX320_EFIS_R_ND_MODE_ARC#3 (>L:S_FCU_EFIS2_ND_MODE) 
FNX320_EFIS_R_ND_MODE_DEC#(L:S_FCU_EFIS2_ND_MODE) -- 0 max (>L:S_FCU_EFIS2_ND_MODE) 
FNX320_EFIS_R_ND_MODE_INC#(L:S_FCU_EFIS2_ND_MODE) ++ 4 min (>L:S_FCU_EFIS2_ND_MODE) 
FNX320_EFIS_R_ND_MODE_LS#0 (>L:S_FCU_EFIS2_ND_MODE) 
FNX320_EFIS_R_ND_MODE_NAV#2 (>L:S_FCU_EFIS2_ND_MODE) 
FNX320_EFIS_R_ND_MODE_PLAN#4 (>L:S_FCU_EFIS2_ND_MODE) 
FNX320_EFIS_R_ND_MODE_VOR#1 (>L:S_FCU_EFIS2_ND_MODE) 
FNX320_EFIS_R_ND_RANGE_10#0 (>L:S_FCU_EFIS2_ND_ZOOM) 
FNX320_EFIS_R_ND_RANGE_160#4 (>L:S_FCU_EFIS2_ND_ZOOM) 
FNX320_EFIS_R_ND_RANGE_20#1 (>L:S_FCU_EFIS2_ND_ZOOM) 
FNX320_EFIS_R_ND_RANGE_320#5 (>L:S_FCU_EFIS2_ND_ZOOM) 
FNX320_EFIS_R_ND_RANGE_40#2 (>L:S_FCU_EFIS2_ND_ZOOM) 
FNX320_EFIS_R_ND_RANGE_80#3 (>L:S_FCU_EFIS2_ND_ZOOM) 
FNX320_EFIS_R_ND_RANGE_DEC#(L:S_FCU_EFIS2_ND_ZOOM) -- 0 max (>L:S_FCU_EFIS2_ND_ZOOM) 
FNX320_EFIS_R_ND_RANGE_INC#(L:S_FCU_EFIS2_ND_ZOOM) ++ 5 min (>L:S_FCU_EFIS2_ND_ZOOM) 
//FenixSim/A320/Electrical
FNX320_Breaker_A01_HP_FUEL_SOV_1#(L:CB_A01_HP_FUEL_SOV_1) ! (>L:CB_A01_HP_FUEL_SOV_1)
FNX320_Breaker_A02_HP_FUEL_SOV_2#(L:CB_A02_HP_FUEL_SOV_2) ! (>L:CB_A02_HP_FUEL_SOV_2)
FNX320_Breaker_A03_ENG12_IGN_SYSA#(L:CB_A03_ENG12_IGN_SYSA) ! (>L:CB_A03_ENG12_IGN_SYSA)
FNX320_Breaker_A04_ENG1_FADEC_A_EIU_1#(L:CB_A04_ENG1_FADEC_A_EIU_1) ! (>L:CB_A04_ENG1_FADEC_A_EIU_1)
FNX320_Breaker_A05_ENG2_FADEC_A_EIU_2#(L:CB_A05_ENG2_FADEC_A_EIU_2) ! (>L:CB_A05_ENG2_FADEC_A_EIU_2)
FNX320_Breaker_A06_ENG1_DET_LOOP_A#(L:CB_A06_ENG1_DET_LOOP_A) ! (>L:CB_A06_ENG1_DET_LOOP_A)
FNX320_Breaker_A07_ENG2_DET_LOOP_B#(L:CB_A07_ENG2_DET_LOOP_B) ! (>L:CB_A07_ENG2_DET_LOOP_B)
FNX320_Breaker_A08_LP_VALVE_MOT1_ENG1#(L:CB_A08_LP_VALVE_MOT1_ENG1) ! (>L:CB_A08_LP_VALVE_MOT1_ENG1)
FNX320_Breaker_A09_LP_VALVE_MOT1_ENG2#(L:CB_A09_LP_VALVE_MOT1_ENG2) ! (>L:CB_A09_LP_VALVE_MOT1_ENG2)
FNX320_Breaker_A10_XFR_VALVE_1_L#(L:CB_A10_XFR_VALVE_1_L) ! (>L:CB_A10_XFR_VALVE_1_L)
FNX320_Breaker_A11_XFR_VALVE_1_R#(L:CB_A11_XFR_VALVE_1_R) ! (>L:CB_A11_XFR_VALVE_1_R)
FNX320_Breaker_A12_XFEED_VALVE_MOT1#(L:CB_A12_XFEED_VALVE_MOT1) ! (>L:CB_A12_XFEED_VALVE_MOT1)
FNX320_Breaker_A13_FQI_CHAN_1#(L:CB_A13_FQI_CHAN_1) ! (>L:CB_A13_FQI_CHAN_1)
FNX320_Breaker_A14_SMOKE_CONFIG_PUMP_CTL#(L:CB_A14_SMOKE_CONFIG_PUMP_CTL) ! (>L:CB_A14_SMOKE_CONFIG_PUMP_CTL)
FNX320_Breaker_AB01_BUS_2_231XP_SPLY#(L:CB_AB01_BUS_2_231XP_SPLY) ! (>L:CB_AB01_BUS_2_231XP_SPLY)
FNX320_Breaker_AB09_B_HYD_ELEC_PUMP#(L:CB_AB09_B_HYD_ELEC_PUMP) ! (>L:CB_AB09_B_HYD_ELEC_PUMP)
FNX320_Breaker_AB12_BUS_1_131XP_SPLY#(L:CB_AB12_BUS_1_131XP_SPLY) ! (>L:CB_AB12_BUS_1_131XP_SPLY)
FNX320_Breaker_B01_MCDU_1#(L:CB_B01_MCDU_1) ! (>L:CB_B01_MCDU_1)
FNX320_Breaker_B02_FMGC1#(L:CB_B02_FMGC1) ! (>L:CB_B02_FMGC1)
FNX320_Breaker_B03_FAC_1_NORM#(L:CB_B03_FAC_1_NORM) ! (>L:CB_B03_FAC_1_NORM)
FNX320_Breaker_B04_FAC_1_STBY#(L:CB_B04_FAC_1_STBY) ! (>L:CB_B04_FAC_1_STBY)
FNX320_Breaker_B05_FCU1#(L:CB_B05_FCU1) ! (>L:CB_B05_FCU1)
FNX320_Breaker_B06_SLAT_CTL_MON_SYS_1#(L:CB_B06_SLAT_CTL_MON_SYS_1) ! (>L:CB_B06_SLAT_CTL_MON_SYS_1)
FNX320_Breaker_B07_FLAP_CTL_MON_SYS_1#(L:CB_B07_FLAP_CTL_MON_SYS_1) ! (>L:CB_B07_FLAP_CTL_MON_SYS_1)
FNX320_Breaker_B08_SEC_1_NORM#(L:CB_B08_SEC_1_NORM) ! (>L:CB_B08_SEC_1_NORM)
FNX320_Breaker_B09_FC_THS_MOT2#(L:CB_B09_FC_THS_MOT2) ! (>L:CB_B09_FC_THS_MOT2)
FNX320_Breaker_B10_FCTL_FCDC1_SPLY#(L:CB_B10_FCTL_FCDC1_SPLY) ! (>L:CB_B10_FCTL_FCDC1_SPLY)
FNX320_Breaker_B11_ELAC_1_NORM#(L:CB_B11_ELAC_1_NORM) ! (>L:CB_B11_ELAC_1_NORM)
FNX320_Breaker_B12_SLT_FLP_1_POS_IND#(L:CB_B12_SLT_FLP_1_POS_IND) ! (>L:CB_B12_SLT_FLP_1_POS_IND)
FNX320_Breaker_B14_APU_FUEL_BLOWOFF_PUMP#(L:CB_B14_APU_FUEL_BLOWOFF_PUMP) ! (>L:CB_B14_APU_FUEL_BLOWOFF_PUMP)
FNX320_Breaker_C01_WING_ANTI_ICE_MON#(L:CB_C01_WING_ANTI_ICE_MON) ! (>L:CB_C01_WING_ANTI_ICE_MON)
FNX320_Breaker_C02_WING_ANTI_ICE_CTL#(L:CB_C02_WING_ANTI_ICE_CTL) ! (>L:CB_C02_WING_ANTI_ICE_CTL)
FNX320_Breaker_C07_AFT_CARGO_VENT_CTL_MON#(L:CB_C07_AFT_CARGO_VENT_CTL_MON) ! (>L:CB_C07_AFT_CARGO_VENT_CTL_MON)
FNX320_Breaker_C09_LGCIU_1#(L:CB_C09_LGCIU_1) ! (>L:CB_C09_LGCIU_1)
FNX320_Breaker_C10_ABCU_SPLY#(L:CB_C10_ABCU_SPLY) ! (>L:CB_C10_ABCU_SPLY)
FNX320_Breaker_C11_HYD_RESS_XMTR#(L:CB_C11_HYD_RESS_XMTR) ! (>L:CB_C11_HYD_RESS_XMTR)
FNX320_Breaker_C12_HYD_POWER_B_WARN_CTL#(L:CB_C12_HYD_POWER_B_WARN_CTL) ! (>L:CB_C12_HYD_POWER_B_WARN_CTL)
FNX320_Breaker_C13_FIRE_VALVE_G_ENG_1#(L:CB_C13_FIRE_VALVE_G_ENG_1) ! (>L:CB_C13_FIRE_VALVE_G_ENG_1)
FNX320_Breaker_C14_FIRE_VALVE_Y_ENG_2#(L:CB_C14_FIRE_VALVE_Y_ENG_2) ! (>L:CB_C14_FIRE_VALVE_Y_ENG_2)
FNX320_Breaker_D02_PROBES_1_PITOT#(L:CB_D02_PROBES_1_PITOT) ! (>L:CB_D02_PROBES_1_PITOT)
FNX320_Breaker_D03_PROBES_1_PHC_SUPPLY#(L:CB_D03_PROBES_1_PHC_SUPPLY) ! (>L:CB_D03_PROBES_1_PHC_SUPPLY)
FNX320_Breaker_D04_PROBES_1_AOA#(L:CB_D04_PROBES_1_AOA) ! (>L:CB_D04_PROBES_1_AOA)
FNX320_Breaker_D05_AVNCS_VENT_CTL_DC#(L:CB_D05_AVNCS_VENT_CTL_DC) ! (>L:CB_D05_AVNCS_VENT_CTL_DC)
FNX320_Breaker_D06_AVNCS_VENT_CTL_ESS#(L:CB_D06_AVNCS_VENT_CTL_ESS) ! (>L:CB_D06_AVNCS_VENT_CTL_ESS)
FNX320_Breaker_D08_TEMP_CTL_SYS1_CHANB#(L:CB_D08_TEMP_CTL_SYS1_CHANB) ! (>L:CB_D08_TEMP_CTL_SYS1_CHANB)
FNX320_Breaker_D09_CAB_PRESS_CTL_1#(L:CB_D09_CAB_PRESS_CTL_1) ! (>L:CB_D09_CAB_PRESS_CTL_1)
FNX320_Breaker_D10_RAM_AIR_INLET#(L:CB_D10_RAM_AIR_INLET) ! (>L:CB_D10_RAM_AIR_INLET)
FNX320_Breaker_D11_AIRBLEED_ENG1_MONG#(L:CB_D11_AIRBLEED_ENG1_MONG) ! (>L:CB_D11_AIRBLEED_ENG1_MONG)
FNX320_Breaker_D12_AIRBLEED_ENG1_CTL#(L:CB_D12_AIRBLEED_ENG1_CTL) ! (>L:CB_D12_AIRBLEED_ENG1_CTL)
FNX320_Breaker_D13_X_FEED_VALVE_BAT#(L:CB_D13_X_FEED_VALVE_BAT) ! (>L:CB_D13_X_FEED_VALVE_BAT)
FNX320_Breaker_E01_CAPT_ND#(L:CB_E01_CAPT_ND) ! (>L:CB_E01_CAPT_ND)
FNX320_Breaker_E02_DU_ND_CAPT_SWTG#(L:CB_E02_DU_ND_CAPT_SWTG) ! (>L:CB_E02_DU_ND_CAPT_SWTG)
FNX320_Breaker_E03_CAPT_PFD#(L:CB_E03_CAPT_PFD) ! (>L:CB_E03_CAPT_PFD)
FNX320_Breaker_E04_DU_PFD_CAPT_SWTG#(L:CB_E04_DU_PFD_CAPT_SWTG) ! (>L:CB_E04_DU_PFD_CAPT_SWTG)
FNX320_Breaker_E05_UPPER_ECAM#(L:CB_E05_UPPER_ECAM) ! (>L:CB_E05_UPPER_ECAM)
FNX320_Breaker_E06_DU_ECAM_UPPER_SWTG#(L:CB_E06_DU_ECAM_UPPER_SWTG) ! (>L:CB_E06_DU_ECAM_UPPER_SWTG)
FNX320_Breaker_E07_DMC3_SWTG#(L:CB_E07_DMC3_SWTG) ! (>L:CB_E07_DMC3_SWTG)
FNX320_Breaker_E09_DMC1_SWTG#(L:CB_E09_DMC1_SWTG) ! (>L:CB_E09_DMC1_SWTG)
FNX320_Breaker_E10_DMC3_STDBY_SPLY#(L:CB_E10_DMC3_STDBY_SPLY) ! (>L:CB_E10_DMC3_STDBY_SPLY)
FNX320_Breaker_E11_DMC1_SPLY#(L:CB_E11_DMC1_SPLY) ! (>L:CB_E11_DMC1_SPLY)
FNX320_Breaker_E12_ECAM_CTL_PNL#(L:CB_E12_ECAM_CTL_PNL) ! (>L:CB_E12_ECAM_CTL_PNL)
FNX320_Breaker_E13_CVR_CTL#(L:CB_E13_CVR_CTL) ! (>L:CB_E13_CVR_CTL)
FNX320_Breaker_E14_CVR_DC_SPLY#(L:CB_E14_CVR_DC_SPLY) ! (>L:CB_E14_CVR_DC_SPLY)
FNX320_Breaker_F01_FWC_1_SUPPLY#(L:CB_F01_FWC_1_SUPPLY) ! (>L:CB_F01_FWC_1_SUPPLY)
FNX320_Breaker_F02_SDAC1_AC_ESS_REF#(L:CB_F02_SDAC1_AC_ESS_REF) ! (>L:CB_F02_SDAC1_AC_ESS_REF)
FNX320_Breaker_F03_SDAC2_AC_ESS_REF#(L:CB_F03_SDAC2_AC_ESS_REF) ! (>L:CB_F03_SDAC2_AC_ESS_REF)
FNX320_Breaker_F04_SDAC_1_SUPPLY#(L:CB_F04_SDAC_1_SUPPLY) ! (>L:CB_F04_SDAC_1_SUPPLY)
FNX320_Breaker_F06_ADIRU_1_115#(L:CB_F06_ADIRU_1_115) ! (>L:CB_F06_ADIRU_1_115)
FNX320_Breaker_F11_CLOCK_NORM_SPLY#(L:CB_F11_CLOCK_NORM_SPLY) ! (>L:CB_F11_CLOCK_NORM_SPLY)
FNX320_Breaker_G01_CIDS_DIR_ESS_1#(L:CB_G01_CIDS_DIR_ESS_1) ! (>L:CB_G01_CIDS_DIR_ESS_1)
FNX320_Breaker_G06_ACP_CAPT#(L:CB_G06_ACP_CAPT) ! (>L:CB_G06_ACP_CAPT)
FNX320_Breaker_G07_ACP_FO#(L:CB_G07_ACP_FO) ! (>L:CB_G07_ACP_FO)
FNX320_Breaker_G09_COM_VHF1#(L:CB_G09_COM_VHF1) ! (>L:CB_G09_COM_VHF1)
FNX320_Breaker_G10_COM_RMP1#(L:CB_G10_COM_RMP1) ! (>L:CB_G10_COM_RMP1)
FNX320_Breaker_G11_NAV_ATC1#(L:CB_G11_NAV_ATC1) ! (>L:CB_G11_NAV_ATC1)
FNX320_Breaker_G12_NAV_ILS1#(L:CB_G12_NAV_ILS1) ! (>L:CB_G12_NAV_ILS1)
FNX320_Breaker_G13_NAV_VOR1#(L:CB_G13_NAV_VOR1) ! (>L:CB_G13_NAV_VOR1)
FNX320_Breaker_G14_NAV_DME1#(L:CB_G14_NAV_DME1) ! (>L:CB_G14_NAV_DME1)
FNX320_Breaker_H01_COM_FWD_ATT#(L:CB_H01_COM_FWD_ATT) ! (>L:CB_H01_COM_FWD_ATT)
FNX320_Breaker_H04_ICE_STBY_COMPASS_LT#(L:CB_H04_ICE_STBY_COMPASS_LT) ! (>L:CB_H04_ICE_STBY_COMPASS_LT)
FNX320_Breaker_H08_CKPT_DOME#(L:CB_H08_CKPT_DOME) ! (>L:CB_H08_CKPT_DOME)
FNX320_Breaker_H10_LT_CTL#(L:CB_H10_LT_CTL) ! (>L:CB_H10_LT_CTL)
FNX320_Breaker_H11_AC_BUS_8XP_MONG#(L:CB_H11_AC_BUS_8XP_MONG) ! (>L:CB_H11_AC_BUS_8XP_MONG)
FNX320_Breaker_H11_CIDS_L_AFT#(L:CB_H11_CIDS_L_AFT) ! (>L:CB_H11_CIDS_L_AFT)
FNX320_Breaker_H14_NAV_ADF1#(L:CB_H14_NAV_ADF1) ! (>L:CB_H14_NAV_ADF1)
FNX320_Breaker_HA1_CREW_OXY_SPLY#(L:CB_HA1_CREW_OXY_SPLY) ! (>L:CB_HA1_CREW_OXY_SPLY)
FNX320_Breaker_HA10_CIDS_R_FWD#(L:CB_HA10_CIDS_R_FWD) ! (>L:CB_HA10_CIDS_R_FWD)
FNX320_Breaker_HA12_CIDS_R_AFT#(L:CB_HA12_CIDS_R_AFT) ! (>L:CB_HA12_CIDS_R_AFT)
FNX320_Breaker_HA14_COM_HF1#(L:CB_HA14_COM_HF1) ! (>L:CB_HA14_COM_HF1)
FNX320_Breaker_HA2_PASS_OXY_CTL_1#(L:CB_HA2_PASS_OXY_CTL_1) ! (>L:CB_HA2_PASS_OXY_CTL_1)
FNX320_Breaker_HA3_PASS_OXY_CTL_2#(L:CB_HA3_PASS_OXY_CTL_2) ! (>L:CB_HA3_PASS_OXY_CTL_2)
FNX320_Breaker_HA4_PASS_OXY_CTL_3#(L:CB_HA4_PASS_OXY_CTL_3) ! (>L:CB_HA4_PASS_OXY_CTL_3)
FNX320_Breaker_HA5_PASS_OXY_ACT_1#(L:CB_HA5_PASS_OXY_ACT_1) ! (>L:CB_HA5_PASS_OXY_ACT_1)
FNX320_Breaker_HA6_PASS_OXY_ACT_2#(L:CB_HA6_PASS_OXY_ACT_2) ! (>L:CB_HA6_PASS_OXY_ACT_2)
FNX320_Breaker_HA7_PASS_OXY_ACT_3#(L:CB_HA7_PASS_OXY_ACT_3) ! (>L:CB_HA7_PASS_OXY_ACT_3)
FNX320_Breaker_HA8_PASS_OXY_ACT_4#(L:CB_HA8_PASS_OXY_ACT_4) ! (>L:CB_HA8_PASS_OXY_ACT_4)
FNX320_Breaker_HA9_CIDS_L_FWD#(L:CB_HA9_CIDS_L_FWD) ! (>L:CB_HA9_CIDS_L_FWD)
FNX320_Breaker_J18_CFDIU#(L:CB_J18_CFDIU) ! (>L:CB_J18_CFDIU)
FNX320_Breaker_K02_NAV_ADF2#(L:CB_K02_NAV_ADF2) ! (>L:CB_K02_NAV_ADF2)
FNX320_Breaker_K06_NAV_DME2#(L:CB_K06_NAV_DME2) ! (>L:CB_K06_NAV_DME2)
FNX320_Breaker_K07_NAV_ATC2#(L:CB_K07_NAV_ATC2) ! (>L:CB_K07_NAV_ATC2)
FNX320_Breaker_K08_NAV_VOR2#(L:CB_K08_NAV_VOR2) ! (>L:CB_K08_NAV_VOR2)
FNX320_Breaker_K11_RADIO_ALT_1#(L:CB_K11_RADIO_ALT_1) ! (>L:CB_K11_RADIO_ALT_1)
FNX320_Breaker_K12_RADIO_ALT_2#(L:CB_K12_RADIO_ALT_2) ! (>L:CB_K12_RADIO_ALT_2)
FNX320_Breaker_K19_PDL_PWR_SPLY#(L:CB_K19_PDL_PWR_SPLY) ! (>L:CB_K19_PDL_PWR_SPLY)
FNX320_Breaker_K23_#(L:CB_K23_) ! (>L:CB_K23_)
FNX320_Breaker_K25_STAT_INV#(L:CB_K25_STAT_INV) ! (>L:CB_K25_STAT_INV)
FNX320_Breaker_K39_APU_FUEL_BLOWOFF_CTL#(L:CB_K39_APU_FUEL_BLOWOFF_CTL) ! (>L:CB_K39_APU_FUEL_BLOWOFF_CTL)
FNX320_Breaker_L02_COM_RMP2#(L:CB_L02_COM_RMP2) ! (>L:CB_L02_COM_RMP2)
FNX320_Breaker_L03_COM_RMP3#(L:CB_L03_COM_RMP3) ! (>L:CB_L03_COM_RMP3)
FNX320_Breaker_L04_COM_VHF2#(L:CB_L04_COM_VHF2) ! (>L:CB_L04_COM_VHF2)
FNX320_Breaker_L05_COM_VHF3#(L:CB_L05_COM_VHF3) ! (>L:CB_L05_COM_VHF3)
FNX320_Breaker_L13_COM_HF1#(L:CB_L13_COM_HF1) ! (>L:CB_L13_COM_HF1)
FNX320_Breaker_L15_ATSU#(L:CB_L15_ATSU) ! (>L:CB_L15_ATSU)
FNX320_Breaker_L16_ATSU#(L:CB_L16_ATSU) ! (>L:CB_L16_ATSU)
FNX320_Breaker_L17_DCDU1#(L:CB_L17_DCDU1) ! (>L:CB_L17_DCDU1)
FNX320_Breaker_L18_DCDU2#(L:CB_L18_DCDU2) ! (>L:CB_L18_DCDU2)
FNX320_Breaker_L32_BRK_FAN12#(L:CB_L32_BRK_FAN12) ! (>L:CB_L32_BRK_FAN12)
FNX320_Breaker_L35_BRK_FAN34#(L:CB_L35_BRK_FAN34) ! (>L:CB_L35_BRK_FAN34)
FNX320_Breaker_L38_FIRE_EXTNG_APU_A#(L:CB_L38_FIRE_EXTNG_APU_A) ! (>L:CB_L38_FIRE_EXTNG_APU_A)
FNX320_Breaker_L39_FIRE_EXTNG_APU_B#(L:CB_L39_FIRE_EXTNG_APU_B) ! (>L:CB_L39_FIRE_EXTNG_APU_B)
FNX320_Breaker_L40_APU_AUTO_EXT_GND_TEST#(L:CB_L40_APU_AUTO_EXT_GND_TEST) ! (>L:CB_L40_APU_AUTO_EXT_GND_TEST)
FNX320_Breaker_L41_ECP_SUPPLY#(L:CB_L41_ECP_SUPPLY) ! (>L:CB_L41_ECP_SUPPLY)
FNX320_Breaker_L42_APU_CTL#(L:CB_L42_APU_CTL) ! (>L:CB_L42_APU_CTL)
FNX320_Breaker_L43_FIRE_DET_APU_LOOP_A#(L:CB_L43_FIRE_DET_APU_LOOP_A) ! (>L:CB_L43_FIRE_DET_APU_LOOP_A)
FNX320_Breaker_L44_FIRE_DET_APU_LOOP_B#(L:CB_L44_FIRE_DET_APU_LOOP_B) ! (>L:CB_L44_FIRE_DET_APU_LOOP_B)
FNX320_Breaker_M02_ACP_3D#(L:CB_M02_ACP_3D) ! (>L:CB_M02_ACP_3D)
FNX320_Breaker_M17_FMGC2#(L:CB_M17_FMGC2) ! (>L:CB_M17_FMGC2)
FNX320_Breaker_M18_FAC_2_NORM#(L:CB_M18_FAC_2_NORM) ! (>L:CB_M18_FAC_2_NORM)
FNX320_Breaker_M19_FAC_2_STBY#(L:CB_M19_FAC_2_STBY) ! (>L:CB_M19_FAC_2_STBY)
FNX320_Breaker_M20_RUDDER_TRIM_IND#(L:CB_M20_RUDDER_TRIM_IND) ! (>L:CB_M20_RUDDER_TRIM_IND)
FNX320_Breaker_M21_FCU2#(L:CB_M21_FCU2) ! (>L:CB_M21_FCU2)
FNX320_Breaker_M22_XFR_VALVE_2_L#(L:CB_M22_XFR_VALVE_2_L) ! (>L:CB_M22_XFR_VALVE_2_L)
FNX320_Breaker_M23_XFR_VALVE_2_R#(L:CB_M23_XFR_VALVE_2_R) ! (>L:CB_M23_XFR_VALVE_2_R)
FNX320_Breaker_M24_XFEED_VALVE_MOT2#(L:CB_M24_XFEED_VALVE_MOT2) ! (>L:CB_M24_XFEED_VALVE_MOT2)
FNX320_Breaker_M25_LP_VALVE_MOT2_ENG1#(L:CB_M25_LP_VALVE_MOT2_ENG1) ! (>L:CB_M25_LP_VALVE_MOT2_ENG1)
FNX320_Breaker_M26_LP_VALVE_MOT2_ENG2#(L:CB_M26_LP_VALVE_MOT2_ENG2) ! (>L:CB_M26_LP_VALVE_MOT2_ENG2)
FNX320_Breaker_M27_FQI_CHAN_2#(L:CB_M27_FQI_CHAN_2) ! (>L:CB_M27_FQI_CHAN_2)
FNX320_Breaker_M32_BRK_FAN_CTL#(L:CB_M32_BRK_FAN_CTL) ! (>L:CB_M32_BRK_FAN_CTL)
FNX320_Breaker_M33_BSCU_1_SPLY#(L:CB_M33_BSCU_1_SPLY) ! (>L:CB_M33_BSCU_1_SPLY)
FNX320_Breaker_M34_BSCU_1_CTL#(L:CB_M34_BSCU_1_CTL) ! (>L:CB_M34_BSCU_1_CTL)
FNX320_Breaker_M35_BSCU_2_SPLY#(L:CB_M35_BSCU_2_SPLY) ! (>L:CB_M35_BSCU_2_SPLY)
FNX320_Breaker_M36_BSCU_2_CTL#(L:CB_M36_BSCU_2_CTL) ! (>L:CB_M36_BSCU_2_CTL)
FNX320_Breaker_M38_APU_FUEL_PUMP_CTL#(L:CB_M38_APU_FUEL_PUMP_CTL) ! (>L:CB_M38_APU_FUEL_PUMP_CTL)
FNX320_Breaker_M39_APU_LP_VALVE_SPLY#(L:CB_M39_APU_LP_VALVE_SPLY) ! (>L:CB_M39_APU_LP_VALVE_SPLY)
FNX320_Breaker_M40_APU_LP_VALVE_CTL#(L:CB_M40_APU_LP_VALVE_CTL) ! (>L:CB_M40_APU_LP_VALVE_CTL)
FNX320_Breaker_M41_APU_FIRE_STBY#(L:CB_M41_APU_FIRE_STBY) ! (>L:CB_M41_APU_FIRE_STBY)
FNX320_Breaker_M42_APU_FIRE_NORM#(L:CB_M42_APU_FIRE_NORM) ! (>L:CB_M42_APU_FIRE_NORM)
FNX320_Breaker_N03_CLOCK_STBY_SPLY#(L:CB_N03_CLOCK_STBY_SPLY) ! (>L:CB_N03_CLOCK_STBY_SPLY)
FNX320_Breaker_N04_ADIRS_3_28#(L:CB_N04_ADIRS_3_28) ! (>L:CB_N04_ADIRS_3_28)
FNX320_Breaker_N05_ADIRS_2_28#(L:CB_N05_ADIRS_2_28) ! (>L:CB_N05_ADIRS_2_28)
FNX320_Breaker_N06_ADIRU_3_115#(L:CB_N06_ADIRU_3_115) ! (>L:CB_N06_ADIRU_3_115)
FNX320_Breaker_N07_ADIRU_2_115#(L:CB_N07_ADIRU_2_115) ! (>L:CB_N07_ADIRU_2_115)
FNX320_Breaker_N10_2PWR_SHED#(L:CB_N10_2PWR_SHED) ! (>L:CB_N10_2PWR_SHED)
FNX320_Breaker_N16_STICK_LOCK#(L:CB_N16_STICK_LOCK) ! (>L:CB_N16_STICK_LOCK)
FNX320_Breaker_N20_MCDU_2#(L:CB_N20_MCDU_2) ! (>L:CB_N20_MCDU_2)
FNX320_Breaker_N23_L_PUMP1_SPLY#(L:CB_N23_L_PUMP1_SPLY) ! (>L:CB_N23_L_PUMP1_SPLY)
FNX320_Breaker_N26_L_PUMP2_SPLY#(L:CB_N26_L_PUMP2_SPLY) ! (>L:CB_N26_L_PUMP2_SPLY)
FNX320_Breaker_N28_IGGS_CTLR#(L:CB_N28_IGGS_CTLR) ! (>L:CB_N28_IGGS_CTLR)
FNX320_Breaker_N30_HYD_POWER_Y#(L:CB_N30_HYD_POWER_Y) ! (>L:CB_N30_HYD_POWER_Y)
FNX320_Breaker_N34_PTU_CTL#(L:CB_N34_PTU_CTL) ! (>L:CB_N34_PTU_CTL)
FNX320_Breaker_N35_GYB_LEAK_TEST#(L:CB_N35_GYB_LEAK_TEST) ! (>L:CB_N35_GYB_LEAK_TEST)
FNX320_Breaker_N36_PARKING_BRAKE_CTL_NORM#(L:CB_N36_PARKING_BRAKE_CTL_NORM) ! (>L:CB_N36_PARKING_BRAKE_CTL_NORM)
FNX320_Breaker_N37_PARKING_BRAKE_CTL_STBY#(L:CB_N37_PARKING_BRAKE_CTL_STBY) ! (>L:CB_N37_PARKING_BRAKE_CTL_STBY)
FNX320_Breaker_N44_ENG1_REV_LOCK#(L:CB_N44_ENG1_REV_LOCK) ! (>L:CB_N44_ENG1_REV_LOCK)
FNX320_Breaker_N45_ENG2_REV_LOCK#(L:CB_N45_ENG2_REV_LOCK) ! (>L:CB_N45_ENG2_REV_LOCK)
FNX320_Breaker_P06_GPWS_28#(L:CB_P06_GPWS_28) ! (>L:CB_P06_GPWS_28)
FNX320_Breaker_P07_GPWS_115#(L:CB_P07_GPWS_115) ! (>L:CB_P07_GPWS_115)
FNX320_Breaker_P09_HORN_SUPPLY#(L:CB_P09_HORN_SUPPLY) ! (>L:CB_P09_HORN_SUPPLY)
FNX320_Breaker_P16_SLT_FLP_2_POS_IND#(L:CB_P16_SLT_FLP_2_POS_IND) ! (>L:CB_P16_SLT_FLP_2_POS_IND)
FNX320_Breaker_P19_WTB_SLT_2#(L:CB_P19_WTB_SLT_2) ! (>L:CB_P19_WTB_SLT_2)
FNX320_Breaker_P20_WTB_FLP_2#(L:CB_P20_WTB_FLP_2) ! (>L:CB_P20_WTB_FLP_2)
FNX320_Breaker_P29_ACT_XFR_VLV_AUTO_CTL#(L:CB_P29_ACT_XFR_VLV_AUTO_CTL) ! (>L:CB_P29_ACT_XFR_VLV_AUTO_CTL)
FNX320_Breaker_P30_ABCU_HOT_BUS_SPLY#(L:CB_P30_ABCU_HOT_BUS_SPLY) ! (>L:CB_P30_ABCU_HOT_BUS_SPLY)
FNX320_Breaker_P33_RAT_SPLY_EXTN_SOL1#(L:CB_P33_RAT_SPLY_EXTN_SOL1) ! (>L:CB_P33_RAT_SPLY_EXTN_SOL1)
FNX320_Breaker_P39_IGN_ENG1_SYSA#(L:CB_P39_IGN_ENG1_SYSA) ! (>L:CB_P39_IGN_ENG1_SYSA)
FNX320_Breaker_P40_IGN_ENG2_SYSA#(L:CB_P40_IGN_ENG2_SYSA) ! (>L:CB_P40_IGN_ENG2_SYSA)
FNX320_Breaker_P41_IGN_ENG1_SYSB#(L:CB_P41_IGN_ENG1_SYSB) ! (>L:CB_P41_IGN_ENG1_SYSB)
FNX320_Breaker_P42_IGN_ENG2_SYSB#(L:CB_P42_IGN_ENG2_SYSB) ! (>L:CB_P42_IGN_ENG2_SYSB)
FNX320_Breaker_Q02_SDAC2_AC_REF_2#(L:CB_Q02_SDAC2_AC_REF_2) ! (>L:CB_Q02_SDAC2_AC_REF_2)
FNX320_Breaker_Q03_SDAC1_AC_REF_2#(L:CB_Q03_SDAC1_AC_REF_2) ! (>L:CB_Q03_SDAC1_AC_REF_2)
FNX320_Breaker_Q05_SDAC2_AC_REF_1#(L:CB_Q05_SDAC2_AC_REF_1) ! (>L:CB_Q05_SDAC2_AC_REF_1)
FNX320_Breaker_Q06_SDAC_2_SUPPLY#(L:CB_Q06_SDAC_2_SUPPLY) ! (>L:CB_Q06_SDAC_2_SUPPLY)
FNX320_Breaker_Q07_FWC_2_SUPPLY#(L:CB_Q07_FWC_2_SUPPLY) ! (>L:CB_Q07_FWC_2_SUPPLY)
FNX320_Breaker_Q08_DMC2_SPLY#(L:CB_Q08_DMC2_SPLY) ! (>L:CB_Q08_DMC2_SPLY)
FNX320_Breaker_Q09_DMC3_SPLY#(L:CB_Q09_DMC3_SPLY) ! (>L:CB_Q09_DMC3_SPLY)
FNX320_Breaker_Q16_FC_THS_MOT1#(L:CB_Q16_FC_THS_MOT1) ! (>L:CB_Q16_FC_THS_MOT1)
FNX320_Breaker_Q17_FC_THS_MOT3#(L:CB_Q17_FC_THS_MOT3) ! (>L:CB_Q17_FC_THS_MOT3)
FNX320_Breaker_Q18_SEC_2#(L:CB_Q18_SEC_2) ! (>L:CB_Q18_SEC_2)
FNX320_Breaker_Q19_SEC_3#(L:CB_Q19_SEC_3) ! (>L:CB_Q19_SEC_3)
FNX320_Breaker_Q20_FCTL_FCDC1_SPLY#(L:CB_Q20_FCTL_FCDC1_SPLY) ! (>L:CB_Q20_FCTL_FCDC1_SPLY)
FNX320_Breaker_Q21_FLAP_CTL_MON_SYS_2#(L:CB_Q21_FLAP_CTL_MON_SYS_2) ! (>L:CB_Q21_FLAP_CTL_MON_SYS_2)
FNX320_Breaker_Q23_R_PUMP1_SPLY#(L:CB_Q23_R_PUMP1_SPLY) ! (>L:CB_Q23_R_PUMP1_SPLY)
FNX320_Breaker_Q26_R_PUMP2_SPLY#(L:CB_Q26_R_PUMP2_SPLY) ! (>L:CB_Q26_R_PUMP2_SPLY)
FNX320_Breaker_Q34_LGCIU_1_GND#(L:CB_Q34_LGCIU_1_GND) ! (>L:CB_Q34_LGCIU_1_GND)
FNX320_Breaker_Q35_LGCIU_2#(L:CB_Q35_LGCIU_2) ! (>L:CB_Q35_LGCIU_2)
FNX320_Breaker_Q38_ENG1_DET_LOOP_B#(L:CB_Q38_ENG1_DET_LOOP_B) ! (>L:CB_Q38_ENG1_DET_LOOP_B)
FNX320_Breaker_Q39_ENG2_DET_LOOP_A#(L:CB_Q39_ENG2_DET_LOOP_A) ! (>L:CB_Q39_ENG2_DET_LOOP_A)
FNX320_Breaker_Q40_ENG2_FADEC_B_EIU_2#(L:CB_Q40_ENG2_FADEC_B_EIU_2) ! (>L:CB_Q40_ENG2_FADEC_B_EIU_2)
FNX320_Breaker_Q41_FIRE_EXTNG_2A#(L:CB_Q41_FIRE_EXTNG_2A) ! (>L:CB_Q41_FIRE_EXTNG_2A)
FNX320_Breaker_Q42_FIRE_EXTNG_2B#(L:CB_Q42_FIRE_EXTNG_2B) ! (>L:CB_Q42_FIRE_EXTNG_2B)
FNX320_Breaker_Q43_FIRE_EXTNG_1A#(L:CB_Q43_FIRE_EXTNG_1A) ! (>L:CB_Q43_FIRE_EXTNG_1A)
FNX320_Breaker_Q44_FIRE_EXTNG_1B#(L:CB_Q44_FIRE_EXTNG_1B) ! (>L:CB_Q44_FIRE_EXTNG_1B)
FNX320_Breaker_R03_FO_PFD#(L:CB_R03_FO_PFD) ! (>L:CB_R03_FO_PFD)
FNX320_Breaker_R04_FO_ND#(L:CB_R04_FO_ND) ! (>L:CB_R04_FO_ND)
FNX320_Breaker_R05_DU_PFD_FO_SWTG#(L:CB_R05_DU_PFD_FO_SWTG) ! (>L:CB_R05_DU_PFD_FO_SWTG)
FNX320_Breaker_R06_DU_ND_FO_SWTG#(L:CB_R06_DU_ND_FO_SWTG) ! (>L:CB_R06_DU_ND_FO_SWTG)
FNX320_Breaker_R08_DMC2_SWTG#(L:CB_R08_DMC2_SWTG) ! (>L:CB_R08_DMC2_SWTG)
FNX320_Breaker_R10_DU_ECAM_LOWER_SWTG#(L:CB_R10_DU_ECAM_LOWER_SWTG) ! (>L:CB_R10_DU_ECAM_LOWER_SWTG)
FNX320_Breaker_R11_LOWER_ECAM#(L:CB_R11_LOWER_ECAM) ! (>L:CB_R11_LOWER_ECAM)
FNX320_Breaker_R14_ELT_NAV_AC_IDENT#(L:CB_R14_ELT_NAV_AC_IDENT) ! (>L:CB_R14_ELT_NAV_AC_IDENT)
FNX320_Breaker_R16_RUDDER_FTU#(L:CB_R16_RUDDER_FTU) ! (>L:CB_R16_RUDDER_FTU)
FNX320_Breaker_R20_ELAC_2_NORM#(L:CB_R20_ELAC_2_NORM) ! (>L:CB_R20_ELAC_2_NORM)
FNX320_Breaker_R21_SLAT_CTL_MON_SYS_2#(L:CB_R21_SLAT_CTL_MON_SYS_2) ! (>L:CB_R21_SLAT_CTL_MON_SYS_2)
FNX320_Breaker_R23_L_PUMP1_CTL#(L:CB_R23_L_PUMP1_CTL) ! (>L:CB_R23_L_PUMP1_CTL)
FNX320_Breaker_R24_L_PUMP2_CTL#(L:CB_R24_L_PUMP2_CTL) ! (>L:CB_R24_L_PUMP2_CTL)
FNX320_Breaker_R25_CTR_PUMP1_CTL#(L:CB_R25_CTR_PUMP1_CTL) ! (>L:CB_R25_CTR_PUMP1_CTL)
FNX320_Breaker_R26_CTR_PUMP2_CTL#(L:CB_R26_CTR_PUMP2_CTL) ! (>L:CB_R26_CTR_PUMP2_CTL)
FNX320_Breaker_R27_CTR_AUTO_CTL#(L:CB_R27_CTR_AUTO_CTL) ! (>L:CB_R27_CTR_AUTO_CTL)
FNX320_Breaker_R28_R_PUMP1_CTL#(L:CB_R28_R_PUMP1_CTL) ! (>L:CB_R28_R_PUMP1_CTL)
FNX320_Breaker_R29_L_PUMP2_CTL#(L:CB_R29_L_PUMP2_CTL) ! (>L:CB_R29_L_PUMP2_CTL)
FNX320_Breaker_R41_ENG1_FADEC_B_EIU_1#(L:CB_R41_ENG1_FADEC_B_EIU_1) ! (>L:CB_R41_ENG1_FADEC_B_EIU_1)
FNX320_Breaker_S06_WTB_SLT_1#(L:CB_S06_WTB_SLT_1) ! (>L:CB_S06_WTB_SLT_1)
FNX320_Breaker_S07_WTB_FLP_1#(L:CB_S07_WTB_FLP_1) ! (>L:CB_S07_WTB_FLP_1)
FNX320_Breaker_S22_AFT_CARGO_VENT_FAN#(L:CB_S22_AFT_CARGO_VENT_FAN) ! (>L:CB_S22_AFT_CARGO_VENT_FAN)
FNX320_Breaker_T02_NAV_LOGO_2#(L:CB_T02_NAV_LOGO_2) ! (>L:CB_T02_NAV_LOGO_2)
FNX320_Breaker_T03_NAV_LOGO_1#(L:CB_T03_NAV_LOGO_1) ! (>L:CB_T03_NAV_LOGO_1)
FNX320_Breaker_T04_LANDING_LIGHT_SPLY_L#(L:CB_T04_LANDING_LIGHT_SPLY_L) ! (>L:CB_T04_LANDING_LIGHT_SPLY_L)
FNX320_Breaker_T05_LANDING_LIGHT_CTL_L#(L:CB_T05_LANDING_LIGHT_CTL_L) ! (>L:CB_T05_LANDING_LIGHT_CTL_L)
FNX320_Breaker_T06_LANDING_LIGHT_SPLY_R#(L:CB_T06_LANDING_LIGHT_SPLY_R) ! (>L:CB_T06_LANDING_LIGHT_SPLY_R)
FNX320_Breaker_T07_LANDING_LIGHT_CTL_R#(L:CB_T07_LANDING_LIGHT_CTL_R) ! (>L:CB_T07_LANDING_LIGHT_CTL_R)
FNX320_Breaker_T13_CPKT_LOCK#(L:CB_T13_CPKT_LOCK) ! (>L:CB_T13_CPKT_LOCK)
FNX320_Breaker_U03_BEACON_LOWER#(L:CB_U03_BEACON_LOWER) ! (>L:CB_U03_BEACON_LOWER)
FNX320_Breaker_U06_BEACON_UPPER#(L:CB_U06_BEACON_UPPER) ! (>L:CB_U06_BEACON_UPPER)
FNX320_Breaker_U19_LAV_GALLEY_FAN_SPLY#(L:CB_U19_LAV_GALLEY_FAN_SPLY) ! (>L:CB_U19_LAV_GALLEY_FAN_SPLY)
FNX320_Breaker_U21_LAV_GALLEY_FAN_CTL#(L:CB_U21_LAV_GALLEY_FAN_CTL) ! (>L:CB_U21_LAV_GALLEY_FAN_CTL)
FNX320_Breaker_V02_LOGO_LIGHT_RIGHT#(L:CB_V02_LOGO_LIGHT_RIGHT) ! (>L:CB_V02_LOGO_LIGHT_RIGHT)
FNX320_Breaker_V03_LOGO_LIGHT_LEFT#(L:CB_V03_LOGO_LIGHT_LEFT) ! (>L:CB_V03_LOGO_LIGHT_LEFT)
FNX320_Breaker_V05_WING_STROBE_LIGHT#(L:CB_V05_WING_STROBE_LIGHT) ! (>L:CB_V05_WING_STROBE_LIGHT)
FNX320_Breaker_V12_ICE_DET_L#(L:CB_V12_ICE_DET_L) ! (>L:CB_V12_ICE_DET_L)
FNX320_Breaker_V13_ICE_DET_R#(L:CB_V13_ICE_DET_R) ! (>L:CB_V13_ICE_DET_R)
FNX320_Breaker_W02_WING_LIGHT_LEFT#(L:CB_W02_WING_LIGHT_LEFT) ! (>L:CB_W02_WING_LIGHT_LEFT)
FNX320_Breaker_W03_WING_LIGHT_RIGHT#(L:CB_W03_WING_LIGHT_RIGHT) ! (>L:CB_W03_WING_LIGHT_RIGHT)
FNX320_Breaker_W05_RWY_TURNOFF_R#(L:CB_W05_RWY_TURNOFF_R) ! (>L:CB_W05_RWY_TURNOFF_R)
FNX320_Breaker_W06_RWY_TURNOFF_L#(L:CB_W06_RWY_TURNOFF_L) ! (>L:CB_W06_RWY_TURNOFF_L)
FNX320_Breaker_W07_NOSE_LIGHT_TAKEOFF#(L:CB_W07_NOSE_LIGHT_TAKEOFF) ! (>L:CB_W07_NOSE_LIGHT_TAKEOFF)
FNX320_Breaker_W08_NOSE_LIGHT_TAXI#(L:CB_W08_NOSE_LIGHT_TAXI) ! (>L:CB_W08_NOSE_LIGHT_TAXI)
FNX320_Breaker_W09_NOSE_LIGHT_CTL#(L:CB_W09_NOSE_LIGHT_CTL) ! (>L:CB_W09_NOSE_LIGHT_CTL)
FNX320_Breaker_W10_ENG_ANTI_ICE_2#(L:CB_W10_ENG_ANTI_ICE_2) ! (>L:CB_W10_ENG_ANTI_ICE_2)
FNX320_Breaker_W12_WIPER_FO#(L:CB_W12_WIPER_FO) ! (>L:CB_W12_WIPER_FO)
FNX320_Breaker_W13_WHC_2#(L:CB_W13_WHC_2) ! (>L:CB_W13_WHC_2)
FNX320_Breaker_W18_RECIRC_R_SPLY#(L:CB_W18_RECIRC_R_SPLY) ! (>L:CB_W18_RECIRC_R_SPLY)
FNX320_Breaker_W20_RECIRC_R_CTL#(L:CB_W20_RECIRC_R_CTL) ! (>L:CB_W20_RECIRC_R_CTL)
FNX320_Breaker_W25_DC_BUS_TIE#(L:CB_W25_DC_BUS_TIE) ! (>L:CB_W25_DC_BUS_TIE)
FNX320_Breaker_W26_ESS_DC_BUS_TIE#(L:CB_W26_ESS_DC_BUS_TIE) ! (>L:CB_W26_ESS_DC_BUS_TIE)
FNX320_Breaker_X10_ENG_ANTI_ICE_1#(L:CB_X10_ENG_ANTI_ICE_1) ! (>L:CB_X10_ENG_ANTI_ICE_1)
FNX320_Breaker_X12_WIPER_CAPT#(L:CB_X12_WIPER_CAPT) ! (>L:CB_X12_WIPER_CAPT)
FNX320_Breaker_X13_WHC_1#(L:CB_X13_WHC_1) ! (>L:CB_X13_WHC_1)
FNX320_Breaker_X18_RECIRC_L_SPLY#(L:CB_X18_RECIRC_L_SPLY) ! (>L:CB_X18_RECIRC_L_SPLY)
FNX320_Breaker_X20_RECIRC_L_CTL#(L:CB_X20_RECIRC_L_CTL) ! (>L:CB_X20_RECIRC_L_CTL)
FNX320_Breaker_Y03_OVHD_PANEL#(L:CB_Y03_OVHD_PANEL) ! (>L:CB_Y03_OVHD_PANEL)
FNX320_Breaker_Y04_INST_LIGHT_PED#(L:CB_Y04_INST_LIGHT_PED) ! (>L:CB_Y04_INST_LIGHT_PED)
FNX320_Breaker_Y05_GLARE_SHIELD#(L:CB_Y05_GLARE_SHIELD) ! (>L:CB_Y05_GLARE_SHIELD)
FNX320_Breaker_Y06_CKPT_DOME#(L:CB_Y06_CKPT_DOME) ! (>L:CB_Y06_CKPT_DOME)
FNX320_Breaker_Y11_PROBES_2_STATIC#(L:CB_Y11_PROBES_2_STATIC) ! (>L:CB_Y11_PROBES_2_STATIC)
FNX320_Breaker_Y12_PROBES_2_PHC_SUPPLY#(L:CB_Y12_PROBES_2_PHC_SUPPLY) ! (>L:CB_Y12_PROBES_2_PHC_SUPPLY)
FNX320_Breaker_Y13_PROBES_2_AOA#(L:CB_Y13_PROBES_2_AOA) ! (>L:CB_Y13_PROBES_2_AOA)
FNX320_Breaker_Y14_PROBES_2_PITOT#(L:CB_Y14_PROBES_2_PITOT) ! (>L:CB_Y14_PROBES_2_PITOT)
FNX320_Breaker_Y15_PROBES_2_TAT#(L:CB_Y15_PROBES_2_TAT) ! (>L:CB_Y15_PROBES_2_TAT)
FNX320_Breaker_Y16_PROBES_3_PHC_SUPPLY#(L:CB_Y16_PROBES_3_PHC_SUPPLY) ! (>L:CB_Y16_PROBES_3_PHC_SUPPLY)
FNX320_Breaker_Y17_AVNCS_VENT_MONG#(L:CB_Y17_AVNCS_VENT_MONG) ! (>L:CB_Y17_AVNCS_VENT_MONG)
FNX320_Breaker_Y22_CAB_PRESS_CTL_2#(L:CB_Y22_CAB_PRESS_CTL_2) ! (>L:CB_Y22_CAB_PRESS_CTL_2)
FNX320_Breaker_Y23_CAB_MAN_PRESS#(L:CB_Y23_CAB_MAN_PRESS) ! (>L:CB_Y23_CAB_MAN_PRESS)
FNX320_Breaker_Z04_LIGHTING_FLOOD_CTR#(L:CB_Z04_LIGHTING_FLOOD_CTR) ! (>L:CB_Z04_LIGHTING_FLOOD_CTR)
FNX320_Breaker_Z05_LIGHTING_FLOOD_CAPT#(L:CB_Z05_LIGHTING_FLOOD_CAPT) ! (>L:CB_Z05_LIGHTING_FLOOD_CAPT)
FNX320_Breaker_Z06_LIGHTING_FLOOD_FO#(L:CB_Z06_LIGHTING_FLOOD_FO) ! (>L:CB_Z06_LIGHTING_FLOOD_FO)
FNX320_Breaker_Z07_LIGHTING_AVNCS_CPT#(L:CB_Z07_LIGHTING_AVNCS_CPT) ! (>L:CB_Z07_LIGHTING_AVNCS_CPT)
FNX320_Breaker_Z08_AVNCS_CPT_DC#(L:CB_Z08_AVNCS_CPT_DC) ! (>L:CB_Z08_AVNCS_CPT_DC)
FNX320_Breaker_Z09_AVNCS_CPT_AC#(L:CB_Z09_AVNCS_CPT_AC) ! (>L:CB_Z09_AVNCS_CPT_AC)
FNX320_Breaker_Z12_PROBES_1_TAT#(L:CB_Z12_PROBES_1_TAT) ! (>L:CB_Z12_PROBES_1_TAT)
FNX320_Breaker_Z13_PROBES_1_STATIC#(L:CB_Z13_PROBES_1_STATIC) ! (>L:CB_Z13_PROBES_1_STATIC)
FNX320_Breaker_Z14_PROBES_3_STATIC#(L:CB_Z14_PROBES_3_STATIC) ! (>L:CB_Z14_PROBES_3_STATIC)
FNX320_Breaker_Z15_PROBES_3_AOA#(L:CB_Z15_PROBES_3_AOA) ! (>L:CB_Z15_PROBES_3_AOA)
FNX320_Breaker_Z16_PROBES_3_PITOT#(L:CB_Z16_PROBES_3_PITOT) ! (>L:CB_Z16_PROBES_3_PITOT)
FNX320_Breaker_Z20_X_FEED_VALVE_NORM#(L:CB_Z20_X_FEED_VALVE_NORM) ! (>L:CB_Z20_X_FEED_VALVE_NORM)
FNX320_Breaker_Z22_AIRBLEED_ENG2_MONG#(L:CB_Z22_AIRBLEED_ENG2_MONG) ! (>L:CB_Z22_AIRBLEED_ENG2_MONG)
FNX320_Breaker_Z23_AIRBLEED_ENG2_CTL#(L:CB_Z23_AIRBLEED_ENG2_CTL) ! (>L:CB_Z23_AIRBLEED_ENG2_CTL)
FNX320_Electrical_AC_Essential_Feed_Button_Press#1 (>L:S_OH_ELEC_AC_ESS_FEED)
FNX320_Electrical_AC_Essential_Feed_Button_Release#0 (>L:S_OH_ELEC_AC_ESS_FEED)
FNX320_Electrical_APU_Generator_Button_Press#(L:S_OH_ELEC_APU_GENERATOR) ! (>L:S_OH_ELEC_APU_GENERATOR) 1 (>L:S_OH_ELEC_APU_GENERATOR_Anim)
FNX320_Electrical_APU_Generator_Button_Release#(L:S_OH_ELEC_APU_GENERATOR) 0 == if{ 0 (>L:S_OH_ELEC_APU_GENERATOR_Anim) } (L:S_OH_ELEC_APU_GENERATOR) 1 == if{ 2 (>L:S_OH_ELEC_APU_GENERATOR_Anim) }
FNX320_Electrical_Bus_Tie_Button_Press#1 (>L:S_OH_ELEC_BUSTIE)
FNX320_Electrical_Bus_Tie_Button_Release#0 (>L:S_OH_ELEC_BUSTIE)
FNX320_Electrical_Commercial_Button_Press#1 (>L:S_OH_ELEC_COMMERCIAL)
FNX320_Electrical_Commercial_Button_Release#0 (>L:S_OH_ELEC_COMMERCIAL)
FNX320_Electrical_Galley_Cabin_Button_Press#1 (>L:S_OH_ELEC_GALY)
FNX320_Electrical_Galley_Cabin_Button_Release#0 (>L:S_OH_ELEC_GALY)
FNX320_Electrical_Generator_1_Button_Press#(L:S_OH_ELEC_GEN1) ! (>L:S_OH_ELEC_GEN1) 1 (>L:S_OH_ELEC_GEN1_Anim)
FNX320_Electrical_Generator_1_Button_Release#(L:S_OH_ELEC_GEN1) 0 == if{ 0 (>L:S_OH_ELEC_GEN1_Anim) } (L:S_OH_ELEC_GEN1) 1 == if{ 2 (>L:S_OH_ELEC_GEN1_Anim) }
FNX320_Electrical_Generator_2_Button_Press#(L:S_OH_ELEC_GEN2) ! (>L:S_OH_ELEC_GEN2) 1 (>L:S_OH_ELEC_GEN2_Anim)
FNX320_Electrical_Generator_2_Button_Release#(L:S_OH_ELEC_GEN2) 0 == if{ 0 (>L:S_OH_ELEC_GEN2_Anim) } (L:S_OH_ELEC_GEN2) 1 == if{ 2 (>L:S_OH_ELEC_GEN2_Anim) }
FNX320_Electrical_IDG_1_Button_Press#1 (>L:S_OH_ELEC_IDG1)
FNX320_Electrical_IDG_1_Button_Release#0 (>L:S_OH_ELEC_IDG1)
FNX320_Electrical_IDG_2_Button_Press#1 (>L:S_OH_ELEC_IDG2)
FNX320_Electrical_IDG_2_Button_Release#0 (>L:S_OH_ELEC_IDG2)
FNX320_Emergency_Electrical_Generator_1_Line_Button_Press#(L:S_OH_ELEC_GEN1_LINE) ! (>L:S_OH_ELEC_GEN1_LINE) 1 (>L:S_OH_ELEC_GEN1_LINE_Anim)
FNX320_Emergency_Electrical_Generator_1_Line_Button_Release#(L:S_OH_ELEC_GEN1_LINE) 0 == if{ 0 (>L:S_OH_ELEC_GEN1_LINE_Anim) } (L:S_OH_ELEC_GEN1_LINE) 1 == if{ 2 (>L:S_OH_ELEC_GEN1_LINE_Anim) }
FNX320_Emergency_Electrical_Generator_Test_Button_Press#(L:S_OH_ELEC_EMER_GEN_TEST) ! (>L:S_OH_ELEC_EMER_GEN_TEST) 1 (>L:S_OH_ELEC_EMER_GEN_TEST_Anim)
FNX320_Emergency_Electrical_Generator_Test_Button_Release#(L:S_OH_ELEC_EMER_GEN_TEST) 0 == if{ 0 (>L:S_OH_ELEC_EMER_GEN_TEST_Anim) } (L:S_OH_ELEC_EMER_GEN_TEST) 1 == if{ 2 (>L:S_OH_ELEC_EMER_GEN_TEST_Anim) }
FNX320_Emergency_Electrical_Manual_On_Button_Release#(L:S_OH_ELEC_EMER_GEN_MAN_ON) 0 == if{ 0 (>L:S_OH_ELEC_EMER_GEN_MAN_ON_Anim) } (L:S_OH_ELEC_EMER_GEN_MAN_ON) 1 == if{ 2 (>L:S_OH_ELEC_EMER_GEN_MAN_ON_Anim) }
FNX320_Overhead_APU_Auto_Exiting_Reset_Button_Press#1 (>L:S_OH_APU_AUTOEXTING_RESET)
FNX320_Overhead_APU_Auto_Exiting_Reset_Button_Release#0 (>L:S_OH_APU_AUTOEXTING_RESET)
FNX320_Overhead_APU_Auto_Exiting_Test_Button_Press#1 (>L:S_OH_APU_AUTOEXTING_TEST)
FNX320_Overhead_APU_Auto_Exiting_Test_Button_Release#0 (>L:S_OH_APU_AUTOEXTING_TEST)
FNX320_Emergency_Electrical_Manual_On_Button_Press#(L:S_OH_ELEC_EMER_GEN_MAN_ON) ! (>L:S_OH_ELEC_EMER_GEN_MAN_ON) 1 (>L:S_OH_ELEC_EMER_GEN_MAN_ON_Anim)
FNX320_OH_Elec_Bat1_Press#(L:S_OH_ELEC_BAT1) ! (>L:S_OH_ELEC_BAT1) 1 (>L:S_OH_ELEC_BAT1_Anim)
FNX320_OH_Elec_Bat1_Release#(L:S_OH_ELEC_BAT1) 0 == if{ 0 (>L:S_OH_ELEC_BAT1_Anim) } (L:S_OH_ELEC_BAT1) 1 == if{ 2 (>L:S_OH_ELEC_BAT1_Anim) }
FNX320_OH_Elec_Bat2_Press#(L:S_OH_ELEC_BAT2) ! (>L:S_OH_ELEC_BAT2) 1 (>L:S_OH_ELEC_BAT2_Anim)
FNX320_OH_Elec_Bat2_Release#(L:S_OH_ELEC_BAT2) 0 == if{ 0 (>L:S_OH_ELEC_BAT2_Anim) } (L:S_OH_ELEC_BAT2) 1 == if{ 2 (>L:S_OH_ELEC_BAT2_Anim) }
FNX320_APU_BLEED_SWITCH#(L:S_OH_PNEUMATIC_APU_BLEED) ! (>L:S_OH_PNEUMATIC_APU_BLEED)
FNX320_APU_MASTER_SWITCH#(L:S_OH_ELEC_APU_MASTER) ! (>L:S_OH_ELEC_APU_MASTER)
FNX320_APU_START_SWITCH#(L:S_OH_ELEC_APU_START) 2 + (>L:S_OH_ELEC_APU_START)
FNX320_OH_ELEC_EXT_PWR_SWITCH#(L:S_OH_ELEC_EXT_PWR) ! (>L:S_OH_ELEC_EXT_PWR)
FNX320_OVHD_BAT1_L_OFF#0 (>L:S_OH_ELEC_BAT1)
FNX320_OVHD_BAT1_L_ON#1 (>L:S_OH_ELEC_BAT1)
FNX320_OVHD_BAT2_L_OFF#0 (>L:S_OH_ELEC_BAT2)
FNX320_OVHD_BAT2_L_ON#1 (>L:S_OH_ELEC_BAT2)
//FenixSim/A320/Engine
FNX320_AUTOTHROTTLE_LEFT_DISC_PUSH#(L:S_FC_THR_INST_DISCONNECT1) ++ (>L:S_FC_THR_INST_DISCONNECT1)
FNX320_AUTOTHROTTLE_LEFT_DISC_RELEASE#(L:S_FC_THR_INST_DISCONNECT1) ++ (>L:S_FC_THR_INST_DISCONNECT1) 
FNX320_AUTOTHROTTLE_RIGHT_DISC_PUSH#(L:S_FC_THR_INST_DISCONNECT2) ++ (>L:S_FC_THR_INST_DISCONNECT2) 
FNX320_AUTOTHROTTLE_RIGHT_DISC_RELEASE#(L:S_FC_THR_INST_DISCONNECT2) ++ (>L:S_FC_THR_INST_DISCONNECT2) 
FNX320_ENG_MODE_CRANK#0 (>L:S_ENG_MODE)
FNX320_ENG_MODE_IGNSTART#2 (>L:S_ENG_MODE)
FNX320_ENG_MODE_NORMAL#1 (>L:S_ENG_MODE) 
//FenixSim/A320/Engines
FNX320_Engine_Manual_Start_1_Button_Press#(L:S_OH_ENG_MANSTART_1) ! (>L:S_OH_ENG_MANSTART_1) 1 (>L:S_OH_ENG_MANSTART_1_Anim)
FNX320_Engine_Manual_Start_1_Button_Release#(L:S_OH_ENG_MANSTART_1) 0 == if{ 0 (>L:S_OH_ENG_MANSTART_1_Anim) (L:S_OH_ENG_MANSTART_1) 1 == if{ 2 (>L:S_OH_ENG_MANSTART_1_Anim) 
FNX320_Engine_Manual_Start_2_Button_Press#(L:S_OH_ENG_MANSTART_2) ! (>L:S_OH_ENG_MANSTART_2) 1 (>L:S_OH_ENG_MANSTART_2_Anim)
FNX320_Engine_Manual_Start_2_Button_Release#(L:S_OH_ENG_MANSTART_2) 0 == if{ 0 (>L:S_OH_ENG_MANSTART_2_Anim) (L:S_OH_ENG_MANSTART_2) 1 == if{ 2 (>L:S_OH_ENG_MANSTART_2_Anim) 
FNX320_Engine_N1_Mode_1_Button_Press#(L:S_OH_ENG_N1_MODE_1) ! (>L:S_OH_ENG_N1_MODE_1) 1 (>L:S_OH_ENG_N1_MODE_1_Anim)
FNX320_Engine_N1_Mode_1_Button_Release#(L:S_OH_ENG_N1_MODE_1) 0 == if{ 0 (>L:S_OH_ENG_N1_MODE_1_Anim) (L:S_OH_ENG_N1_MODE_1) 1 == if{ 2 (>L:S_OH_ENG_N1_MODE_1_Anim) 
FNX320_Engine_N1_Mode_2_Button_Press#(L:S_OH_ENG_N1_MODE_2) ! (>L:S_OH_ENG_N1_MODE_2) 1 (>L:S_OH_ENG_N1_MODE_2_Anim)
FNX320_Engine_N1_Mode_2_Button_Release#(L:S_OH_ENG_N1_MODE_2) 0 == if{ 0 (>L:S_OH_ENG_N1_MODE_2_Anim) (L:S_OH_ENG_N1_MODE_2) 1 == if{ 2 (>L:S_OH_ENG_N1_MODE_2_Anim) 
FNX320_Overhead_Blue_Pump_Override_Button_Press#(L:S_OH_HYD_BLUE_PUMP_OVERRIDE) ! (>L:S_OH_HYD_BLUE_PUMP_OVERRIDE) 1 (>L:S_OH_HYD_BLUE_PUMP_OVERRIDE_Anim)
FNX320_Overhead_Blue_Pump_Override_Button_Release#(L:S_OH_HYD_BLUE_PUMP_OVERRIDE) 0 == if{ 0 (>L:S_OH_HYD_BLUE_PUMP_OVERRIDE_Anim) } (L:S_OH_HYD_BLUE_PUMP_OVERRIDE) 1 == if{ 2 (>L:S_OH_HYD_BLUE_PUMP_OVERRIDE_Anim) }
FNX320_Overhead_Engine_FADEC_Ground_1_Button_Press#(L:S_OH_AFT_FADEC_GND_1) ! (>L:S_OH_AFT_FADEC_GND_1) 1 (>L:S_OH_AFT_FADEC_GND_1_Anim)
FNX320_Overhead_Engine_FADEC_Ground_1_Button_Release#(L:S_OH_AFT_FADEC_GND_1) 0 == if{ 0 (>L:S_OH_AFT_FADEC_GND_1_Anim) } (L:S_OH_AFT_FADEC_GND_1) 1 == if{ 2 (>L:S_OH_AFT_FADEC_GND_1_Anim) }
FNX320_Overhead_Engine_FADEC_Ground_2_Button_Press#(L:S_OH_AFT_FADEC_GND_2) ! (>L:S_OH_AFT_FADEC_GND_2) 1 (>L:S_OH_AFT_FADEC_GND_2_Anim)
FNX320_Overhead_Engine_FADEC_Ground_2_Button_Release#(L:S_OH_AFT_FADEC_GND_2) 0 == if{ 0 (>L:S_OH_AFT_FADEC_GND_2_Anim) } (L:S_OH_AFT_FADEC_GND_2) 1 == if{ 2 (>L:S_OH_AFT_FADEC_GND_2_Anim) }
FNX320_Overhead_LMV_Blue_Button_Press#(L:S_OH_HYD_LMV_BLUE) ! (>L:S_OH_HYD_LMV_BLUE) 1 (>L:S_OH_HYD_LMV_BLUE_Anim)
FNX320_Overhead_LMV_Blue_Button_Release#(L:S_OH_HYD_LMV_BLUE) 0 == if{ 0 (>L:S_OH_HYD_LMV_BLUE_Anim) } (L:S_OH_HYD_LMV_BLUE) 1 == if{ 2 (>L:S_OH_HYD_LMV_BLUE_Anim) }
FNX320_Overhead_LMV_Green_Button_Press#(L:S_OH_HYD_LMV_GREEN) ! (>L:S_OH_HYD_LMV_GREEN) 1 (>L:S_OH_HYD_LMV_GREEN_Anim)
FNX320_Overhead_LMV_Green_Button_Release#(L:S_OH_HYD_LMV_GREEN) 0 == if{ 0 (>L:S_OH_HYD_LMV_GREEN_Anim) } (L:S_OH_HYD_LMV_GREEN) 1 == if{ 2 (>L:S_OH_HYD_LMV_GREEN_Anim) }
FNX320_Overhead_LMV_Yellow_Button_Press#(L:S_OH_HYD_LMV_YELLOW) ! (>L:S_OH_HYD_LMV_YELLOW) 1 (>L:S_OH_HYD_LMV_YELLOW_Anim)
FNX320_Overhead_LMV_Yellow_Button_Release#(L:S_OH_HYD_LMV_YELLOW) 0 == if{ 0 (>L:S_OH_HYD_LMV_YELLOW_Anim) } (L:S_OH_HYD_LMV_YELLOW) 1 == if{ 2 (>L:S_OH_HYD_LMV_YELLOW_Anim) }
FNX320_Throttle_Autothrottle_Disconnect_Left_Button_Press#1 (>L:S_FC_THR_INST_DISCONNECT1) 
FNX320_Throttle_Autothrottle_Disconnect_Left_Button_Release#0 (>L:S_FC_THR_INST_DISCONNECT1) 
FNX320_Throttle_Autothrottle_Disconnect_Right_Button_Press#1 (>L:S_FC_THR_INST_DISCONNECT2) 
FNX320_Throttle_Autothrottle_Disconnect_Right_Button_Release#0 (>L:S_FC_THR_INST_DISCONNECT2) 
FNX320_Throttle_Engine_1_Master_Switch_Toggle#(L:S_ENG_MASTER_1) ! (>L:S_ENG_MASTER_1) 
FNX320_Throttle_Engine_2_Master_Switch_Toggle#(L:S_ENG_MASTER_2) ! (>L:S_ENG_MASTER_2) 
//FenixSim/A320/Flight Controls
FNX320_FlightControl_ELAC_1_Button_Press#(L:S_OH_FLT_CTL_ELAC_1) ! (>L:S_OH_FLT_CTL_ELAC_1) 1 (>L:S_OH_FLT_CTL_ELAC_1_Anim)
FNX320_FlightControl_ELAC_1_Button_Release#(L:S_OH_FLT_CTL_ELAC_1) 0 == if{ 0 (>L:S_OH_FLT_CTL_ELAC_1_Anim) } (L:S_OH_FLT_CTL_ELAC_1) 1 == if{ 2 (>L:S_OH_FLT_CTL_ELAC_1_Anim) }
FNX320_FlightControl_ELAC_2_Button_Press#(L:S_OH_FLT_CTL_ELAC_2) ! (>L:S_OH_FLT_CTL_ELAC_2) 1 (>L:S_OH_FLT_CTL_ELAC_2_Anim)
FNX320_FlightControl_ELAC_2_Button_Release#(L:S_OH_FLT_CTL_ELAC_2) 0 == if{ 0 (>L:S_OH_FLT_CTL_ELAC_2_Anim) } (L:S_OH_FLT_CTL_ELAC_2) 1 == if{ 2 (>L:S_OH_FLT_CTL_ELAC_2_Anim) }
FNX320_FlightControl_FAC_1_Button_Press#(L:S_OH_FLT_CTL_FAC_1) ! (>L:S_OH_FLT_CTL_FAC_1) 1 (>L:S_OH_FLT_CTL_FAC_1_Anim)
FNX320_FlightControl_FAC_1_Button_Release#(L:S_OH_FLT_CTL_FAC_1) 0 == if{ 0 (>L:S_OH_FLT_CTL_FAC_1_Anim) } (L:S_OH_FLT_CTL_FAC_1) 1 == if{ 2 (>L:S_OH_FLT_CTL_FAC_1_Anim) }
FNX320_FlightControl_FAC_2_Button_Press#(L:S_OH_FLT_CTL_FAC_2) ! (>L:S_OH_FLT_CTL_FAC_2) 1 (>L:S_OH_FLT_CTL_FAC_2_Anim)
FNX320_FlightControl_FAC_2_Button_Release#(L:S_OH_FLT_CTL_FAC_2) 0 == if{ 0 (>L:S_OH_FLT_CTL_FAC_2_Anim) } (L:S_OH_FLT_CTL_FAC_2) 1 == if{ 2 (>L:S_OH_FLT_CTL_FAC_2_Anim) }
FNX320_FlightControl_SEC_1_Button_Press#(L:S_OH_FLT_CTL_SEC_1) ! (>L:S_OH_FLT_CTL_SEC_1) 1 (>L:S_OH_FLT_CTL_SEC_1_Anim)
FNX320_FlightControl_SEC_1_Button_Release#(L:S_OH_FLT_CTL_SEC_1) 0 == if{ 0 (>L:S_OH_FLT_CTL_SEC_1_Anim) } (L:S_OH_FLT_CTL_SEC_1) 1 == if{ 2 (>L:S_OH_FLT_CTL_SEC_1_Anim) }
FNX320_FlightControl_SEC_2_Button_Press#(L:S_OH_FLT_CTL_SEC_2) ! (>L:S_OH_FLT_CTL_SEC_2) 1 (>L:S_OH_FLT_CTL_SEC_2_Anim)
FNX320_FlightControl_SEC_2_Button_Release#(L:S_OH_FLT_CTL_SEC_2) 0 == if{ 0 (>L:S_OH_FLT_CTL_SEC_2_Anim) } (L:S_OH_FLT_CTL_SEC_2) 1 == if{ 2 (>L:S_OH_FLT_CTL_SEC_2_Anim) }
FNX320_FlightControl_SEC_3_Button_Press#(L:S_OH_FLT_CTL_SEC_3) ! (>L:S_OH_FLT_CTL_SEC_3) 1 (>L:S_OH_FLT_CTL_SEC_3_Anim)
FNX320_FlightControl_SEC_3_Button_Release#(L:S_OH_FLT_CTL_SEC_3) 0 == if{ 0 (>L:S_OH_FLT_CTL_SEC_3_Anim) } (L:S_OH_FLT_CTL_SEC_3) 1 == if{ 2 (>L:S_OH_FLT_CTL_SEC_3_Anim) }
FNX320_FC_CAPT_TAKEOVER_PB_PUSH#(L:S_FC_CAPT_INST_DISCONNECT) ++ (>L:S_FC_CAPT_INST_DISCONNECT) 
FNX320_FC_CAPT_TAKEOVER_PB_RELEASE#(L:S_FC_CAPT_INST_DISCONNECT) ++ (>L:S_FC_CAPT_INST_DISCONNECT) 
FNX320_FC_FLAPS_LEVER_FOR_TCAQ-ADDON#@ 16383.75 / 0 max 4 min (>L:S_FC_FLAPS)
FNX320_FC_FLAPS_LEVER_POSITION_0_SWITCH#0 (>L:S_FC_FLAPS)
FNX320_FC_FLAPS_LEVER_POSITION_1_SWITCH#1 (>L:S_FC_FLAPS)
FNX320_FC_FLAPS_LEVER_POSITION_2_SWITCH#2 (>L:S_FC_FLAPS)
FNX320_FC_FLAPS_LEVER_POSITION_3_SWITCH#3 (>L:S_FC_FLAPS)
FNX320_FC_FLAPS_LEVER_POSITION_FULL_SWITCH#4 (>L:S_FC_FLAPS)
FNX320_FC_FO_TAKEOVER_PB_PUSH#(L:S_FC_FO_INST_DISCONNECT) ++ (>L:S_FC_FO_INST_DISCONNECT) 
FNX320_FC_FO_TAKEOVER_PB_RELEASE#(L:S_FC_FO_INST_DISCONNECT) ++ (>L:S_FC_FO_INST_DISCONNECT) 
FNX320_FC_GND_SPLRS_LEVER_ARM-DISARM_SWITCH#(L:A_FC_SPEEDBRAKE) ! (>L:A_FC_SPEEDBRAKE)
//FenixSim/A320/Fuel
FNX320_OVHD_FUEL_CENTER_TK_PUMP_1_ON-PRESS_SWITCH#(L:S_OH_FUEL_CENTER_1) ! (>L:S_OH_FUEL_CENTER_1) 1 (>L:S_OH_FUEL_CENTER_1_Anim) 
FNX320_OVHD_FUEL_CENTER_TK_PUMP_1_ON-RELEASE_SWITCH#(L:S_OH_FUEL_CENTER_1) 0 == if{ 0 (>L:S_OH_FUEL_CENTER_1_Anim) } (L:S_OH_FUEL_CENTER_1) 1 == if{ 2 (>L:S_OH_FUEL_CENTER_1_Anim) } 
FNX320_OVHD_FUEL_CENTER_TK_PUMP_2_ON-PRESS_SWITCH#(L:S_OH_FUEL_CENTER_2) ! (>L:S_OH_FUEL_CENTER_2) 1 (>L:S_OH_FUEL_CENTER_2_Anim) 
FNX320_OVHD_FUEL_CENTER_TK_PUMP_2_ON-RELEASE_SWITCH#(L:S_OH_FUEL_CENTER_2) 0 == if{ 0 (>L:S_OH_FUEL_CENTER_2_Anim) } (L:S_OH_FUEL_CENTER_2) 1 == if{ 2 (>L:S_OH_FUEL_CENTER_2_Anim) } 
FNX320_OVHD_FUEL_L_TK_PUMP_1_ON-PRESS_SWITCH#(L:S_OH_FUEL_LEFT_1) ! (>L:S_OH_FUEL_LEFT_1) 1 (>L:S_OH_FUEL_LEFT_1_Anim)
FNX320_OVHD_FUEL_L_TK_PUMP_1_ON-RELEASE_SWITCH#(L:S_OH_FUEL_LEFT_1) 0 == if{ 0 (>L:S_OH_FUEL_LEFT_1_Anim) } (L:S_OH_FUEL_LEFT_1) 1 == if{ 2 (>L:S_OH_FUEL_LEFT_1_Anim) } 
FNX320_OVHD_FUEL_L_TK_PUMP_2_ON-PRESS_SWITCH#(L:S_OH_FUEL_LEFT_2) ! (>L:S_OH_FUEL_LEFT_2) 1 (>L:S_OH_FUEL_LEFT_2_Anim)
FNX320_OVHD_FUEL_L_TK_PUMP_2_ON-RELEASE_SWITCH#(L:S_OH_FUEL_LEFT_2) 0 == if{ 0 (>L:S_OH_FUEL_LEFT_2_Anim) } (L:S_OH_FUEL_LEFT_2) 1 == if{ 2 (>L:S_OH_FUEL_LEFT_2_Anim) } 
FNX320_OVHD_FUEL_MODE_SEL_ON-PRESS_SWITCH#(L:S_OH_FUEL_MODE_SEL) ! (>L:S_OH_FUEL_MODE_SEL) 1 (>L:S_OH_FUEL_MODE_SEL_Anim) 
FNX320_OVHD_FUEL_MODE_SEL_ON-RELEASE_SWITCH#(L:S_OH_FUEL_MODE_SEL) 0 == if{ 0 (>L:S_OH_FUEL_MODE_SEL_Anim) } (L:S_OH_FUEL_MODE_SEL) 1 == if{ 2 (>L:S_OH_FUEL_MODE_SEL_Anim) } 
FNX320_OVHD_FUEL_R_TK_PUMP_1_ON-PRESS_SWITCH#(L:S_OH_FUEL_RIGHT_1) ! (>L:S_OH_FUEL_RIGHT_1) 1 (>L:S_OH_FUEL_RIGHT_1_Anim) 
FNX320_OVHD_FUEL_R_TK_PUMP_1_ON-RELEASE_SWITCH#(L:S_OH_FUEL_RIGHT_1) 0 == if{ 0 (>L:S_OH_FUEL_RIGHT_1_Anim) } (L:S_OH_FUEL_RIGHT_1) 1 == if{ 2 (>L:S_OH_FUEL_RIGHT_1_Anim) } 
FNX320_OVHD_FUEL_R_TK_PUMP_2_ON-PRESS_SWITCH#(L:S_OH_FUEL_RIGHT_2) ! (>L:S_OH_FUEL_RIGHT_2) 1 (>L:S_OH_FUEL_RIGHT_2_Anim) 
FNX320_OVHD_FUEL_R_TK_PUMP_2_ON-RELEASE_SWITCH#(L:S_OH_FUEL_RIGHT_2) 0 == if{ 0 (>L:S_OH_FUEL_RIGHT_2_Anim) } (L:S_OH_FUEL_RIGHT_2) 1 == if{ 2 (>L:S_OH_FUEL_RIGHT_2_Anim) } 
FNX320_OVHD_FUEL_X-FEED_ON-PRESS_SWITCH#(L:S_OH_FUEL_XFEED) ! (>L:S_OH_FUEL_XFEED) 1 (>L:S_OH_FUEL_XFEED_Anim) 
FNX320_OVHD_FUEL_X-FEED_ON-RELEASE_SWITCH#(L:S_OH_FUEL_XFEED) 0 == if{ 0 (>L:S_OH_FUEL_XFEED_Anim) } (L:S_OH_FUEL_XFEED) 1 == if{ 2 (>L:S_OH_FUEL_XFEED_Anim) } 
//FenixSim/A320/Gear
FNX320_MainPanel_Anti_Skid_Switch_Press#(L:S_FC_MIP_ANTI_SKID) ! (>L:S_FC_MIP_ANTI_SKID)
FNX320_MainPanel_Autobrake_Low_Button_Press#1 (>L:S_MIP_AUTOBRAKE_LO)
FNX320_MainPanel_Autobrake_Low_Button_Release#0 (>L:S_MIP_AUTOBRAKE_LO)
FNX320_MainPanel_Autobrake_Max_Button_Press#1 (>L:S_MIP_AUTOBRAKE_MAX)
FNX320_MainPanel_Autobrake_Max_Button_Release#0 (>L:S_MIP_AUTOBRAKE_MAX)
FNX320_MainPanel_Autobrake_Medium_Button_Press#1 (>L:S_MIP_AUTOBRAKE_MED)
FNX320_MainPanel_Autobrake_Medium_Button_Release#0 (>L:S_MIP_AUTOBRAKE_MED)
FNX320_Misc_Tiller_Pedal_Disconnect_Captain_Press#(L:S_FC_CAPT_TILLER_PEDAL_DISCONNECT) ! (>L:S_FC_CAPT_TILLER_PEDAL_DISCONNECT) 1 (>L:S_FC_CAPT_TILLER_PEDAL_DISCONNECT_Anim)
FNX320_Misc_Tiller_Pedal_Disconnect_Captain_Release#(L:S_FC_CAPT_TILLER_PEDAL_DISCONNECT) 0 == if{ 0 (>L:S_FC_CAPT_TILLER_PEDAL_DISCONNECT_Anim) } (L:S_FC_CAPT_TILLER_PEDAL_DISCONNECT) 1 == if{ 2 (>L:S_FC_CAPT_TILLER_PEDAL_DISCONNECT_Anim) }
FNX320_Misc_Tiller_Pedal_Disconnect_FO_Press#(L:S_FC_FO_TILLER_PEDAL_DISCONNECT) ! (>L:S_FC_FO_TILLER_PEDAL_DISCONNECT) 1 (>L:S_FC_FO_TILLER_PEDAL_DISCONNECT_Anim)
FNX320_Misc_Tiller_Pedal_Disconnect_FO_Release#(L:S_FC_FO_TILLER_PEDAL_DISCONNECT) 0 == if{ 0 (>L:S_FC_FO_TILLER_PEDAL_DISCONNECT_Anim) } (L:S_FC_FO_TILLER_PEDAL_DISCONNECT) 1 == if{ 2 (>L:S_FC_FO_TILLER_PEDAL_DISCONNECT_Anim) }
FNX320_Pedestal_Parking_Brake_Handle_Toggle#(L:S_MIP_PARKING_BRAKE) ! (>L:S_MIP_PARKING_BRAKE)
FNX320_MainPanel_Brake_Fan_Button_Press#(L:S_MIP_BRAKE_FAN) ! (>L:S_MIP_BRAKE_FAN) 1 (>L:S_MIP_BRAKE_FAN_Anim) 
FNX320_MainPanel_Brake_Fan_Button_Release#(L:S_MIP_BRAKE_FAN) 0 == if{ 0 (>L:S_MIP_BRAKE_FAN_Anim) } (L:S_MIP_BRAKE_FAN) 1 == if{ 2 (>L:S_MIP_BRAKE_FAN_Anim) } 
FNX320_LANDING_GEAR_DOWN#1 (>L:S_MIP_GEAR)
FNX320_LANDING_GEAR_UP#0 (>L:S_MIP_GEAR)
FNX320_MIP_PARKING_BRAKE_OFF_SWITCH#0 (>L:S_MIP_PARKING_BRAKE)
FNX320_MIP_PARKING_BRAKE_ON_SWITCH#1 (>L:S_MIP_PARKING_BRAKE)
//FenixSim/A320/Hydraulic
FNX320_Hydraulic_Electrical_Pump_Blue_Button_Press#1 (>L:S_OH_HYD_BLUE_ELEC_PUMP)
FNX320_Hydraulic_Electrical_Pump_Blue_Button_Release#0 (>L:S_OH_HYD_BLUE_ELEC_PUMP)
FNX320_Hydraulic_Electrical_Pump_Yellow_Button_Press#1 (>L:S_OH_HYD_YELLOW_ELEC_PUMP)
FNX320_Hydraulic_Electrical_Pump_Yellow_Button_Release#0 (>L:S_OH_HYD_YELLOW_ELEC_PUMP)
FNX320_Hydraulic_Engine_Pump_1_Button_Press#1 (>L:S_OH_HYD_ENG_1_PUMP)
FNX320_Hydraulic_Engine_Pump_1_Button_Release#0 (>L:S_OH_HYD_ENG_1_PUMP)
FNX320_Hydraulic_Engine_Pump_2_Button_Press#1 (>L:S_OH_HYD_ENG_2_PUMP)
FNX320_Hydraulic_Engine_Pump_2_Button_Release#0 (>L:S_OH_HYD_ENG_2_PUMP)
FNX320_Hydraulic_PTU_Button_Press#1 (>L:S_OH_HYD_PTU)
FNX320_Hydraulic_PTU_Button_Release#0 (>L:S_OH_HYD_PTU)
FNX320_Hydraulic_RAT_Manual_Button_Press#1 (>L:S_OH_HYD_RAT_MAN_ON)
FNX320_Hydraulic_RAT_Manual_Button_Release#0 (>L:S_OH_HYD_RAT_MAN_ON)
//FenixSim/A320/ISIS
FNX320_ISIS_BARO_KNOB_DEC#(L:E_MIP_ISFD_BARO) -- (>L:E_MIP_ISFD_BARO)
FNX320_ISIS_BARO_KNOB_INC#(L:E_MIP_ISFD_BARO) ++ (>L:E_MIP_ISFD_BARO)
FNX320_ISIS_BARO_KNOB_PUSH#(L:S_MIP_ISFD_BARO_BUTTON) ++ (>L:S_MIP_ISFD_BARO_BUTTON)
FNX320_ISIS_BARO_KNOB_RELEASE#(L:S_MIP_ISFD_BARO_BUTTON) ++ (>L:S_MIP_ISFD_BARO_BUTTON)
//FenixSim/A320/Lights
FNX320_Int_Light_Annunciator_Switch_BRT#0 (>L:S_OH_IN_LT_ANN_LT)
FNX320_Int_Light_Annunciator_Switch_DIM#1 (>L:S_OH_IN_LT_ANN_LT)
FNX320_Int_Light_Annunciator_Switch_TEST#2 (>L:S_OH_IN_LT_ANN_LT)
FNX320_Int_Light_Ice_Standby_Switch_Toggle#(L:S_OH_IN_LT_ICE) ! (>L:S_OH_IN_LT_ICE)
FNX320_MainPanel_Console_Floor_Light_Captain_Switch_BRT#2 (>L:S_MIP_LIGHT_CONSOLEFLOOR_CAPT)
FNX320_MainPanel_Console_Floor_Light_Captain_Switch_DIM#1 (>L:S_MIP_LIGHT_CONSOLEFLOOR_CAPT)
FNX320_MainPanel_Console_Floor_Light_Captain_Switch_OFF#0 (>L:S_MIP_LIGHT_CONSOLEFLOOR_CAPT)
FNX320_MainPanel_Console_Floor_Light_FO_Switch_BRT#2 (>L:S_MIP_LIGHT_CONSOLEFLOOR_FO)
FNX320_MainPanel_Console_Floor_Light_FO_Switch_DIM#1 (>L:S_MIP_LIGHT_CONSOLEFLOOR_FO)
FNX320_MainPanel_Console_Floor_Light_FO_Switch_OFF#0 (>L:S_MIP_LIGHT_CONSOLEFLOOR_FO)
FNX320_Misc_Chart_Light_Captain_Knob_Dec#(L:A_CHART_LIGHT_TEMP_CAPT) 0.1 - 0 max (>L:A_CHART_LIGHT_TEMP_CAPT)
FNX320_Misc_Chart_Light_Captain_Knob_Inc#(L:A_CHART_LIGHT_TEMP_CAPT) 0.1 + 1 min (>L:A_CHART_LIGHT_TEMP_CAPT)
FNX320_Misc_Chart_Light_Captain_Switch_Press#(L:S_CHART_LIGHT_TEMP_CAPT) ! (>L:S_CHART_LIGHT_TEMP_CAPT)
FNX320_Misc_Chart_Light_FO_Knob_Dec#(L:A_CHART_LIGHT_TEMP_FO) 0.1 - 0 max (>L:A_CHART_LIGHT_TEMP_FO)
FNX320_Misc_Chart_Light_FO_Knob_Inc#(L:A_CHART_LIGHT_TEMP_FO) 0.1 + 1 min (>L:A_CHART_LIGHT_TEMP_FO)
FNX320_Misc_Chart_Light_FO_Switch_Press#(L:S_CHART_LIGHT_TEMP_FO) ! (>L:S_CHART_LIGHT_TEMP_FO)
FNX320_Overhead_Reading_Light_Captain_Knob_Dec#(L:A_OH_LIGHTING_READING_CAPT) 0.1 - 0 max (>L:A_OH_LIGHTING_READING_CAPT)
FNX320_Overhead_Reading_Light_Captain_Knob_Inc#(L:A_OH_LIGHTING_READING_CAPT) 0.1 + 1 min (>L:A_OH_LIGHTING_READING_CAPT)
FNX320_Overhead_Reading_Light_FO_Knob_Dec#(L:A_OH_LIGHTING_READING_FO) 0.1 - 0 max (>L:A_OH_LIGHTING_READING_FO)
FNX320_Overhead_Reading_Light_FO_Knob_Inc#(L:A_OH_LIGHTING_READING_FO) 0.1 + 1 min (>L:A_OH_LIGHTING_READING_FO)
FNX320_LIGHT_BEACON_OFF#0 (>L:S_OH_EXT_LT_BEACON)
FNX320_LIGHT_BEACON_ON#1 (>L:S_OH_EXT_LT_BEACON)
FNX320_LIGHT_BEACON_TOG#(L:S_OH_EXT_LT_BEACON) 0 == if{ 1 (>L:S_OH_EXT_LT_BEACON) } els{ 0 (>L:S_OH_EXT_LT_BEACON) }
FNX320_LIGHT_DOME_BRT#2 (>L:S_OH_INT_LT_DOME)
FNX320_LIGHT_DOME_DIM#1 (>L:S_OH_INT_LT_DOME)
FNX320_LIGHT_DOME_OFF#0 (>L:S_OH_INT_LT_DOME)
FNX320_LIGHT_LANDING_BOTH_OFF#1 (>L:S_OH_EXT_LT_LANDING_L) 1 (>L:S_OH_EXT_LT_LANDING_R) 1 (>L:S_OH_EXT_LT_LANDING_BOTH) 
FNX320_LIGHT_LANDING_BOTH_ON#2 (>L:S_OH_EXT_LT_LANDING_L) 2 (>L:S_OH_EXT_LT_LANDING_R) 2 (>L:S_OH_EXT_LT_LANDING_BOTH) 
FNX320_LIGHT_LANDING_BOTH_RETRACT#0 (>L:S_OH_EXT_LT_LANDING_L) 0 (>L:S_OH_EXT_LT_LANDING_R) 0 (>L:S_OH_EXT_LT_LANDING_BOTH) 
FNX320_LIGHT_LANDING_L_OFF#1 (>L:S_OH_EXT_LT_LANDING_L)
FNX320_LIGHT_LANDING_L_ON#2 (>L:S_OH_EXT_LT_LANDING_L)
FNX320_LIGHT_LANDING_L_RETRACT#0 (>L:S_OH_EXT_LT_LANDING_L)
FNX320_LIGHT_LANDING_R_OFF#1 (>L:S_OH_EXT_LT_LANDING_R)
FNX320_LIGHT_LANDING_R_ON#2 (>L:S_OH_EXT_LT_LANDING_R)
FNX320_LIGHT_LANDING_R_RETRACT#0 (>L:S_OH_EXT_LT_LANDING_R)
FNX320_LIGHT_NAVLOGO_LOGO#2 (>L:S_OH_EXT_LT_NAV_LOGO)
FNX320_LIGHT_NAVLOGO_NAV#1 (>L:S_OH_EXT_LT_NAV_LOGO)
FNX320_LIGHT_NAVLOGO_OFF#0 (>L:S_OH_EXT_LT_NAV_LOGO)
FNX320_LIGHT_NOSE_OFF#0 (>L:S_OH_EXT_LT_NOSE)
FNX320_LIGHT_NOSE_TAXI#1 (>L:S_OH_EXT_LT_NOSE)
FNX320_LIGHT_NOSE_TO#2 (>L:S_OH_EXT_LT_NOSE)
FNX320_LIGHT_RWY_TURNOFF_OFF#0 (>L:S_OH_EXT_LT_RWY_TURNOFF)
FNX320_LIGHT_RWY_TURNOFF_ON#1 (>L:S_OH_EXT_LT_RWY_TURNOFF)
FNX320_LIGHT_STROBE_AUTO#1 (>L:S_OH_EXT_LT_STROBE)
FNX320_LIGHT_STROBE_OFF#0 (>L:S_OH_EXT_LT_STROBE)
FNX320_LIGHT_STROBE_ON#2 (>L:S_OH_EXT_LT_STROBE)
FNX320_LIGHT_WING_OFF#0 (>L:S_OH_EXT_LT_WING)
FNX320_LIGHT_WING_ON#1 (>L:S_OH_EXT_LT_WING)
FNX320_OVHD_ANN_LT_DIM-BRT-TEST_TOGGLE#(L:S_OH_IN_LT_ANN_LT, Number) ++ 3 % (>L:S_OH_IN_LT_ANN_LT, Number)
FNX32_DISPLAY_BRIGHTNESS_FCU_DEC#(L:A_FCU_LIGHTING_TEXT) 0.05 - 0 max (>L:A_FCU_LIGHTING_TEXT) 
FNX32_DISPLAY_BRIGHTNESS_FCU_INC#(L:A_FCU_LIGHTING_TEXT) 0.05 + 1 min (>L:A_FCU_LIGHTING_TEXT) 
FNX32_DISPLAY_BRIGHTNESS_L_ND_DEC#(L:A_DISPLAY_BRIGHTNESS_CI) 0.05 - 0 max (>L:A_DISPLAY_BRIGHTNESS_CI) 
FNX32_DISPLAY_BRIGHTNESS_L_ND_INC#(L:A_DISPLAY_BRIGHTNESS_CI) 0.05 + 1 min (>L:A_DISPLAY_BRIGHTNESS_CI) 
FNX32_DISPLAY_BRIGHTNESS_L_ND_WX_DEC#(L:A_DISPLAY_BRIGHTNESS_CI_OUTER) 0.05 - 0 max (>L:A_DISPLAY_BRIGHTNESS_CI_OUTER) 
FNX32_DISPLAY_BRIGHTNESS_L_ND_WX_INC#(L:A_DISPLAY_BRIGHTNESS_CI_OUTER) 0.05 + 1 min (>L:A_DISPLAY_BRIGHTNESS_CI_OUTER) 
FNX32_DISPLAY_BRIGHTNESS_L_PFD_DEC#(L:A_DISPLAY_BRIGHTNESS_CO) 0.05 - 0 max (>L:A_DISPLAY_BRIGHTNESS_CO) 
FNX32_DISPLAY_BRIGHTNESS_L_PFD_INC#(L:A_DISPLAY_BRIGHTNESS_CO) 0.05 + 1 min (>L:A_DISPLAY_BRIGHTNESS_CO) 
FNX32_DISPLAY_BRIGHTNESS_R_ND_DEC#(L:A_DISPLAY_BRIGHTNESS_FI) 0.05 - 0 max (>L:A_DISPLAY_BRIGHTNESS_FI) 
FNX32_DISPLAY_BRIGHTNESS_R_ND_INC#(L:A_DISPLAY_BRIGHTNESS_FI) 0.05 + 1 min (>L:A_DISPLAY_BRIGHTNESS_FI) 
FNX32_DISPLAY_BRIGHTNESS_R_ND_WX_DEC#(L:A_DISPLAY_BRIGHTNESS_FI_OUTER) 0.05 - 0 max (>L:A_DISPLAY_BRIGHTNESS_FI_OUTER) 
FNX32_DISPLAY_BRIGHTNESS_R_ND_WX_INC#(L:A_DISPLAY_BRIGHTNESS_FI_OUTER) 0.05 + 1 min (>L:A_DISPLAY_BRIGHTNESS_FI_OUTER) 
FNX32_DISPLAY_BRIGHTNESS_R_PFD_DEC#(L:A_DISPLAY_BRIGHTNESS_FO) 0.05 - 0 max (>L:A_DISPLAY_BRIGHTNESS_FO) 
FNX32_DISPLAY_BRIGHTNESS_R_PFD_INC#(L:A_DISPLAY_BRIGHTNESS_FO) 0.05 + 1 min (>L:A_DISPLAY_BRIGHTNESS_FO) 
FNX32_DISPLAY_BRIGHTNES_ECAM_L_DEC#(L:A_DISPLAY_BRIGHTNESS_ECAM_L) 0.05 - 0 max (>L:A_DISPLAY_BRIGHTNESS_ECAM_L) 
FNX32_DISPLAY_BRIGHTNES_ECAM_L_INC#(L:A_DISPLAY_BRIGHTNESS_ECAM_L) 0.05 + 1 min (>L:A_DISPLAY_BRIGHTNESS_ECAM_L) 
FNX32_DISPLAY_BRIGHTNES_ECAM_U_DEC#(L:A_DISPLAY_BRIGHTNESS_ECAM_U) 0.05 - 0 max (>L:A_DISPLAY_BRIGHTNESS_ECAM_U) 
FNX32_DISPLAY_BRIGHTNES_ECAM_U_INC#(L:A_DISPLAY_BRIGHTNESS_ECAM_U) 0.05 + 1 min (>L:A_DISPLAY_BRIGHTNESS_ECAM_U) 
FNX32_FCU_INTG_LIGHTING_DEC#(L:A_FCU_LIGHTING) 0.05 - 0 max (>L:A_FCU_LIGHTING) 
FNX32_FCU_INTG_LIGHTING_INC#(L:A_FCU_LIGHTING) 0.05 + 1 min (>L:A_FCU_LIGHTING) 
FNX32_MIP_INTG_LIGHTING_DEC#(L:A_PED_LIGHTING_PEDESTAL) 0.05 - 0 max (>L:A_PED_LIGHTING_PEDESTAL)
FNX32_MIP_INTG_LIGHTING_INC#(L:A_PED_LIGHTING_PEDESTAL) 0.05 + 1 min (>L:A_PED_LIGHTING_PEDESTAL) 
FNX32_MIP_LIGHTING_FLOOD_MAIN_DEC#(L:A_MIP_LIGHTING_FLOOD_MAIN) 0.05 - 0 max (>L:A_MIP_LIGHTING_FLOOD_MAIN) 
FNX32_MIP_LIGHTING_FLOOD_MAIN_INC#(L:A_MIP_LIGHTING_FLOOD_MAIN) 0.05 + 1 min (>L:A_MIP_LIGHTING_FLOOD_MAIN) 
FNX32_MIP_LIGHTING_FLOOD_PED_DEC#(L:A_MIP_LIGHTING_FLOOD_PEDESTAL) 0.05 - 0 max (>L:A_MIP_LIGHTING_FLOOD_PEDESTAL) 
FNX32_MIP_LIGHTING_FLOOD_PED_INC#(L:A_MIP_LIGHTING_FLOOD_PEDESTAL) 0.05 + 1 min (>L:A_MIP_LIGHTING_FLOOD_PEDESTAL) 
FNX32_MIP_LIGHTING_MAP_L_DEC#(L:A_MIP_LIGHTING_MAP_L) 0.05 - 0 max (>L:A_MIP_LIGHTING_MAP_L) 
FNX32_MIP_LIGHTING_MAP_L_INC#(L:A_MIP_LIGHTING_MAP_L) 0.05 + 1 min (>L:A_MIP_LIGHTING_MAP_L) 
FNX32_MIP_LIGHTING_MAP_R_DEC#(L:A_MIP_LIGHTING_MAP_R) 0.05 - 0 max (>L:A_MIP_LIGHTING_MAP_R) 
FNX32_MIP_LIGHTING_MAP_R_INC#(L:A_MIP_LIGHTING_MAP_R) 0.05 + 1 min (>L:A_MIP_LIGHTING_MAP_R) 
FNX32_OH_INTG_LIGHTING_DEC#(L:A_OH_LIGHTING_OVD) 0.05 - 0 max (>L:A_OH_LIGHTING_OVD) 
FNX32_OH_INTG_LIGHTING_INC#(L:A_OH_LIGHTING_OVD) 0.05 + 1 min (>L:A_OH_LIGHTING_OVD) 
//FenixSim/A320/MCDU
FNX320_CDU1_BRIGHTNESS_DOWN_Press#1 (>L:S_CDU1_BRIGHTNESS_DOWN)
FNX320_CDU1_BRIGHTNESS_DOWN_Release#0 (>L:S_CDU1_BRIGHTNESS_DOWN)
FNX320_CDU1_BRIGHTNESS_UP_Press#1 (>L:S_CDU1_BRIGHTNESS_UP)
FNX320_CDU1_BRIGHTNESS_UP_Release#0 (>L:S_CDU1_BRIGHTNESS_UP)
FNX320_CDU1_KEY_0_Press#1 (>L:S_CDU1_KEY_0)
FNX320_CDU1_KEY_0_Release#0 (>L:S_CDU1_KEY_0)
FNX320_CDU1_KEY_1_Press#1 (>L:S_CDU1_KEY_1)
FNX320_CDU1_KEY_2_Press#1 (>L:S_CDU1_KEY_2)
FNX320_CDU1_KEY_2_Release#0 (>L:S_CDU1_KEY_2)
FNX320_CDU1_KEY_3_Press#1 (>L:S_CDU1_KEY_3)
FNX320_CDU1_KEY_3_Release#0 (>L:S_CDU1_KEY_3)
FNX320_CDU1_KEY_4_Press#1 (>L:S_CDU1_KEY_4)
FNX320_CDU1_KEY_4_Release#0 (>L:S_CDU1_KEY_4)
FNX320_CDU1_KEY_5_Press#1 (>L:S_CDU1_KEY_5)
FNX320_CDU1_KEY_5_Release#0 (>L:S_CDU1_KEY_5)
FNX320_CDU1_KEY_6_Press#1 (>L:S_CDU1_KEY_6)
FNX320_CDU1_KEY_6_Release#0 (>L:S_CDU1_KEY_6)
FNX320_CDU1_KEY_7_Press#1 (>L:S_CDU1_KEY_7)
FNX320_CDU1_KEY_7_Release#0 (>L:S_CDU1_KEY_7)
FNX320_CDU1_KEY_8_Press#1 (>L:S_CDU1_KEY_8)
FNX320_CDU1_KEY_8_Release#0 (>L:S_CDU1_KEY_8)
FNX320_CDU1_KEY_9_Press#1 (>L:S_CDU1_KEY_9)
FNX320_CDU1_KEY_9_Release#0 (>L:S_CDU1_KEY_9)
FNX320_CDU1_KEY_A_Press#1 (>L:S_CDU1_KEY_A)
FNX320_CDU1_KEY_A_Release#0 (>L:S_CDU1_KEY_A)
FNX320_CDU1_KEY_AIRPORT_Press#1 (>L:S_CDU1_KEY_AIRPORT)
FNX320_CDU1_KEY_AIRPORT_Release#0 (>L:S_CDU1_KEY_AIRPORT)
FNX320_CDU1_KEY_ARROW_DOWN_Press#1 (>L:S_CDU1_KEY_ARROW_DOWN)
FNX320_CDU1_KEY_ARROW_DOWN_Release#0 (>L:S_CDU1_KEY_ARROW_DOWN)
FNX320_CDU1_KEY_ARROW_LEFT_Press#1 (>L:S_CDU1_KEY_ARROW_LEFT)
FNX320_CDU1_KEY_ARROW_LEFT_Release#0 (>L:S_CDU1_KEY_ARROW_LEFT)
FNX320_CDU1_KEY_ARROW_RIGHT_Press#1 (>L:S_CDU1_KEY_ARROW_RIGHT)
FNX320_CDU1_KEY_ARROW_RIGHT_Release#0 (>L:S_CDU1_KEY_ARROW_RIGHT)
FNX320_CDU1_KEY_ARROW_UP_Press#1 (>L:S_CDU1_KEY_ARROW_UP)
FNX320_CDU1_KEY_ARROW_UP_Release#0 (>L:S_CDU1_KEY_ARROW_UP)
FNX320_CDU1_KEY_ATC_COM_Release#0 (>L:S_CDU1_KEY_ATC_COM)
FNX320_CDU1_KEY_B_Press#1 (>L:S_CDU1_KEY_B)
FNX320_CDU1_KEY_B_Release#0 (>L:S_CDU1_KEY_B)
FNX320_CDU1_KEY_C_Press#1 (>L:S_CDU1_KEY_C)
FNX320_CDU1_KEY_C_Release#0 (>L:S_CDU1_KEY_C)
FNX320_CDU1_KEY_CLEAR_Press#1 (>L:S_CDU1_KEY_CLEAR)
FNX320_CDU1_KEY_CLEAR_Release#0 (>L:S_CDU1_KEY_CLEAR)
FNX320_CDU1_KEY_D_Press#1 (>L:S_CDU1_KEY_D)
FNX320_CDU1_KEY_D_Release#0 (>L:S_CDU1_KEY_D)
FNX320_CDU1_KEY_DATA_Press#1 (>L:S_CDU1_KEY_DATA)
FNX320_CDU1_KEY_DATA_Release#0 (>L:S_CDU1_KEY_DATA)
FNX320_CDU1_KEY_DIR_Press#1 (>L:S_CDU1_KEY_DIR)
FNX320_CDU1_KEY_DIR_Release#0 (>L:S_CDU1_KEY_DIR)
FNX320_CDU1_KEY_DOT_Press#1 (>L:S_CDU1_KEY_DOT)
FNX320_CDU1_KEY_DOT_Release#0 (>L:S_CDU1_KEY_DOT)
FNX320_CDU1_KEY_E_Press#1 (>L:S_CDU1_KEY_E)
FNX320_CDU1_KEY_E_Release#0 (>L:S_CDU1_KEY_E)
FNX320_CDU1_KEY_F_Press#1 (>L:S_CDU1_KEY_F)
FNX320_CDU1_KEY_F_Release#0 (>L:S_CDU1_KEY_F)
FNX320_CDU1_KEY_FPLN_Press#1 (>L:S_CDU1_KEY_FPLN)
FNX320_CDU1_KEY_FPLN_Release#0 (>L:S_CDU1_KEY_FPLN)
FNX320_CDU1_KEY_FUEL_PRED_Press#1 (>L:S_CDU1_KEY_FUEL_PRED)
FNX320_CDU1_KEY_FUEL_PRED_Release#0 (>L:S_CDU1_KEY_FUEL_PRED)
FNX320_CDU1_KEY_G_Press#1 (>L:S_CDU1_KEY_G)
FNX320_CDU1_KEY_G_Release#0 (>L:S_CDU1_KEY_G)
FNX320_CDU1_KEY_H_Press#1 (>L:S_CDU1_KEY_H)
FNX320_CDU1_KEY_H_Release#0 (>L:S_CDU1_KEY_H)
FNX320_CDU1_KEY_I_Press#1 (>L:S_CDU1_KEY_I)
FNX320_CDU1_KEY_I_Release#0 (>L:S_CDU1_KEY_I)
FNX320_CDU1_KEY_INIT_Press#1 (>L:S_CDU1_KEY_INIT)
FNX320_CDU1_KEY_INIT_Release#0 (>L:S_CDU1_KEY_INIT)
FNX320_CDU1_KEY_J_Press#1 (>L:S_CDU1_KEY_J)
FNX320_CDU1_KEY_J_Release#0 (>L:S_CDU1_KEY_J)
FNX320_CDU1_KEY_K_Press#1 (>L:S_CDU1_KEY_K)
FNX320_CDU1_KEY_K_Release#0 (>L:S_CDU1_KEY_K)
FNX320_CDU1_KEY_L_Press#1 (>L:S_CDU1_KEY_L)
FNX320_CDU1_KEY_L_Release#0 (>L:S_CDU1_KEY_L)
FNX320_CDU1_KEY_LSK1L_Press#1 (>L:S_CDU1_KEY_LSK1L)
FNX320_CDU1_KEY_LSK1L_Release#0 (>L:S_CDU1_KEY_LSK1L)
FNX320_CDU1_KEY_LSK1R_Press#1 (>L:S_CDU1_KEY_LSK1R)
FNX320_CDU1_KEY_LSK1R_Release#0 (>L:S_CDU1_KEY_LSK1R)
FNX320_CDU1_KEY_LSK2L_Press#1 (>L:S_CDU1_KEY_LSK2L)
FNX320_CDU1_KEY_LSK2L_Release#0 (>L:S_CDU1_KEY_LSK2L)
FNX320_CDU1_KEY_LSK2R_Press#1 (>L:S_CDU1_KEY_LSK2R)
FNX320_CDU1_KEY_LSK2R_Release#0 (>L:S_CDU1_KEY_LSK2R)
FNX320_CDU1_KEY_LSK3L_Press#1 (>L:S_CDU1_KEY_LSK3L)
FNX320_CDU1_KEY_LSK3L_Release#0 (>L:S_CDU1_KEY_LSK3L)
FNX320_CDU1_KEY_LSK3R_Press#1 (>L:S_CDU1_KEY_LSK3R)
FNX320_CDU1_KEY_LSK3R_Release#0 (>L:S_CDU1_KEY_LSK3R)
FNX320_CDU1_KEY_LSK4L_Press#1 (>L:S_CDU1_KEY_LSK4L)
FNX320_CDU1_KEY_LSK4L_Release#0 (>L:S_CDU1_KEY_LSK4L)
FNX320_CDU1_KEY_LSK4R_Press#1 (>L:S_CDU1_KEY_LSK4R)
FNX320_CDU1_KEY_LSK4R_Release#0 (>L:S_CDU1_KEY_LSK4R)
FNX320_CDU1_KEY_LSK5L_Press#1 (>L:S_CDU1_KEY_LSK5L)
FNX320_CDU1_KEY_LSK5L_Release#0 (>L:S_CDU1_KEY_LSK5L)
FNX320_CDU1_KEY_LSK5R_Press#1 (>L:S_CDU1_KEY_LSK5R)
FNX320_CDU1_KEY_LSK5R_Release#0 (>L:S_CDU1_KEY_LSK5R)
FNX320_CDU1_KEY_LSK6L_Press#1 (>L:S_CDU1_KEY_LSK6L)
FNX320_CDU1_KEY_LSK6L_Release#0 (>L:S_CDU1_KEY_LSK6L)
FNX320_CDU1_KEY_LSK6R_Press#1 (>L:S_CDU1_KEY_LSK6R)
FNX320_CDU1_KEY_LSK6R_Release#0 (>L:S_CDU1_KEY_LSK6R)
FNX320_CDU1_KEY_M_Press#1 (>L:S_CDU1_KEY_M)
FNX320_CDU1_KEY_M_Release#0 (>L:S_CDU1_KEY_M)
FNX320_CDU1_KEY_MENU_Press#1 (>L:S_CDU1_KEY_MENU)
FNX320_CDU1_KEY_MENU_Release#0 (>L:S_CDU1_KEY_MENU)
FNX320_CDU1_KEY_MINUS_Press#1 (>L:S_CDU1_KEY_MINUS)
FNX320_CDU1_KEY_MINUS_Release#0 (>L:S_CDU1_KEY_MINUS)
FNX320_CDU1_KEY_N_Press#1 (>L:S_CDU1_KEY_N)
FNX320_CDU1_KEY_N_Release#0 (>L:S_CDU1_KEY_N)
FNX320_CDU1_KEY_O_Press#1 (>L:S_CDU1_KEY_O)
FNX320_CDU1_KEY_O_Release#0 (>L:S_CDU1_KEY_O)
FNX320_CDU1_KEY_OVFLY_Press#1 (>L:S_CDU1_KEY_OVFLY)
FNX320_CDU1_KEY_OVFLY_Release#0 (>L:S_CDU1_KEY_OVFLY)
FNX320_CDU1_KEY_P_Press#1 (>L:S_CDU1_KEY_P)
FNX320_CDU1_KEY_P_Release#0 (>L:S_CDU1_KEY_P)
FNX320_CDU1_KEY_PERF_Press#1 (>L:S_CDU1_KEY_PERF)
FNX320_CDU1_KEY_PERF_Release#0 (>L:S_CDU1_KEY_PERF)
FNX320_CDU1_KEY_PROG_Press#1 (>L:S_CDU1_KEY_PROG)
FNX320_CDU1_KEY_PROG_Release#0 (>L:S_CDU1_KEY_PROG)
FNX320_CDU1_KEY_Q_Press#1 (>L:S_CDU1_KEY_Q)
FNX320_CDU1_KEY_Q_Release#0 (>L:S_CDU1_KEY_Q)
FNX320_CDU1_KEY_R_Press#1 (>L:S_CDU1_KEY_R)
FNX320_CDU1_KEY_R_Release#0 (>L:S_CDU1_KEY_R)
FNX320_CDU1_KEY_RAD_NAV_Press#1 (>L:S_CDU1_KEY_RAD_NAV)
FNX320_CDU1_KEY_RAD_NAV_Release#0 (>L:S_CDU1_KEY_RAD_NAV)
FNX320_CDU1_KEY_S_Press#1 (>L:S_CDU1_KEY_S)
FNX320_CDU1_KEY_S_Release#0 (>L:S_CDU1_KEY_S)
FNX320_CDU1_KEY_SEC_FPLN_Press#1 (>L:S_CDU1_KEY_SEC_FPLN)
FNX320_CDU1_KEY_SEC_FPLN_Release#0 (>L:S_CDU1_KEY_SEC_FPLN)
FNX320_CDU1_KEY_SLASH_Press#1 (>L:S_CDU1_KEY_SLASH)
FNX320_CDU1_KEY_SLASH_Release#0 (>L:S_CDU1_KEY_SLASH)
FNX320_CDU1_KEY_SPACE_Press#1 (>L:S_CDU1_KEY_SPACE)
FNX320_CDU1_KEY_SPACE_Release#0 (>L:S_CDU1_KEY_SPACE)
FNX320_CDU1_KEY_T_Press#1 (>L:S_CDU1_KEY_T)
FNX320_CDU1_KEY_T_Release#0 (>L:S_CDU1_KEY_T)
FNX320_CDU1_KEY_U_Press#1 (>L:S_CDU1_KEY_U)
FNX320_CDU1_KEY_U_Release#0 (>L:S_CDU1_KEY_U)
FNX320_CDU1_KEY_V_Press#1 (>L:S_CDU1_KEY_V)
FNX320_CDU1_KEY_V_Release#0 (>L:S_CDU1_KEY_V)
FNX320_CDU1_KEY_W_Press#1 (>L:S_CDU1_KEY_W)
FNX320_CDU1_KEY_W_Release#0 (>L:S_CDU1_KEY_W)
FNX320_CDU1_KEY_X_Press#1 (>L:S_CDU1_KEY_X)
FNX320_CDU1_KEY_X_Release#0 (>L:S_CDU1_KEY_X)
FNX320_CDU1_KEY_Y_Press#1 (>L:S_CDU1_KEY_Y)
FNX320_CDU1_KEY_Y_Release#0 (>L:S_CDU1_KEY_Y)
FNX320_CDU1_KEY_Z_Press#1 (>L:S_CDU1_KEY_Z)
FNX320_CDU1_KEY_Z_Release#0 (>L:S_CDU1_KEY_Z)
FNX320_CDU2_BRIGHTNESS_DOWN_Press#1 (>L:S_CDU2_BRIGHTNESS_DOWN)
FNX320_CDU2_BRIGHTNESS_DOWN_Release#0 (>L:S_CDU2_BRIGHTNESS_DOWN)
FNX320_CDU2_BRIGHTNESS_UP_Press#1 (>L:S_CDU2_BRIGHTNESS_UP)
FNX320_CDU2_BRIGHTNESS_UP_Release#0 (>L:S_CDU2_BRIGHTNESS_UP)
FNX320_CDU2_KEY_0_Press#1 (>L:S_CDU2_KEY_0)
FNX320_CDU2_KEY_0_Release#0 (>L:S_CDU2_KEY_0)
FNX320_CDU2_KEY_1_Press#1 (>L:S_CDU2_KEY_1)
FNX320_CDU2_KEY_1_Release#0 (>L:S_CDU2_KEY_1)
FNX320_CDU2_KEY_2_Press#1 (>L:S_CDU2_KEY_2)
FNX320_CDU2_KEY_2_Release#0 (>L:S_CDU2_KEY_2)
FNX320_CDU2_KEY_3_Press#1 (>L:S_CDU2_KEY_3)
FNX320_CDU2_KEY_3_Release#0 (>L:S_CDU2_KEY_3)
FNX320_CDU2_KEY_4_Press#1 (>L:S_CDU2_KEY_4)
FNX320_CDU2_KEY_4_Release#0 (>L:S_CDU2_KEY_4)
FNX320_CDU2_KEY_5_Press#1 (>L:S_CDU2_KEY_5)
FNX320_CDU2_KEY_5_Release#0 (>L:S_CDU2_KEY_5)
FNX320_CDU2_KEY_6_Press#1 (>L:S_CDU2_KEY_6)
FNX320_CDU2_KEY_6_Release#0 (>L:S_CDU2_KEY_6)
FNX320_CDU2_KEY_7_Press#1 (>L:S_CDU2_KEY_7)
FNX320_CDU2_KEY_7_Release#0 (>L:S_CDU2_KEY_7)
FNX320_CDU2_KEY_8_Press#1 (>L:S_CDU2_KEY_8)
FNX320_CDU2_KEY_8_Release#0 (>L:S_CDU2_KEY_8)
FNX320_CDU2_KEY_9_Press#1 (>L:S_CDU2_KEY_9)
FNX320_CDU2_KEY_9_Release#0 (>L:S_CDU2_KEY_9)
FNX320_CDU2_KEY_A_Press#1 (>L:S_CDU2_KEY_A)
FNX320_CDU2_KEY_A_Release#0 (>L:S_CDU2_KEY_A)
FNX320_CDU2_KEY_AIRPORT_Press#1 (>L:S_CDU2_KEY_AIRPORT)
FNX320_CDU2_KEY_AIRPORT_Release#0 (>L:S_CDU2_KEY_AIRPORT)
FNX320_CDU2_KEY_ARROW_DOWN_Press#1 (>L:S_CDU2_KEY_ARROW_DOWN)
FNX320_CDU2_KEY_ARROW_DOWN_Release#0 (>L:S_CDU2_KEY_ARROW_DOWN)
FNX320_CDU2_KEY_ARROW_LEFT_Press#1 (>L:S_CDU2_KEY_ARROW_LEFT)
FNX320_CDU2_KEY_ARROW_LEFT_Release#0 (>L:S_CDU2_KEY_ARROW_LEFT)
FNX320_CDU2_KEY_ARROW_RIGHT_Press#1 (>L:S_CDU2_KEY_ARROW_RIGHT)
FNX320_CDU2_KEY_ARROW_RIGHT_Release#0 (>L:S_CDU2_KEY_ARROW_RIGHT)
FNX320_CDU2_KEY_ARROW_UP_Press#1 (>L:S_CDU2_KEY_ARROW_UP)
FNX320_CDU2_KEY_ARROW_UP_Release#0 (>L:S_CDU2_KEY_ARROW_UP)
FNX320_CDU2_KEY_ATC_COM_Press#1 (>L:S_CDU2_KEY_ATC_COM)
FNX320_CDU2_KEY_ATC_COM_Release#0 (>L:S_CDU2_KEY_ATC_COM)
FNX320_CDU2_KEY_B_Press#1 (>L:S_CDU2_KEY_B)
FNX320_CDU2_KEY_B_Release#0 (>L:S_CDU2_KEY_B)
FNX320_CDU2_KEY_C_Press#1 (>L:S_CDU2_KEY_C)
FNX320_CDU2_KEY_C_Release#0 (>L:S_CDU2_KEY_C)
FNX320_CDU2_KEY_CLEAR_Press#1 (>L:S_CDU2_KEY_CLEAR)
FNX320_CDU2_KEY_CLEAR_Release#0 (>L:S_CDU2_KEY_CLEAR)
FNX320_CDU2_KEY_D_Press#1 (>L:S_CDU2_KEY_D)
FNX320_CDU2_KEY_D_Release#0 (>L:S_CDU2_KEY_D)
FNX320_CDU2_KEY_DATA_Press#1 (>L:S_CDU2_KEY_DATA)
FNX320_CDU2_KEY_DATA_Release#0 (>L:S_CDU2_KEY_DATA)
FNX320_CDU2_KEY_DIR_Press#1 (>L:S_CDU2_KEY_DIR)
FNX320_CDU2_KEY_DIR_Release#0 (>L:S_CDU2_KEY_DIR)
FNX320_CDU2_KEY_DOT_Press#1 (>L:S_CDU2_KEY_DOT)
FNX320_CDU2_KEY_DOT_Release#0 (>L:S_CDU2_KEY_DOT)
FNX320_CDU2_KEY_E_Press#1 (>L:S_CDU2_KEY_E)
FNX320_CDU2_KEY_E_Release#0 (>L:S_CDU2_KEY_E)
FNX320_CDU2_KEY_F_Press#1 (>L:S_CDU2_KEY_F)
FNX320_CDU2_KEY_F_Release#0 (>L:S_CDU2_KEY_F)
FNX320_CDU2_KEY_FPLN_Press#1 (>L:S_CDU2_KEY_FPLN)
FNX320_CDU2_KEY_FPLN_Release#0 (>L:S_CDU2_KEY_FPLN)
FNX320_CDU2_KEY_FUEL_PRED_Press#1 (>L:S_CDU2_KEY_FUEL_PRED)
FNX320_CDU2_KEY_FUEL_PRED_Release#0 (>L:S_CDU2_KEY_FUEL_PRED)
FNX320_CDU2_KEY_G_Press#1 (>L:S_CDU2_KEY_G)
FNX320_CDU2_KEY_G_Release#0 (>L:S_CDU2_KEY_G)
FNX320_CDU2_KEY_H_Press#1 (>L:S_CDU2_KEY_H)
FNX320_CDU2_KEY_H_Release#0 (>L:S_CDU2_KEY_H)
FNX320_CDU2_KEY_I_Press#1 (>L:S_CDU2_KEY_I)
FNX320_CDU2_KEY_I_Release#0 (>L:S_CDU2_KEY_I)
FNX320_CDU2_KEY_INIT_Press#1 (>L:S_CDU2_KEY_INIT)
FNX320_CDU2_KEY_INIT_Release#0 (>L:S_CDU2_KEY_INIT)
FNX320_CDU2_KEY_J_Press#1 (>L:S_CDU2_KEY_J)
FNX320_CDU2_KEY_J_Release#0 (>L:S_CDU2_KEY_J)
FNX320_CDU2_KEY_K_Press#1 (>L:S_CDU2_KEY_K)
FNX320_CDU2_KEY_K_Release#0 (>L:S_CDU2_KEY_K)
FNX320_CDU2_KEY_L_Press#1 (>L:S_CDU2_KEY_L)
FNX320_CDU2_KEY_L_Release#0 (>L:S_CDU2_KEY_L)
FNX320_CDU2_KEY_LSK1L_Press#1 (>L:S_CDU2_KEY_LSK1L)
FNX320_CDU2_KEY_LSK1L_Release#0 (>L:S_CDU2_KEY_LSK1L)
FNX320_CDU2_KEY_LSK1R_Press#1 (>L:S_CDU2_KEY_LSK1R)
FNX320_CDU2_KEY_LSK1R_Release#0 (>L:S_CDU2_KEY_LSK1R)
FNX320_CDU2_KEY_LSK2L_Press#1 (>L:S_CDU2_KEY_LSK2L)
FNX320_CDU2_KEY_LSK2L_Release#0 (>L:S_CDU2_KEY_LSK2L)
FNX320_CDU2_KEY_LSK2R_Press#1 (>L:S_CDU2_KEY_LSK2R)
FNX320_CDU2_KEY_LSK2R_Release#0 (>L:S_CDU2_KEY_LSK2R)
FNX320_CDU2_KEY_LSK3L_Press#1 (>L:S_CDU2_KEY_LSK3L)
FNX320_CDU2_KEY_LSK3L_Release#0 (>L:S_CDU2_KEY_LSK3L)
FNX320_CDU2_KEY_LSK3R_Press#1 (>L:S_CDU2_KEY_LSK3R)
FNX320_CDU2_KEY_LSK3R_Release#0 (>L:S_CDU2_KEY_LSK3R)
FNX320_CDU2_KEY_LSK4L_Press#1 (>L:S_CDU2_KEY_LSK4L)
FNX320_CDU2_KEY_LSK4L_Release#0 (>L:S_CDU2_KEY_LSK4L)
FNX320_CDU2_KEY_LSK4R_Press#1 (>L:S_CDU2_KEY_LSK4R)
FNX320_CDU2_KEY_LSK4R_Release#0 (>L:S_CDU2_KEY_LSK4R)
FNX320_CDU2_KEY_LSK5L_Press#1 (>L:S_CDU2_KEY_LSK5L)
FNX320_CDU2_KEY_LSK5L_Release#0 (>L:S_CDU2_KEY_LSK5L)
FNX320_CDU2_KEY_LSK5R_Press#1 (>L:S_CDU2_KEY_LSK5R)
FNX320_CDU2_KEY_LSK5R_Release#0 (>L:S_CDU2_KEY_LSK5R)
FNX320_CDU2_KEY_LSK6L_Press#1 (>L:S_CDU2_KEY_LSK6L)
FNX320_CDU2_KEY_LSK6L_Release#0 (>L:S_CDU2_KEY_LSK6L)
FNX320_CDU2_KEY_LSK6R_Press#1 (>L:S_CDU2_KEY_LSK6R)
FNX320_CDU2_KEY_LSK6R_Release#0 (>L:S_CDU2_KEY_LSK6R)
FNX320_CDU2_KEY_M_Press#1 (>L:S_CDU2_KEY_M)
FNX320_CDU2_KEY_M_Release#0 (>L:S_CDU2_KEY_M)
FNX320_CDU2_KEY_MENU_Press#1 (>L:S_CDU2_KEY_MENU)
FNX320_CDU2_KEY_MENU_Release#0 (>L:S_CDU2_KEY_MENU)
FNX320_CDU2_KEY_MINUS_Press#1 (>L:S_CDU2_KEY_MINUS)
FNX320_CDU2_KEY_MINUS_Release#0 (>L:S_CDU2_KEY_MINUS)
FNX320_CDU2_KEY_N_Press#1 (>L:S_CDU2_KEY_N)
FNX320_CDU2_KEY_N_Release#0 (>L:S_CDU2_KEY_N)
FNX320_CDU2_KEY_O_Press#1 (>L:S_CDU2_KEY_O)
FNX320_CDU2_KEY_O_Release#0 (>L:S_CDU2_KEY_O)
FNX320_CDU2_KEY_OVFLY_Press#1 (>L:S_CDU2_KEY_OVFLY)
FNX320_CDU2_KEY_OVFLY_Release#0 (>L:S_CDU2_KEY_OVFLY)
FNX320_CDU2_KEY_P_Press#1 (>L:S_CDU2_KEY_P)
FNX320_CDU2_KEY_P_Release#0 (>L:S_CDU2_KEY_P)
FNX320_CDU2_KEY_PERF_Press#1 (>L:S_CDU2_KEY_PERF)
FNX320_CDU2_KEY_PERF_Release#0 (>L:S_CDU2_KEY_PERF)
FNX320_CDU2_KEY_PROG_Press#1 (>L:S_CDU2_KEY_PROG)
FNX320_CDU2_KEY_PROG_Release#0 (>L:S_CDU2_KEY_PROG)
FNX320_CDU2_KEY_Q_Press#1 (>L:S_CDU2_KEY_Q)
FNX320_CDU2_KEY_Q_Release#0 (>L:S_CDU2_KEY_Q)
FNX320_CDU2_KEY_R_Press#1 (>L:S_CDU2_KEY_R)
FNX320_CDU2_KEY_R_Release#0 (>L:S_CDU2_KEY_R)
FNX320_CDU2_KEY_RAD_NAV_Press#1 (>L:S_CDU2_KEY_RAD_NAV)
FNX320_CDU2_KEY_RAD_NAV_Release#0 (>L:S_CDU2_KEY_RAD_NAV)
FNX320_CDU2_KEY_S_Press#1 (>L:S_CDU2_KEY_S)
FNX320_CDU2_KEY_S_Release#0 (>L:S_CDU2_KEY_S)
FNX320_CDU2_KEY_SEC_FPLN_Press#1 (>L:S_CDU2_KEY_SEC_FPLN)
FNX320_CDU2_KEY_SEC_FPLN_Release#0 (>L:S_CDU2_KEY_SEC_FPLN)
FNX320_CDU2_KEY_SLASH_Press#1 (>L:S_CDU2_KEY_SLASH)
FNX320_CDU2_KEY_SLASH_Release#0 (>L:S_CDU2_KEY_SLASH)
FNX320_CDU2_KEY_SPACE_Press#1 (>L:S_CDU2_KEY_SPACE)
FNX320_CDU2_KEY_SPACE_Release#0 (>L:S_CDU2_KEY_SPACE)
FNX320_CDU2_KEY_T_Press#1 (>L:S_CDU2_KEY_T)
FNX320_CDU2_KEY_T_Release#0 (>L:S_CDU2_KEY_T)
FNX320_CDU2_KEY_U_Press#1 (>L:S_CDU2_KEY_U)
FNX320_CDU2_KEY_U_Release#0 (>L:S_CDU2_KEY_U)
FNX320_CDU2_KEY_V_Press#1 (>L:S_CDU2_KEY_V)
FNX320_CDU2_KEY_V_Release#0 (>L:S_CDU2_KEY_V)
FNX320_CDU2_KEY_W_Press#1 (>L:S_CDU2_KEY_W)
FNX320_CDU2_KEY_W_Release#0 (>L:S_CDU2_KEY_W)
FNX320_CDU2_KEY_X_Press#1 (>L:S_CDU2_KEY_X)
FNX320_CDU2_KEY_X_Release#0 (>L:S_CDU2_KEY_X)
FNX320_CDU2_KEY_Y_Press#1 (>L:S_CDU2_KEY_Y)
FNX320_CDU2_KEY_Y_Release#0 (>L:S_CDU2_KEY_Y)
FNX320_CDU2_KEY_Z_Press#1 (>L:S_CDU2_KEY_Z)
FNX320_CDU2_KEY_Z_Release#0 (>L:S_CDU2_KEY_Z)
FNX320_CDU1_KEY_1_Release#0 (>L:S_CDU1_KEY_1)
FNX320_CDU1_KEY_ATC_COM_Press#1 (>L:S_CDU1_KEY_ATC_COM)
FNX320_CDU1_KEY_DIR_Press#(L:S_CDU1_KEY_DIR) 2 + (>L:S_CDU1_KEY_DIR)
//FenixSim/A320/Miscellaneous
FNX320_Glareshield_Chrono_Captain_Button_Press#1 (>L:S_MIP_CHRONO_CAPT)
FNX320_Glareshield_Chrono_Captain_Button_Release#0 (>L:S_MIP_CHRONO_CAPT)
FNX320_Glareshield_Chrono_FO_Button_Press#1 (>L:S_MIP_CHRONO_FO)
FNX320_Glareshield_Chrono_FO_Button_Release#0 (>L:S_MIP_CHRONO_FO)
FNX320_MainPanel_Clock_CHR_Button_Press#1 (>L:S_MIP_CLOCK_CHR)
FNX320_MainPanel_Clock_CHR_Button_Release#0 (>L:S_MIP_CLOCK_CHR)
FNX320_MainPanel_Clock_Date_Button_Press#1 (>L:S_MIP_CLOCK_SET)
FNX320_MainPanel_Clock_Date_Button_Release#0 (>L:S_MIP_CLOCK_SET)
FNX320_MainPanel_Clock_Date_Knob_Dec#(L:E_MIP_CLOCK_SET) -- (>L:E_MIP_CLOCK_SET)
FNX320_MainPanel_Clock_Date_Knob_Inc#(L:E_MIP_CLOCK_SET) ++ (>L:E_MIP_CLOCK_SET)
FNX320_MainPanel_Clock_ET_Selector_Knob_RST#2 (>L:S_MIP_CLOCK_ET)
FNX320_MainPanel_Clock_ET_Selector_Knob_Run#0 (>L:S_MIP_CLOCK_ET)
FNX320_MainPanel_Clock_ET_Selector_Knob_STP#1 (>L:S_MIP_CLOCK_ET)
FNX320_MainPanel_Clock_Reset_Button_Press#1 (>L:S_MIP_CLOCK_RST)
FNX320_MainPanel_Clock_Reset_Button_Release#0 (>L:S_MIP_CLOCK_RST)
FNX320_MainPanel_Clock_UTC_Selector_Knob_GPS#0 (>L:S_MIP_CLOCK_UTC)
FNX320_MainPanel_Clock_UTC_Selector_Knob_INT#1 (>L:S_MIP_CLOCK_UTC)
FNX320_MainPanel_Clock_UTC_Selector_Knob_SET#2 (>L:S_MIP_CLOCK_UTC)
FNX320_Misc_Cockpit_Door_Press#(L:S_COCKPIT_DOOR) ! (>L:S_COCKPIT_DOOR)
FNX320_Misc_Emergency_Gear_Lever_Dec#(L:S_HYD_GRAVITY_GEAR_EXTEND_ROTATION) 3 == if{ 0 (>L:S_HYD_GRAVITY_GEAR_EXTEND) } (L:S_HYD_GRAVITY_GEAR_EXTEND_ROTATION) 0.05 - 0 max (>L:S_HYD_GRAVITY_GEAR_EXTEND_ROTATION)
FNX320_Misc_Emergency_Gear_Lever_Inc#(L:S_HYD_GRAVITY_GEAR_EXTEND_ROTATION) 0.05 + 3 min (>L:S_HYD_GRAVITY_GEAR_EXTEND_ROTATION) (L:S_HYD_GRAVITY_GEAR_EXTEND_ROTATION) 3 == if{ 1 (>L:S_HYD_GRAVITY_GEAR_EXTEND) }
FNX320_Misc_Jumpseat_Headrest_Press#(L:S_JUMPSEAT_HEADREST) ! (>L:S_JUMPSEAT_HEADREST)
FNX320_Misc_Jumpseat_Press#(L:S_JUMPSEAT) ! (>L:S_JUMPSEAT)
FNX320_Misc_Oxygen_Mask_1_Test_Captain_Button_Press#1 (>L:S_OXYGEN_MASK_1_TEST_CAPT)
FNX320_Misc_Oxygen_Mask_1_Test_Captain_Button_Release#0 (>L:S_OXYGEN_MASK_1_TEST_CAPT)
FNX320_Misc_Oxygen_Mask_1_Test_FO_Button_Press#1 (>L:S_OXYGEN_MASK_1_TEST_FO)
FNX320_Misc_Oxygen_Mask_1_Test_FO_Button_Release#0 (>L:S_OXYGEN_MASK_1_TEST_FO)
FNX320_Misc_Oxygen_Mask_2_Test_Captain_Button_Press#1 (>L:S_OXYGEN_MASK_2_TEST_CAPT)
FNX320_Misc_Oxygen_Mask_2_Test_Captain_Button_Release#0 (>L:S_OXYGEN_MASK_2_TEST_CAPT)
FNX320_Misc_Oxygen_Mask_2_Test_FO_Button_Press#1 (>L:S_OXYGEN_MASK_2_TEST_FO)
FNX320_Misc_Oxygen_Mask_2_Test_FO_Button_Release#0 (>L:S_OXYGEN_MASK_2_TEST_FO)
FNX320_Misc_Oxygen_Mask_Cover_Captain_Press#(L:S_OXYGEN_MASK_COVER_CAPT) ! (>L:S_OXYGEN_MASK_COVER_CAPT)
FNX320_Misc_Oxygen_Mask_Cover_FO_Press#(L:S_OXYGEN_MASK_COVER_FO) ! (>L:S_OXYGEN_MASK_COVER_FO)
FNX320_Misc_Seat_Armrest_Left_Captain_Press#(L:S_ARMREST_LEFT_CAPT) ! (>L:S_ARMREST_LEFT_CAPT)
FNX320_Misc_Seat_Armrest_Left_FO_Press#(L:S_ARMREST_LEFT_FO) ! (>L:S_ARMREST_LEFT_FO)
FNX320_Misc_Seat_Armrest_Right_Captain_Press#(L:S_ARMREST_RIGHT_CAPT) ! (>L:S_ARMREST_RIGHT_CAPT)
FNX320_Misc_Seat_Armrest_Right_FO_Press#(L:S_ARMREST_RIGHT_FO) ! (>L:S_ARMREST_RIGHT_FO)
FNX320_Misc_Standby_Compass_Position_Press#(L:S_STANDBY_COMPASS) ! (>L:S_STANDBY_COMPASS)
FNX320_Misc_Sunshade_Captain_Press#(L:S_SUNSHADE_CAPT) ! (>L:S_SUNSHADE_CAPT)
FNX320_Misc_Sunshade_FO_Press#(L:S_SUNSHADE_FO) ! (>L:S_SUNSHADE_FO)
FNX320_Misc_Window_Blinds_Captain_Press#(L:S_WINDOW_BLINDS_CAPT) ! (>L:S_WINDOW_BLINDS_CAPT)
FNX320_Misc_Window_Blinds_FO_Press#(L:S_WINDOW_BLINDS_FO) ! (>L:S_WINDOW_BLINDS_FO)
FNX320_Misc_Window_Blinds_Rear_Captain_Press#(L:S_WINDOW_BLINDS_REAR_CAPT) ! (>L:S_WINDOW_BLINDS_REAR_CAPT)
FNX320_Misc_Window_Blinds_Rear_FO_Press#(L:S_WINDOW_BLINDS_REAR_FO) ! (>L:S_WINDOW_BLINDS_REAR_FO)
FNX320_Overhead_Audio_Switching_Knob_CA#0 (>L:S_AUDIO_SWITCHING)
FNX320_Overhead_Audio_Switching_Knob_FO#2 (>L:S_AUDIO_SWITCHING)
FNX320_Overhead_Audio_Switching_Knob_Norm#1 (>L:S_AUDIO_SWITCHING)
FNX320_Overhead_Cockpit_Door_Video_Button_Press#(L:S_OH_COCKPIT_DOOR_VIDEO) ! (>L:S_OH_COCKPIT_DOOR_VIDEO) 1 (>L:S_OH_COCKPIT_DOOR_VIDEO_Anim)
FNX320_Overhead_Cockpit_Door_Video_Button_Release#(L:S_OH_COCKPIT_DOOR_VIDEO) 0 == if{ 0 (>L:S_OH_COCKPIT_DOOR_VIDEO_Anim) } (L:S_OH_COCKPIT_DOOR_VIDEO) 1 == if{ 2 (>L:S_OH_COCKPIT_DOOR_VIDEO_Anim) }
FNX320_Overhead_Svce_Int_Button_Press#1 (>L:S_OH_SVCE_INT_OVRD)
FNX320_Overhead_Svce_Int_Button_Release#0 (>L:S_OH_SVCE_INT_OVRD)
FNX320_Pedestal_AIDS_Print_Button_Press#1 (>L:S_PED_AIDS_PRINT)
FNX320_Pedestal_AIDS_Print_Button_Release#0 (>L:S_PED_AIDS_PRINT)
FNX320_Pedestal_Cockpit_Door_Mode_Switch_Lock#0 (>L:S_PED_COCKPIT_DOOR)
FNX320_Pedestal_Cockpit_Door_Mode_Switch_Mid#1 (>L:S_PED_COCKPIT_DOOR)
FNX320_Pedestal_Cockpit_Door_Mode_Switch_Unlock#2 (>L:S_PED_COCKPIT_DOOR)
FNX320_Pedestal_Cockpit_Door_Video_Button_Press#1 (>L:S_PED_COCKPIT_DOOR_VIDEO)
FNX320_Pedestal_Cockpit_Door_Video_Button_Release#0 (>L:S_PED_COCKPIT_DOOR_VIDEO)
FNX320_Pedestal_DFDR_Event_Button_Press#1 (>L:S_PED_DFDR_EVENT)
FNX320_Pedestal_DFDR_Event_Button_Release#0 (>L:S_PED_DFDR_EVENT)
FNX320_OH_CALLS_AFT-SWITCH#(L:S_OH_CALLS_AFT) ++ (>L:S_OH_CALLS_AFT)
FNX320_OH_CALLS_ALL-SWITCH#(L:S_OH_CALLS_ALL) ++ (>L:S_OH_CALLS_ALL)
FNX320_OH_CALLS_EMER-COVER#(L:S_OH_CALLS_EMER_Cover) ! (>L:S_OH_CALLS_EMER_Cover)
FNX320_OH_CALLS_EMER_SWITCH#(L:S_OH_CALLS_EMER) ! (>L:S_OH_CALLS_EMER)
FNX320_OH_CALLS_EMER_SWITCH#(L:S_OH_CALLS_EMER) ! (>L:S_OH_CALLS_EMER)
FNX320_OH_CALLS_FWD-SWITCH#(L:S_OH_CALLS_FWD) ++ (>L:S_OH_CALLS_FWD)
FNX320_OH_CALLS_MECH-SWITCH#(L:S_OH_CALLS_MECH) ++ (>L:S_OH_CALLS_MECH)
FNX320_OH_WIPER_CAPT_DEC#(L:S_MISC_WIPER_CAPT) -- 0 max (>L:S_MISC_WIPER_CAPT)
FNX320_OH_WIPER_CAPT_INC#(L:S_MISC_WIPER_CAPT) ++ 2 min (>L:S_MISC_WIPER_CAPT)
FNX320_OH_WIPER_FO_DEC#(L:S_MISC_WIPER_FO) -- 0 max (>L:S_MISC_WIPER_FO)
FNX320_OH_WIPER_FO_INC#(L:S_MISC_WIPER_FO) ++ 2 min (>L:S_MISC_WIPER_FO)
//FenixSim/A320/Navigation
FNX320_OVHD_IR1_KNOB_OFF-NAV-ATT_TOGGLE#(L:S_OH_NAV_IR1_MODE, Number) ++ 3 % (>L:S_OH_NAV_IR1_MODE, Number)
FNX320_OVHD_IR1_KNOB_OFF-NAV_SWITCH#(L:S_OH_NAV_IR1_MODE) ! (>L:S_OH_NAV_IR1_MODE)
FNX320_OVHD_IR2_KNOB_OFF-NAV-ATT_TOGGLE#(L:S_OH_NAV_IR2_MODE, Number) ++ 3 % (>L:S_OH_NAV_IR2_MODE, Number)
FNX320_OVHD_IR2_KNOB_OFF-NAV_SWITCH#(L:S_OH_NAV_IR2_MODE) ! (>L:S_OH_NAV_IR2_MODE)
FNX320_OVHD_IR3_KNOB_OFF-NAV-ATT_TOGGLE#(L:S_OH_NAV_IR3_MODE, Number) ++ 3 % (>L:S_OH_NAV_IR3_MODE, Number)
FNX320_OVHD_IR3_KNOB_OFF-NAV_SWITCH#(L:S_OH_NAV_IR3_MODE) ! (>L:S_OH_NAV_IR3_MODE)
//FenixSim/A320/Pneumatic
FNX320_Pneumatic_APU_Bleed_Button_Press#(L:S_OH_PNEUMATIC_APU_BLEED) ! (>L:S_OH_PNEUMATIC_APU_BLEED) 1 (>L:S_OH_PNEUMATIC_APU_BLEED_Anim)
FNX320_Pneumatic_APU_Bleed_Button_Release#(L:S_OH_PNEUMATIC_APU_BLEED) 0 == if{ 0 (>L:S_OH_PNEUMATIC_APU_BLEED_Anim) } (L:S_OH_PNEUMATIC_APU_BLEED) 1 == if{ 2 (>L:S_OH_PNEUMATIC_APU_BLEED_Anim) }
FNX320_Pneumatic_Cross_Bleed_Selector_Knob_AUTO#1 (>L:S_OH_PNEUMATIC_XBLEED_SELECTOR)
FNX320_Pneumatic_Cross_Bleed_Selector_Knob_OPEN#2 (>L:S_OH_PNEUMATIC_XBLEED_SELECTOR)
FNX320_Pneumatic_Cross_Bleed_Selector_Knob_SHUT#0 (>L:S_OH_PNEUMATIC_XBLEED_SELECTOR)
FNX320_Pneumatic_Engine_Bleed_1_Button_Press#(L:S_OH_PNEUMATIC_ENG1_BLEED) ! (>L:S_OH_PNEUMATIC_ENG1_BLEED) 1 (>L:S_OH_PNEUMATIC_ENG1_BLEED_Anim)
FNX320_Pneumatic_Engine_Bleed_1_Button_Release#(L:S_OH_PNEUMATIC_ENG1_BLEED) 0 == if{ 0 (>L:S_OH_PNEUMATIC_ENG1_BLEED_Anim) } (L:S_OH_PNEUMATIC_ENG1_BLEED) 1 == if{ 2 (>L:S_OH_PNEUMATIC_ENG1_BLEED_Anim) }
FNX320_Pneumatic_Engine_Bleed_2_Button_Press#(L:S_OH_PNEUMATIC_ENG2_BLEED) ! (>L:S_OH_PNEUMATIC_ENG2_BLEED) 1 (>L:S_OH_PNEUMATIC_ENG2_BLEED_Anim)
FNX320_Pneumatic_Engine_Bleed_2_Button_Release#(L:S_OH_PNEUMATIC_ENG2_BLEED) 0 == if{ 0 (>L:S_OH_PNEUMATIC_ENG2_BLEED_Anim) } (L:S_OH_PNEUMATIC_ENG2_BLEED) 1 == if{ 2 (>L:S_OH_PNEUMATIC_ENG2_BLEED_Anim) }
FNX320_Pneumatic_Hot_Air_Button_Press#(L:S_OH_PNEUMATIC_HOT_AIR) ! (>L:S_OH_PNEUMATIC_HOT_AIR) 1 (>L:S_OH_PNEUMATIC_HOT_AIR_Anim)
FNX320_Pneumatic_Hot_Air_Button_Release#(L:S_OH_PNEUMATIC_HOT_AIR) 0 == if{ 0 (>L:S_OH_PNEUMATIC_HOT_AIR_Anim) } (L:S_OH_PNEUMATIC_HOT_AIR) 1 == if{ 2 (>L:S_OH_PNEUMATIC_HOT_AIR_Anim) }
FNX320_Pneumatic_Pack_1_Button_Press#(L:S_OH_PNEUMATIC_PACK_1) ! (>L:S_OH_PNEUMATIC_PACK_1) 1 (>L:S_OH_PNEUMATIC_PACK_1_Anim)
FNX320_Pneumatic_Pack_1_Button_Release#(L:S_OH_PNEUMATIC_PACK_1) 0 == if{ 0 (>L:S_OH_PNEUMATIC_PACK_1_Anim) } (L:S_OH_PNEUMATIC_PACK_1) 1 == if{ 2 (>L:S_OH_PNEUMATIC_PACK_1_Anim) }
FNX320_Pneumatic_Pack_2_Button_Press#(L:S_OH_PNEUMATIC_PACK_2) ! (>L:S_OH_PNEUMATIC_PACK_2) 1 (>L:S_OH_PNEUMATIC_PACK_2_Anim)
FNX320_Pneumatic_Pack_2_Button_Release#(L:S_OH_PNEUMATIC_PACK_2) 0 == if{ 0 (>L:S_OH_PNEUMATIC_PACK_2_Anim) } (L:S_OH_PNEUMATIC_PACK_2) 1 == if{ 2 (>L:S_OH_PNEUMATIC_PACK_2_Anim) }
FNX320_Pneumatic_Pack_Flow_Selector_Knob_HIGH#2 (>L:S_OH_PNEUMATIC_PACK_FLOW)
FNX320_Pneumatic_Pack_Flow_Selector_Knob_LOW#0 (>L:S_OH_PNEUMATIC_PACK_FLOW)
FNX320_Pneumatic_Pack_Flow_Selector_Knob_NORMAL#1 (>L:S_OH_PNEUMATIC_PACK_FLOW)
FNX320_Pneumatic_Ram_Air_Button_Press#(L:S_OH_PNEUMATIC_RAM_AIR) ! (>L:S_OH_PNEUMATIC_RAM_AIR) 1 (>L:S_OH_PNEUMATIC_RAM_AIR_Anim)
FNX320_Pneumatic_Ram_Air_Button_Release#(L:S_OH_PNEUMATIC_RAM_AIR) 0 == if{ 0 (>L:S_OH_PNEUMATIC_RAM_AIR_Anim) } (L:S_OH_PNEUMATIC_RAM_AIR) 1 == if{ 2 (>L:S_OH_PNEUMATIC_RAM_AIR_Anim) }
FNX320_Pneumatic_Temp_Cabin_Aft_Selector_Knob_Dec#(L:A_OH_PNEUMATIC_AFT_TEMP) 0.1 - 0 max (>L:A_OH_PNEUMATIC_AFT_TEMP)
FNX320_Pneumatic_Temp_Cabin_Aft_Selector_Knob_Inc#(L:A_OH_PNEUMATIC_AFT_TEMP) 0.1 + 1 min (>L:A_OH_PNEUMATIC_AFT_TEMP)
FNX320_Pneumatic_Temp_Cabin_Forward_Selector_Knob_Dec#(L:A_OH_PNEUMATIC_FWD_TEMP) 0.1 - 0 max (>L:A_OH_PNEUMATIC_FWD_TEMP)
FNX320_Pneumatic_Temp_Cabin_Forward_Selector_Knob_Inc#(L:A_OH_PNEUMATIC_FWD_TEMP) 0.1 + 1 min (>L:A_OH_PNEUMATIC_FWD_TEMP)
FNX320_Pneumatic_Temp_Cockpit_Selector_Knob_Dec#(L:A_OH_PNEUMATIC_COCKPIT_TEMP) 0.1 - 0 max (>L:A_OH_PNEUMATIC_COCKPIT_TEMP)
FNX320_Pneumatic_Temp_Cockpit_Selector_Knob_Inc#(L:A_OH_PNEUMATIC_COCKPIT_TEMP) 0.1 + 1 min (>L:A_OH_PNEUMATIC_COCKPIT_TEMP)
//FenixSim/A320/Radar
FNX320_WX_GCS_Switch#(L:S_WR_GCS) ! (>L:S_WR_GCS)
FNX320_WX_Gain_Knob_Dec#(L:A_WR_GAIN) 0.1 - 0 max (>L:A_WR_GAIN)
FNX320_WX_Gain_Knob_Inc#(L:A_WR_GAIN) 0.1 + 1 min (>L:A_WR_GAIN)
FNX320_WX_Image_Selector_Knob_Dec#(L:S_WR_MODE) 0.1 - 0 max (>L:S_WR_MODE)
FNX320_WX_Image_Selector_Knob_Inc#(L:S_WR_MODE) 0.1 + 1 min (>L:S_WR_MODE)
FNX320_WX_Multiscan_Switch#(L:S_WR_MULTISCAN) ! (>L:S_WR_MULTISCAN)
FNX320_WX_System_Switch_1#0 (>L:S_WR_SYS)
FNX320_WX_System_Switch_2#2 (>L:S_WR_SYS)
FNX320_WX_System_Switch_OFF#1 (>L:S_WR_SYS)
FNX320_WX_Tilt_Knob_Dec#(L:A_WR_TILT) 0.1 - 0 max (>L:A_WR_TILT)
FNX320_WX_Tilt_Knob_Inc#(L:A_WR_TILT) 0.1 + 1 min (>L:A_WR_TILT)
//FenixSim/A320/Radio
FNX320_ACP1_ADF_1_Volume_Knob_Dec#(L:A_ASP_ADF_1_VOLUME) 0.05 - 0 max (>L:A_ASP_ADF_1_VOLUME)
FNX320_ACP1_ADF_1_Volume_Knob_Inc#(L:A_ASP_ADF_1_VOLUME) 0.05 + 1 min (>L:A_ASP_ADF_1_VOLUME)
FNX320_ACP1_ADF_2_Volume_Knob_Dec#(L:A_ASP_ADF_2_VOLUME) 0.05 - 0 max (>L:A_ASP_ADF_2_VOLUME)
FNX320_ACP1_ADF_2_Volume_Knob_Inc#(L:A_ASP_ADF_2_VOLUME) 0.05 + 1 min (>L:A_ASP_ADF_2_VOLUME)
FNX320_ACP1_CAB_Send_Button_Press#1 (>L:ACP1_CAB_Send_Button)
FNX320_ACP1_CAB_Send_Button_Release#0 (>L:ACP1_CAB_Send_Button)
FNX320_ACP1_CAB_Volume_Knob_Dec#(L:A_ASP_CAB_VOLUME) 0.05 - 0 max (>L:A_ASP_CAB_VOLUME)
FNX320_ACP1_CAB_Volume_Knob_Inc#(L:A_ASP_CAB_VOLUME) 0.05 + 1 min (>L:A_ASP_CAB_VOLUME)
FNX320_ACP1_HF_1_Send_Button_Press#1 (>L:ACP1_HF_1_Send_Button)
FNX320_ACP1_HF_1_Send_Button_Release#0 (>L:ACP1_HF_1_Send_Button)
FNX320_ACP1_HF_1_Volume_Knob_Dec#(L:A_ASP_HF_1_VOLUME) 0.05 - 0 max (>L:A_ASP_HF_1_VOLUME)
FNX320_ACP1_HF_1_Volume_Knob_Inc#(L:A_ASP_HF_1_VOLUME) 0.05 + 1 min (>L:A_ASP_HF_1_VOLUME)
FNX320_ACP1_HF_2_Send_Button_Press#1 (>L:ACP1_HF_2_Send_Button)
FNX320_ACP1_HF_2_Send_Button_Release#0 (>L:ACP1_HF_2_Send_Button)
FNX320_ACP1_HF_2_Volume_Knob_Dec#(L:A_ASP_HF_2_VOLUME) 0.05 - 0 max (>L:A_ASP_HF_2_VOLUME)
FNX320_ACP1_HF_2_Volume_Knob_Inc#(L:A_ASP_HF_2_VOLUME) 0.05 + 1 min (>L:A_ASP_HF_2_VOLUME)
FNX320_ACP1_ILS_Volume_Knob_Dec#(L:A_ASP_ILS_VOLUME) 0.05 - 0 max (>L:A_ASP_ILS_VOLUME)
FNX320_ACP1_ILS_Volume_Knob_Inc#(L:A_ASP_ILS_VOLUME) 0.05 + 1 min (>L:A_ASP_ILS_VOLUME)
FNX320_ACP1_INT_Send_Button_Press#1 (>L:ACP1_INT_Send_Button)
FNX320_ACP1_INT_Send_Button_Release#0 (>L:ACP1_INT_Send_Button)
FNX320_ACP1_INT_Volume_Knob_Dec#(L:A_ASP_INT_VOLUME) 0.05 - 0 max (>L:A_ASP_INT_VOLUME)
FNX320_ACP1_INT_Volume_Knob_Inc#(L:A_ASP_INT_VOLUME) 0.05 + 1 min (>L:A_ASP_INT_VOLUME)
FNX320_ACP1_INTRAD_Switch_INT#0 (>L:S_ASP_INTRAD)
FNX320_ACP1_INTRAD_Switch_OFF#1 (>L:S_ASP_INTRAD)
FNX320_ACP1_INTRAD_Switch_RAD#2 (>L:S_ASP_INTRAD)
FNX320_ACP1_MARKER_Volume_Knob_Dec#(L:A_ASP_MARKER_VOLUME) 0.05 - 0 max (>L:A_ASP_MARKER_VOLUME)
FNX320_ACP1_MARKER_Volume_Knob_Inc#(L:A_ASP_MARKER_VOLUME) 0.05 + 1 min (>L:A_ASP_MARKER_VOLUME)
FNX320_ACP1_MLS_Volume_Knob_Dec#(L:A_ASP_MLS_VOLUME) 0.05 - 0 max (>L:A_ASP_MLS_VOLUME)
FNX320_ACP1_MLS_Volume_Knob_Inc#(L:A_ASP_MLS_VOLUME) 0.05 + 1 min (>L:A_ASP_MLS_VOLUME)
FNX320_ACP1_PA_SEND_Button_Press#1 (>L:ACP1_PA_SEND_Button)
FNX320_ACP1_PA_SEND_Button_Release#0 (>L:ACP1_PA_SEND_Button)
FNX320_ACP1_PA_Volume_Knob_Dec#(L:A_ASP_PA_VOLUME) 0.05 - 0 max (>L:A_ASP_PA_VOLUME)
FNX320_ACP1_PA_Volume_Knob_Inc#(L:A_ASP_PA_VOLUME) 0.05 + 1 min (>L:A_ASP_PA_VOLUME)
FNX320_ACP1_RESET_Button_Press#1 (>L:ACP1_RESET_Button)
FNX320_ACP1_RESET_Button_Release#0 (>L:ACP1_RESET_Button)
FNX320_ACP1_VHF_1_Send_Button_Press#1 (>L:ACP1_VHF_1_Send_Button)
FNX320_ACP1_VHF_1_Send_Button_Release#0 (>L:ACP1_VHF_1_Send_Button)
FNX320_ACP1_VHF_1_Volume_Knob_Dec#(L:A_ASP_VHF_1_VOLUME) 0.05 - 0 max (>L:A_ASP_VHF_1_VOLUME)
FNX320_ACP1_VHF_1_Volume_Knob_Inc#(L:A_ASP_VHF_1_VOLUME) 0.05 + 1 min (>L:A_ASP_VHF_1_VOLUME)
FNX320_ACP1_VHF_2_Send_Button_Press#1 (>L:ACP1_VHF_2_Send_Button)
FNX320_ACP1_VHF_2_Send_Button_Release#0 (>L:ACP1_VHF_2_Send_Button)
FNX320_ACP1_VHF_2_Volume_Knob_Dec#(L:A_ASP_VHF_2_VOLUME) 0.05 - 0 max (>L:A_ASP_VHF_2_VOLUME)
FNX320_ACP1_VHF_2_Volume_Knob_Inc#(L:A_ASP_VHF_2_VOLUME) 0.05 + 1 min (>L:A_ASP_VHF_2_VOLUME)
FNX320_ACP1_VHF_3_Send_Button_Press#1 (>L:ACP1_VHF_3_Send_Button)
FNX320_ACP1_VHF_3_Send_Button_Release#0 (>L:ACP1_VHF_3_Send_Button)
FNX320_ACP1_VHF_3_Volume_Knob_Dec#(L:A_ASP_VHF_3_VOLUME) 0.05 - 0 max (>L:A_ASP_VHF_3_VOLUME)
FNX320_ACP1_VHF_3_Volume_Knob_Inc#(L:A_ASP_VHF_3_VOLUME) 0.05 + 1 min (>L:A_ASP_VHF_3_VOLUME)
FNX320_ACP1_VOICE_Button_Press#1 (>L:ACP1_VOICE_Button)
FNX320_ACP1_VOICE_Button_Release#0 (>L:ACP1_VOICE_Button)
FNX320_ACP1_VOR_1_Volume_Knob_Dec#(L:A_ASP_VOR_1_VOLUME) 0.05 - 0 max (>L:A_ASP_VOR_1_VOLUME)
FNX320_ACP1_VOR_1_Volume_Knob_Inc#(L:A_ASP_VOR_1_VOLUME) 0.05 + 1 min (>L:A_ASP_VOR_1_VOLUME)
FNX320_ACP1_VOR_2_Volume_Knob_Dec#(L:A_ASP_VOR_2_VOLUME) 0.05 - 0 max (>L:A_ASP_VOR_2_VOLUME)
FNX320_ACP1_VOR_2_Volume_Knob_Inc#(L:A_ASP_VOR_2_VOLUME) 0.05 + 1 min (>L:A_ASP_VOR_2_VOLUME)
FNX320_ACP2_ADF_1_Volume_Knob_Dec#(L:A_ASP_ADF_1_VOLUME) 0.05 - 0 max (>L:A_ASP_ADF_1_VOLUME)
FNX320_ACP2_ADF_1_Volume_Knob_Inc#(L:A_ASP2_ADF_1_VOLUME) 0.05 + 1 min (>L:A_ASP2_ADF_1_VOLUME)
FNX320_ACP2_ADF_2_Volume_Knob_Dec#(L:A_ASP_ADF_2_VOLUME) 0.05 - 0 max (>L:A_ASP_ADF_2_VOLUME)
FNX320_ACP2_ADF_2_Volume_Knob_Inc#(L:A_ASP2_ADF_2_VOLUME) 0.05 + 1 min (>L:A_ASP2_ADF_2_VOLUME)
FNX320_ACP2_CAB_Send_Button_Press#1 (>L:S_ASP2_CAB_SEND)
FNX320_ACP2_CAB_Send_Button_Release#0 (>L:S_ASP2_CAB_SEND)
FNX320_ACP2_CAB_Volume_Knob_Dec#(L:A_ASP_CAB_VOLUME) 0.05 - 0 max (>L:A_ASP_CAB_VOLUME)
FNX320_ACP2_CAB_Volume_Knob_Inc#(L:A_ASP2_CAB_VOLUME) 0.05 + 1 min (>L:A_ASP2_CAB_VOLUME)
FNX320_ACP2_HF_1_Send_Button_Press#1 (>L:S_ASP2_HF_1_SEND)
FNX320_ACP2_HF_1_Send_Button_Release#0 (>L:S_ASP2_HF_1_SEND)
FNX320_ACP2_HF_1_Volume_Knob_Dec#(L:A_ASP_HF_1_VOLUME) 0.05 - 0 max (>L:A_ASP_HF_1_VOLUME)
FNX320_ACP2_HF_1_Volume_Knob_Inc#(L:A_ASP2_HF_1_VOLUME) 0.05 + 1 min (>L:A_ASP2_HF_1_VOLUME)
FNX320_ACP2_HF_2_Send_Button_Press#1 (>L:S_ASP2_HF_2_SEND)
FNX320_ACP2_HF_2_Send_Button_Release#0 (>L:S_ASP2_HF_2_SEND)
FNX320_ACP2_HF_2_Volume_Knob_Dec#(L:A_ASP_HF_2_VOLUME) 0.05 - 0 max (>L:A_ASP_HF_2_VOLUME)
FNX320_ACP2_HF_2_Volume_Knob_Inc#(L:A_ASP2_HF_2_VOLUME) 0.05 + 1 min (>L:A_ASP2_HF_2_VOLUME)
FNX320_ACP2_ILS_Volume_Knob_Dec#(L:A_ASP_ILS_VOLUME) 0.05 - 0 max (>L:A_ASP_ILS_VOLUME)
FNX320_ACP2_ILS_Volume_Knob_Inc#(L:A_ASP2_ILS_VOLUME) 0.05 + 1 min (>L:A_ASP2_ILS_VOLUME)
FNX320_ACP2_INT_Send_Button_Press#1 (>L:S_ASP2_INT_SEND)
FNX320_ACP2_INT_Send_Button_Release#0 (>L:S_ASP2_INT_SEND)
FNX320_ACP2_INT_Volume_Knob_Dec#(L:A_ASP_INT_VOLUME) 0.05 - 0 max (>L:A_ASP_INT_VOLUME)
FNX320_ACP2_INT_Volume_Knob_Inc#(L:A_ASP2_INT_VOLUME) 0.05 + 1 min (>L:A_ASP2_INT_VOLUME)
FNX320_ACP2_INTRAD_Switch_INT#0 (>L:S_ASP2_INTRAD)
FNX320_ACP2_INTRAD_Switch_OFF#1 (>L:S_ASP2_INTRAD)
FNX320_ACP2_INTRAD_Switch_RAD#2 (>L:S_ASP2_INTRAD)
FNX320_ACP2_MARKER_Volume_Knob_Dec#(L:A_ASP_MARKER_VOLUME) 0.05 - 0 max (>L:A_ASP_MARKER_VOLUME)
FNX320_ACP2_MARKER_Volume_Knob_Inc#(L:A_ASP2_MARKER_VOLUME) 0.05 + 1 min (>L:A_ASP2_MARKER_VOLUME)
FNX320_ACP2_MLS_Volume_Knob_Dec#(L:A_ASP_MLS_VOLUME) 0.05 - 0 max (>L:A_ASP_MLS_VOLUME)
FNX320_ACP2_MLS_Volume_Knob_Inc#(L:A_ASP2_MLS_VOLUME) 0.05 + 1 min (>L:A_ASP2_MLS_VOLUME)
FNX320_ACP2_PA_SEND_Button_Press#1 (>L:S_ASP2_PA_SEND)
FNX320_ACP2_PA_SEND_Button_Release#0 (>L:S_ASP2_PA_SEND)
FNX320_ACP2_PA_Volume_Knob_Inc#(L:A_ASP2_PA_VOLUME) 0.05 + 1 min (>L:A_ASP2_PA_VOLUME)
FNX320_ACP2_PA_Volume_Knob_Release#(L:A_ASP_PA_VOLUME) 0.05 - 0 max (>L:A_ASP_PA_VOLUME)
FNX320_ACP2_RESET_Button_Press#1 (>L:S_ASP2_RESET)
FNX320_ACP2_RESET_Button_Release#0 (>L:S_ASP2_RESET)
FNX320_ACP2_VHF_1_Send_Button_Press#1 (>L:S_ASP2_VHF_1_SEND)
FNX320_ACP2_VHF_1_Send_Button_Release#0 (>L:S_ASP2_VHF_1_SEND)
FNX320_ACP2_VHF_1_Volume_Knob_Dec#(L:A_ASP_VHF_1_VOLUME) 0.05 - 0 max (>L:A_ASP_VHF_1_VOLUME)
FNX320_ACP2_VHF_1_Volume_Knob_Inc#(L:A_ASP2_VHF_1_VOLUME) 0.05 + 1 min (>L:A_ASP2_VHF_1_VOLUME)
FNX320_ACP2_VHF_2_Send_Button_Press#1 (>L:S_ASP2_VHF_2_SEND)
FNX320_ACP2_VHF_2_Send_Button_Release#0 (>L:S_ASP2_VHF_2_SEND)
FNX320_ACP2_VHF_2_Volume_Knob_Dec#(L:A_ASP_VHF_2_VOLUME) 0.05 - 0 max (>L:A_ASP_VHF_2_VOLUME)
FNX320_ACP2_VHF_2_Volume_Knob_Inc#(L:A_ASP2_VHF_2_VOLUME) 0.05 + 1 min (>L:A_ASP2_VHF_2_VOLUME)
FNX320_ACP2_VHF_3_Send_Button_Press#1 (>L:S_ASP2_VHF_3_SEND)
FNX320_ACP2_VHF_3_Send_Button_Release#0 (>L:S_ASP2_VHF_3_SEND)
FNX320_ACP2_VHF_3_Volume_Knob_Dec#(L:A_ASP_VHF_3_VOLUME) 0.05 - 0 max (>L:A_ASP_VHF_3_VOLUME)
FNX320_ACP2_VHF_3_Volume_Knob_Inc#(L:A_ASP2_VHF_3_VOLUME) 0.05 + 1 min (>L:A_ASP2_VHF_3_VOLUME)
FNX320_ACP2_VOICE_Button_Press#1 (>L:S_ASP2_VOICE)
FNX320_ACP2_VOICE_Button_Release#0 (>L:S_ASP2_VOICE)
FNX320_ACP2_VOR_1_Volume_Knob_Dec#(L:A_ASP_VOR_1_VOLUME) 0.05 - 0 max (>L:A_ASP_VOR_1_VOLUME)
FNX320_ACP2_VOR_1_Volume_Knob_Inc#(L:A_ASP2_VOR_1_VOLUME) 0.05 + 1 min (>L:A_ASP2_VOR_1_VOLUME)
FNX320_ACP2_VOR_2_Volume_Knob_Dec#(L:A_ASP_VOR_2_VOLUME) 0.05 - 0 max (>L:A_ASP_VOR_2_VOLUME)
FNX320_ACP2_VOR_2_Volume_Knob_Inc#(L:A_ASP2_VOR_2_VOLUME) 0.05 + 1 min (>L:A_ASP2_VOR_2_VOLUME)
FNX320_ACP3_ADF_1_Volume_Knob_Dec#(L:A_ASP3_ADF_1_VOLUME) 0.05 - 0 max (>L:A_ASP3_ADF_1_VOLUME)
FNX320_ACP3_ADF_1_Volume_Knob_Inc#(L:A_ASP3_ADF_1_VOLUME) 0.05 + 1 min (>L:A_ASP3_ADF_1_VOLUME)
FNX320_ACP3_ADF_2_Volume_Knob_Dec#(L:A_ASP3_ADF_2_VOLUME) 0.05 - 0 max (>L:A_ASP3_ADF_2_VOLUME)
FNX320_ACP3_ADF_2_Volume_Knob_Inc#(L:A_ASP3_ADF_2_VOLUME) 0.05 + 1 min (>L:A_ASP3_ADF_2_VOLUME)
FNX320_ACP3_CAB_Send_Button_Press#1 (>L:S_ASP3_CAB_SEND)
FNX320_ACP3_CAB_Send_Button_Release#0 (>L:S_ASP3_CAB_SEND)
FNX320_ACP3_CAB_Volume_Knob_Dec#(L:A_ASP3_CAB_VOLUME) 0.05 - 0 max (>L:A_ASP3_CAB_VOLUME)
FNX320_ACP3_CAB_Volume_Knob_Inc#(L:A_ASP3_CAB_VOLUME) 0.05 + 1 min (>L:A_ASP3_CAB_VOLUME)
FNX320_ACP3_HF_1_Send_Button_Press#1 (>L:S_ASP3_HF_1_SEND)
FNX320_ACP3_HF_1_Send_Button_Release#0 (>L:S_ASP3_HF_1_SEND)
FNX320_ACP3_HF_1_Volume_Knob_Dec#(L:A_ASP3_HF_1_VOLUME) 0.05 - 0 max (>L:A_ASP3_HF_1_VOLUME)
FNX320_ACP3_HF_1_Volume_Knob_Inc#(L:A_ASP3_HF_1_VOLUME) 0.05 + 1 min (>L:A_ASP3_HF_1_VOLUME)
FNX320_ACP3_HF_2_Send_Button_Press#1 (>L:S_ASP3_HF_2_SEND)
FNX320_ACP3_HF_2_Send_Button_Release#0 (>L:S_ASP3_HF_2_SEND)
FNX320_ACP3_HF_2_Volume_Knob_Dec#(L:A_ASP3_HF_2_VOLUME) 0.05 - 0 max (>L:A_ASP3_HF_2_VOLUME)
FNX320_ACP3_HF_2_Volume_Knob_Inc#(L:A_ASP3_HF_2_VOLUME) 0.05 + 1 min (>L:A_ASP3_HF_2_VOLUME)
FNX320_ACP3_ILS_Volume_Knob_Dec#(L:A_ASP3_ILS_VOLUME) 0.05 - 0 max (>L:A_ASP3_ILS_VOLUME)
FNX320_ACP3_ILS_Volume_Knob_Inc#(L:A_ASP3_ILS_VOLUME) 0.05 + 1 min (>L:A_ASP3_ILS_VOLUME)
FNX320_ACP3_INT_Send_Button_Press#1 (>L:S_ASP3_INT_SEND)
FNX320_ACP3_INT_Send_Button_Release#0 (>L:S_ASP3_INT_SEND)
FNX320_ACP3_INT_Volume_Knob_Dec#(L:A_ASP3_INT_VOLUME) 0.05 - 0 max (>L:A_ASP3_INT_VOLUME)
FNX320_ACP3_INT_Volume_Knob_Inc#(L:A_ASP3_INT_VOLUME) 0.05 + 1 min (>L:A_ASP3_INT_VOLUME)
FNX320_ACP3_INTRAD_Switch_INT#0 (>L:S_ASP3_INTRAD)
FNX320_ACP3_INTRAD_Switch_OFF#1 (>L:S_ASP3_INTRAD)
FNX320_ACP3_INTRAD_Switch_RAD#2 (>L:S_ASP3_INTRAD)
FNX320_ACP3_MARKER_Volume_Knob_Dec#(L:A_ASP3_MARKER_VOLUME) 0.05 - 0 max (>L:A_ASP3_MARKER_VOLUME)
FNX320_ACP3_MARKER_Volume_Knob_Inc#(L:A_ASP3_MARKER_VOLUME) 0.05 + 1 min (>L:A_ASP3_MARKER_VOLUME)
FNX320_ACP3_MLS_Volume_Knob_Dec#(L:A_ASP3_MLS_VOLUME) 0.05 - 0 max (>L:A_ASP3_MLS_VOLUME)
FNX320_ACP3_MLS_Volume_Knob_Inc#(L:A_ASP3_MLS_VOLUME) 0.05 + 1 min (>L:A_ASP3_MLS_VOLUME)
FNX320_ACP3_PA_SEND_Button_Press#1 (>L:S_ASP3_PA_SEND)
FNX320_ACP3_PA_SEND_Button_Release#0 (>L:S_ASP3_PA_SEND)
FNX320_ACP3_PA_Volume_Knob_Inc#(L:A_ASP3_PA_VOLUME) 0.05 + 1 min (>L:A_ASP3_PA_VOLUME)
FNX320_ACP3_PA_Volume_Knob_Release#(L:A_ASP3_PA_VOLUME) 0.05 - 0 max (>L:A_ASP3_PA_VOLUME)
FNX320_ACP3_RESET_Button_Press#1 (>L:S_ASP3_RESET)
FNX320_ACP3_RESET_Button_Release#0 (>L:S_ASP3_RESET)
FNX320_ACP3_VHF_1_Send_Button_Press#1 (>L:S_ASP3_VHF_1_SEND)
FNX320_ACP3_VHF_1_Send_Button_Release#0 (>L:S_ASP3_VHF_1_SEND)
FNX320_ACP3_VHF_1_Volume_Knob_Dec#(L:A_ASP3_VHF_1_VOLUME) 0.05 - 0 max (>L:A_ASP3_VHF_1_VOLUME)
FNX320_ACP3_VHF_1_Volume_Knob_Inc#(L:A_ASP3_VHF_1_VOLUME) 0.05 + 1 min (>L:A_ASP3_VHF_1_VOLUME)
FNX320_ACP3_VHF_2_Send_Button_Press#1 (>L:S_ASP3_VHF_2_SEND)
FNX320_ACP3_VHF_2_Send_Button_Release#0 (>L:S_ASP3_VHF_2_SEND)
FNX320_ACP3_VHF_2_Volume_Knob_Dec#(L:A_ASP3_VHF_2_VOLUME) 0.05 - 0 max (>L:A_ASP3_VHF_2_VOLUME)
FNX320_ACP3_VHF_2_Volume_Knob_Inc#(L:A_ASP3_VHF_2_VOLUME) 0.05 + 1 min (>L:A_ASP3_VHF_2_VOLUME)
FNX320_ACP3_VHF_3_Send_Button_Press#1 (>L:S_ASP3_VHF_3_SEND)
FNX320_ACP3_VHF_3_Send_Button_Release#0 (>L:S_ASP3_VHF_3_SEND)
FNX320_ACP3_VHF_3_Volume_Knob_Dec#(L:A_ASP3_VHF_3_VOLUME) 0.05 - 0 max (>L:A_ASP3_VHF_3_VOLUME)
FNX320_ACP3_VHF_3_Volume_Knob_Inc#(L:A_ASP3_VHF_3_VOLUME) 0.05 + 1 min (>L:A_ASP3_VHF_3_VOLUME)
FNX320_ACP3_VOICE_Button_Press#1 (>L:S_ASP3_VOICE)
FNX320_ACP3_VOICE_Button_Release#0 (>L:S_ASP3_VOICE)
FNX320_ACP3_VOR_1_Volume_Knob_Dec#(L:A_ASP3_VOR_1_VOLUME) 0.05 - 0 max (>L:A_ASP3_VOR_1_VOLUME)
FNX320_ACP3_VOR_1_Volume_Knob_Inc#(L:A_ASP3_VOR_1_VOLUME) 0.05 + 1 min (>L:A_ASP3_VOR_1_VOLUME)
FNX320_ACP3_VOR_2_Volume_Knob_Dec#(L:A_ASP3_VOR_2_VOLUME) 0.05 - 0 max (>L:A_ASP3_VOR_2_VOLUME)
FNX320_ACP3_VOR_2_Volume_Knob_Inc#(L:A_ASP3_VOR_2_VOLUME) 0.05 + 1 min (>L:A_ASP3_VOR_2_VOLUME)
FNX320_Glareshield_ATC_Captain_Button_Press#1 (>L:S_MIP_ATC_MSG_CAPT)
FNX320_Glareshield_ATC_Captain_Button_Release#0 (>L:S_MIP_ATC_MSG_CAPT)
FNX320_Glareshield_ATC_FO_Button_Press#1 (>L:S_MIP_ATC_MSG_FO)
FNX320_Glareshield_ATC_FO_Button_Release#0 (>L:S_MIP_ATC_MSG_FO)
FNX320_MainPanel_Loud_Speaker_Captain_Knob_Dec#(L:A_MIP_LOUDSPEAKER_CAPT) 0.1 - 0 max (>L:A_MIP_LOUDSPEAKER_CAPT)
FNX320_MainPanel_Loud_Speaker_Captain_Knob_Inc#(L:A_MIP_LOUDSPEAKER_CAPT) 0.1 + 1 min (>L:A_MIP_LOUDSPEAKER_CAPT)
FNX320_MainPanel_Loud_Speaker_Captain_Knob_Press#0.1 (>L:A_MIP_LOUDSPEAKER_CAPT)
FNX320_MainPanel_Loud_Speaker_FO_Knob_Dec#(L:A_MIP_LOUDSPEAKER_FO) 0.1 - 0 max (>L:A_MIP_LOUDSPEAKER_FO)
FNX320_MainPanel_Loud_Speaker_FO_Knob_Inc#(L:A_MIP_LOUDSPEAKER_FO) 0.1 + 1 min (>L:A_MIP_LOUDSPEAKER_FO)
FNX320_MainPanel_Loud_Speaker_FO_Knob_Press#0.1 (>L:A_MIP_LOUDSPEAKER_FO)
FNX320_Switching_AIR_DATA_Knob_CAPT#0 (>L:S_DISPLAY_AIR_DATA)
FNX320_Switching_AIR_DATA_Knob_FO#2 (>L:S_DISPLAY_AIR_DATA)
FNX320_Switching_AIR_DATA_Knob_Normal#1 (>L:S_DISPLAY_AIR_DATA)
FNX320_Switching_ATT_HDG_Knob_CAPT#0 (>L:S_DISPLAY_ATT_HDG)
FNX320_Switching_ATT_HDG_Knob_FO#2 (>L:S_DISPLAY_ATT_HDG)
FNX320_Switching_ATT_HDG_Knob_Normal#1 (>L:S_DISPLAY_ATT_HDG)
FNX320_Switching_ECAM_ND_XFR_Knob_CAPT#0 (>L:S_DISPLAY_ECAM_ND_XFR)
FNX320_Switching_ECAM_ND_XFR_Knob_FO#2 (>L:S_DISPLAY_ECAM_ND_XFR)
FNX320_Switching_ECAM_ND_XFR_Knob_Normal#1 (>L:S_DISPLAY_ECAM_ND_XFR)
FNX320_Switching_EIS_DMC_Knob__CAPT#0 (>L:S_DISPLAY_EIS_DMC)
FNX320_Switching_EIS_DMC_Knob__FO#2 (>L:S_DISPLAY_EIS_DMC)
FNX320_Switching_EIS_DMC_Knob__Normal#1 (>L:S_DISPLAY_EIS_DMC)
FNX320_Transponder_0_Button_Press#1 (>L:S_PED_ATC_0)
FNX320_Transponder_0_Button_Release#0 (>L:S_PED_ATC_0)
FNX320_Transponder_1_Button_Press#1 (>L:S_PED_ATC_1)
FNX320_Transponder_1_Button_Release#0 (>L:S_PED_ATC_1)
FNX320_Transponder_2_Button_Press#1 (>L:S_PED_ATC_2)
FNX320_Transponder_2_Button_Release#0 (>L:S_PED_ATC_2)
FNX320_Transponder_3_Button_Press#1 (>L:S_PED_ATC_3)
FNX320_Transponder_3_Button_Release#0 (>L:S_PED_ATC_3)
FNX320_Transponder_4_Button_Press#1 (>L:S_PED_ATC_4)
FNX320_Transponder_4_Button_Release#0 (>L:S_PED_ATC_4)
FNX320_Transponder_5_Button_Press#1 (>L:S_PED_ATC_5)
FNX320_Transponder_5_Button_Release#0 (>L:S_PED_ATC_5)
FNX320_Transponder_6_Button_Press#1 (>L:S_PED_ATC_6)
FNX320_Transponder_6_Button_Release#0 (>L:S_PED_ATC_6)
FNX320_Transponder_7_Button_Press#1 (>L:S_PED_ATC_7)
FNX320_Transponder_7_Button_Release#0 (>L:S_PED_ATC_7)
FNX320_Transponder_ATC_Switch#(L:S_XPDR_ATC) ! (>L:S_XPDR_ATC)
FNX320_Transponder_Alt_Reporting#(L:S_XPDR_ALTREPORTING) ! (>L:S_XPDR_ALTREPORTING)
FNX320_Transponder_Clear_Button_Press#1 (>L:S_PED_ATC_CLR)
FNX320_Transponder_Clear_Button_Release#0 (>L:S_PED_ATC_CLR)
FNX320_Transponder_Ident_Button_Press#1 (>L:S_XPDR_IDENT)
FNX320_Transponder_Ident_Button_Release#0 (>L:S_XPDR_IDENT)
FNX320_Transponder_Mode_Knob_STBY#0 (>L:S_XPDR_MODE)
FNX320_Transponder_Mode_Knob_TA#1 (>L:S_XPDR_MODE)
FNX320_Transponder_Mode_Knob_TARA#2 (>L:S_XPDR_MODE)
FNX320_Transponder_Operation_Knob_AUTO#1 (>L:S_XPDR_OPERATION)
FNX320_Transponder_Operation_Knob_ON#2 (>L:S_XPDR_OPERATION)
FNX320_Transponder_Operation_Knob_STBY#0 (>L:S_XPDR_OPERATION)
FNX320_Transponder_TCAS_Range_Knob_Dec#(L:S_TCAS_RANGE) 0.1 - 0 max (>L:S_TCAS_RANGE)
FNX320_Transponder_TCAS_Range_Knob_Inc#(L:S_TCAS_RANGE) 0.1 + 1 min (>L:S_TCAS_RANGE)
FNX320_RADIO_1_XFER_PUSH#(L:S_PED_RMP1_XFER) ++ (>L:S_PED_RMP1_XFER)
FNX320_RADIO_1_XFER_RELEASE#(L:S_PED_RMP1_XFER) ++ (>L:S_PED_RMP1_XFER)
FNX320_RADIO_2_XFER_PUSH#(L:S_PED_RMP2_XFER) ++ (>L:S_PED_RMP2_XFER)
FNX320_RADIO_2_XFER_RELEASE#(L:S_PED_RMP2_XFER) ++ (>L:S_PED_RMP2_XFER)
FNX320_RADIO_3_XFER_PUSH#(L:S_PED_RMP3_XFER) ++ (>L:S_PED_RMP3_XFER)
FNX320_RADIO_3_XFER_RELEASE#(L:S_PED_RMP3_XFER) ++ (>L:S_PED_RMP3_XFER)
FNX320_TRANSPONDER_KEY_0#(L:S_PED_ATC_0) 2 + (>L:S_PED_ATC_0)
FNX320_TRANSPONDER_KEY_1#(L:S_PED_ATC_1) 2 + (>L:S_PED_ATC_1)
FNX320_TRANSPONDER_KEY_2#(L:S_PED_ATC_2) 2 + (>L:S_PED_ATC_2)
FNX320_TRANSPONDER_KEY_3#(L:S_PED_ATC_3) 2 + (>L:S_PED_ATC_3)
FNX320_TRANSPONDER_KEY_4#(L:S_PED_ATC_4) 2 + (>L:S_PED_ATC_4)
FNX320_TRANSPONDER_KEY_5#(L:S_PED_ATC_5) 2 + (>L:S_PED_ATC_5)
FNX320_TRANSPONDER_KEY_6#(L:S_PED_ATC_6) 2 + (>L:S_PED_ATC_6)
FNX320_TRANSPONDER_KEY_7#(L:S_PED_ATC_7) 2 + (>L:S_PED_ATC_7)
FNX320_TRANSPONDER_KEY_CLR#(L:S_PED_ATC_CLR) 2 + (>L:S_PED_ATC_CLR)
FNX320_TRANSPONDER_KEY_IDENT#(L:S_XPDR_IDENT) 2 + (>L:S_XPDR_IDENT)
FNX320_TRANSPONDER_MODE_TOGGLE#(L:S_XPDR_MODE) ++ 3 % (>L:S_XPDR_MODE)
FNX320_TRANSPONDER_OPERATION_TOGGLE#(L:S_XPDR_OPERATION, Number) ++ 3 % (>L:S_XPDR_OPERATION, Number)
FNX32_RADIO_1_INNER_KNOB_DEC#(L:E_PED_RMP1_INNER) -- (>L:E_PED_RMP1_INNER)
FNX32_RADIO_1_INNER_KNOB_INC#(L:E_PED_RMP1_INNER) ++ (>L:E_PED_RMP1_INNER)
FNX32_RADIO_1_OUTER_KNOB_DEC#(L:E_PED_RMP1_OUTER) -- (>L:E_PED_RMP1_OUTER)
FNX32_RADIO_1_OUTER_KNOB_INC#(L:E_PED_RMP1_OUTER) ++ (>L:E_PED_RMP1_OUTER)
FNX32_RADIO_2_INNER_KNOB_DEC#(L:E_PED_RMP2_INNER) -- (>L:E_PED_RMP2_INNER)
FNX32_RADIO_2_INNER_KNOB_INC#(L:E_PED_RMP2_INNER) ++ (>L:E_PED_RMP2_INNER)
FNX32_RADIO_2_OUTER_KNOB_DEC#(L:E_PED_RMP2_OUTER) -- (>L:E_PED_RMP2_OUTER)
FNX32_RADIO_2_OUTER_KNOB_INC#(L:E_PED_RMP2_OUTER) ++ (>L:E_PED_RMP2_OUTER)
FNX32_RADIO_3_INNER_KNOB_DEC#(L:E_PED_RMP3_INNER) -- (>L:E_PED_RMP3_INNER)
FNX32_RADIO_3_INNER_KNOB_INC#(L:E_PED_RMP3_INNER) ++ (>L:E_PED_RMP3_INNER)
FNX32_RADIO_3_OUTER_KNOB_DEC#(L:E_PED_RMP3_OUTER) -- (>L:E_PED_RMP3_OUTER)
FNX32_RADIO_3_OUTER_KNOB_INC#(L:E_PED_RMP3_OUTER) ++ (>L:E_PED_RMP3_OUTER)
//FenixSim/A320/Safety
FNX320_Evacuation_Alert_Switch_Toggle#(L:S_OH_EVAC_CAPT_PURSER) ! (>L:S_OH_EVAC_CAPT_PURSER)
FNX320_Evacuation_Command_Button_Press#(L:S_OH_EVAC_COMMAND) ! (>L:S_OH_EVAC_COMMAND) 1 (>L:S_OH_EVAC_COMMAND_Anim)
FNX320_Evacuation_Command_Button_Release#(L:S_OH_EVAC_COMMAND) 0 == if{ 0 (>L:S_OH_EVAC_COMMAND_Anim) } (L:S_OH_EVAC_COMMAND) 1 == if{ 2 (>L:S_OH_EVAC_COMMAND_Anim) }
FNX320_Evacuation_Horn_Shutoff_Button_Press#1 (>L:S_OH_EVAC_HORN_SHUTOFF)
FNX320_Evacuation_Horn_Shutoff_Button_Release#0 (>L:S_OH_EVAC_HORN_SHUTOFF)
FNX320_Fire_APU_Agent_Button_Press#1 (>L:S_OH_FIRE_APU_AGENT)
FNX320_Fire_APU_Agent_Button_Release#0 (>L:S_OH_FIRE_APU_AGENT)
FNX320_Fire_APU_Button_Press#(L:S_OH_FIRE_APU_BUTTON) ! (>L:S_OH_FIRE_APU_BUTTON) 1 (>L:S_OH_FIRE_APU_BUTTON_Anim)
FNX320_Fire_APU_Button_Release#(L:S_OH_FIRE_APU_BUTTON) 0 == if{ 0 (>L:S_OH_FIRE_APU_BUTTON_Anim) } (L:S_OH_FIRE_APU_BUTTON) 1 == if{ 2 (>L:S_OH_FIRE_APU_BUTTON_Anim) }
FNX320_Fire_APU_Test_Button_Press#1 (>L:S_OH_FIRE_APU_TEST)
FNX320_Fire_APU_Test_Button_Release#0 (>L:S_OH_FIRE_APU_TEST)
FNX320_Fire_Engine_1_Agent_1_Button_Press#1 (>L:S_OH_FIRE_ENG1_AGENT1)
FNX320_Fire_Engine_1_Agent_1_Button_Release#0 (>L:S_OH_FIRE_ENG1_AGENT1)
FNX320_Fire_Engine_1_Agent_2_Button_Press#1 (>L:S_OH_FIRE_ENG1_AGENT2)
FNX320_Fire_Engine_1_Agent_2_Button_Release#0 (>L:S_OH_FIRE_ENG1_AGENT2)
FNX320_Fire_Engine_1_Button_Press#(L:S_OH_FIRE_ENG1_BUTTON) ! (>L:S_OH_FIRE_ENG1_BUTTON) 1 (>L:S_OH_FIRE_ENG1_BUTTON_Anim)
FNX320_Fire_Engine_1_Button_Release#(L:S_OH_FIRE_ENG1_BUTTON) 0 == if{ 0 (>L:S_OH_FIRE_ENG1_BUTTON_Anim) } (L:S_OH_FIRE_ENG1_BUTTON) 1 == if{ 2 (>L:S_OH_FIRE_ENG1_BUTTON_Anim) }
FNX320_Fire_Engine_1_Test_Button_Press#1 (>L:S_OH_FIRE_ENG1_TEST)
FNX320_Fire_Engine_1_Test_Button_Release#0 (>L:S_OH_FIRE_ENG1_TEST)
FNX320_Fire_Engine_2_Agent_1_Button_Press#1 (>L:S_OH_FIRE_ENG2_AGENT1)
FNX320_Fire_Engine_2_Agent_1_Button_Release#0 (>L:S_OH_FIRE_ENG2_AGENT1)
FNX320_Fire_Engine_2_Agent_2_Button_Press#1 (>L:S_OH_FIRE_ENG2_AGENT2)
FNX320_Fire_Engine_2_Agent_2_Button_Release#0 (>L:S_OH_FIRE_ENG2_AGENT2)
FNX320_Fire_Engine_2_Button_Press#(L:S_OH_FIRE_ENG2_BUTTON) ! (>L:S_OH_FIRE_ENG2_BUTTON) 1 (>L:S_OH_FIRE_ENG2_BUTTON_Anim)
FNX320_Fire_Engine_2_Button_Release#(L:S_OH_FIRE_ENG2_BUTTON) 0 == if{ 0 (>L:S_OH_FIRE_ENG2_BUTTON_Anim) } (L:S_OH_FIRE_ENG2_BUTTON) 1 == if{ 2 (>L:S_OH_FIRE_ENG2_BUTTON_Anim) }
FNX320_Fire_Engine_2_Test_Button_Press#1 (>L:S_OH_FIRE_ENG2_TEST)
FNX320_Fire_Engine_2_Test_Button_Release#0 (>L:S_OH_FIRE_ENG2_TEST)
FNX320_Overhead_ELT_Switch_Toggle#(L:S_OH_ELT) ! (>L:S_OH_ELT)
FNX320_Overhead_ELT_Test_Switch_Press#1 (>L:S_OH_ELT_TEST)
FNX320_Overhead_ELT_Test_Switch_Release#0 (>L:S_OH_ELT_TEST)
FNX320_Overhead_Oxygen_TMR_Reset_Button_Press#1 (>L:S_OH_OXYGEN_TMR_RESET)
FNX320_Overhead_Oxygen_TMR_Reset_Button_Release#0 (>L:S_OH_OXYGEN_TMR_RESET)
FNX320_Oxygen_Crew_Button_Press#1 (>L:S_OH_OXYGEN_CREW_OXYGEN)
FNX320_Oxygen_Crew_Button_Release#0 (>L:S_OH_OXYGEN_CREW_OXYGEN)
FNX320_Oxygen_High_Alt_Landing_Button_Press#1 (>L:S_OH_OXYGEN_HIGH_ALT)
FNX320_Oxygen_High_Alt_Landing_Button_Release#0 (>L:S_OH_OXYGEN_HIGH_ALT)
FNX320_Oxygen_Mask_Manual_Button_Press#1 (>L:S_OH_OXYGEN_MASK_MAN_ON)
FNX320_Oxygen_Mask_Manual_Button_Release#0 (>L:S_OH_OXYGEN_MASK_MAN_ON)
FNX320_Sign_Emergency_Exit_Switch_ARM#1 (>L:S_OH_INT_LT_EMER)
FNX320_Sign_Emergency_Exit_Switch_OFF#0 (>L:S_OH_INT_LT_EMER)
FNX320_Sign_Emergency_Exit_Switch_ON#2 (>L:S_OH_INT_LT_EMER)
FNX320_SAFETY_EMER_EXIT_LT_OFF_ARM_ON_TOGGLE#(L:S_OH_INT_LT_EMER, Number) ++ 3 % (>L:S_OH_INT_LT_EMER, Number)
FNX320_SAFETY_NO_SMOKING_AUTO#1 (>L:S_OH_SIGNS_SMOKING)
FNX320_SAFETY_NO_SMOKING_OFF#0 (>L:S_OH_SIGNS_SMOKING)
FNX320_SAFETY_NO_SMOKING_OFF_AUTO_ON_TOGGLE#(L:S_OH_SIGNS_SMOKING, Number) ++ 3 % (>L:S_OH_SIGNS_SMOKING, Number)
FNX320_SAFETY_NO_SMOKING_ON#2 (>L:S_OH_SIGNS_SMOKING)
FNX320_SAFETY_SEAT_BELTS_OFF#0 (>L:S_OH_SIGNS)
FNX320_SAFETY_SEAT_BELTS_ON#1 (>L:S_OH_SIGNS)
FNX320_SAFETY_SEAT_BELTS_TOG#(L:S_OH_SIGNS) 0 == if{ 1 (>L:S_OH_SIGNS) } els{ 0 (>L:S_OH_SIGNS) }
//FenixSim/A320/Warning
FNX320_GPWS_Flap_Mode_Button_Press#(L:S_OH_GPWS_FLAP_MODE) ! (>L:S_OH_GPWS_FLAP_MODE) 1 (>L:S_OH_GPWS_FLAP_MODE_Anim)
FNX320_GPWS_Flap_Mode_Button_Release#(L:S_OH_GPWS_FLAP_MODE) 0 == if{ 0 (>L:S_OH_GPWS_FLAP_MODE_Anim) } (L:S_OH_GPWS_FLAP_MODE) 1 == if{ 2 (>L:S_OH_GPWS_FLAP_MODE_Anim) }
FNX320_GPWS_GS_Mode_Button_Press#(L:S_OH_GPWS_GS_MODE) ! (>L:S_OH_GPWS_GS_MODE) 1 (>L:S_OH_GPWS_GS_MODE_Anim)
FNX320_GPWS_GS_Mode_Button_Release#(L:S_OH_GPWS_GS_MODE) 0 == if{ 0 (>L:S_OH_GPWS_GS_MODE_Anim) } (L:S_OH_GPWS_GS_MODE) 1 == if{ 2 (>L:S_OH_GPWS_GS_MODE_Anim) }
FNX320_GPWS_Landing_Flap_3_Button_Press#(L:S_OH_GPWS_LDG_FLAP3) ! (>L:S_OH_GPWS_LDG_FLAP3) 1 (>L:S_OH_GPWS_LDG_FLAP3_Anim)
FNX320_GPWS_Landing_Flap_3_Button_Release#(L:S_OH_GPWS_LDG_FLAP3) 0 == if{ 0 (>L:S_OH_GPWS_LDG_FLAP3_Anim) } (L:S_OH_GPWS_LDG_FLAP3) 1 == if{ 2 (>L:S_OH_GPWS_LDG_FLAP3_Anim) }
FNX320_GPWS_System_Button_Press#(L:S_OH_GPWS_SYS) ! (>L:S_OH_GPWS_SYS) 1 (>L:S_OH_GPWS_SYS_Anim)
FNX320_GPWS_System_Button_Release#(L:S_OH_GPWS_SYS) 0 == if{ 0 (>L:S_OH_GPWS_SYS_Anim) } (L:S_OH_GPWS_SYS) 1 == if{ 2 (>L:S_OH_GPWS_SYS_Anim) }
FNX320_GPWS_Terrain_Button_Press#(L:S_OH_GPWS_TERR) ! (>L:S_OH_GPWS_TERR) 1 (>L:S_OH_GPWS_TERR_Anim)
FNX320_GPWS_Terrain_Button_Release#(L:S_OH_GPWS_TERR) 0 == if{ 0 (>L:S_OH_GPWS_TERR_Anim) } (L:S_OH_GPWS_TERR) 1 == if{ 2 (>L:S_OH_GPWS_TERR_Anim) }
FNX320_Glareshield_Master_Caution_Captain_Button_Press#1 (>L:S_MIP_MASTER_CAUTION_CAPT)
FNX320_Glareshield_Master_Caution_Captain_Button_Release#0 (>L:S_MIP_MASTER_CAUTION_CAPT)
FNX320_Glareshield_Master_Caution_FO_Button_Press#1 (>L:S_MIP_MASTER_CAUTION_FO)
FNX320_Glareshield_Master_Caution_FO_Button_Release#0 (>L:S_MIP_MASTER_CAUTION_FO)
FNX320_Glareshield_Master_Warning_Captain_Button_Press#1 (>L:S_MIP_MASTER_WARNING_CAPT)
FNX320_Glareshield_Master_Warning_Captain_Button_Release#0 (>L:S_MIP_MASTER_WARNING_CAPT)
FNX320_Glareshield_Master_Warning_FO_Button_Press#1 (>L:S_MIP_MASTER_WARNING_FO)
FNX320_Glareshield_Master_Warning_FO_Button_Release#0 (>L:S_MIP_MASTER_WARNING_FO)
FNX320_MainPanel_GPWS_GS_Captain_Button_Press#1 (>L:S_MIP_GPWS_VISUAL_ALERT_CAPT)
FNX320_MainPanel_GPWS_GS_Captain_Button_Release#0 (>L:S_MIP_GPWS_VISUAL_ALERT_CAPT)
FNX320_MainPanel_GPWS_GS_FO_Button_Press#1 (>L:S_MIP_GPWS_VISUAL_ALERT_FO)
FNX320_MainPanel_GPWS_GS_FO_Button_Release#0 (>L:S_MIP_GPWS_VISUAL_ALERT_FO)
//Fly By Wire/A320-Dev/Air Condition / Pressurization
AIRCOND_APU_BLEED_TOGGLE#(L:A32NX_OVHD_PNEU_APU_BLEED_PB_IS_ON, bool) ! (>L:A32NX_OVHD_PNEU_APU_BLEED_PB_IS_ON, bool)
AIRCOND_ENG1_BLEED_TOGGLE#1 (>K:ENGINE_BLEED_AIR_SOURCE_TOGGLE) (L:XMLVAR_Momentary_PUSH_OVHD_AIRCOND_ENG1BLEED_Pressed) ! (>L:XMLVAR_Momentary_PUSH_OVHD_AIRCOND_ENG1BLEED_Pressed)
AIRCOND_ENG2_BLEED_TOGGLE#2 (>K:ENGINE_BLEED_AIR_SOURCE_TOGGLE) (L:XMLVAR_Momentary_PUSH_OVHD_AIRCOND_ENG2BLEED_Pressed) ! (>L:XMLVAR_Momentary_PUSH_OVHD_AIRCOND_ENG2BLEED_Pressed)
AIRCOND_HOTAIR_TOGGLE#(L:A32NX_AIRCOND_HOTAIR_TOGGLE, bool) ! (>L:A32NX_AIRCOND_HOTAIR_TOGGLE, bool)
AIRCOND_PACK_FLOW_KNOB_HI#2 (>L:A32NX_KNOB_OVHD_AIRCOND_PACKFLOW_Position)
AIRCOND_PACK_FLOW_KNOB_LO#0 (>L:A32NX_KNOB_OVHD_AIRCOND_PACKFLOW_Position)
AIRCOND_PACK_FLOW_KNOB_NORM#1 (>L:A32NX_KNOB_OVHD_AIRCOND_PACKFLOW_Position)
AIRCOND_PACK1_TOGGLE#(L:A32NX_OVHD_COND_PACK_1_PB_IS_ON, bool) ! (>L:A32NX_OVHD_COND_PACK_1_PB_IS_ON, bool)
AIRCOND_PACK2_TOGGLE#(L:A32NX_OVHD_COND_PACK_2_PB_IS_ON, bool) ! (>L:A32NX_OVHD_COND_PACK_2_PB_IS_ON, bool)
AIRCOND_RAMAIR_LOCK_TOGGLE#(L:A32NX_AIRCOND_RAMAIR_TOGGLE_LOCK) ! (>L:A32NX_AIRCOND_RAMAIR_TOGGLE_LOCK)
AIRCOND_RAMAIR_TOGGLE#(L:A32NX_AIRCOND_RAMAIR_TOGGLE, bool) ! (>L:A32NX_AIRCOND_RAMAIR_TOGGLE, bool)
CABIN_PRESS_DITCHING_LOCK_TOGGLE#(L:A32NX_DITCHING_LOCK) ! (>L:A32NX_DITCHING_LOCK)
CABIN_PRESS_DITCHING_TOGGLE#(L:A32NX_DITCHING) ! (>L:A32NX_DITCHING)
CABIN_PRESS_LDGELEV_AUTO_DEC#(L:XMLVAR_KNOB_OVHD_CABINPRESS_LDGELEV, Percent) 4 - 0 max 88 min (>L:XMLVAR_KNOB_OVHD_CABINPRESS_LDGELEV, percent)
CABIN_PRESS_LDGELEV_AUTO_INC#(L:XMLVAR_KNOB_OVHD_CABINPRESS_LDGELEV, Percent) 4 + 0 max 88 min (>L:XMLVAR_KNOB_OVHD_CABINPRESS_LDGELEV, percent)
CABIN_PRESS_MAN_VS_CTL_DN#2 (>L:A32NX_MAN_VS_CONTROL, number)
CABIN_PRESS_MAN_VS_CTL_MID#1 (>L:A32NX_MAN_VS_CONTROL, number)
CABIN_PRESS_MAN_VS_CTL_UP#0 (>L:A32NX_MAN_VS_CONTROL, number)
CABIN_PRESS_MODE_SEL_MAN#(L:A32NX_CAB_PRESS_MODE_MAN, bool) ! (>L:A32NX_CAB_PRESS_MODE_MAN, bool)
AIRCOND_AFT_CABIN_KNOB_DEC#(L:A32NX_OVHD_COND_AFT_SELECTOR_KNOB,percent) 5 - 0 max (>L:A32NX_OVHD_COND_AFT_SELECTOR_KNOB)
AIRCOND_AFT_CABIN_KNOB_INC#(L:A32NX_OVHD_COND_AFT_SELECTOR_KNOB,percent) 5 + 300 min (>L:A32NX_OVHD_COND_AFT_SELECTOR_KNOB)
AIRCOND_COCKPIT_KNOB_DEC#(L:A32NX_OVHD_COND_CKPT_SELECTOR_KNOB,percent) 5 - 0 max (>L:A32NX_OVHD_COND_CKPT_SELECTOR_KNOB)
AIRCOND_COCKPIT_KNOB_INC#(L:A32NX_OVHD_COND_CKPT_SELECTOR_KNOB,percent) 5 + 300 min (>L:A32NX_OVHD_COND_CKPT_SELECTOR_KNOB)
AIRCOND_FWD_CABIN_KNOB_DEC#(L:A32NX_OVHD_COND_FWD_SELECTOR_KNOB,percent) 5 - 0 max (>L:A32NX_OVHD_COND_FWD_SELECTOR_KNOB)
AIRCOND_FWD_CABIN_KNOB_INC#(L:A32NX_OVHD_COND_FWD_SELECTOR_KNOB,percent) 5 + 300 min (>L:A32NX_OVHD_COND_FWD_SELECTOR_KNOB)
//Fly By Wire/A320-Dev/Anti-Ice
ANTIICE_ENG1_TOGGLE#(L:XMLVAR_Momentary_PUSH_OVHD_ANTIICE_ENG1_Pressed) ! (>L:XMLVAR_Momentary_PUSH_OVHD_ANTIICE_ENG1_Pressed) (>K:ANTI_ICE_TOGGLE_ENG1)
ANTIICE_ENG2_TOGGLE#(L:XMLVAR_Momentary_PUSH_OVHD_ANTIICE_ENG2_Pressed) ! (>L:XMLVAR_Momentary_PUSH_OVHD_ANTIICE_ENG2_Pressed) (>K:ANTI_ICE_TOGGLE_ENG2)
ANTIICE_PROBE_WINDOW_TOGGLE#(L:A32NX_MAN_PITOT_HEAT) ! (>L:A32NX_MAN_PITOT_HEAT) (L:XMLVAR_Momentary_PUSH_OVHD_PROBESWINDOW_Pressed) ! (>L:XMLVAR_Momentary_PUSH_OVHD_PROBESWINDOW_Pressed)
ANTIICE_WING_TOGGLE#(L:XMLVAR_Momentary_PUSH_OVHD_ANTIICE_WING_Pressed) ! (>L:XMLVAR_Momentary_PUSH_OVHD_ANTIICE_WING_Pressed) (>K:TOGGLE_STRUCTURAL_DEICE)
//Fly By Wire/A320-Dev/Autopilot
A32NX_FCU_ALT_DEC#(>K:A32NX.FCU_ALT_DEC)
A32NX_FCU_ALT_INC#(>K:A32NX.FCU_ALT_INC)
A32NX_FCU_ALT_INCREMENT_SET#(>K:A32NX.FCU_ALT_INCREMENT_SET)
A32NX_FCU_ALT_INCREMENT_TOGGLE#(>K:A32NX.FCU_ALT_INCREMENT_TOGGLE)
A32NX_FCU_ALT_PULL#(>K:A32NX.FCU_ALT_PULL)
A32NX_FCU_ALT_PUSH#(>K:A32NX.FCU_ALT_PUSH)
A32NX_FCU_ALT_SET#(>K:A32NX.FCU_ALT_SET)
A32NX_FCU_VS_DEC#(>K:A32NX.FCU_VS_DEC)
A32NX_FCU_VS_INC#(>K:A32NX.FCU_VS_INC)
A32NX_FCU_VS_PULL#(>K:A32NX.FCU_VS_PULL)
A32NX_FCU_VS_PUSH#(>K:A32NX.FCU_VS_PUSH)
A32NX_FCU_VS_SET#(>K:A32NX.FCU_VS_SET)
A32NX_Autopilot_AP_1_Push#(>H:A320_Neo_FCU_AP_1_PUSH)
A32NX_Autopilot_AP_2_Push#(>H:A320_Neo_FCU_AP_2_PUSH)
A32NX_Autopilot_ATHR_Push#(>K:AUTO_THROTTLE_ARM)
A32NX_FCU_APPR_PUSH#(>H:A320_Neo_FCU_APPR_PUSH)
A32NX_FCU_EXPED_PUSH#(>H:A320_Neo_FCU_EXPED_PUSH)
A32NX_FCU_LOC_PUSH#(>H:A320_Neo_FCU_LOC_PUSH)
//Fly By Wire/A320-Dev/Controls
Overhead_ELAC1_Toggle#1 (>K:FLY_BY_WIRE_ELAC_TOGGLE) (L:XMLVAR_Momentary_PUSH_OVHD_FLTCTL_ELAC_Pressed) ! (>L:XMLVAR_Momentary_PUSH_OVHD_FLTCTL_ELAC_Pressed)
Overhead_ELAC2_Toggle#2 (>K:FLY_BY_WIRE_ELAC_TOGGLE) (L:XMLVAR_Momentary_PUSH_OVHD_FLTCTL_ELAC2_Pressed) ! (>L:XMLVAR_Momentary_PUSH_OVHD_FLTCTL_ELAC2_Pressed)
//Fly By Wire/A320-Dev/ECAM
A32NX_ECAM_KNOB_LOWER_DEC#(A:LIGHT POTENTIOMETER:93,percent) 5 - 0 max 93 (>K:2:LIGHT_POTENTIOMETER_SET)
A32NX_ECAM_KNOB_UPPER_DEC#(A:LIGHT POTENTIOMETER:92,percent) 5 - 0 max 92 (>K:2:LIGHT_POTENTIOMETER_SET)
A32NX_ECAM_KNOB_UPPER_INC#(A:LIGHT POTENTIOMETER:92,percent) 5 + 100 min 92 (>K:2:LIGHT_POTENTIOMETER_SET)
//Fly By Wire/A320-Dev/EFIS
A32NX_BARO1_KNOB_PULL#(L:XMLVAR_Baro1_Mode) s0 0 == if{ 2 (>L:XMLVAR_Baro1_Mode) } els{ l0 1 == if{ 3 (>L:XMLVAR_Baro1_Mode) } } 
A32NX_BARO1_KNOB_PUSH#(L:XMLVAR_Baro1_Mode) s0 1 == l0 2 == or if{ 0 } els{ 1 } (>L:XMLVAR_Baro1_Mode)
A32NX_EFIS_LS_1_PUSH#(>H:A320_Neo_MFD_BTN_LS_1) (>H:A320_Neo_PFD_BTN_LS_1) and
A32NX_EFIS_L_ARPT_PUSH#(L:A32NX_EFIS_L_OPTION, enum) 5 == if{ 0 } els{ 5 } (>L:A32NX_EFIS_L_OPTION, enum)
A32NX_EFIS_L_CHRONO_PUSH#0 (>H:A32NX_EFIS_L_CHRONO_PUSHED)
A32NX_EFIS_L_CSTR_PUSH#(L:A32NX_EFIS_L_OPTION, enum) 1 == if{ 0 } els{ 1 } (>L:A32NX_EFIS_L_OPTION, enum)
A32NX_EFIS_L_NAVAID_1_MODE_ADF#1 (>L:A32NX_EFIS_L_NAVAID_1_MODE)
A32NX_EFIS_L_NAVAID_1_MODE_OFF#0 (>L:A32NX_EFIS_L_NAVAID_1_MODE)
A32NX_EFIS_L_NAVAID_1_MODE_VOR#2 (>L:A32NX_EFIS_L_NAVAID_1_MODE)
A32NX_EFIS_L_NAVAID_2_MODE_ADF#1 (>L:A32NX_EFIS_L_NAVAID_2_MODE)
A32NX_EFIS_L_NAVAID_2_MODE_OFF#0 (>L:A32NX_EFIS_L_NAVAID_2_MODE)
A32NX_EFIS_L_NAVAID_2_MODE_VOR#2 (>L:A32NX_EFIS_L_NAVAID_2_MODE)
A32NX_EFIS_L_NDB_PUSH#(L:A32NX_EFIS_L_OPTION, enum) 4 == if{ 0 } els{ 4 } (>L:A32NX_EFIS_L_OPTION, enum)
A32NX_EFIS_L_ND_MODE_ARC#3 (>L:A32NX_EFIS_L_ND_MODE)
A32NX_EFIS_L_ND_MODE_DEC#(L:A32NX_EFIS_L_ND_MODE) -- 0 max (>L:A32NX_EFIS_L_ND_MODE) 
A32NX_EFIS_L_ND_MODE_INC#(L:A32NX_EFIS_L_ND_MODE) ++ 4 min (>L:A32NX_EFIS_L_ND_MODE) 
A32NX_EFIS_L_ND_MODE_LS#0 (>L:A32NX_EFIS_L_ND_MODE)
A32NX_EFIS_L_ND_MODE_NAV#2 (>L:A32NX_EFIS_L_ND_MODE)
A32NX_EFIS_L_ND_MODE_PLAN#4 (>L:A32NX_EFIS_L_ND_MODE)
A32NX_EFIS_L_ND_MODE_VOR#1 (>L:A32NX_EFIS_L_ND_MODE)
A32NX_EFIS_L_ND_RANGE_10#0 (>L:A32NX_EFIS_L_ND_RANGE)
A32NX_EFIS_L_ND_RANGE_160#4 (>L:A32NX_EFIS_L_ND_RANGE)
A32NX_EFIS_L_ND_RANGE_20#1 (>L:A32NX_EFIS_L_ND_RANGE)
A32NX_EFIS_L_ND_RANGE_320#5 (>L:A32NX_EFIS_L_ND_RANGE)
A32NX_EFIS_L_ND_RANGE_40#2 (>L:A32NX_EFIS_L_ND_RANGE)
A32NX_EFIS_L_ND_RANGE_80#3 (>L:A32NX_EFIS_L_ND_RANGE)
A32NX_EFIS_L_ND_RANGE_DEC#(L:A32NX_EFIS_L_ND_RANGE) -- 0 max (>L:A32NX_EFIS_L_ND_RANGE)
A32NX_EFIS_L_ND_RANGE_INC#(L:A32NX_EFIS_L_ND_RANGE) ++ 5 min (>L:A32NX_EFIS_L_ND_RANGE)
A32NX_EFIS_L_VORD_PUSH#(L:A32NX_EFIS_L_OPTION, enum) 2 == if{ 0 } els{ 2 } (>L:A32NX_EFIS_L_OPTION, enum)
A32NX_EFIS_L_WPT_PUSH#(L:A32NX_EFIS_L_OPTION, enum) 3 == if{ 0 } els{ 3 } (>L:A32NX_EFIS_L_OPTION, enum)
A32NX_EFIS_R_ARPT_PUSH#(L:A32NX_EFIS_R_OPTION, enum) 5 == if{ 0 } els{ 5 } (>L:A32NX_EFIS_R_OPTION, enum)
A32NX_EFIS_R_CHRONO_PUSH#0 (>H:A32NX_EFIS_R_CHRONO_PUSHED)
A32NX_EFIS_R_CSTR_PUSH#(L:A32NX_EFIS_R_OPTION, enum) 1 == if{ 0 } els{ 1 } (>L:A32NX_EFIS_R_OPTION, enum)
A32NX_EFIS_R_NAVAID_1_MODE_ADF#1 (>L:A32NX_EFIS_R_NAVAID_1_MODE)
A32NX_EFIS_R_NAVAID_1_MODE_OFF#0 (>L:A32NX_EFIS_R_NAVAID_1_MODE)
A32NX_EFIS_R_NAVAID_1_MODE_VOR#2 (>L:A32NX_EFIS_R_NAVAID_1_MODE)
A32NX_EFIS_R_NAVAID_2_MODE_ADF#1 (>L:A32NX_EFIS_R_NAVAID_2_MODE)
A32NX_EFIS_R_NAVAID_2_MODE_OFF#0 (>L:A32NX_EFIS_R_NAVAID_2_MODE)
A32NX_EFIS_R_NAVAID_2_MODE_VOR#2 (>L:A32NX_EFIS_R_NAVAID_2_MODE)
A32NX_EFIS_R_NDB_PUSH#(L:A32NX_EFIS_R_OPTION, enum) 4 == if{ 0 } els{ 4 } (>L:A32NX_EFIS_R_OPTION, enum)
A32NX_EFIS_R_ND_MODE_ARC#3 (>L:A32NX_EFIS_R_ND_MODE)
A32NX_EFIS_R_ND_MODE_LS#0 (>L:A32NX_EFIS_R_ND_MODE)
A32NX_EFIS_R_ND_MODE_NAV#2 (>L:A32NX_EFIS_R_ND_MODE)
A32NX_EFIS_R_ND_MODE_PLAN#4 (>L:A32NX_EFIS_R_ND_MODE)
A32NX_EFIS_R_ND_MODE_VOR#1 (>L:A32NX_EFIS_R_ND_MODE)
A32NX_EFIS_R_ND_RANGE_10#0 (>L:A32NX_EFIS_R_ND_RANGE)
A32NX_EFIS_R_ND_RANGE_160#4 (>L:A32NX_EFIS_R_ND_RANGE)
A32NX_EFIS_R_ND_RANGE_20#1 (>L:A32NX_EFIS_R_ND_RANGE)
A32NX_EFIS_R_ND_RANGE_320#5 (>L:A32NX_EFIS_R_ND_RANGE)
A32NX_EFIS_R_ND_RANGE_40#2 (>L:A32NX_EFIS_R_ND_RANGE)
A32NX_EFIS_R_ND_RANGE_80#3 (>L:A32NX_EFIS_R_ND_RANGE)
A32NX_EFIS_R_ND_RANGE_INC#(L:A32NX_EFIS_R_ND_RANGE) ++ 5 min (>L:A32NX_EFIS_R_ND_RANGE)
A32NX_EFIS_R_VORD_PUSH#(L:A32NX_EFIS_R_OPTION, enum) 2 == if{ 0 } els{ 2 } (>L:A32NX_EFIS_R_OPTION, enum)
A32NX_EFIS_R_WPT_PUSH#(L:A32NX_EFIS_R_OPTION, enum) 3 == if{ 0 } els{ 3 } (>L:A32NX_EFIS_R_OPTION, enum)
AUTOPILOT_BARO_DEC#(L:XMLVAR_Baro1_Mode) 2 != (L:XMLVAR_Baro1_Mode) 3 != and if{ (L:XMLVAR_Baro_Selector_HPA_1) if{ 1 (A:KOHLSMAN SETTING MB:1, mbars) -- 16 * (>K:2:KOHLSMAN_SET) } els{ 1 (>K:KOHLSMAN_DEC) } }
AUTOPILOT_BARO_INC#(L:XMLVAR_Baro1_Mode) 2 != (L:XMLVAR_Baro1_Mode) 3 != and if{ (L:XMLVAR_Baro_Selector_HPA_1) if{ 1 (A:KOHLSMAN SETTING MB:1, mbars) ++ 16 * (>K:2:KOHLSMAN_SET) } els{ 1 (>K:KOHLSMAN_INC) } }
A32NX_EFIS_L_ND_KNOB_DEC#(A:LIGHT POTENTIOMETER:89,percent) 5 - 0 max 89 (>K:2:LIGHT_POTENTIOMETER_SET)
A32NX_EFIS_L_ND_KNOB_INC#(A:LIGHT POTENTIOMETER:89,percent) 5 + 100 min 89 (>K:2:LIGHT_POTENTIOMETER_SET)
A32NX_EFIS_L_PFD_KNOB_DEC#(A:LIGHT POTENTIOMETER:88,percent) 5 - 0 max 88 (>K:2:LIGHT_POTENTIOMETER_SET)
A32NX_EFIS_L_PFD_KNOB_INC#(A:LIGHT POTENTIOMETER:88,percent) 5 + 100 min 88 (>K:2:LIGHT_POTENTIOMETER_SET)
A32NX_EFIS_R_ND_KNOB_DEC#(A:LIGHT POTENTIOMETER:91,percent) 5 - 0 max 91 (>K:2:LIGHT_POTENTIOMETER_SET)
A32NX_EFIS_R_ND_KNOB_INC#(A:LIGHT POTENTIOMETER:91,percent) 5 + 100 min 91 (>K:2:LIGHT_POTENTIOMETER_SET)
A32NX_EFIS_R_PFD_KNOB_DEC#(A:LIGHT POTENTIOMETER:90,percent) 5 - 0 max 90 (>K:2:LIGHT_POTENTIOMETER_SET)
A32NX_EFIS_R_PFD_KNOB_INC#(A:LIGHT POTENTIOMETER:90,percent) 5 + 100 min 90 (>K:2:LIGHT_POTENTIOMETER_SET)
//Fly By Wire/A320-Dev/EICAS
A32NX_ECAM_KNOB_LOWER_INC_-_DUPLICATE__WRONG_INPUT_TYPE_#(A:LIGHT POTENTIOMETER:93,percent) 5 + 100 min 93 (>K:2:LIGHT_POTENTIOMETER_SET)
//Fly By Wire/A320-Dev/Electrical
FORCE_OVHD_ELEC_BATTERTY_1_OFF#0 (>L:A32NX_OVHD_ELEC_BAT_1_PB_IS_AUTO) 0 (>L:XMLVAR_Momentary_PUSH_OVHD_ELEC_BAT1_Pressed) 
FORCE_OVHD_ELEC_BATTERTY_1_ON#1 (>L:A32NX_OVHD_ELEC_BAT_1_PB_IS_AUTO) 1 (>L:XMLVAR_Momentary_PUSH_OVHD_ELEC_BAT1_Pressed)
FORCE_OVHD_ELEC_BATTERTY_2_OFF#0 (>L:A32NX_OVHD_ELEC_BAT_2_PB_IS_AUTO) 0 (>L:XMLVAR_Momentary_PUSH_OVHD_ELEC_BAT2_Pressed)
FORCE_OVHD_ELEC_BATTERTY_2_ON#1 (>L:A32NX_OVHD_ELEC_BAT_2_PB_IS_AUTO) 1 (>L:XMLVAR_Momentary_PUSH_OVHD_ELEC_BAT2_Pressed)
OVHD_ELEC_BATTERY_2_TOGGLE#(L:A32NX_OVHD_ELEC_BAT_2_PB_IS_AUTO, Bool) ! (>L:A32NX_OVHD_ELEC_BAT_2_PB_IS_AUTO) (L:XMLVAR_Momentary_PUSH_OVHD_ELEC_BAT2_Pressed) ! (>L:XMLVAR_Momentary_PUSH_OVHD_ELEC_BAT2_Pressed)
OVHD_ELEC_AC_ESS_FEED_TOGGLE#(L:A32NX_OVHD_ELEC_AC_ESS_FEED_PB_IS_NORMAL, bool) ! (>L:A32NX_OVHD_ELEC_AC_ESS_FEED_PB_IS_NORMAL, bool)
OVHD_ELEC_APU_GEN_TOGGLE#1 (>K:APU_GENERATOR_SWITCH_TOGGLE) (L:XMLVAR_Momentary_PUSH_OVHD_ELEC_APUGEN_Pressed) ! (>L:XMLVAR_Momentary_PUSH_OVHD_ELEC_APUGEN_Pressed)
OVHD_ELEC_BATTERY_1_TOGGLE#(L:A32NX_OVHD_ELEC_BAT_1_PB_IS_AUTO, Bool) ! (>L:A32NX_OVHD_ELEC_BAT_1_PB_IS_AUTO) (L:XMLVAR_Momentary_PUSH_OVHD_ELEC_BAT1_Pressed) ! (>L:XMLVAR_Momentary_PUSH_OVHD_ELEC_BAT1_Pressed)
OVHD_ELEC_COMMERCIAL_TOGGLE#(L:A32NX_OVHD_ELEC_COMMERCIAL_PB_IS_ON, bool) ! (>L:A32NX_OVHD_ELEC_COMMERCIAL_PB_IS_ON)
OVHD_ELEC_EXT_PWR_TOGGLE#(A:EXTERNAL POWER AVAILABLE:1,bool) (A:EXTERNAL POWER ON:1,bool) ! and if{ 1 (>K:TOGGLE_EXTERNAL_POWER) } els{ (A:EXTERNAL POWER ON:1,bool) if{ 1 (>K:TOGGLE_EXTERNAL_POWER) } }
OVHD_ELEC_GALY_AND_CAB_TOGGLE#(L:A32NX_OVHD_ELEC_GALY_AND_CAB_PB_IS_AUTO, bool) ! (>L:A32NX_OVHD_ELEC_GALY_AND_CAB_PB_IS_AUTO, bool)
OVHD_ELEC_GEN1_TOGGLE#(>K:TOGGLE_ALTERNATOR1) (L:XMLVAR_Momentary_PUSH_OVHD_ELEC_GEN1_Pressed) ! (>L:XMLVAR_Momentary_PUSH_OVHD_ELEC_GEN1_Pressed)
OVHD_ELEC_GEN2_TOGGLE#(>K:TOGGLE_ALTERNATOR2) (L:XMLVAR_Momentary_PUSH_OVHD_ELEC_GEN2_Pressed) ! (>L:XMLVAR_Momentary_PUSH_OVHD_ELEC_GEN2_Pressed)
Overhead_Elec_Bus_Tie_Auto_Toggle#(L:A32NX_OVHD_ELEC_BUS_TIE_PB_IS_AUTO, bool) ! (>L:A32NX_OVHD_ELEC_BUS_TIE_PB_IS_AUTO)
//Fly By Wire/A320-Dev/Engine
A32NX_ENG1_MASTER_SWITCH_OFF#1 (>K:FUELSYSTEM_VALVE_CLOSE)
A32NX_ENG1_MASTER_SWITCH_ON#1 (>K:FUELSYSTEM_VALVE_OPEN)
A32NX_ENG2_MASTER_SWITCH_OFF#2 (>K:FUELSYSTEM_VALVE_CLOSE)
A32NX_ENG2_MASTER_SWITCH_ON#2 (>K:FUELSYSTEM_VALVE_OPEN)
//Fly By Wire/A320-Dev/Fire
FIRE_APU_AGENT1_DISCHARGE#(L:A32NX_FIRE_BUTTON_APU) if{ 1 (>L:A32NX_FIRE_APU_AGENT1_Discharge) }
FIRE_ENG1_AGENT1_DISCHARGE#(L:A32NX_FIRE_BUTTON_ENG1) if{ 1 (>L:A32NX_FIRE_ENG1_AGENT1_Discharge) }
FIRE_ENG1_AGENT2_DISCHARGE#(L:A32NX_FIRE_BUTTON_ENG1) if{ 1 (>L:A32NX_FIRE_ENG1_AGENT2_Discharge) }
FIRE_ENG2_AGENT1_DISCHARGE#(L:A32NX_FIRE_BUTTON_ENG2) if{ 1 (>L:A32NX_FIRE_ENG2_AGENT1_Discharge) }
FIRE_ENG2_AGENT2_DISCHARGE#(L:A32NX_FIRE_BUTTON_ENG2) if{ 1 (>L:A32NX_FIRE_ENG2_AGENT2_Discharge) }
FIRE_GUARD_APU_TOGGLE#(L:A32NX_FIRE_BUTTON_APU) ! if{ (L:A32NX_FIRE_GUARD_APU) ! (>L:A32NX_FIRE_GUARD_APU) }
FIRE_GUARD_ENG1_TOGGLE#(L:A32NX_FIRE_BUTTON_ENG1) ! if{ (L:A32NX_FIRE_GUARD_ENG1) ! (>L:A32NX_FIRE_GUARD_ENG1) }
FIRE_GUARD_ENG2_TOGGLE#(L:A32NX_FIRE_BUTTON_ENG2) ! if{ (L:A32NX_FIRE_GUARD_ENG2) ! (>L:A32NX_FIRE_GUARD_ENG2) }
FIRE_TEST_APU_OFF#0 (>L:A32NX_FIRE_TEST_APU)
FIRE_TEST_APU_ON#1 (>L:A32NX_FIRE_TEST_APU) 
FIRE_TEST_ENG1_OFF#0 (>L:A32NX_FIRE_TEST_ENG1)
FIRE_TEST_ENG1_ON#1 (>L:A32NX_FIRE_TEST_ENG1) 
FIRE_TEST_ENG2_OFF#0 (>L:A32NX_FIRE_TEST_ENG2)
FIRE_TEST_ENG2_ON#1 (>L:A32NX_FIRE_TEST_ENG2) 
FIRE_BUTTON_APU_ON#(L:A32NX_FIRE_GUARD_APU) if{ (>L:A32NX_FIRE_BUTTON_APU) ! (>L:A32NX_FIRE_BUTTON_APU) }
FIRE_BUTTON_ENG1_ON#(L:A32NX_FIRE_GUARD_ENG1) if{ (L:A32NX_FIRE_BUTTON_ENG1) ! (>L:A32NX_FIRE_BUTTON_ENG1) }
FIRE_BUTTON_ENG2_ON#(L:A32NX_FIRE_GUARD_ENG2) if{ (L:A32NX_FIRE_BUTTON_ENG2) ! (>L:A32NX_FIRE_BUTTON_ENG2) }
//Fly By Wire/A320-Dev/Fuel
FUEL_CTK_PUMP1_#(L:XMLVAR_Momentary_PUSH_OVHD_FUEL_PUMP1_Pressed) ! (>L:XMLVAR_Momentary_PUSH_OVHD_FUEL_PUMP1_Pressed) 1 (>K:FUELSYSTEM_PUMP_TOGGLE)
FUEL_CTK_PUMP2#(L:XMLVAR_Momentary_PUSH_OVHD_FUEL_PUMP2_Pressed) ! (>L:XMLVAR_Momentary_PUSH_OVHD_FUEL_PUMP2_Pressed) 4 (>K:FUELSYSTEM_PUMP_TOGGLE)
FUEL_LTK_PUMP1#(L:XMLVAR_Momentary_PUSH_OVHD_FUEL_LTKPUMPS1_Pressed) ! (>L:XMLVAR_Momentary_PUSH_OVHD_FUEL_LTKPUMPS1_Pressed) 2 (>K:FUELSYSTEM_PUMP_TOGGLE)
FUEL_LTK_PUMP2#(L:XMLVAR_Momentary_PUSH_OVHD_FUEL_LTKPUMPS2_Pressed) ! (>L:XMLVAR_Momentary_PUSH_OVHD_FUEL_LTKPUMPS2_Pressed) 5 (>K:FUELSYSTEM_PUMP_TOGGLE)
FUEL_RTK_PUMP1#(L:XMLVAR_Momentary_PUSH_OVHD_FUEL_RTKPUMPS1_Pressed) ! (>L:XMLVAR_Momentary_PUSH_OVHD_FUEL_RTKPUMPS1_Pressed) 3 (>K:FUELSYSTEM_PUMP_TOGGLE)
FUEL_RTK_PUMP2#(L:XMLVAR_Momentary_PUSH_OVHD_FUEL_RTKPUMPS2_Pressed) ! (>L:XMLVAR_Momentary_PUSH_OVHD_FUEL_RTKPUMPS2_Pressed) 6 (>K:FUELSYSTEM_PUMP_TOGGLE)
FUEL_XFEED_VALVE_ON#(L:XMLVAR_Momentary_PUSH_OVHD_FUEL_XFEED_Pressed) ! (>L:XMLVAR_Momentary_PUSH_OVHD_FUEL_XFEED_Pressed) 3 (>K:FUELSYSTEM_VALVE_TOGGLE)
HYD_ENG1_PUMP_TOGGLE#(L:A32NX_OVHD_HYD_ENG_1_PUMP_PB_IS_AUTO, bool) ! (>L:A32NX_OVHD_HYD_ENG_1_PUMP_PB_IS_AUTO, bool)
HYD_ENG2_PUMP_TOGGLE#(L:A32NX_OVHD_HYD_ENG_2_PUMP_PB_IS_AUTO, bool) ! (>L:A32NX_OVHD_HYD_ENG_2_PUMP_PB_IS_AUTO, bool)
HYD_EPUMP_BLUE_LOCK_TOGGLE#(L:A32NX_OVHD_HYD_EPUMPB_PB_IS_AUTO_LOCK) ! (>L:A32NX_OVHD_HYD_EPUMPB_PB_IS_AUTO_LOCK)
HYD_EPUMPB_IS_AUTO_TOGGLE#(L:A32NX_OVHD_HYD_EPUMPB_PB_IS_AUTO, bool) ! (L:A32NX_OVHD_HYD_EPUMPB_PB_IS_AUTO, bool)
HYD_EPUMPY_IS_AUTO_TOGGLE#(L:A32NX_OVHD_HYD_EPUMPY_PB_IS_AUTO, bool) ! (>L:A32NX_OVHD_HYD_EPUMPY_PB_IS_AUTO, bool)
HYD_PTU_IS_AUTO_TOGGLE#(L:A32NX_OVHD_HYD_PTU_PB_IS_AUTO, bool) ! (>L:A32NX_OVHD_HYD_PTU_PB_IS_AUTO, bool)
HYD_RAT_MAN_ON_PRESSED#1 (>L:A32NX_OVHD_HYD_RAT_MAN_ON_IS_PRESSED)
HYD_RAT_MAN_ON_RELEASED#0 (>L:A32NX_OVHD_HYD_RAT_MAN_ON_IS_PRESSED)
//Fly By Wire/A320-Dev/Gear
ANTISKID_OFF#(A:ANTISKID BRAKES ACTIVE,Bool) if{ (>K:ANTISKID_BRAKES_TOGGLE) }
ANTISKID_ON#(A:ANTISKID BRAKES ACTIVE,Bool) ! if{ (>K:ANTISKID_BRAKES_TOGGLE) }
AUTOBRAKE_LOW_HARD-TOGGLE#(L:A32NX_AUTOBRAKES_ARMED_MODE) 1 == if{ 0 } els{ 1 } (>L:A32NX_AUTOBRAKES_ARMED_MODE)
AUTOBRAKE_MAX_HARD-TOGGLE#(L:A32NX_AUTOBRAKES_ARMED_MODE) 3 == if{ 0 } els{ 3 } (>L:A32NX_AUTOBRAKES_ARMED_MODE)
AUTOBRAKE_MED_HARD-TOGGLE#(L:A32NX_AUTOBRAKES_ARMED_MODE) 2 == if{ 0 } els{ 2 } (>L:A32NX_AUTOBRAKES_ARMED_MODE)
//Fly By Wire/A320-Dev/Lights
A32NX_LIGHTS_GLARESHIELD2_DEC#(A:LIGHT POTENTIOMETER:84, percent) 5 - 0 max 84 (>K:2:LIGHT_POTENTIOMETER_SET)
A32NX_LIGHTS_GLARESHIELD2_INC#(A:LIGHT POTENTIOMETER:84, percent) 5 + 100 min 84 (>K:2:LIGHT_POTENTIOMETER_SET)
A32NX_LIGHTS_GLARESHIELD3_DEC#(A:LIGHT POTENTIOMETER:87, percent) 5 - 0 max 87 (>K:2:LIGHT_POTENTIOMETER_SET)
A32NX_LIGHTS_GLARESHIELD3_INC#(A:LIGHT POTENTIOMETER:87, percent) 5 + 100 min 87 (>K:2:LIGHT_POTENTIOMETER_SET)
A32NX_OH_DOME_LIGHT_BRT#1 (>K:2:CABIN_LIGHTS_SET) 100 (>K:LIGHT_POTENTIOMETER_7_SET)
A32NX_OH_DOME_LIGHT_DIM#1 (>K:2:CABIN_LIGHTS_SET) 50 (>K:LIGHT_POTENTIOMETER_7_SET)
A32NX_OH_DOME_LIGHT_OFF#0 (>K:2:CABIN_LIGHTS_SET) 0 (>K:LIGHT_POTENTIOMETER_7_SET)
A32NX_OH_INTEG_LIGHT_DEC#(A:LIGHT POTENTIOMETER:86,percent) 5 - 0 max 86 (>K:2:LIGHT_POTENTIOMETER_SET)
A32NX_OH_INTEG_LIGHT_INC#(A:LIGHT POTENTIOMETER:86,percent) 5 + 100 min 86 (>K:2:LIGHT_POTENTIOMETER_SET)
BEACON_LIGHTS_OFF#0 0 (>K:2:BEACON_LIGHTS_SET)
BEACON_LIGHTS_ON#0 1 (>K:2:BEACON_LIGHTS_SET)
A32NX_PEDEST_KNOB_FLOOD_CPT_DEC#A32NX_PEDEST_KNOB_FLOOD_CPT_DEC#(A:LIGHT POTENTIOMETER:83,percent) 5 - 0 max 83 (>K:2:LIGHT_POTENTIOMETER_SET)
A32NX_PEDEST_KNOB_FLOOD_CPT_INC#A32NX_PEDEST_KNOB_FLOOD_CPT_INC#(A:LIGHT POTENTIOMETER:83,percent) 5 + 100 min 83 (>K:2:LIGHT_POTENTIOMETER_SET)
A32NX_PEDEST_KNOB_FLOOD_FO_DEC#A32NX_PEDEST_KNOB_FLOOD_FO_DEC#(A:LIGHT POTENTIOMETER:76,percent) 5 - 0 max 76 (>K:2:LIGHT_POTENTIOMETER_SET)
A32NX_PEDEST_KNOB_FLOOD_FO_INC#A32NX_PEDEST_KNOB_FLOOD_FO_INC#(A:LIGHT POTENTIOMETER:76,percent) 5 + 100 min 76 (>K:2:LIGHT_POTENTIOMETER_SET)
A32NX_PEDEST_KNOB_INTEG_DEC#A32NX_PEDEST_KNOB_INTEG_DEC#(A:LIGHT POTENTIOMETER:85,percent) 5 - 0 max 85 (>K:2:LIGHT_POTENTIOMETER_SET)
A32NX_PEDEST_KNOB_INTEG_INC#A32NX_PEDEST_KNOB_INTEG_INC#(A:LIGHT POTENTIOMETER:85,percent) 5 + 100 min 85 (>K:2:LIGHT_POTENTIOMETER_SET)
MAIN_PNL_FLOOD_LT_DEC#(A:LIGHT POTENTIOMETER:83, percent) 5 + 100 min 83 (>K:2:LIGHT_POTENTIOMETER_SET)
MAIN_PNL_FLOOD_LT_INC#(A:LIGHT POTENTIOMETER:83, percent) 5 - 0 max 83 (>K:2:LIGHT_POTENTIOMETER_SET)
LANDING_LIGHTS_L_OFF#1 (>L:LIGHTING_LANDING_2) 0 (>L:LANDING_2_Retracted) 0 2 r (>K:2:LANDING_LIGHTS_SET)
LANDING_LIGHTS_L_ON#0 (>L:LIGHTING_LANDING_2) 0 (>L:LANDING_2_Retracted) 1 2 r (>K:2:LANDING_LIGHTS_SET)
LANDING_LIGHTS_L_RETRACT#2 (>L:LIGHTING_LANDING_2) 1 (>L:LANDING_2_Retracted) 0 2 r (>K:2:LANDING_LIGHTS_SET)
LANDING_LIGHTS_R_OFF#1 (>L:LIGHTING_LANDING_3) 0 (>L:LANDING_3_Retracted) 0 3 r (>K:2:LANDING_LIGHTS_SET)
LANDING_LIGHTS_R_ON#0 (>L:LIGHTING_LANDING_3) 0 (>L:LANDING_3_Retracted) 1 3 r (>K:2:LANDING_LIGHTS_SET)
LANDING_LIGHTS_R_RETRACT#2 (>L:LIGHTING_LANDING_3) 1 (>L:LANDING_3_Retracted) 0 3 r (>K:2:LANDING_LIGHTS_SET)
NAV_LOGO_LIGHTS_OFF#0 0 (>K:2:NAV_LIGHTS_SET) 0 0 (>K:2:LOGO_LIGHTS_SET)
NAV_LOGO_LIGHTS_ON#0 1 (>K:2:NAV_LIGHTS_SET) 0 1 (>K:2:LOGO_LIGHTS_SET)
NAV_LOGO_LIGHTS_TOGGLE#(L:LIGHTING_NAV_0) ! s0 (>L:LIGHTING_NAV_0) 0 l0 (>K:2:NAV_LIGHTS_SET) 0 l0 (>K:2:LOGO_LIGHTS_SET)
NOSE_LIGHTS_OFF#2 (>L:LIGHTING_LANDING_1) 0 1 r (>K:2:LANDING_LIGHTS_SET) 0 1 r (>K:2:TAXI_LIGHTS_SET)
NOSE_LIGHTS_TAXI#1 (>L:LIGHTING_LANDING_1) 0 1 r (>K:2:LANDING_LIGHTS_SET) 1 1 r (>K:2:TAXI_LIGHTS_SET) 
NOSE_LIGHTS_TO#0 (>L:LIGHTING_LANDING_1) 1 1 r (>K:2:LANDING_LIGHTS_SET) 0 1 r (>K:2:TAXI_LIGHTS_SET)
RUNWAY_TURNOFF_LIGHTS_OFF#0 s0 (>L:LIGHTING_TAXI_2) 2 l0 (>K:2:TAXI_LIGHTS_SET) 3 l0 (>K:2:TAXI_LIGHTS_SET)
RUNWAY_TURNOFF_LIGHTS_ON#1 s0 (>L:LIGHTING_TAXI_2) 2 l0 (>K:2:TAXI_LIGHTS_SET) 3 l0 (>K:2:TAXI_LIGHTS_SET)
STROBE_LIGHTS_AUTO#1 (>L:LIGHTING_STROBE_0) 1 (>L:STROBE_0_Auto) 1 0 r (>K:2:STROBES_SET)
STROBE_LIGHTS_OFF#2 (>L:LIGHTING_STROBE_0) 0 (>L:STROBE_0_Auto) 0 0 r (>K:2:STROBES_SET)
STROBE_LIGHTS_ON#0 (>L:LIGHTING_STROBE_0) 0 (>L:STROBE_0_Auto) 1 0 r (>K:2:STROBES_SET)
WING_LIGHTS_OFF#0 0 s0 (>K:2:WING_LIGHTS_SET) l0 (>L:LIGHTING_WING_0)
WING_LIGHTS_ON#0 1 s0 (>K:2:WING_LIGHTS_SET) l0 (>L:LIGHTING_WING_0)
WING_LIGHTS_TOGGLE#(L:LIGHTING_WING_0) ! s0 0 l0 (>K:2:WING_LIGHTS_SET) l0 (>L:LIGHTING_WING_0)
//Fly By Wire/A320-Dev/MCDU
A320_Neo_CDU_1_BTN_INIT#(>H:A320_Neo_CDU_1_BTN_INIT)
A320_Neo_CDU_1_BTN_PERF#(>H:A320_Neo_CDU_1_BTN_PERF)
A320_Neo_CDU_1_BTN_PROG#(>H:A320_Neo_CDU_1_BTN_PROG)
//Fly By Wire/A320-Dev/Miscellaneous
A32NX_CHRONO_RST#(>H:A32NX_CHRONO_RST)
A32NX_CHRONO_TOGGLE#(>H:A32NX_CHRONO_TOGGLE)
A32NX_OVHD_RCDR_GND_CTL_TOGGLE#(L:A32NX_RCDR_GROUND_CONTROL_ON,bool) ! if{ (A:GENERAL ENG OIL PRESSURE:1, psi) 18 < sp1  (A:GENERAL ENG OIL PRESSURE:2, psi) 18 < sp2  (L:A32NX_ELEC_DC_ESS_SHED_BUS_IS_POWERED,bool) l1 and l2 and  if{ 1 (>L:A32NX_RCDR_GROUND_CONTROL_ON,bool) } } els{ 0 (>L:A32NX_RCDR_GROUND_CONTROL_ON,bool) }
A32NX_OVHD_WIPER_L_FAST#(A:CIRCUIT SWITCH ON:77,bool) ! if{ 77 (>K:ELECTRICAL_CIRCUIT_TOGGLE) } 100 77 (>K:2:ELECTRICAL_CIRCUIT_POWER_SETTING_SET)
A32NX_OVHD_WIPER_L_OFF#(A:CIRCUIT SWITCH ON:77,bool) if{ 77 (>K:ELECTRICAL_CIRCUIT_TOGGLE) }
A32NX_OVHD_WIPER_L_SLOW#(A:CIRCUIT SWITCH ON:77,bool) ! if{ 77 (>K:ELECTRICAL_CIRCUIT_TOGGLE) } 75 77 (>K:2:ELECTRICAL_CIRCUIT_POWER_SETTING_SET)
A32NX_OVHD_WIPER_R_FAST#(A:CIRCUIT SWITCH ON:80,bool) ! if{ 80 (>K:ELECTRICAL_CIRCUIT_TOGGLE) } 100 80 (>K:2:ELECTRICAL_CIRCUIT_POWER_SETTING_SET)
A32NX_OVHD_WIPER_R_OFF#(A:CIRCUIT SWITCH ON:80,bool) if{ 80 (>K:ELECTRICAL_CIRCUIT_TOGGLE) }
A32NX_OVHD_WIPER_R_SLOW#(A:CIRCUIT SWITCH ON:80,bool) ! if{ 80 (>K:ELECTRICAL_CIRCUIT_TOGGLE) } 75 80 (>K:2:ELECTRICAL_CIRCUIT_POWER_SETTING_SET)
A32NX_SWITCH_RADAR_PWS_POSITION_AUTO#1 (>L:A32NX_SWITCH_RADAR_PWS_POSITION)
A32NX_SWITCH_RADAR_PWS_POSITION_OFF#0 (>L:A32NX_SWITCH_RADAR_PWS_POSITION)
COCKPIT_DOOR_LOCK#1 (>L:A32NX_COCKPIT_DOOR_LOCKED)
COCKPIT_DOOR_UNLOCK#0 (>L:A32NX_COCKPIT_DOOR_LOCKED)
A32NX_Chrono_Date_Display#(>H:A32NX_CHRONO_DATE)
Chrono_ET_Knob_Dec#(L:A32NX_CHRONO_ET_SWITCH_POS, number) 1 - 0 max (>L:A32NX_CHRONO_ET_SWITCH_POS, number) (>H:A32NX_CHRONO_ET_POS_CHANGED) 
Chrono_ET_Knob_Inc#(L:A32NX_CHRONO_ET_SWITCH_POS, number) 1 + 2 min (>L:A32NX_CHRONO_ET_SWITCH_POS, number) (>H:A32NX_CHRONO_ET_POS_CHANGED)
PUSH_DOORPANEL_VIDEO_TOGGLE#(L:PUSH_DOORPANEL_VIDEO, bool) ! (>L:PUSH_DOORPANEL_VIDEO, bool)
//Fly By Wire/A320-Dev/Navigation
A32NX_OVHD_ADIRS_KNOB1_MODES_TOGGLE#(L:A32NX_OVHD_ADIRS_IR_1_MODE_SELECTOR_KNOB, number) ++ 3 % (>L:A32NX_OVHD_ADIRS_IR_1_MODE_SELECTOR_KNOB, number)
A32NX_OVHD_ADIRS_KNOB2_MODES_TOGGLE#(L:A32NX_OVHD_ADIRS_IR_2_MODE_SELECTOR_KNOB) ++ 3 % (>L:A32NX_OVHD_ADIRS_IR_2_MODE_SELECTOR_KNOB)
A32NX_OVHD_ADIRS_KNOB3_MODES_TOGGLE#(L:A32NX_OVHD_ADIRS_IR_3_MODE_SELECTOR_KNOB) ++ 3 % (>L:A32NX_OVHD_ADIRS_IR_3_MODE_SELECTOR_KNOB)
A32NX_TCAS_TRAFFIC_POSITION_ABV#2 (>L:A32NX_SWITCH_TCAS_TRAFFIC_POSITION, enum)
A32NX_TCAS_TRAFFIC_POSITION_ALL#1 (>L:A32NX_SWITCH_TCAS_TRAFFIC_POSITION, enum)
A32NX_TCAS_TRAFFIC_POSITION_BLW#3 (>L:A32NX_SWITCH_TCAS_TRAFFIC_POSITION, enum)
A32NX_TCAS_TRAFFIC_POSITION_THRT#0 (>L:A32NX_SWITCH_TCAS_TRAFFIC_POSITION, enum)
ATC_Custom_Btn_0#(L:XPNDR_clr) 0 > if{ 0 (>L:XPNDR_key) 1 (>L:XPNDR_act,bool) (>H:A320_Neo_ATC_BTN_0) }
ATC_Custom_Btn_1#(L:XPNDR_clr) 0 > if{ 1 (>L:XPNDR_key) 1 (>L:XPNDR_act,bool) (>H:A320_Neo_ATC_BTN_1) }
ATC_Custom_Btn_2#(L:XPNDR_clr) 0 > if{ 2 (>L:XPNDR_key) 1 (>L:XPNDR_act,bool) (>H:A320_Neo_ATC_BTN_2) }
ATC_Custom_Btn_3#(L:XPNDR_clr) 0 > if{ 3 (>L:XPNDR_key) 1 (>L:XPNDR_act,bool) (>H:A320_Neo_ATC_BTN_3) }
ATC_Custom_Btn_4#(L:XPNDR_clr) 0 > if{ 4 (>L:XPNDR_key) 1 (>L:XPNDR_act,bool) (>H:A320_Neo_ATC_BTN_4) }
ATC_Custom_Btn_5#(L:XPNDR_clr) 0 > if{ 5 (>L:XPNDR_key) 1 (>L:XPNDR_act,bool) (>H:A320_Neo_ATC_BTN_5) }
ATC_Custom_Btn_6#(L:XPNDR_clr) 0 > if{ 6 (>L:XPNDR_key) 1 (>L:XPNDR_act,bool) (>H:A320_Neo_ATC_BTN_6) }
ATC_Custom_Btn_7#(L:XPNDR_clr) 0 > if{ 7 (>L:XPNDR_key) 1 (>L:XPNDR_act,bool) (>H:A320_Neo_ATC_BTN_7) }
ATC_Custom_Btn_CLR#(L:XPNDR_clr) s1 2 < if{ (L:XPNDR_pos) -- s0 0 < if{ 3 } els{ l0 } (>L:XPNDR_pos) l1 0 == if{ (A:TRANSPONDER CODE:1,number) } els{ (L:XPNDR_temp) } 10 div (>L:XPNDR_temp) 2 (>L:XPNDR_clr) } els{ 0 (>L:XPNDR_temp) 0 (>L:XPNDR_pos) } (>H:A320_Neo_ATC_BTN_CLR) (E:SIMULATION TIME,second) 7 + (>L:XPNDR_timeout)
A32NX_ATC_Alt_Rptg_Select_OFF#0 (>L:A32NX_SWITCH_ATC_ALT,number)
A32NX_ATC_Alt_Rptg_Select_ON#1 (>L:A32NX_SWITCH_ATC_ALT,number)
A32NX_XPNDR_MODE_AUTO#1 (>L:A32NX_TRANSPONDER_MODE, enum)
A32NX_XPNDR_MODE_ON#2 (>L:A32NX_TRANSPONDER_MODE, enum)
A32NX_XPNDR_MODE_STBY#0 (>L:A32NX_TRANSPONDER_MODE, enum)
TRANSPONDER_MODE_ON#2 (>L:A32NX_TRANSPONDER_MODE)
TRANSPONDER_MODE_STBY#0 (>L:A32NX_TRANSPONDER_MODE)
OVHD_ADIRS_ADR_1_TOGGLE#(L:A32NX_OVHD_ADIRS_ADR_1_PB_IS_ON) ! (>L:A32NX_OVHD_ADIRS_ADR_1_PB_IS_ON)
OVHD_ADIRS_ADR_2_TOGGLE#(L:A32NX_OVHD_ADIRS_ADR_2_PB_IS_ON) ! (>L:A32NX_OVHD_ADIRS_ADR_2_PB_IS_ON)
OVHD_ADIRS_ADR_3_TOGGLE#(L:A32NX_OVHD_ADIRS_ADR_3_PB_IS_ON) ! (>L:A32NX_OVHD_ADIRS_ADR_3_PB_IS_ON)
OVHD_ADIRS_IR_1_TOGGLE#(L:A32NX_OVHD_ADIRS_IR_1_PB_IS_ON) ! (>L:A32NX_OVHD_ADIRS_IR_1_PB_IS_ON)
OVHD_ADIRS_IR_2_TOGGLE#(L:A32NX_OVHD_ADIRS_IR_2_PB_IS_ON) ! (>L:A32NX_OVHD_ADIRS_IR_2_PB_IS_ON)
OVHD_ADIRS_IR_3_TOGGLE#(L:A32NX_OVHD_ADIRS_IR_3_PB_IS_ON) ! (>L:A32NX_OVHD_ADIRS_IR_3_PB_IS_ON)
OVHD_ADIRS_KNOB1_ATT#2 (>L:A32NX_OVHD_ADIRS_IR_1_MODE_SELECTOR_KNOB)
OVHD_ADIRS_KNOB1_NAV#1 (>L:A32NX_OVHD_ADIRS_IR_1_MODE_SELECTOR_KNOB)
OVHD_ADIRS_KNOB1_OFF#0 (>L:A32NX_OVHD_ADIRS_IR_1_MODE_SELECTOR_KNOB)
OVHD_ADIRS_KNOB2_ATT#2 (>L:A32NX_OVHD_ADIRS_IR_2_MODE_SELECTOR_KNOB)
OVHD_ADIRS_KNOB2_NAV#1 (>L:A32NX_OVHD_ADIRS_IR_2_MODE_SELECTOR_KNOB)
OVHD_ADIRS_KNOB2_OFF#0 (>L:A32NX_OVHD_ADIRS_IR_2_MODE_SELECTOR_KNOB)
OVHD_ADIRS_KNOB3_ATT#2 (>L:A32NX_OVHD_ADIRS_IR_3_MODE_SELECTOR_KNOB)
OVHD_ADIRS_KNOB3_NAV#1 (>L:A32NX_OVHD_ADIRS_IR_3_MODE_SELECTOR_KNOB)
OVHD_ADIRS_KNOB3_OFF#0 (>L:A32NX_OVHD_ADIRS_IR_3_MODE_SELECTOR_KNOB)
TCAS_TRAFFIC_POSITION_#A32NX_SWITCH_TCAS_TRAFFIC_POSITION
//Fly By Wire/A320-Dev/Passengers/Crew
CABIN_EMERGENCY_LIGHT_ARM#1 (>L:XMLVAR_SWITCH_OVHD_INTLT_EMEREXIT_Position)
CABIN_EMERGENCY_LIGHT_OFF#2 (>L:XMLVAR_SWITCH_OVHD_INTLT_EMEREXIT_Position)
CABIN_EMERGENCY_LIGHT_ON#0 (>L:XMLVAR_SWITCH_OVHD_INTLT_EMEREXIT_Position)
CABIN_NO_SMOKING_AUTO#1 (>L:XMLVAR_SWITCH_OVHD_INTLT_NOSMOKING_Position, number)
CABIN_NO_SMOKING_OFF#2 (>L:XMLVAR_SWITCH_OVHD_INTLT_NOSMOKING_Position, number)
CABIN_NO_SMOKING_ON#0 (>L:XMLVAR_SWITCH_OVHD_INTLT_NOSMOKING_Position, number)
CABIN_SEATBELTS_ALERT_TOGGLE#(>K:CABIN_SEATBELTS_ALERT_SWITCH_TOGGLE)
CABIN_EMERGENCY_LIGHT_TOGGLE#(L:XMLVAR_SWITCH_OVHD_INTLT_EMEREXIT_Position) ++ 3 % (>L:XMLVAR_SWITCH_OVHD_INTLT_EMEREXIT_Position)
CABIN_NO_SMOKING_TOGGLE#(L:XMLVAR_SWITCH_OVHD_INTLT_NOSMOKING_Position) 0 == if{ 2 (>L:XMLVAR_SWITCH_OVHD_INTLT_NOSMOKING_Position) } els{ (L:XMLVAR_SWITCH_OVHD_INTLT_NOSMOKING_Position) 1 == if{ 0 (>L:XMLVAR_SWITCH_OVHD_INTLT_NOSMOKING_Position) } els{ (L:XMLVAR_SWITCH_OVHD_INTLT_NOSMOKING_Position) 2 == if{ 1 (>L:XMLVAR_SWITCH_OVHD_INTLT_NOSMOKING_Position) }
//Fly By Wire/A320-Dev/Radio
A32NX_AIR_DATA_SWITCHING_CAPT#0 (>L:A32NX_AIR_DATA_SWITCHING_KNOB)
A32NX_AIR_DATA_SWITCHING_F_O#2 (>L:A32NX_AIR_DATA_SWITCHING_KNOB)
A32NX_AIR_DATA_SWITCHING_NORM#1 (>L:A32NX_AIR_DATA_SWITCHING_KNOB)
A32NX_ATT_HDG_SWITCHING_CAPT#0 (>L:A32NX_ATT_HDG_SWITCHING_KNOB)
A32NX_ATT_HDG_SWITCHING_F_O#2 (>L:A32NX_ATT_HDG_SWITCHING_KNOB)
A32NX_ATT_HDG_SWITCHING_NORM#1 (>L:A32NX_ATT_HDG_SWITCHING_KNOB)
A32NX_ECAM_ND_XFR_SWITCHING_CAPT#0 (>L:A32NX_ECAM_ND_XFR_SWITCHING_KNOB)
A32NX_ECAM_ND_XFR_SWITCHING_F_O#2 (>L:A32NX_ECAM_ND_XFR_SWITCHING_KNOB)
A32NX_ECAM_ND_XFR_SWITCHING_NORM#1 (>L:A32NX_ECAM_ND_XFR_SWITCHING_KNOB)
A32NX_EIS_DMC_SWITCHING_CAPT#0 (>L:A32NX_EIS_DMC_SWITCHING_KNOB)
A32NX_EIS_DMC_SWITCHING_F_O#2 (>L:A32NX_EIS_DMC_SWITCHING_KNOB) 
A32NX_EIS_DMC_SWITCHING_NORM#1 (>L:A32NX_EIS_DMC_SWITCHING_KNOB)
A32NX_RMP_L_VHF2_BUTTON_PRESSED#(>H:A32NX_RMP_L_VHF2_BUTTON_PRESSED)
A32NX_RMP_L_VHF1_BUTTON_PRESSED#(>H:A32NX_RMP_L_VHF1_BUTTON_PRESSED)
//Fly By Wire/A320-Dev/Safety
A32NX_CABIN_SEATBELTS_ALERT_OFF#(A:CABIN SEATBELTS ALERT SWITCH, bool) if{ (>K:CABIN_SEATBELTS_ALERT_SWITCH_TOGGLE) }
A32NX_CABIN_SEATBELTS_ALERT_ON#(A:CABIN SEATBELTS ALERT SWITCH, bool) ! if{ (>K:CABIN_SEATBELTS_ALERT_SWITCH_TOGGLE) }
A32NX_CABIN_SEATBELTS_ALERT_TOGGLE#(>K:CABIN_SEATBELTS_ALERT_SWITCH_TOGGLE)
//Fly By Wire/A320-Dev/Warning System
GPWS_Flap_Mode_Off_Toggle#(L:A32NX_GPWS_FLAP_OFF,bool) ! (>L:A32NX_GPWS_FLAP_OFF)
GPWS_GS_Mode_Off_Toggle#(L:A32NX_GPWS_GS_OFF,bool) ! (>L:A32NX_GPWS_GS_OFF)
GPWS_Ldg_Flap3_Toggle#(L:A32NX_GPWS_FLAPS3,bool) ! (>L:A32NX_GPWS_FLAPS3)
GPWS_Sys_Off_Toggle#(L:A32NX_GPWS_SYS_OFF,bool) ! (>L:A32NX_GPWS_SYS_OFF)
GPWS_Terr_Off_Toggle#(L:A32NX_GPWS_TERR_OFF,bool) ! (>L:A32NX_GPWS_TERR_OFF)
//Fly By Wire/A320/ISIS
ISIS_PUSH_BUGS#(>H: A32NX_ISIS_BUGS_PRESSED) (L:A32NX_ISIS_BUGS_ACTIVE) ! (>L:A32NX_ISIS_BUGS_ACTIVE)
ISIS_KNOB_ANTICLOCKWISE#(L:A32NX_ISIS_BUGS_ACTIVE, enum) 1 == if{  0 (>H:A32NX_ISIS_KNOB_ANTI_CLOCKWISE) } els{  (L:A32NX_ISIS_BARO_MODE, enum) 1 != if{  2 (>K:KOHLSMAN_DEC)  } }
ISIS_KNOB_CLOCKWISE#(L:A32NX_ISIS_BUGS_ACTIVE, enum) 1 == if{  0 (>H:A32NX_ISIS_KNOB_CLOCKWISE) } els{  (L:A32NX_ISIS_BARO_MODE, enum) 1 != if{  2 (>K:KOHLSMAN_INC)  } }
ISIS_KNOB_PRESSED#(L:A32NX_ISIS_BUGS_ACTIVE, bool) if{  0 (>H:A32NX_ISIS_KNOB_PRESSED, number) } els{  (L:A32NX_ISIS_BARO_MODE, enum) 0 == if{  1 (>L:A32NX_ISIS_BARO_MODE, enum) (A:KOHLSMAN SETTING MB:2, bars) 16000 * (>0:A32NX_ISIS_BARO_SAVED, number)  2 16211 (>K:2:KOHLSMAN_SET)  } els{  0 (>L:A32NX_ISIS_BARO_MODE, enum)  2 (0:A32NX_ISIS_BARO_SAVED, number) (>K:2:KOHLSMAN_SET)  } }
ISIS_PUSH_LS#(>H:A32NX_ISIS_LS_PRESSED) (L:A32NX_ISIS_LS_ACTIVE) ! (>L:A32NX_ISIS_LS_ACTIVE)
ISIS_PUSH_MINUS#0 (>H:A32NX_ISIS_MINUS_PRESSED)
ISIS_PUSH_PLUS#0 (>H:A32NX_ISIS_PLUS_PRESSED)
ISIS_PUSH_RST#0 (>H:A32NX_ISIS_RST_PRESSED)
//Fly By Wire/A320/Air Condition / Pressurization
A320_Neo_AIRCOND_LVL_1_100#100 (>L:A320_Neo_AIRCOND_LVL_1)
A320_Neo_AIRCOND_LVL_1_25#25 (>L:A320_Neo_AIRCOND_LVL_1)
A320_Neo_AIRCOND_LVL_1_50#50 (>L:A320_Neo_AIRCOND_LVL_1)
A320_Neo_AIRCOND_LVL_1_75#75 (>L:A320_Neo_AIRCOND_LVL_1)
A320_Neo_AIRCOND_LVL_1_OFF#0 (>L:A320_Neo_AIRCOND_LVL_1)
A320_Neo_AIRCOND_LVL_2_100#100 (>L:A320_Neo_AIRCOND_LVL_2)
A320_Neo_AIRCOND_LVL_2_25#25 (>L:A320_Neo_AIRCOND_LVL_2)
A320_Neo_AIRCOND_LVL_2_50#50 (>L:A320_Neo_AIRCOND_LVL_2)
A320_Neo_AIRCOND_LVL_2_75#75 (>L:A320_Neo_AIRCOND_LVL_2)
A320_Neo_AIRCOND_LVL_2_OFF#0 (>L:A320_Neo_AIRCOND_LVL_2)
A320_Neo_AIRCOND_LVL_3_100#100 (>L:A320_Neo_AIRCOND_LVL_3)
A320_Neo_AIRCOND_LVL_3_25#25 (>L:A320_Neo_AIRCOND_LVL_3)
A320_Neo_AIRCOND_LVL_3_50#50 (>L:A320_Neo_AIRCOND_LVL_3)
A320_Neo_AIRCOND_LVL_3_75#75 (>L:A320_Neo_AIRCOND_LVL_3)
A320_Neo_AIRCOND_LVL_3_OFF#0 (>L:A320_Neo_AIRCOND_LVL_3)
A32NX_AIRCOND_HOTAIR_TOGGLE_OFF#0 (>L:A32NX_AIRCOND_HOTAIR_TOGGLE)
A32NX_AIRCOND_HOTAIR_TOGGLE_ON#1 (>L:A32NX_AIRCOND_HOTAIR_TOGGLE)
A32NX_AIRCOND_PACK1_TOGGLE_OFF#0 (>L:A32NX_AIRCOND_PACK1_TOGGLE)
A32NX_AIRCOND_PACK1_TOGGLE_ON#1 (>L:A32NX_AIRCOND_PACK1_TOGGLE)
A32NX_AIRCOND_PACK2_TOGGLE_OFF#0 (>L:A32NX_AIRCOND_PACK2_TOGGLE)
A32NX_AIRCOND_PACK2_TOGGLE_ON#1 (>L:A32NX_AIRCOND_PACK2_TOGGLE)
A32NX_AIRCOND_RAMAIR_TOGGLE_OFF#0 (>L:A32NX_AIRCOND_RAMAIR_TOGGLE)
A32NX_AIRCOND_RAMAIR_TOGGLE_ON#1 (>L:A32NX_AIRCOND_RAMAIR_TOGGLE)
A32NX_APU_BLEED_OFF_OFF#0 (>L:A32NX_APU_BLEED_OFF)
A32NX_APU_BLEED_ON_ON#1 (>L:A32NX_APU_BLEED_ON)
A32NX_KNOB_OVHD_AIRCOND_PACKFLOW_Position_HIGH#2 (>L:A32NX_KNOB_OVHD_AIRCOND_PACKFLOW_Position)
A32NX_KNOB_OVHD_AIRCOND_PACKFLOW_Position_LOW#0 (>L:A32NX_KNOB_OVHD_AIRCOND_PACKFLOW_Position)
A32NX_KNOB_OVHD_AIRCOND_PACKFLOW_Position_MED#1 (>L:A32NX_KNOB_OVHD_AIRCOND_PACKFLOW_Position)
A32NX_KNOB_OVHD_AIRCOND_XBLEED_Position_AUTO#1 (>L:A32NX_KNOB_OVHD_AIRCOND_XBLEED_Position)
A32NX_KNOB_OVHD_AIRCOND_XBLEED_Position_OPEN#2 (>L:A32NX_KNOB_OVHD_AIRCOND_XBLEED_Position)
A32NX_KNOB_OVHD_AIRCOND_XBLEED_Position_SHUT#0 (>L:A32NX_KNOB_OVHD_AIRCOND_XBLEED_Position)
A32NX_OH_AC_ENG1BLEED_TOG#1 (>K:ENGINE_BLEED_AIR_SOURCE_TOGGLE) (L:XMLVAR_Momentary_PUSH_OVHD_AIRCOND_ENG1BLEED_Pressed) ! (>L:XMLVAR_Momentary_PUSH_OVHD_AIRCOND_ENG1BLEED_Pressed)
A32NX_OH_AC_ENG2BLEED_TOG#2 (>K:ENGINE_BLEED_AIR_SOURCE_TOGGLE) (L:XMLVAR_Momentary_PUSH_OVHD_AIRCOND_ENG2BLEED_Pressed) ! (>L:XMLVAR_Momentary_PUSH_OVHD_AIRCOND_ENG2BLEED_Pressed)
A32NX_OH_APU_BLEED_TOG#(L:A32NX_OVHD_PNEU_APU_BLEED_PB_IS_ON, Bool) ! (>L:A32NX_OVHD_PNEU_APU_BLEED_PB_IS_ON, Bool)
PUSH_OVHD_OXYGEN_CREW_TOGGLE#(L:PUSH_OVHD_OXYGEN_CREW, Bool) ! (>L:PUSH_OVHD_OXYGEN_CREW)
PUSH_OVHD_OXYGEN_CREW_OFF#0 (>L:PUSH_OVHD_OXYGEN_CREW)
PUSH_OVHD_OXYGEN_CREW_ON#1 (>L:PUSH_OVHD_OXYGEN_CREW)
XMLVAR_Momentary_PUSH_OVHD_AIRCOND_ENG1BLEED_Pressed_PRESSED#1 (>L:XMLVAR_Momentary_PUSH_OVHD_AIRCOND_ENG1BLEED_Pressed)
XMLVAR_Momentary_PUSH_OVHD_AIRCOND_ENG1BLEED_Released_RELEASED#0 (>L:XMLVAR_Momentary_PUSH_OVHD_AIRCOND_ENG1BLEED_Released)
XMLVAR_Momentary_PUSH_OVHD_AIRCOND_ENG2BLEED_Pressed_PRESSED#1 (>L:XMLVAR_Momentary_PUSH_OVHD_AIRCOND_ENG2BLEED_Pressed)
XMLVAR_Momentary_PUSH_OVHD_AIRCOND_ENG2BLEED_Released_RELEASED#0 (>L:XMLVAR_Momentary_PUSH_OVHD_AIRCOND_ENG2BLEED_Released)
//Fly By Wire/A320/Anti-Ice
A32NX_MAN_PITOT_HEAT_OFF#0 (>L:A32NX_MAN_PITOT_HEAT)
A32NX_MAN_PITOT_HEAT_ON#1 (>L:A32NX_MAN_PITOT_HEAT)
A32NX_OH_ANTIICE_ENG1_TOG#(>K:ANTI_ICE_TOGGLE_ENG1) (L:XMLVAR_Momentary_PUSH_OVHD_ANTIICE_ENG1_Pressed) ! (>L:XMLVAR_Momentary_PUSH_OVHD_ANTIICE_ENG1_Pressed)
A32NX_OH_ANTIICE_ENG2_TOG#(>K:ANTI_ICE_TOGGLE_ENG2) (L:XMLVAR_Momentary_PUSH_OVHD_ANTIICE_ENG2_Pressed) ! (>L:XMLVAR_Momentary_PUSH_OVHD_ANTIICE_ENG2_Pressed)
XMLVAR_Momentary_PUSH_OVHD_ANTIICE_ENG1_Pressed_PRESSED#1 (>L:XMLVAR_Momentary_PUSH_OVHD_ANTIICE_ENG1_Pressed)
XMLVAR_Momentary_PUSH_OVHD_ANTIICE_ENG1_Pressed_RELEASED#0 (>L:XMLVAR_Momentary_PUSH_OVHD_ANTIICE_ENG1_Pressed)
XMLVAR_Momentary_PUSH_OVHD_ANTIICE_ENG2_Pressed_PRESSED#1 (>L:XMLVAR_Momentary_PUSH_OVHD_ANTIICE_ENG2_Pressed)
XMLVAR_Momentary_PUSH_OVHD_ANTIICE_ENG2_Pressed_RELEASED#0 (>L:XMLVAR_Momentary_PUSH_OVHD_ANTIICE_ENG2_Pressed)
XMLVAR_Momentary_PUSH_OVHD_ANTIICE_WING_Pressed_PRESSED#1 (>L:XMLVAR_Momentary_PUSH_OVHD_ANTIICE_WING_Pressed)
XMLVAR_Momentary_PUSH_OVHD_ANTIICE_WING_Pressed_RELEASED#0 (>L:XMLVAR_Momentary_PUSH_OVHD_ANTIICE_WING_Pressed)
//Fly By Wire/A320/Autopilot
A320NX_APPR#(L:A32NX_AUTOPILOT_APPR_MODE, bool) if{ 0 (>L:A32NX_AUTOPILOT_APPR_MODE) (>K:AP_LOC_HOLD_ON) (>K:AP_LOC_HOLD_OFF) } els{ 1 (>L:A32NX_AUTOPILOT_APPR_MODE) 0 (>L:A32NX_AUTOPILOT_LOC_MODE) (>K:AP_APR_HOLD_ON) }
A320NX_LOC#(L:A32NX_AUTOPILOT_LOC_MODE, bool) if{ 0 (>L:A32NX_AUTOPILOT_APPR_MODE) 0 (>L:A32NX_AUTOPILOT_LOC_MODE) (>K:AP_LOC_HOLD) } els{ 0 (>L:A32NX_AUTOPILOT_APPR_MODE) 1 (>L:A32NX_AUTOPILOT_LOC_MODE) (>K:AP_LOC_HOLD) }
A320NX_METRIC_ALT_TOGGLE#(L:A32NX_METRIC_ALT_TOGGLE, bool) ! (>L:A32NX_METRIC_ALT_TOGGLE)
A320_Neo_CDU_MODE_MANAGED_SPEED#(>H:A320_Neo_CDU_MODE_MANAGED_SPEED)
A320_Neo_CDU_MODE_SELECTED_SPEED#(>H:A320_Neo_CDU_MODE_SELECTED_SPEED)
A320_Neo_EXPEDITE_MODE#(>H:A320_Neo_EXPEDITE_MODE)
A320_Neo_FCU_ALT_PULL#(>H:A320_Neo_FCU_ALT_PULL) (>H:A320_Neo_CDU_MODE_SELECTED_ALTITUDE)
A320_Neo_FCU_ALT_PUSH#(>H:A320_Neo_FCU_ALT_PUSH) (>H:A320_Neo_CDU_MODE_MANAGED_ALTITUDE)
A320_Neo_FCU_MODE_MANAGED_SPEED#(>H:A320_Neo_FCU_MODE_MANAGED_SPEED)
A320_Neo_FCU_SPEED_DEC#(L:XMLVAR_AirSpeedIsInMach) if{ 1 (>K:AP_MACH_VAR_DEC) } els{ 1 (>K:AP_SPD_VAR_DEC) } (>H:A320_Neo_CDU_AP_DEC_SPEED)
A320_Neo_FCU_SPEED_INC#(L:XMLVAR_AirSpeedIsInMach) if{ 1 (>K:AP_MACH_VAR_INC) } els{ 1 (>K:AP_SPD_VAR_INC) } (>H:A320_Neo_CDU_AP_INC_SPEED)
A320_Neo_FCU_SPEED_PULL#(>H:A320_Neo_FCU_SPEED_PULL)
A320_Neo_FCU_SPEED_PUSH#(>H:A320_Neo_FCU_SPEED_PUSH)
A320_Neo_FCU_SPEED_PUSH_PULL_TOG#(A:AUTOPILOT SPEED SLOT INDEX, Number) 1 == if{ (>K:A32NX.FCU_SPD_PUSH) } els{ (>K:A32NX.FCU_SPD_PULL) }
A320_Neo_FCU_SPEED_TOGGLE_SPEED_MACH#(>H:A320_Neo_FCU_SPEED_TOGGLE_SPEED_MACH)
A320_Neo_FCU_VS_DEC# (L:A32NX_TRK_FPA_MODE_ACTIVE, bool) 1 == if{ (>H:A320_Neo_FCU_AP_DEC_FPA) } els{ 3 (>K:AP_VS_VAR_DEC) (>H:A320_Neo_FCU_VS_DEC) }
A320_Neo_FCU_VS_INC# (L:A32NX_TRK_FPA_MODE_ACTIVE, bool) 1 == if{ (>H:A320_Neo_FCU_AP_INC_FPA) } els{ 3 (>K:AP_VS_VAR_INC) (>H:A320_Neo_FCU_VS_INC) }
A320_Neo_FCU_VS_PULL#(>H:A320_Neo_FCU_VS_PULL) (>H:A320_Neo_CDU_VS)
A320_Neo_FCU_VS_PUSH#(>H:A320_Neo_FCU_VS_PUSH) (>H:A320_Neo_CDU_VS)
A320_Neo_FCU_VS_PUSH_PULL_TOG#(L:MF_VS_TOG,Bool) if{ (>H:A320_Neo_FCU_VS_ZERO) } els{ (>H:A320_Neo_FCU_VS_HOLD) } (L:MF_VS_TOG,Bool) ! (>L:MF_VS_TOG,Bool)
A32NX_AP_MANAGED_SPEED_IN_MACH_TOGGLE#(>K:AP_MANAGED_SPEED_IN_MACH_TOGGLE)
A32NX_FCU_ALT_DEC#3 (A:AUTOPILOT ALTITUDE LOCK VAR:3, feet) (L:XMLVAR_Autopilot_Altitude_Increment) - (L:XMLVAR_Autopilot_Altitude_Increment) (A:AUTOPILOT ALTITUDE LOCK VAR:3, feet) (L:XMLVAR_Autopilot_Altitude_Increment) % - (L:XMLVAR_Autopilot_Altitude_Increment) % + 100 max (>K:2:AP_ALT_VAR_SET_ENGLISH) (>H:AP_KNOB_Down) (>H:A320_Neo_CDU_AP_DEC_ALT)
A32NX_FCU_ALT_DEC100#3 (A:AUTOPILOT ALTITUDE LOCK VAR:3, feet) 100 - 100 (A:AUTOPILOT ALTITUDE LOCK VAR:3, feet) 100 % - 100 % + 100 max (>K:2:AP_ALT_VAR_SET_ENGLISH) (>H:AP_KNOB_Down) (>H:A320_Neo_CDU_AP_DEC_ALT)
A32NX_FCU_ALT_DEC1000#3 (A:AUTOPILOT ALTITUDE LOCK VAR:3, feet) 1000 - 1000 (A:AUTOPILOT ALTITUDE LOCK VAR:3, feet) 1000 % - 1000 % + 1000 max (>K:2:AP_ALT_VAR_SET_ENGLISH) (>H:AP_KNOB_Down) (>H:A320_Neo_CDU_AP_DEC_ALT)
A32NX_FCU_ALT_INC#3 (A:AUTOPILOT ALTITUDE LOCK VAR:3, feet) (L:XMLVAR_Autopilot_Altitude_Increment) + (A:AUTOPILOT ALTITUDE LOCK VAR:3, feet) (L:XMLVAR_Autopilot_Altitude_Increment) % - 49000 min (>K:2:AP_ALT_VAR_SET_ENGLISH) (>H:AP_KNOB_Up) (>H:A320_Neo_CDU_AP_INC_ALT)
A32NX_FCU_ALT_INC100#3 (A:AUTOPILOT ALTITUDE LOCK VAR:3, feet) 100 + (A:AUTOPILOT ALTITUDE LOCK VAR:3, feet) 100 % - 49000 min (>K:2:AP_ALT_VAR_SET_ENGLISH) (>H:AP_KNOB_Up) (>H:A320_Neo_CDU_AP_INC_ALT)
A32NX_FCU_ALT_INC1000#3 (A:AUTOPILOT ALTITUDE LOCK VAR:3, feet) 1000 + (A:AUTOPILOT ALTITUDE LOCK VAR:3, feet) 1000 % - 49000 min (>K:2:AP_ALT_VAR_SET_ENGLISH) (>H:AP_KNOB_Up) (>H:A320_Neo_CDU_AP_INC_ALT)
ATHR_Disconnect_Push#(>K:A32NX.FCU_ATHR_DISCONNECT_PUSH)
ATHR_Push#(>K:A32NX.FCU_ATHR_PUSH)
Autopilot_1_Push#(>K:A32NX.FCU_AP_1_PUSH)
Autopilot_2_Push#(>K:A32NX.FCU_AP_2_PUSH)
Autopilot_Disconnect_Push#(>K:A32NX.FCU_AP_DISCONNECT_PUSH)
Autopilot_Altitude_Increment_TOGGLE#(L:XMLVAR_Autopilot_Altitude_Increment) 100 == if{ 1000 } els{ 100 } (>L:XMLVAR_Autopilot_Altitude_Increment)
HDG_Decrease#(>K:A32NX.FCU_HDG_DEC)
HDG_Increase#(>K:A32NX.FCU_HDG_INC)
HDG_Pull#(>K:A32NX.FCU_HDG_PULL)
HDG_Push#(>K:A32NX.FCU_HDG_PUSH)
HDG_Push_Pull_Toggle#(A:AUTOPILOT HEADING SLOT INDEX, Number) 1 == if{ (>K:A32NX.FCU_HDG_PUSH) } els{ (>K:A32NX.FCU_HDG_PULL) }
HDG_Set#(>K:A32NX.FCU_HDG_SET)
A320NX_APPR_PUSH#(>H:A320_Neo_FCU_APPR_PUSH)
A320_Neo_FCU_ALT_PUSH_PULL_TOG#(A:AUTOPILOT ALTITUDE SLOT INDEX, Number) 1 == if{ (>H:A320_Neo_FCU_ALT_PUSH) (>H:A320_Neo_CDU_MODE_MANAGED_ALTITUDE) } els{ (>H:A320_Neo_FCU_ALT_PULL) (>H:A320_Neo_CDU_MODE_SELECTED_ALTITUDE) }
SPD_Decrease#(>K:A32NX.FCU_SPD_DEC)
SPD_Increase#(>K:A32NX.FCU_SPD_INC)
SPD_MACH_Toggle#(>K:A32NX.FCU_SPD_MACH_TOGGLE_PUSH)
SPD_Pull#(>K:A32NX.FCU_SPD_PULL)
SPD_Push#(>K:A32NX.FCU_SPD_PUSH)
SPD_Set#(>K:A32NX.FCU_SPD_SET)
TRK_FPA_Mode_Toggle#(>K:A32NX.FCU_TRK_FPA_TOGGLE_PUSH)
XMLVAR_Autopilot_Altitude_Increment_1000Feet#1000 (>L:XMLVAR_Autopilot_Altitude_Increment)
XMLVAR_Autopilot_Altitude_Increment_100Feet#100 (>L:XMLVAR_Autopilot_Altitude_Increment)
//Fly By Wire/A320/Avionics
PUSH_AUTOPILOT_CHRONO_L#(L:PUSH_AUTOPILOT_CHRONO_L) ! (>L:PUSH_AUTOPILOT_CHRONO_L)
//Fly By Wire/A320/ECAM
A320_Neo_EICAS_2_ECAM_CHANGE_PAGE_APU#(>H:A320_Neo_EICAS_2_ECAM_CHANGE_PAGE_APU)
A320_Neo_EICAS_2_ECAM_CHANGE_PAGE_BLEED#(>H:A320_Neo_EICAS_2_ECAM_CHANGE_PAGE_BLEED)
A320_Neo_EICAS_2_ECAM_CHANGE_PAGE_COND#(>H:A320_Neo_EICAS_2_ECAM_CHANGE_PAGE_COND)
A320_Neo_EICAS_2_ECAM_CHANGE_PAGE_DOOR#(>H:A320_Neo_EICAS_2_ECAM_CHANGE_PAGE_DOOR)
A320_Neo_EICAS_2_ECAM_CHANGE_PAGE_ELEC#(>H:A320_Neo_EICAS_2_ECAM_CHANGE_PAGE_ELEC)
A320_Neo_EICAS_2_ECAM_CHANGE_PAGE_ENG#(>H:A320_Neo_EICAS_2_ECAM_CHANGE_PAGE_ENG)
A320_Neo_EICAS_2_ECAM_CHANGE_PAGE_FTCL#(>H:A320_Neo_EICAS_2_ECAM_CHANGE_PAGE_FTCL)
A320_Neo_EICAS_2_ECAM_CHANGE_PAGE_FUEL#(>H:A320_Neo_EICAS_2_ECAM_CHANGE_PAGE_FUEL)
A320_Neo_EICAS_2_ECAM_CHANGE_PAGE_HYD#(>H:A320_Neo_EICAS_2_ECAM_CHANGE_PAGE_HYD)
A320_Neo_EICAS_2_ECAM_CHANGE_PAGE_PRESS#(>H:A320_Neo_EICAS_2_ECAM_CHANGE_PAGE_PRESS)
A320_Neo_EICAS_2_ECAM_CHANGE_PAGE_STS#(>H:A320_Neo_EICAS_2_ECAM_CHANGE_PAGE_STS)
A320_Neo_EICAS_2_ECAM_CHANGE_PAGE_WHEEL#(>H:A320_Neo_EICAS_2_ECAM_CHANGE_PAGE_WHEEL)
A32NX_BTN_CLR2_PRESSED#1 (>L:A32NX_BTN_CLR2)
A32NX_BTN_CLR2_RELEASED#0 (>L:A32NX_BTN_CLR2)
A32NX_BTN_CLR_PRESSED#1 (>L:A32NX_BTN_CLR)
A32NX_BTN_CLR_RELEASED#0 (>L:A32NX_BTN_CLR)
A32NX_BTN_EMERCANC_PRESSED#1 (>L:A32NX_BTN_EMERCANC_PRESSED)
A32NX_BTN_EMERCANC_RELEASED#0 (>L:A32NX_BTN_EMERCANC_PRESSED)
A32NX_BTN_RCL_PRESSED#1 (>L:A32NX_BTN_RCL)
A32NX_BTN_RCL_RELEASED#0 (>L:A32NX_BTN_RCL)
A32NX_BTN_TOCONFIG_PRESSED#1 (>L:A32NX_BTN_TOCONFIG)
A32NX_BTN_TOCONFIG_RELEASED#0 (>L:A32NX_BTN_TOCONFIG)
A32NX_ECAM_ALL_Push_IsDown_PRESSED#1 (>L:A32NX_ECAM_ALL_Push_IsDown)
A32NX_ECAM_ALL_Push_IsDown_RELEASED#0 (>L:A32NX_ECAM_ALL_Push_IsDown)
A32NX_ECAM_BTN_TOCONFIG_Push#1 (>L:A32NX_BTN_TOCONFIG)
//Fly By Wire/A320/EFIS
A320_Neo_MFD_BTN_ARPT_1#(>H:A320_Neo_MFD_BTN_ARPT_1)
A320_Neo_MFD_BTN_ARPT_2#(>H:A320_Neo_MFD_BTN_ARPT_2)
A320_Neo_MFD_BTN_CSTR_1#(>H:A320_Neo_MFD_BTN_CSTR_1)
A320_Neo_MFD_BTN_CSTR_2#(>H:A320_Neo_MFD_BTN_CSTR_2)
A320_Neo_MFD_BTN_NDB_1#(>H:A320_Neo_MFD_BTN_NDB_1)
A320_Neo_MFD_BTN_NDB_2#(>H:A320_Neo_MFD_BTN_NDB_2)
A320_Neo_MFD_BTN_VORD_1#(>H:A320_Neo_MFD_BTN_VORD_1)
A320_Neo_MFD_BTN_VORD_2#(>H:A320_Neo_MFD_BTN_VORD_2)
A320_Neo_MFD_BTN_WPT_1#(>H:A320_Neo_MFD_BTN_WPT_1)
A320_Neo_MFD_BTN_WPT_2#(>H:A320_Neo_MFD_BTN_WPT_2)
A320_Neo_MFD_NAV_MODE_1_ARC#3 (>L:A320_Neo_MFD_NAV_MODE_1)
A320_Neo_MFD_NAV_MODE_1_DEC#(L:A320_Neo_MFD_NAV_MODE_1) 0 > if{ (L:A320_Neo_MFD_NAV_MODE_1) 1 - (>L:A320_Neo_MFD_NAV_MODE_1) }
A320_Neo_MFD_NAV_MODE_1_INC#(L:A320_Neo_MFD_NAV_MODE_1) 4 < if{ (L:A320_Neo_MFD_NAV_MODE_1) 1 + (>L:A320_Neo_MFD_NAV_MODE_1) }
A320_Neo_MFD_NAV_MODE_1_LS#0 (>L:A320_Neo_MFD_NAV_MODE_1)
A320_Neo_MFD_NAV_MODE_1_NAV#2 (>L:A320_Neo_MFD_NAV_MODE_1)
A320_Neo_MFD_NAV_MODE_1_PLAN#4 (>L:A320_Neo_MFD_NAV_MODE_1)
A320_Neo_MFD_NAV_MODE_1_VOR#1 (>L:A320_Neo_MFD_NAV_MODE_1)
A320_Neo_MFD_NAV_MODE_2_ARC#3 (>L:A320_Neo_MFD_NAV_MODE_2)
A320_Neo_MFD_NAV_MODE_2_DEC#(L:A320_Neo_MFD_NAV_MODE_2) 0 > if{ 1 if{ (L:A320_Neo_MFD_NAV_MODE_2) 1 - (>L:A320_Neo_MFD_NAV_MODE_2) } }
A320_Neo_MFD_NAV_MODE_2_INC#(L:A320_Neo_MFD_NAV_MODE_2) 4 < if{ 1 if{ (L:A320_Neo_MFD_NAV_MODE_2) 1 + (>L:A320_Neo_MFD_NAV_MODE_2) } }
A320_Neo_MFD_NAV_MODE_2_LS#0 (>L:A320_Neo_MFD_NAV_MODE_2)
A320_Neo_MFD_NAV_MODE_2_NAV#2 (>L:A320_Neo_MFD_NAV_MODE_2)
A320_Neo_MFD_NAV_MODE_2_PLAN#4 (>L:A320_Neo_MFD_NAV_MODE_2)
A320_Neo_MFD_NAV_MODE_2_VOR#1 (>L:A320_Neo_MFD_NAV_MODE_2)
A320_Neo_MFD_Range_1_10#0 (>L:A320_Neo_MFD_Range_1)
A320_Neo_MFD_Range_1_160#4 (>L:A320_Neo_MFD_Range_1)
A320_Neo_MFD_Range_1_20#1 (>L:A320_Neo_MFD_Range_1)
A320_Neo_MFD_Range_1_320#5 (>L:A320_Neo_MFD_Range_1)
A320_Neo_MFD_Range_1_40#2 (>L:A320_Neo_MFD_Range_1)
A320_Neo_MFD_Range_1_80#3 (>L:A320_Neo_MFD_Range_1)
A320_Neo_MFD_Range_1_DEC#(L:A320_Neo_MFD_Range_1) 0 > if{ (L:A320_Neo_MFD_Range_1) 1 - (>L:A320_Neo_MFD_Range_1) }
A320_Neo_MFD_Range_1_INC#(L:A320_Neo_MFD_Range_1) 5 < if{ (L:A320_Neo_MFD_Range_1) 1 + (>L:A320_Neo_MFD_Range_1) }
A320_Neo_MFD_Range_2_10#0 (>L:A320_Neo_MFD_Range_2)
A320_Neo_MFD_Range_2_160#4 (>L:A320_Neo_MFD_Range_2)
A320_Neo_MFD_Range_2_20#1 (>L:A320_Neo_MFD_Range_2)
A320_Neo_MFD_Range_2_320#5 (>L:A320_Neo_MFD_Range_2)
A320_Neo_MFD_Range_2_40#2 (>L:A320_Neo_MFD_Range_2)
A320_Neo_MFD_Range_2_80#3 (>L:A320_Neo_MFD_Range_2)
A320_Neo_MFD_Range_2_DEC#(L:A320_Neo_MFD_Range_2) 0 > if{ 1 if{ (L:A320_Neo_MFD_Range_2) 1 - (>L:A320_Neo_MFD_Range_2) } }
A320_Neo_MFD_Range_2_INC#(L:A320_Neo_MFD_Range_2) 5 < if{ 1 if{ (L:A320_Neo_MFD_Range_2) 1 + (>L:A320_Neo_MFD_Range_2) } }
A320_Neo_PFD_BTN_LS_1#1 (>H:A320_Neo_PFD_BTN_LS_1, boolean)
A320_Neo_PFD_BTN_LS_2#(>H:A320_Neo_PFD_BTN_LS_2)
A32NX_BARO_MODE_TOG3#(L:XMLVAR_Baro1_Mode) ++ 3 % (>L:XMLVAR_Baro1_Mode)
A32NX_BARO_SELECT_HPA#1 (>L:XMLVAR_Baro_Selector_HPA_1)
A32NX_BARO_SELECT_INHG#0 (>L:XMLVAR_Baro_Selector_HPA_1)
A32NX_BARO_SELECT_TOG#(L:XMLVAR_Baro_Selector_HPA_1) ! (>L:XMLVAR_Baro_Selector_HPA_1)
A32NX_EFIS_FD2_PUSH#2 (>K:TOGGLE_FLIGHT_DIRECTOR)
A32NX_EFIS_FD_PUSH#1 (>K:TOGGLE_FLIGHT_DIRECTOR)
Baro_decrease#(>K:KOHLSMAN_DEC)
Baro_increase#(>K:KOHLSMAN_INC)
Toggle_Flight_Director#(>K:TOGGLE_FLIGHT_DIRECTOR)
XMLVAR_Baro1_Mode_QFE#0 (>L:XMLVAR_Baro1_Mode)
XMLVAR_Baro1_Mode_QNH#1 (>L:XMLVAR_Baro1_Mode)
XMLVAR_Baro1_Mode_STD#2 (>L:XMLVAR_Baro1_Mode)
XMLVAR_Baro2_Mode_QFE#0 (>L:XMLVAR_Baro2_Mode)
XMLVAR_Baro2_Mode_QNH#1 (>L:XMLVAR_Baro2_Mode)
XMLVAR_Baro2_Mode_STD#2 (>L:XMLVAR_Baro2_Mode)
XMLVAR_NAV_AID_SWITCH_L1_State_ADF#1 (>L:XMLVAR_NAV_AID_SWITCH_L1_State)
XMLVAR_NAV_AID_SWITCH_L1_State_Off#0 (>L:XMLVAR_NAV_AID_SWITCH_L1_State)
XMLVAR_NAV_AID_SWITCH_L1_State_VOR#2 (>L:XMLVAR_NAV_AID_SWITCH_L1_State)
XMLVAR_NAV_AID_SWITCH_L2_State_ADF#1 (>L:XMLVAR_NAV_AID_SWITCH_L2_State)
XMLVAR_NAV_AID_SWITCH_L2_State_Off#0 (>L:XMLVAR_NAV_AID_SWITCH_L2_State)
XMLVAR_NAV_AID_SWITCH_L2_State_VOR#2 (>L:XMLVAR_NAV_AID_SWITCH_L2_State)
XMLVAR_NAV_AID_SWITCH_R1_State_ADF#1 (>L:XMLVAR_NAV_AID_SWITCH_R1_State)
XMLVAR_NAV_AID_SWITCH_R1_State_Off#0 (>L:XMLVAR_NAV_AID_SWITCH_R1_State)
XMLVAR_NAV_AID_SWITCH_R1_State_VOR#2 (>L:XMLVAR_NAV_AID_SWITCH_R1_State)
XMLVAR_NAV_AID_SWITCH_R2_State_ADF#1 (>L:XMLVAR_NAV_AID_SWITCH_R2_State)
XMLVAR_NAV_AID_SWITCH_R2_State_Off#0 (>L:XMLVAR_NAV_AID_SWITCH_R2_State)
XMLVAR_NAV_AID_SWITCH_R2_State_VOR#2 (>L:XMLVAR_NAV_AID_SWITCH_R2_State)
//Fly By Wire/A320/Electrical
A32NX_APU_MASTER_SW#(L:A32NX_OVHD_APU_MASTER_SW_PB_IS_ON, Bool) if{ 0 (>L:A32NX_OVHD_APU_MASTER_SW_PB_IS_ON) } els{ (A:ELECTRICAL MAIN BUS VOLTAGE, Volts) 20 > if{ 1 (>L:A32NX_OVHD_APU_MASTER_SW_PB_IS_ON) } } (L:XMLVAR_Momentary_PUSH_OVHD_MASTERSW_Pressed) ! (>L:XMLVAR_Momentary_PUSH_OVHD_MASTERSW_Pressed)
A32NX_APU_START#(A:ELECTRICAL MAIN BUS VOLTAGE, Volts) 20 > (L:A32NX_OVHD_APU_MASTER_SW_PB_IS_ON, Bool) and if{ 1 (>L:A32NX_OVHD_APU_START_PB_IS_ON) }
A32NX_ELEC_ACESSFEED_TOGGLE_ALTN#0 (>L:A32NX_ELEC_ACESSFEED_TOGGLE)
A32NX_ELEC_ACESSFEED_TOGGLE_ON#1 (>L:A32NX_ELEC_ACESSFEED_TOGGLE)
A32NX_ELEC_BUSTIE_TOGGLE_AUTO#1 (>L:A32NX_ELEC_BUSTIE_TOGGLE)
A32NX_ELEC_BUSTIE_TOGGLE_OFF#0 (>L:A32NX_ELEC_BUSTIE_TOGGLE)
A32NX_ELEC_COMMERCIAL_TOGGLE_OFF#0 (>L:A32NX_ELEC_COMMERCIAL_TOGGLE)
A32NX_ELEC_COMMERCIAL_TOGGLE_ON#1 (>L:A32NX_ELEC_COMMERCIAL_TOGGLE)
A32NX_ELEC_GALYCAB_TOGGLE_AUTO#1 (>L:A32NX_ELEC_GALYCAB_TOGGLE)
A32NX_ELEC_GALYCAB_TOGGLE_OFF#0 (>L:A32NX_ELEC_GALYCAB_TOGGLE)
A32NX_ELEC_IDG1_FAULT_PRESSED#1 (>L:A32NX_ELEC_IDG1_FAULT)
A32NX_ELEC_IDG1_FAULT_RELEASED#0 (>L:A32NX_ELEC_IDG1_FAULT)
A32NX_ELEC_IDG2_FAULT_PRESSED#1 (>L:A32NX_ELEC_IDG2_FAULT)
A32NX_ELEC_IDG2_FAULT_RELEASED#0 (>L:A32NX_ELEC_IDG2_FAULT)
A32NX_EMERELECPWR_EMERTESTLOCK_TOGGLE_OFF#0 (>L:A32NX_EMERELECPWR_EMERTESTLOCK_TOGGLE)
A32NX_EMERELECPWR_EMERTESTLOCK_TOGGLE_ON#1 (>L:A32NX_EMERELECPWR_EMERTESTLOCK_TOGGLE)
A32NX_EMERELECPWR_GEN1_TOGGLE_OFF#0 (>L:A32NX_EMERELECPWR_GEN1_TOGGLE)
A32NX_EMERELECPWR_GEN1_TOGGLE_ON#1 (>L:A32NX_EMERELECPWR_GEN1_TOGGLE)
A32NX_EMERELECPWR_MANONLOCK_TOGGLE_AUTO#0 (>L:A32NX_EMERELECPWR_MANONLOCK_TOGGLE)
A32NX_EMERELECPWR_MANONLOCK_TOGGLE_MAN#1 (>L:A32NX_EMERELECPWR_MANONLOCK_TOGGLE)
A32NX_OH_ELEC_APUGEN_TOG#1 (>K:APU_GENERATOR_SWITCH_TOGGLE) (L:XMLVAR_Momentary_PUSH_OVHD_ELEC_APUGEN_Pressed) ! (>L:XMLVAR_Momentary_PUSH_OVHD_ELEC_APUGEN_Pressed)
A32NX_OH_ELEC_BAT1_TOG#10 6 (>K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE) 10 (>A:BUS LOOKUP INDEX, Number) (A:BUS CONNECTION ON:6, Bool) ! if{ 0 } els{ 1 } (>L:A32NX_OVHD_ELEC_BAT_10_PB_IS_AUTO) (L:XMLVAR_Momentary_PUSH_OVHD_ELEC_BAT1_Pressed) ! (>L:XMLVAR_Momentary_PUSH_OVHD_ELEC_BAT1_Pressed)
A32NX_OH_ELEC_BAT2_TOG#11 6 (>K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE) 11 (>A:BUS LOOKUP INDEX, Number) (A:BUS CONNECTION ON:6, Bool) ! if{ 0 } els{ 1 } (>L:A32NX_OVHD_ELEC_BAT_11_PB_IS_AUTO) (L:XMLVAR_Momentary_PUSH_OVHD_ELEC_BAT2_Pressed) ! (>L:XMLVAR_Momentary_PUSH_OVHD_ELEC_BAT2_Pressed)
A32NX_OH_ELEC_EXTPWR_TOG#(A:EXTERNAL POWER AVAILABLE:1, Bool) (A:EXTERNAL POWER ON:1, Bool) ! and if{ 1 (>K:TOGGLE_EXTERNAL_POWER) } els{ (A:EXTERNAL POWER ON:1, Bool) if{ 1 (>K:TOGGLE_EXTERNAL_POWER) } }
A32NX_OH_ELEC_GEN1_TOG#(>K:TOGGLE_ALTERNATOR1) (L:XMLVAR_Momentary_PUSH_OVHD_ELEC_GEN1_Pressed) ! (>L:XMLVAR_Momentary_PUSH_OVHD_ELEC_GEN1_Pressed)
A32NX_OH_ELEC_GEN2_TOG#(>K:TOGGLE_ALTERNATOR2) (L:XMLVAR_Momentary_PUSH_OVHD_ELEC_GEN2_Pressed) ! (>L:XMLVAR_Momentary_PUSH_OVHD_ELEC_GEN2_Pressed)
ACPowerAvailable_PRESSED#1 (>L:ACPowerAvailable)
ACPowerAvailable_RELEASED#0 (>L:ACPowerAvailable)
XMLVAR_Momentary_PUSH_OVHD_APU_MASTERSW_Pressed_PRESSED#1 (>L:XMLVAR_Momentary_PUSH_OVHD_APU_MASTERSW_Pressed)
XMLVAR_Momentary_PUSH_OVHD_APU_MASTERSW_Pressed_RELEASED#0 (>L:XMLVAR_Momentary_PUSH_OVHD_APU_MASTERSW_Pressed)
XMLVAR_Momentary_PUSH_OVHD_ELEC_APUGEN_Pressed_PRESSED#1 (>L:XMLVAR_Momentary_PUSH_OVHD_ELEC_APUGEN_Pressed)
XMLVAR_Momentary_PUSH_OVHD_ELEC_APUGEN_Pressed_RELEASED#0 (>L:XMLVAR_Momentary_PUSH_OVHD_ELEC_APUGEN_Pressed)
XMLVAR_Momentary_PUSH_OVHD_ELEC_BAT1_Pressed_PRESSED#1 (>L:XMLVAR_Momentary_PUSH_OVHD_ELEC_BAT1_Pressed)
XMLVAR_Momentary_PUSH_OVHD_ELEC_BAT1_Pressed_RELEASED#0 (>L:XMLVAR_Momentary_PUSH_OVHD_ELEC_BAT1_Pressed)
XMLVAR_Momentary_PUSH_OVHD_ELEC_BAT2_Pressed_PRESSED#1 (>L:XMLVAR_Momentary_PUSH_OVHD_ELEC_BAT2_Pressed)
XMLVAR_Momentary_PUSH_OVHD_ELEC_BAT2_Pressed_RELEASED#0 (>L:XMLVAR_Momentary_PUSH_OVHD_ELEC_BAT2_Pressed)
XMLVAR_Momentary_PUSH_OVHD_ELEC_GEN1_Pressed_PRESSED#1 (>L:XMLVAR_Momentary_PUSH_OVHD_ELEC_GEN1_Pressed)
XMLVAR_Momentary_PUSH_OVHD_ELEC_GEN1_Pressed_RELEASED#0 (>L:XMLVAR_Momentary_PUSH_OVHD_ELEC_GEN1_Pressed)
XMLVAR_Momentary_PUSH_OVHD_ELEC_GEN2_Pressed_PRESSED#1 (>L:XMLVAR_Momentary_PUSH_OVHD_ELEC_GEN2_Pressed)
XMLVAR_Momentary_PUSH_OVHD_ELEC_GEN2_Pressed_RELEASED#0 (>L:XMLVAR_Momentary_PUSH_OVHD_ELEC_GEN2_Pressed)
//Fly By Wire/A320/Engines
A32NX_THROTTLE_FULL_REVERSE_BUTTON#(A:GENERAL ENG THROTTLE LEVER POSITION:1,percent) -0.1 < if{ -9830 } els{ -16383 } (>K:THROTTLE_SET)
A32NX_ENG1_START_TOG#(A:FUELSYSTEM VALVE SWITCH:1, Bool) if{ 1 (>K:FUELSYSTEM_VALVE_CLOSE) (A:GENERAL ENG STARTER:1, Bool) if{ (>K:TOGGLE_STARTER1) } } els{ 1 (>K:FUELSYSTEM_VALVE_OPEN) (A:GENERAL ENG STARTER:1, Bool) ! if{ (>K:TOGGLE_STARTER1) } }
A32NX_ENG2_START_TOG#(A:FUELSYSTEM VALVE SWITCH:2, Bool) if{ 2 (>K:FUELSYSTEM_VALVE_CLOSE) (A:GENERAL ENG STARTER:2, Bool) if{ (>K:TOGGLE_STARTER2) } } els{ 2 (>K:FUELSYSTEM_VALVE_OPEN) (A:GENERAL ENG STARTER:2, Bool) ! if{ (>K:TOGGLE_STARTER2) } }
A32NX_ENG_MODE_CRANK#0 (>K:TURBINE_IGNITION_SWITCH_SET)
A32NX_ENG_MODE_IGNSTART#2 (>K:TURBINE_IGNITION_SWITCH_SET1) 2 (>K:TURBINE_IGNITION_SWITCH_SET2) (>H:A320_NEO_EICAS2_Ignition_Start)
A32NX_ENG_MODE_NORMAL#1 (>K:TURBINE_IGNITION_SWITCH_SET1) 1 (>K:TURBINE_IGNITION_SWITCH_SET2)
//Fly By Wire/A320/Flight Controls
XMLVAR_Momentary_PUSH_OVHD_FLTCTL_ELAC2_Pressed_PRESSED#1 (>L:XMLVAR_Momentary_PUSH_OVHD_FLTCTL_ELAC2_Pressed)
XMLVAR_Momentary_PUSH_OVHD_FLTCTL_ELAC2_Pressed_RELEASED#0 (>L:XMLVAR_Momentary_PUSH_OVHD_FLTCTL_ELAC2_Pressed)
XMLVAR_Momentary_PUSH_OVHD_FLTCTL_ELAC_Pressed_PRESSED#1 (>L:XMLVAR_Momentary_PUSH_OVHD_FLTCTL_ELAC_Pressed)
XMLVAR_Momentary_PUSH_OVHD_FLTCTL_ELAC_Pressed_RELEASED#0 (>L:XMLVAR_Momentary_PUSH_OVHD_FLTCTL_ELAC_Pressed)
XMLVAR_Momentary_PUSH_OVHD_FLTCTL_FAC2_Pressed_PRESSED#1 (>L:XMLVAR_Momentary_PUSH_OVHD_FLTCTL_FAC2_Pressed)
XMLVAR_Momentary_PUSH_OVHD_FLTCTL_FAC2_Pressed_RELEASED#0 (>L:XMLVAR_Momentary_PUSH_OVHD_FLTCTL_FAC2_Pressed)
XMLVAR_Momentary_PUSH_OVHD_FLTCTL_FAC_Pressed_PRESSED#1 (>L:XMLVAR_Momentary_PUSH_OVHD_FLTCTL_FAC_Pressed)
XMLVAR_Momentary_PUSH_OVHD_FLTCTL_FAC_Pressed_RELEASED#0 (>L:XMLVAR_Momentary_PUSH_OVHD_FLTCTL_FAC_Pressed)
XMLVAR_Momentary_PUSH_OVHD_FLTCTL_SEC2_Pressed_PRESSED#1 (>L:XMLVAR_Momentary_PUSH_OVHD_FLTCTL_SEC2_Pressed)
XMLVAR_Momentary_PUSH_OVHD_FLTCTL_SEC2_Pressed_RELEASED#0 (>L:XMLVAR_Momentary_PUSH_OVHD_FLTCTL_SEC2_Pressed)
XMLVAR_Momentary_PUSH_OVHD_FLTCTL_SEC3_Pressed_PRESSED#1 (>L:XMLVAR_Momentary_PUSH_OVHD_FLTCTL_SEC3_Pressed)
XMLVAR_Momentary_PUSH_OVHD_FLTCTL_SEC3_Pressed_RELEASED#0 (>L:XMLVAR_Momentary_PUSH_OVHD_FLTCTL_SEC3_Pressed)
XMLVAR_Momentary_PUSH_OVHD_FLTCTL_SEC_Pressed_PRESSED#1 (>L:XMLVAR_Momentary_PUSH_OVHD_FLTCTL_SEC_Pressed)
XMLVAR_Momentary_PUSH_OVHD_FLTCTL_SEC_Pressed_RELEASED#0 (>L:XMLVAR_Momentary_PUSH_OVHD_FLTCTL_SEC_Pressed)
//Fly By Wire/A320/Fuel
A32NX_OVHD_FUELSYSTEM_CTKPUMP1_TOGGLE#1 (>K:FUELSYSTEM_PUMP_TOGGLE) (L:XMLVAR_Momentary_PUSH_OVHD_FUEL_CTKPUMPS1_Pressed) ! (>L:XMLVAR_Momentary_PUSH_OVHD_FUEL_CTKPUMPS1_Pressed)
A32NX_OVHD_FUELSYSTEM_CTKPUMP2_TOGGLE#4 (>K:FUELSYSTEM_PUMP_TOGGLE) (L:XMLVAR_Momentary_PUSH_OVHD_FUEL_CTKPUMPS2_Pressed) ! (>L:XMLVAR_Momentary_PUSH_OVHD_FUEL_CTKPUMPS2_Pressed)
A32NX_OVHD_FUELSYSTEM_LTKPUMP1_TOGGLE#2 (>K:FUELSYSTEM_PUMP_TOGGLE) (L:XMLVAR_Momentary_PUSH_OVHD_FUEL_LTKPUMPS1_Pressed) ! (>L:XMLVAR_Momentary_PUSH_OVHD_FUEL_LTKPUMPS1_Pressed)
A32NX_OVHD_FUELSYSTEM_LTKPUMP2_TOGGLE#5 (>K:FUELSYSTEM_PUMP_TOGGLE) (L:XMLVAR_Momentary_PUSH_OVHD_FUEL_LTKPUMPS2_Pressed) ! (>L:XMLVAR_Momentary_PUSH_OVHD_FUEL_LTKPUMPS2_Pressed)
A32NX_OVHD_FUELSYSTEM_RTKPUMP1_TOGGLE#3 (>K:FUELSYSTEM_PUMP_TOGGLE) (L:XMLVAR_Momentary_PUSH_OVHD_FUEL_RTKPUMPS1_Pressed) ! (>L:XMLVAR_Momentary_PUSH_OVHD_FUEL_RTKPUMPS1_Pressed)
A32NX_OVHD_FUELSYSTEM_RTKPUMP2_TOGGLE#6 (>K:FUELSYSTEM_PUMP_TOGGLE) (L:XMLVAR_Momentary_PUSH_OVHD_FUEL_RTKPUMPS2_Pressed) ! (>L:XMLVAR_Momentary_PUSH_OVHD_FUEL_RTKPUMPS2_Pressed)
//Fly By Wire/A320/Gear
A32NX_BRAKE_FAN_BTN_PRESSED#(L:A32NX_BRAKE_FAN_BTN_PRESSED) ! (>L:A32NX_BRAKE_FAN_BTN_PRESSED)
Autobrake_Low_On#1 (>L:A32NX_OVHD_AUTOBRK_LOW_ON_IS_PRESSED, bool)
Autobrake_Low_Toggle#(L:A32NX_OVHD_AUTOBRK_LOW_ON_IS_PRESSED, bool) ! (>L:A32NX_OVHD_AUTOBRK_LOW_ON_IS_PRESSED, bool)
Autobrake_Max_On#1 (>L:A32NX_OVHD_AUTOBRK_MAX_ON_IS_PRESSED, bool)
Autobrake_Max_Toggle#(L:A32NX_OVHD_AUTOBRK_MAX_ON_IS_PRESSED, bool) ! (>L:A32NX_OVHD_AUTOBRK_MAX_ON_IS_PRESSED, bool)
Autobrake_Med_On#1 (>L:A32NX_OVHD_AUTOBRK_MED_ON_IS_PRESSED, bool)
Autobrake_Med_Toggle#(L:A32NX_OVHD_AUTOBRK_MED_ON_IS_PRESSED, bool) ! (>L:A32NX_OVHD_AUTOBRK_MED_ON_IS_PRESSED, bool)
//Fly By Wire/A320/Lights
A32NX_BEACON_TOG_OFF#0 0 (>K:2:BEACON_LIGHTS_SET)
A32NX_BEACON_TOG_ON#0 1 (>K:2:BEACON_LIGHTS_SET) 
A32NX_NAV_LIGHT_TOG#(L:LIGHTING_NAV_0)  if{ 0 0 (>K:2:NAV_LIGHTS_SET) 0 0 (>K:2:LOGO_LIGHTS_SET) } els{ 0 1 (>K:2:NAV_LIGHTS_SET) 0 1 (>K:2:LOGO_LIGHTS_SET) }
A32NX_OH_EXTLT_RWY_OFF#(A:LIGHT TAXI:2, Bool) if{ 2 (>K:TOGGLE_TAXI_LIGHTS) 3 (>K:TOGGLE_TAXI_LIGHTS) }
A32NX_OH_EXTLT_RWY_ON#(A:LIGHT TAXI:2, Bool) ! if{ 2 (>K:TOGGLE_TAXI_LIGHTS) 3 (>K:TOGGLE_TAXI_LIGHTS) }
A32NX_OH_EXTLT_RWY_TOG#2 (>K:TOGGLE_TAXI_LIGHTS) 3 (>K:TOGGLE_TAXI_LIGHTS)
A32NX_OH_LANDING_LIGHTS_OFF#(A:LIGHT LANDING, Bool) if{ (>K:LANDING_LIGHTS_TOGGLE) }
A32NX_OH_LANDING_LIGHTS_ON#(A:LIGHT LANDING, Bool) ! if{ (>K:LANDING_LIGHTS_TOGGLE) }
A32NX_OH_LANDING_LIGHTS_TOG#(>K:LANDING_LIGHTS_TOGGLE)
A32NX_OH_STROBES_TOG_AUTO#(A:LIGHT STROBE:0, Percent) ! if{ 0 (>K:STROBES_TOGGLE) } 1 (>L:STROBE_1_Auto)
A32NX_OH_STROBES_TOG_OFF#(A:LIGHT STROBE:0, Percent) if{ 0 (>K:STROBES_TOGGLE) } 0 (>L:STROBE_1_Auto)
A32NX_OH_STROBES_TOG_ON#(A:LIGHT STROBE:0, Percent) ! if{ 0 (>K:STROBES_TOGGLE) } 0 (>L:STROBE_1_Auto)
ANN_LT_BRT#1 (>L:A32NX_OVHD_INTLT_ANN)
ANN_LT_DIM#2 (>L:A32NX_OVHD_INTLT_ANN)
ANN_LT_TEST#0 (>L:A32NX_OVHD_INTLT_ANN)
DOME_LIGHT_BRT#1 (>K:CABIN_LIGHTS_SET) 100 (>K:LIGHT_POTENTIOMETER_7_SET)
DOME_LIGHT_DIM1#1 (>K:CABIN_LIGHTS_SET) 50 (>K:LIGHT_POTENTIOMETER_7_SET)
DOME_LIGHT_DIM2#(>K:TOGGLE_CABIN_LIGHTS) } 50 (>K:LIGHT_POTENTIOMETER_7_SET)
DOME_LIGHT_OFF#0 (>K:CABIN_LIGHTS_SET) 0 (>K:LIGHT_POTENTIOMETER_7_SET)
A32NX_PEDESTAL_KNOB_DEC#(A:LIGHT POTENTIOMETER:85,percent) 5 - 0 max 85 (>K:2:LIGHT_POTENTIOMETER_SET)
A32NX_PEDESTAL_KNOB_INC#(A:LIGHT POTENTIOMETER:85,percent) 5 + 100 min 85 (>K:2:LIGHT_POTENTIOMETER_SET)
DOME_LIGHT_TOGGLE#(A:LIGHT POTENTIOMETER:7, Percent) 0 == if{ 1 (>K:CABIN_LIGHTS_SET) 50 (>K:LIGHT_POTENTIOMETER_7_SET) } els{ (A:LIGHT POTENTIOMETER:7, Percent) 100 == if{ 0 (>K:CABIN_LIGHTS_SET) 0 (>K:LIGHT_POTENTIOMETER_7_SET) } els{ 1 (>K:CABIN_LIGHTS_SET) 100 (>K:LIGHT_POTENTIOMETER_7_SET) } }
EMER_EXIT_ARM#1 (>L:XMLVAR_SWITCH_OVHD_INTLT_EMEREXIT_Position)
EMER_EXIT_OFF#0 (>L:XMLVAR_SWITCH_OVHD_INTLT_EMEREXIT_Position)
EMER_EXIT_ON#2 (>L:XMLVAR_SWITCH_OVHD_INTLT_EMEREXIT_Position)
LEFT_LANDING_LIGHTS_OFF# if{1 (>L:LANDING_2_Retracted)
LEFT_LANDING_LIGHTS_RETRACTED#(>L:LANDING_2_Retracted) 1 == is{ 1 is(>L:LANDING_2_Retracted) 1 (>L:LANDING_2_Retracted) } } els} (>L:LANDING_2_Retracted) 1 == if{ 1 if {2 (>L:LANDING_2_Retracted) 1 (>L:LANDING_2_Retracted) } }
RIGHT_LANDING_LIGHTS_OFF# if{1 (>L:LANDING_1_Retracted)
RIGHT_LANDING_LIGHTS_RETRACTED#(>L:LANDING_1_Retracted) 1 == is{ 1 is(>L:LANDING_1_Retracted) 1 (>L:LANDING_1_Retracted) } } els} (>L:LANDING_1_Retracted) 1 == if{ 1 if {2 (>L:LANDING_1_Retracted) 1 (>L:LANDING_1_Retracted) } }
STBY_COMPASS_LIGHT_OFF#(>L:A32NX_STBY_COMPASS_LIGHT_TOGGLE)
STBY_COMPASS_LIGHT_TOGGLE#(L:A32NX_STBY_COMPASS_LIGHT_TOGGLE) ! (>L:A32NX_STBY_COMPASS_LIGHT_TOGGLE)
//Fly By Wire/A320/Navigation
A320_Neo_ATC_BTN_0#(>H:A320_Neo_ATC_BTN_0)
A320_Neo_ATC_BTN_1#(>H:A320_Neo_ATC_BTN_1)
A320_Neo_ATC_BTN_2#(>H:A320_Neo_ATC_BTN_2)
A320_Neo_ATC_BTN_3#(>H:A320_Neo_ATC_BTN_3)
A320_Neo_ATC_BTN_4#(>H:A320_Neo_ATC_BTN_4)
A320_Neo_ATC_BTN_5#(>H:A320_Neo_ATC_BTN_5)
A320_Neo_ATC_BTN_6#(>H:A320_Neo_ATC_BTN_6)
A320_Neo_ATC_BTN_7#(>H:A320_Neo_ATC_BTN_7)
A320_Neo_ATC_BTN_8#(>H:A320_Neo_ATC_BTN_8)
A320_Neo_ATC_BTN_9#(>H:A320_Neo_ATC_BTN_9)
A320_Neo_ATC_BTN_CLR#(>H:A320_Neo_ATC_BTN_CLR)
A320_Neo_ATC_BTN_IDENT#(>H:A320_Neo_ATC_BTN_IDENT)
A320_Neo_CDU_1_BTN_0#(>H:A320_Neo_CDU_1_BTN_0)
A320_Neo_CDU_1_BTN_1#(>H:A320_Neo_CDU_1_BTN_1)
A320_Neo_CDU_1_BTN_2#(>H:A320_Neo_CDU_1_BTN_2)
A320_Neo_CDU_1_BTN_3#(>H:A320_Neo_CDU_1_BTN_3)
A320_Neo_CDU_1_BTN_4#(>H:A320_Neo_CDU_1_BTN_4)
A320_Neo_CDU_1_BTN_5#(>H:A320_Neo_CDU_1_BTN_5)
A320_Neo_CDU_1_BTN_6#(>H:A320_Neo_CDU_1_BTN_6)
A320_Neo_CDU_1_BTN_7#(>H:A320_Neo_CDU_1_BTN_7)
A320_Neo_CDU_1_BTN_8#(>H:A320_Neo_CDU_1_BTN_8)
A320_Neo_CDU_1_BTN_9#(>H:A320_Neo_CDU_1_BTN_9)
A320_Neo_CDU_1_BTN_A#(>H:A320_Neo_CDU_1_BTN_A)
A320_Neo_CDU_1_BTN_AIRPORT#(>H:A320_Neo_CDU_1_BTN_AIRPORT)
A320_Neo_CDU_1_BTN_ATC#(>H:A320_Neo_CDU_1_BTN_ATC)
A320_Neo_CDU_1_BTN_B#(>H:A320_Neo_CDU_1_BTN_B)
A320_Neo_CDU_1_BTN_C#(>H:A320_Neo_CDU_1_BTN_C)
A320_Neo_CDU_1_BTN_CLR#(>H:A320_Neo_CDU_1_BTN_CLR)
A320_Neo_CDU_1_BTN_D#(>H:A320_Neo_CDU_1_BTN_D)
A320_Neo_CDU_1_BTN_DATA#(>H:A320_Neo_CDU_1_BTN_DATA)
A320_Neo_CDU_1_BTN_DIR#(>H:A320_Neo_CDU_1_BTN_DIR)
A320_Neo_CDU_1_BTN_DIV#(>H:A320_Neo_CDU_1_BTN_DIV)
A320_Neo_CDU_1_BTN_DOT#(>H:A320_Neo_CDU_1_BTN_DOT)
A320_Neo_CDU_1_BTN_DOWN#(>H:A320_Neo_CDU_1_BTN_DOWN)
A320_Neo_CDU_1_BTN_E#(>H:A320_Neo_CDU_1_BTN_E)
A320_Neo_CDU_1_BTN_F#(>H:A320_Neo_CDU_1_BTN_F)
A320_Neo_CDU_1_BTN_FPLN#(>H:A320_Neo_CDU_1_BTN_FPLN)
A320_Neo_CDU_1_BTN_FUEL#(>H:A320_Neo_CDU_1_BTN_FUEL)
A320_Neo_CDU_1_BTN_G#(>H:A320_Neo_CDU_1_BTN_G)
A320_Neo_CDU_1_BTN_H#(>H:A320_Neo_CDU_1_BTN_H)
A320_Neo_CDU_1_BTN_I#(>H:A320_Neo_CDU_1_BTN_I)
A320_Neo_CDU_1_BTN_J#(>H:A320_Neo_CDU_1_BTN_J)
A320_Neo_CDU_1_BTN_K#(>H:A320_Neo_CDU_1_BTN_K)
A320_Neo_CDU_1_BTN_L#(>H:A320_Neo_CDU_1_BTN_L)
A320_Neo_CDU_1_BTN_L1#(>H:A320_Neo_CDU_1_BTN_L1)
A320_Neo_CDU_1_BTN_L2#(>H:A320_Neo_CDU_1_BTN_L2)
A320_Neo_CDU_1_BTN_L3#(>H:A320_Neo_CDU_1_BTN_L3)
A320_Neo_CDU_1_BTN_L4#(>H:A320_Neo_CDU_1_BTN_L4)
A320_Neo_CDU_1_BTN_L5#(>H:A320_Neo_CDU_1_BTN_L5)
A320_Neo_CDU_1_BTN_L6#(>H:A320_Neo_CDU_1_BTN_L6)
A320_Neo_CDU_1_BTN_M#(>H:A320_Neo_CDU_1_BTN_M)
A320_Neo_CDU_1_BTN_MENU#(>H:A320_Neo_CDU_1_BTN_MENU)
A320_Neo_CDU_1_BTN_N#(>H:A320_Neo_CDU_1_BTN_N)
A320_Neo_CDU_1_BTN_NEXTPAGE#(>H:A320_Neo_CDU_1_BTN_NEXTPAGE)
A320_Neo_CDU_1_BTN_O#(>H:A320_Neo_CDU_1_BTN_O)
A320_Neo_CDU_1_BTN_OVFY#(>H:A320_Neo_CDU_1_BTN_OVFY)
A320_Neo_CDU_1_BTN_P#(>H:A320_Neo_CDU_1_BTN_P)
A320_Neo_CDU_1_BTN_PERF#(>H:A320_Neo_CDU_1_BTN_PERF)
A320_Neo_CDU_1_BTN_PLUSMINUS#(>H:A320_Neo_CDU_1_BTN_PLUSMINUS)
A320_Neo_CDU_1_BTN_PREVPAGE#(>H:A320_Neo_CDU_1_BTN_PREVPAGE)
A320_Neo_CDU_1_BTN_Q#(>H:A320_Neo_CDU_1_BTN_Q)
A320_Neo_CDU_1_BTN_R#(>H:A320_Neo_CDU_1_BTN_R)
A320_Neo_CDU_1_BTN_R1#(>H:A320_Neo_CDU_1_BTN_R1)
A320_Neo_CDU_1_BTN_R2#(>H:A320_Neo_CDU_1_BTN_R2)
A320_Neo_CDU_1_BTN_R3#(>H:A320_Neo_CDU_1_BTN_R3)
A320_Neo_CDU_1_BTN_R4#(>H:A320_Neo_CDU_1_BTN_R4)
A320_Neo_CDU_1_BTN_R5#(>H:A320_Neo_CDU_1_BTN_R5)
A320_Neo_CDU_1_BTN_R6#(>H:A320_Neo_CDU_1_BTN_R6)
A320_Neo_CDU_1_BTN_RAD#(>H:A320_Neo_CDU_1_BTN_RAD)
A320_Neo_CDU_1_BTN_S#(>H:A320_Neo_CDU_1_BTN_S)
A320_Neo_CDU_1_BTN_SEC#(>H:A320_Neo_CDU_1_BTN_SEC)
A320_Neo_CDU_1_BTN_SP#(>H:A320_Neo_CDU_1_BTN_SP)
A320_Neo_CDU_1_BTN_T#(>H:A320_Neo_CDU_1_BTN_T)
A320_Neo_CDU_1_BTN_U#(>H:A320_Neo_CDU_1_BTN_U)
A320_Neo_CDU_1_BTN_UP#(>H:A320_Neo_CDU_1_BTN_UP)
A320_Neo_CDU_1_BTN_V#(>H:A320_Neo_CDU_1_BTN_V)
A320_Neo_CDU_1_BTN_W#(>H:A320_Neo_CDU_1_BTN_W)
A320_Neo_CDU_1_BTN_X#(>H:A320_Neo_CDU_1_BTN_X)
A320_Neo_CDU_1_BTN_Y#(>H:A320_Neo_CDU_1_BTN_Y)
A320_Neo_CDU_1_BTN_Z#(>H:A320_Neo_CDU_1_BTN_Z)
A320_Neo_CDU_2_BTN_0#(>H:A320_Neo_CDU_2_BTN_0)
A320_Neo_CDU_2_BTN_1#(>H:A320_Neo_CDU_2_BTN_1)
A320_Neo_CDU_2_BTN_2#(>H:A320_Neo_CDU_2_BTN_2)
A320_Neo_CDU_2_BTN_3#(>H:A320_Neo_CDU_2_BTN_3)
A320_Neo_CDU_2_BTN_4#(>H:A320_Neo_CDU_2_BTN_4)
A320_Neo_CDU_2_BTN_5#(>H:A320_Neo_CDU_2_BTN_5)
A320_Neo_CDU_2_BTN_6#(>H:A320_Neo_CDU_2_BTN_6)
A320_Neo_CDU_2_BTN_7#(>H:A320_Neo_CDU_2_BTN_7)
A320_Neo_CDU_2_BTN_8#(>H:A320_Neo_CDU_2_BTN_8)
A320_Neo_CDU_2_BTN_9#(>H:A320_Neo_CDU_2_BTN_9)
A320_Neo_CDU_2_BTN_A#(>H:A320_Neo_CDU_2_BTN_A)
A320_Neo_CDU_2_BTN_AIRPORT#(>H:A320_Neo_CDU_2_BTN_AIRPORT)
A320_Neo_CDU_2_BTN_ATC#(>H:A320_Neo_CDU_2_BTN_ATC)
A320_Neo_CDU_2_BTN_B#(>H:A320_Neo_CDU_2_BTN_B)
A320_Neo_CDU_2_BTN_C#(>H:A320_Neo_CDU_2_BTN_C)
A320_Neo_CDU_2_BTN_CLR#(>H:A320_Neo_CDU_2_BTN_CLR)
A320_Neo_CDU_2_BTN_D#(>H:A320_Neo_CDU_2_BTN_D)
A320_Neo_CDU_2_BTN_DATA#(>H:A320_Neo_CDU_2_BTN_DATA)
A320_Neo_CDU_2_BTN_DIR#(>H:A320_Neo_CDU_2_BTN_DIR)
A320_Neo_CDU_2_BTN_DIV#(>H:A320_Neo_CDU_2_BTN_DIV)
A320_Neo_CDU_2_BTN_DOT#(>H:A320_Neo_CDU_2_BTN_DOT)
A320_Neo_CDU_2_BTN_DOWN#(>H:A320_Neo_CDU_2_BTN_DOWN)
A320_Neo_CDU_2_BTN_E#(>H:A320_Neo_CDU_2_BTN_E)
A320_Neo_CDU_2_BTN_F#(>H:A320_Neo_CDU_2_BTN_F)
A320_Neo_CDU_2_BTN_FPLN#(>H:A320_Neo_CDU_2_BTN_FPLN)
A320_Neo_CDU_2_BTN_FUEL#(>H:A320_Neo_CDU_2_BTN_FUEL)
A320_Neo_CDU_2_BTN_G#(>H:A320_Neo_CDU_2_BTN_G)
A320_Neo_CDU_2_BTN_H#(>H:A320_Neo_CDU_2_BTN_H)
A320_Neo_CDU_2_BTN_I#(>H:A320_Neo_CDU_2_BTN_I)
A320_Neo_CDU_2_BTN_INIT#(>H:A320_Neo_CDU_2_BTN_INIT)
A320_Neo_CDU_2_BTN_J#(>H:A320_Neo_CDU_2_BTN_J)
A320_Neo_CDU_2_BTN_K#(>H:A320_Neo_CDU_2_BTN_K)
A320_Neo_CDU_2_BTN_L#(>H:A320_Neo_CDU_2_BTN_L)
A320_Neo_CDU_2_BTN_L1#(>H:A320_Neo_CDU_2_BTN_L1)
A320_Neo_CDU_2_BTN_L2#(>H:A320_Neo_CDU_2_BTN_L2)
A320_Neo_CDU_2_BTN_L3#(>H:A320_Neo_CDU_2_BTN_L3)
A320_Neo_CDU_2_BTN_L4#(>H:A320_Neo_CDU_2_BTN_L4)
A320_Neo_CDU_2_BTN_L5#(>H:A320_Neo_CDU_2_BTN_L5)
A320_Neo_CDU_2_BTN_L6#(>H:A320_Neo_CDU_2_BTN_L6)
A320_Neo_CDU_2_BTN_M#(>H:A320_Neo_CDU_2_BTN_M)
A320_Neo_CDU_2_BTN_MENU#(>H:A320_Neo_CDU_2_BTN_MENU)
A320_Neo_CDU_2_BTN_N#(>H:A320_Neo_CDU_2_BTN_N)
A320_Neo_CDU_2_BTN_NEXTPAGE#(>H:A320_Neo_CDU_2_BTN_NEXTPAGE)
A320_Neo_CDU_2_BTN_O#(>H:A320_Neo_CDU_2_BTN_O)
A320_Neo_CDU_2_BTN_OVFY#(>H:A320_Neo_CDU_2_BTN_OVFY)
A320_Neo_CDU_2_BTN_P#(>H:A320_Neo_CDU_2_BTN_P)
A320_Neo_CDU_2_BTN_PERF#(>H:A320_Neo_CDU_2_BTN_PERF)
A320_Neo_CDU_2_BTN_PLUSMINUS#(>H:A320_Neo_CDU_2_BTN_PLUSMINUS)
A320_Neo_CDU_2_BTN_PREVPAGE#(>H:A320_Neo_CDU_2_BTN_PREVPAGE)
A320_Neo_CDU_2_BTN_PROG#(>H:A320_Neo_CDU_2_BTN_PROG)
A320_Neo_CDU_2_BTN_Q#(>H:A320_Neo_CDU_2_BTN_Q)
A320_Neo_CDU_2_BTN_R#(>H:A320_Neo_CDU_2_BTN_R)
A320_Neo_CDU_2_BTN_R1#(>H:A320_Neo_CDU_2_BTN_R1)
A320_Neo_CDU_2_BTN_R2#(>H:A320_Neo_CDU_2_BTN_R2)
A320_Neo_CDU_2_BTN_R3#(>H:A320_Neo_CDU_2_BTN_R3)
A320_Neo_CDU_2_BTN_R4#(>H:A320_Neo_CDU_2_BTN_R4)
A320_Neo_CDU_2_BTN_R5#(>H:A320_Neo_CDU_2_BTN_R5)
A320_Neo_CDU_2_BTN_R6#(>H:A320_Neo_CDU_2_BTN_R6)
A320_Neo_CDU_2_BTN_RAD#(>H:A320_Neo_CDU_2_BTN_RAD)
A320_Neo_CDU_2_BTN_S#(>H:A320_Neo_CDU_2_BTN_S)
A320_Neo_CDU_2_BTN_SEC#(>H:A320_Neo_CDU_2_BTN_SEC)
A320_Neo_CDU_2_BTN_SP#(>H:A320_Neo_CDU_2_BTN_SP)
A320_Neo_CDU_2_BTN_T#(>H:A320_Neo_CDU_2_BTN_T)
A320_Neo_CDU_2_BTN_U#(>H:A320_Neo_CDU_2_BTN_U)
A320_Neo_CDU_2_BTN_UP#(>H:A320_Neo_CDU_2_BTN_UP)
A320_Neo_CDU_2_BTN_V#(>H:A320_Neo_CDU_2_BTN_V)
A320_Neo_CDU_2_BTN_W#(>H:A320_Neo_CDU_2_BTN_W)
A320_Neo_CDU_2_BTN_X#(>H:A320_Neo_CDU_2_BTN_X)
A320_Neo_CDU_2_BTN_Y#(>H:A320_Neo_CDU_2_BTN_Y)
A320_Neo_CDU_2_BTN_Z#(>H:A320_Neo_CDU_2_BTN_Z)
A32NX_ADIRS_1_PUSH#(L:A32NX_OVHD_ADIRS_ADR_1_PB_IS_ON,bool) ! (>L:A32NX_OVHD_ADIRS_ADR_1_PB_IS_ON,bool)
A32NX_ADIRS_2_PUSH#(L:A32NX_OVHD_ADIRS_ADR_2_PB_IS_ON,bool) ! (>L:A32NX_OVHD_ADIRS_ADR_2_PB_IS_ON,bool)
A32NX_ADIRS_3_PUSH#(L:A32NX_OVHD_ADIRS_ADR_3_PB_IS_ON,bool) ! (>L:A32NX_OVHD_ADIRS_ADR_3_PB_IS_ON,bool)
A32NX_ADIRS_KNOB_1_ATT#2 (>L:A32NX_OVHD_ADIRS_IR_1_MODE_SELECTOR_KNOB)
A32NX_ADIRS_KNOB_1_NAV#1 (>L:A32NX_OVHD_ADIRS_IR_1_MODE_SELECTOR_KNOB)
A32NX_ADIRS_KNOB_1_OFF#0 (>L:A32NX_OVHD_ADIRS_IR_1_MODE_SELECTOR_KNOB)
A32NX_ADIRS_KNOB_2_ATT#2 (>L:A32NX_ADIRS_KNOB_2)
A32NX_ADIRS_KNOB_2_NAV#1 (>L:A32NX_OVHD_ADIRS_IR_2_MODE_SELECTOR_KNOB)
A32NX_ADIRS_KNOB_2_OFF#0 (>L:A32NX_OVHD_ADIRS_IR_2_MODE_SELECTOR_KNOB)
A32NX_ADIRS_KNOB_3_ATT#2 (>L:A32NX_OVHD_ADIRS_IR_3_MODE_SELECTOR_KNOB)
A32NX_ADIRS_KNOB_3_NAV#1 (>L:A32NX_OVHD_ADIRS_IR_3_MODE_SELECTOR_KNOB)
A32NX_ADIRS_KNOB_3_OFF#0 (>L:A32NX_OVHD_ADIRS_IR_3_MODE_SELECTOR_KNOB)
TCAS_SWITCH_POSITION_STBY#0 (>L:A32NX_SWITCH_TCAS_Position)
TCAS_SWITCH_POSITION_TA#1 (>L:A32NX_SWITCH_TCAS_Position)
TCAS_SWITCH_POSITION_TA_RA#2 (>L:A32NX_SWITCH_TCAS_Position)
//Fly By Wire/A320/Passengers/Crew
A32NX_CALLS_EMER_ON_OFF#0 (>L:A32NX_CALLS_EMER_ON)
A32NX_CALLS_EMER_ON_ON#1 (>L:A32NX_CALLS_EMER_ON)
A32NX_EVAC_CAPT_TOGGLE_CAPT#0 (>L:A32NX_EVAC_CAPT_TOGGLE)
A32NX_EVAC_CAPT_TOGGLE_CAPT_AND_PURS#1 (>L:A32NX_EVAC_CAPT_TOGGLE)
A32NX_EVAC_COMMAND_TOGGLE_OFF#0 (>L:A32NX_EVAC_COMMAND_TOGGLE)
A32NX_EVAC_COMMAND_TOGGLE_ON#1 (>L:A32NX_EVAC_COMMAND_TOGGLE)
NO_SMOKING_AUTO#(L:XMLVAR_SWITCH_OVHD_INTLT_NOSMOKING_Position) 1 == is{1 if{(>L:XMLVAR_SWITCH_OVHD_INTLT_NOSMOKING_Position) 1 (>L:XMLVAR_SWITCH_OVHD_INTLT_NOSMOKING_Position) } } els} (L:XMLVAR_SWITCH_OVHD_INTLT_NOSMOKING_Position) 1 ==if{ 1 if{ 1 (>L:XMLVAR_SWITCH_OVHD_INTLT_NOSMOKING_Position) 1 (>L:XMLVAR_SWITCH_OVHD_INTLT_NOSMOKING_Position) } }
NO_SMOKING_OFF#(L:XMLVAR_SWITCH_OVHD_INTLT_NOSMOKING_Position) 0 == is{1 if{(>L:XMLVAR_SWITCH_OVHD_INTLT_NOSMOKING_Position) 1 (>L:XMLVAR_SWITCH_OVHD_INTLT_NOSMOKING_Position) } } els} (L:XMLVAR_SWITCH_OVHD_INTLT_NOSMOKING_Position) 1 ==if{ 1 if{ 2 (>L:XMLVAR_SWITCH_OVHD_INTLT_NOSMOKING_Position) 2 (>L:XMLVAR_SWITCH_OVHD_INTLT_NOSMOKING_Position) } } }
NO_SMOKING_ON#(L:XMLVAR_SWITCH_OVHD_INTLT_NOSMOKING_Position) 2 == is{1 if{(>L:XMLVAR_SWITCH_OVHD_INTLT_NOSMOKING_Position) 1 (>L:XMLVAR_SWITCH_OVHD_INTLT_NOSMOKING_Position) } } els} (L:XMLVAR_SWITCH_OVHD_INTLT_NOSMOKING_Position) 1 ==if{ 1 if{ 0 (>L:XMLVAR_SWITCH_OVHD_INTLT_NOSMOKING_Position) 0 (>L:XMLVAR_SWITCH_OVHD_INTLT_NOSMOKING_Position) } } }
PUSH_OVHD_CALLS_AFT_OFF#0 (>L:PUSH_OVHD_CALLS_AFT)
PUSH_OVHD_CALLS_AFT_ON#1 (>L:PUSH_OVHD_CALLS_AFT)
PUSH_OVHD_CALLS_ALL_OFF#0 (>L:PUSH_OVHD_CALLS_ALL)
PUSH_OVHD_CALLS_ALL_ON#1 (>L:PUSH_OVHD_CALLS_ALL)
PUSH_OVHD_CALLS_FWD_OFF#0 (>L:PUSH_OVHD_CALLS_FWD)
PUSH_OVHD_CALLS_FWD_ON#1 (>L:PUSH_OVHD_CALLS_FWD)
PUSH_OVHD_CALLS_MECH_OFF#0 (>L:PUSH_OVHD_CALLS_MECH)
PUSH_OVHD_CALLS_MECH_ON#1 (>L:PUSH_OVHD_CALLS_MECH)
PUSH_OVHD_EVAC_HORN_OFF#0 (>L:PUSH_OVHD_EVAC_HORN)
PUSH_OVHD_EVAC_HORN_ON#1 (>L:PUSH_OVHD_EVAC_HORN)
SEATBELT_SWITCH#(L:XMLVAR_SWITCH_OVHD_INTLT_SEATBELT_Position) ! (>L:XMLVAR_SWITCH_OVHD_INTLT_SEATBELT_Position)
//Fly By Wire/A320/Radio
A320_Neo_FBW_BTN_L_ADF#(L:XMLVAR_RMP_L_On) if{ (L:XMLVAR_RMP_L_GROUP_MODE_IS_DISABLED) ! if{ 1 if{ (>H:A320_Neo_FDW_BTN_L_ADF) 4 (>L:XMLVAR_RMP_L_CURRENT_BUTTON_IN_GROUP_MODE) } } }
A320_Neo_FBW_BTN_L_AM#(L:XMLVAR_RMP_L_On) (L:XMLVAR_RMP_L_CURRENT_BUTTON_IN_GROUP_MODE) 0 == (L:XMLVAR_RMP_L_GROUP_FREQ_IS_DISABLED) ! and if{ (L:XMLVAR_RMP_L_CURRENT_BUTTON_IN_GROUP_FREQ) 4 == (L:XMLVAR_RMP_L_CURRENT_BUTTON_IN_GROUP_FREQ) 5 == or } and if{ (>H:A320_Neo_FDW_BTN_L_AM) (L:XMLVAR_RMP_L_AM_Active) ! (>L:XMLVAR_RMP_L_AM_Active) }
A320_Neo_FBW_BTN_L_BFO#(L:XMLVAR_RMP_L_On) (L:XMLVAR_RMP_L_GROUP_MODE_IS_DISABLED) ! if{ (L:XMLVAR_RMP_L_CURRENT_BUTTON_IN_GROUP_MODE) 4 == } and if{ (>H:A320_Neo_FDW_BTN_L_BFO) (L:XMLVAR_RMP_L_BFO_Active) ! (>L:XMLVAR_RMP_L_BFO_Active) }
A320_Neo_FBW_BTN_L_HF1#(L:XMLVAR_RMP_L_On) if{ (L:XMLVAR_RMP_L_GROUP_FREQ_IS_DISABLED) ! if{ (L:XMLVAR_RMP_L_CURRENT_BUTTON_IN_GROUP_MODE) 0 == if{ (>H:A320_Neo_FDW_BTN_L_HF1) 4 (>L:XMLVAR_RMP_L_CURRENT_BUTTON_IN_GROUP_FREQ) } } }
A320_Neo_FBW_BTN_L_HF2#(L:XMLVAR_RMP_L_On) if{ (L:XMLVAR_RMP_L_GROUP_FREQ_IS_DISABLED) ! if{ (L:XMLVAR_RMP_L_CURRENT_BUTTON_IN_GROUP_MODE) 0 == if{ (>H:A320_Neo_FDW_BTN_L_HF2) 5 (>L:XMLVAR_RMP_L_CURRENT_BUTTON_IN_GROUP_FREQ) } } }
A320_Neo_FBW_BTN_L_ILS#(L:XMLVAR_RMP_L_On) if{ (L:XMLVAR_RMP_L_GROUP_MODE_IS_DISABLED) ! if{ 1 if{ (>H:A320_Neo_FDW_BTN_L_ILS) 2 (>L:XMLVAR_RMP_L_CURRENT_BUTTON_IN_GROUP_MODE) } } }
A320_Neo_FBW_BTN_L_MLS#(L:XMLVAR_RMP_L_On) if{ (L:XMLVAR_RMP_L_GROUP_MODE_IS_DISABLED) ! if{ 0 if{ (>H:A320_Neo_FDW_BTN_L_MLS) 3 (>L:XMLVAR_RMP_L_CURRENT_BUTTON_IN_GROUP_MODE) } } }
A320_Neo_FBW_BTN_L_NAV#(L:XMLVAR_RMP_L_On) 1 and if{ (>H:A320_Neo_FDW_BTN_L_NAV) (L:XMLVAR_RMP_L_NAV_Active) ! (>L:XMLVAR_RMP_L_NAV_Active) 0 (L:XMLVAR_RMP_L_NAV_Active) == if{ 1 (>L:XMLVAR_RMP_L_GROUP_MODE_IS_DISABLED) 0 (>L:XMLVAR_RMP_L_CURRENT_BUTTON_IN_GROUP_MODE) } els{ 0 (>L:XMLVAR_RMP_L_GROUP_MODE_IS_DISABLED) } }
A320_Neo_FBW_BTN_L_VHF1#(L:XMLVAR_RMP_L_On) if{ (L:XMLVAR_RMP_L_GROUP_FREQ_IS_DISABLED) ! if{ (L:XMLVAR_RMP_L_CURRENT_BUTTON_IN_GROUP_MODE) 0 == if{ (>H:A320_Neo_FDW_BTN_L_VHF1) 1 (>L:XMLVAR_RMP_L_CURRENT_BUTTON_IN_GROUP_FREQ) } } }
A320_Neo_FBW_BTN_L_VHF2#(L:XMLVAR_RMP_L_On) if{ (L:XMLVAR_RMP_L_GROUP_FREQ_IS_DISABLED) ! if{ (L:XMLVAR_RMP_L_CURRENT_BUTTON_IN_GROUP_MODE) 0 == if{ (>H:A320_Neo_FDW_BTN_L_VHF2) 2 (>L:XMLVAR_RMP_L_CURRENT_BUTTON_IN_GROUP_FREQ) } } }
A320_Neo_FBW_BTN_L_VHF3#(L:XMLVAR_RMP_L_On) if{ (L:XMLVAR_RMP_L_GROUP_FREQ_IS_DISABLED) ! if{ (L:XMLVAR_RMP_L_CURRENT_BUTTON_IN_GROUP_MODE) 0 == if{ (>H:A320_Neo_FDW_BTN_L_VHF3) 3 (>L:XMLVAR_RMP_L_CURRENT_BUTTON_IN_GROUP_FREQ) } } }
A320_Neo_FBW_BTN_L_VOR#(L:XMLVAR_RMP_L_On) if{ (L:XMLVAR_RMP_L_GROUP_MODE_IS_DISABLED) ! if{ 1 if{ (>H:A320_Neo_FDW_BTN_L_VOR) 1 (>L:XMLVAR_RMP_L_CURRENT_BUTTON_IN_GROUP_MODE) } } }
A320_Neo_FBW_SWITCH_L_TOGGLE#(L:XMLVAR_RMP_L_On) ! (>L:XMLVAR_RMP_L_On) (L:XMLVAR_RMP_L_On) if{ 0 (>L:XMLVAR_RMP_L_GROUP_FREQ_IS_DISABLED) 1 (>L:XMLVAR_RMP_L_GROUP_MODE_IS_DISABLED) 1 (>L:XMLVAR_RMP_L_CURRENT_BUTTON_IN_GROUP_FREQ) 0 (>L:XMLVAR_RMP_L_CURRENT_BUTTON_IN_GROUP_MODE) 0 (>L:XMLVAR_RMP_L_AM_Active) 0 (>L:XMLVAR_RMP_L_NAV_Active) 0 (>L:XMLVAR_RMP_L_BFO_Active) } (>H:A320_Neo_FDW_SWITCH_L_TOGGLE)
A32NX_OVHD_COCKPITDOORVIDEO_TOGGLE_OFF#0 (>L:A32NX_OVHD_COCKPITDOORVIDEO_TOGGLE)
A32NX_OVHD_COCKPITDOORVIDEO_TOGGLE_ON#1 (>L:A32NX_OVHD_COCKPITDOORVIDEO_TOGGLE)
A32NX_RMP_L_INNER_KNOB_TURNED_ANTICLOCKWISE#(>H:A32NX_RMP_L_INNER_KNOB_TURNED_ANTICLOCKWISE)
A32NX_RMP_L_INNER_KNOB_TURNED_CLOCKWISE#(>H:A32NX_RMP_L_INNER_KNOB_TURNED_CLOCKWISE)
A32NX_RMP_L_OFF#0 (>L:A32NX_RMP_L_TOGGLE_SWITCH, bool) (>H:A32NX_RMP_L_TOGGLE_SWITCH)
A32NX_RMP_L_ON#1 (>L:A32NX_RMP_L_TOGGLE_SWITCH, bool) (>H:A32NX_RMP_L_TOGGLE_SWITCH)
A32NX_RMP_L_OUTER_KNOB_TURNED_ANTICLOCKWISE#(>H:A32NX_RMP_L_OUTER_KNOB_TURNED_ANTICLOCKWISE)
A32NX_RMP_L_OUTER_KNOB_TURNED_CLOCKWISE#(>H:A32NX_RMP_L_OUTER_KNOB_TURNED_CLOCKWISE)
A32NX_RMP_L_TOG#(L:A32NX_RMP_L_TOGGLE_SWITCH, bool) ! (>L:A32NX_RMP_L_TOGGLE_SWITCH, bool) (>H:A32NX_RMP_L_TOGGLE_SWITCH)
A32NX_RMP_L_TRANSFER_BUTTON_PRESSED#(>H:A32NX_RMP_L_TRANSFER_BUTTON_PRESSED)
A32NX_RMP_R_OFF#0 (>L:A32NX_RMP_R_TOGGLE_SWITCH, bool) (>H:A32NX_RMP_R_TOGGLE_SWITCH)
A32NX_RMP_R_ON#1 (>L:A32NX_RMP_R_TOGGLE_SWITCH, bool) (>H:A32NX_RMP_R_TOGGLE_SWITCH)
A32NX_RMP_R_TOG#(L:A32NX_RMP_R_TOGGLE_SWITCH, bool) ! (>L:A32NX_RMP_R_TOGGLE_SWITCH, bool) (>H:A32NX_RMP_R_TOGGLE_SWITCH)
//Fly By Wire/A320/Warning System
A320_Neo_MFD_BTN_TERRONND_1#(>H:A320_Neo_MFD_BTN_TERRONND_1)
A32NX_MASTER_CAUTION_PRESSED#0 (>L:A32NX_MASTER_CAUTION) 1 (>L:PUSH_AUTOPILOT_MASTERCAUT_L) 
A32NX_MASTER_CAUTION_RELEASED#0 (>L:PUSH_AUTOPILOT_MASTERCAUT_L) 
A32NX_GPWS_FLAPS3_OFF#0 (>L:A32NX_GPWS_FLAPS3)
A32NX_GPWS_FLAPS3_ON#1 (>L:A32NX_GPWS_FLAPS3)
A32NX_GPWS_FLAP_OFF_OFF#0 (>L:A32NX_GPWS_FLAP_OFF)
A32NX_GPWS_FLAP_OFF_ON#1 (>L:A32NX_GPWS_FLAP_OFF)
A32NX_GPWS_GS_OFF_OFF#0 (>L:A32NX_GPWS_GS_OFF)
A32NX_GPWS_GS_OFF_ON#1 (>L:A32NX_GPWS_GS_OFF)
A32NX_GPWS_SYS_OFF_OFF#0 (>L:A32NX_GPWS_SYS_OFF)
A32NX_GPWS_SYS_OFF_ON#1 (>L:A32NX_GPWS_SYS_OFF)
A32NX_MASTER_WARNING_PRESSED#0 (>L:A32NX_MASTER_WARNING) 1 (>L:PUSH_AUTOPILOT_MASTERAWARN_L) 
A32NX_MASTER_WARNING_RELEASED#0 (>L:PUSH_AUTOPILOT_MASTERAWARN_L)
A32NX_GPWS_TERR_OFF_OFF#0 (>L:A32NX_GPWS_TERR_OFF)
A32NX_GPWS_TERR_OFF_ON#1 (>L:A32NX_GPWS_TERR_OFF)
//FlyInside/Bell 47 G/Electrical
ALTERNATOR_SWITCH_TOGGLE#(L:Aircraft.Engine.1.Alternator.Enabled) ! (>L:Aircraft.Engine.1.Alternator.Enabled)
BATTERY_SWITCH_TOGGLE#(L:Aircraft.Electric.Battery.On) ! (>L:Aircraft.Electric.Battery.On)
IGNITION_KEY_SWITCH#(L:Aircraft.Engine.1.Input.MagnetosPosition, Number) 3 == if{ 2 (>L:Aircraft.Engine.1.Input.MagnetosPosition, Number) } els{ (L:Aircraft.Engine.1.Input.MagnetosPosition, Number) 2 == if{ 1 (>L:Aircraft.Engine.1.Input.MagnetosPosition, Number) } els{ (L:Aircraft.Engine.1.Input.MagnetosPosition, Number) 1 == if{ 0 (>L:Aircraft.Engine.1.Input.MagnetosPosition, Number) } els{ (L:Aircraft.Engine.1.Input.MagnetosPosition, Number) 0 == if{ 3 (>L:Aircraft.Engine.1.Input.MagnetosPosition, Number) }
INSTRUMENTS_POWER_SWITCH_TOGGLE#(L:Aircraft.Systems.Instruments.Enabled) ! (>L:Aircraft.Systems.Instruments.Enabled)
STARTER_COLLECTIVE_SWITCH#(L:Aircraft.Systems.Starter.Switch) ! (>L:Aircraft.Systems.Starter.Switch)
//FlyInside/Bell 47 G/Engines
OIL_TRANS_TEMP_SWAP#1.0 (L:Aircraft.Gauges.DisplayOilTemp, number) - (>L:Aircraft.Gauges.DisplayOilTemp, number)
//FlyInside/Bell 47 G/Flight Instrumentation
BAROMETRIC_PRESSURE_ENCODER_DEC#(L:Aircraft.Instruments.Altimeter.Kohlsman.HG, number) 0.01 - 1 if{ 30.8 min } (>L:Aircraft.Instruments.Altimeter.Kohlsman.HG, number)
BAROMETRIC_PRESSURE_ENCODER_INC#(L:Aircraft.Instruments.Altimeter.Kohlsman.HG, number) 0.01 + 1 if{ 30.8 min } (>L:Aircraft.Instruments.Altimeter.Kohlsman.HG, number)
STD_PRESSURE_SW#(L:Aircraft.Instruments.Altimeter.Kohlsman.HG, number) 29.92 (>L:Aircraft.Instruments.Altimeter.Kohlsman.HG, number)
//FlyInside/Bell 47 G/Fuel
FUEL_PRIMER_SWITCH_TOGGLE#(L:Aircraft.Systems.Fuel.Primer.Switch) ! (>L:Aircraft.Systems.Fuel.Primer.Switch)
//FlyInside/Bell 47 G/Interaction
CABIN_DOORS_TOGGLE#(L:Doors.Hidden) ! (>L:Doors.Hidden)
//FlyInside/Bell 47 G/Lights
BEACON_LIGHT_SWITCH_TOGGLE#(K:TOGGLE_BEACON_LIGHTS) ! (>K:TOGGLE_BEACON_LIGHTS)
CABIN_LIGHTS_ON_OFF#(>K:TOGGLE_CABIN_LIGHTS)
LANDING_LIGHT_SWITCH_TOGGLE#(K:LANDING_LIGHTS_TOGGLE) ! (>K:LANDING_LIGHTS_TOGGLE)
NAVIGATION_LIGHTS_SWITCH_TOGGLE#(K:TOGGLE_NAV_LIGHTS) ! (>K:TOGGLE_NAV_LIGHTS)
STROBE_LIGHT_SWITCH_TOGGLE#(K:STROBES_TOGGLE) ! (>K:STROBES_TOGGLE)
//FlyInside/Bell 47 G/Miscellaneous
OIL_TEMP_TRANS_SWITCH_TOGGLE#(L:Aircraft.Gauges.DisplayOilTemp) ! (>L:Aircraft.Gauges.DisplayOilTemp)
//FlyInside/Bell 47 G/Radio
COM_RADIO_KHZ_DEC_ENCODER#(>K:COM_RADIO_FRACT_DEC)
COM_RADIO_KHZ_INC_ENCODER#(>K:COM_RADIO_FRACT_INC)
COM_RADIO_MHZ_DEC_ENCODER#(>K:COM_RADIO_WHOLE_DEC)
COM_RADIO_MHZ_INC_ENCODER#(>K:COM_RADIO_WHOLE_INC)
COM_RADIO_STBY_ACTIVE_SWAP_SW#(>K:COM_STBY_RADIO_SWAP)
COM_RADIO_SWITCH_ON_OFF#(L:Aircraft.Radios.Com.1.On) ! (>L:Aircraft.Radios.Com.1.On)
TRANSPONDER_CODE_1000_INC#(K:XPNDR_1000_INC) ++ (>K:XPNDR_1000_INC)
TRANSPONDER_CODE_100_INC#(K:XPNDR_100_INC) ++ (>K:XPNDR_100_INC)
TRANSPONDER_CODE_10_INC#(K:XPNDR_10_INC) ++ (>K:XPNDR_10_INC)
TRANSPONDER_CODE_1_INC#(K:XPNDR_1_INC) ++ (>K:XPNDR_1_INC)
TRANSPONDER_MODE_CHANGE_ENCODER#(L:Aircraft.Radios.Transponder.State, Number) 4 == if{ 3 (>L:Aircraft.Radios.Transponder.State, Number) } els{ (L:Aircraft.Radios.Transponder.State, Number) 3 == if{ 2 (>L:Aircraft.Radios.Transponder.State, Number) } els{ (L:Aircraft.Radios.Transponder.State, Number) 2 == if{ 1 (>L:Aircraft.Radios.Transponder.State, Number) } els{ (L:Aircraft.Radios.Transponder.State, Number) 1 == if{ 0 (>L:Aircraft.Radios.Transponder.State, Number) }
//Flysimware/Cessna 414A/Autopilot
Garmin_605_AP_AP#(L:AP_MODE, Bool) ! (>L:AP_MODE)
Garmin_605_AP_APR#1 (>L:APR_BTN) (L:APR_MODE, bool) ! (>L:APR_MODE)
Garmin_605_AP_Alt#1 (>L:ALT_BTN) (L:ALT_MODE, bool) ! (>L:ALT_MODE)
Garmin_605_AP_BC#1 (>L:BC_BTN) (L:BC_MODE, bool) ! (>L:BC_MODE)
Garmin_605_AP_FD#1 (>L:FD_BTN) (L:FD_MODE, bool) ! (>L:FD_MODE)
Garmin_605_AP_HDG#1 (>L:HDG_BTN) (L:HDG_MODE, bool) ! (>L:HDG_MODE)
Garmin_605_AP_IAS#1 (>L:IAS_BTN) (L:IAS_MODE, bool) ! (>L:IAS_MODE)
Garmin_605_AP_NAV#1 (>L:NAV_BTN) (L:NAV_MODE, bool) ! (>L:NAV_MODE)
Garmin_605_AP_VS#1 (>L:VS_BTN) (L:VS_MODE, bool) ! (>L:VS_MODE)
Garmin_605_AP_WHL_DN#1 (>L:AP_WHEEL_DEC)
Garmin_605_AP_WHL_UP#1 (>L:AP_WHEEL_INC)
Garmin_605_AP_YD#(L:YD_MODE, bool) ! (>L:YD_MODE)
//Flysimware/Cessna 414A/Electrical
C414A_Alternator_Left_Toggle#(L:ALTERNATOR_LEFT,Bool) 1 == (A:GENERAL ENG MASTER ALTERNATOR:1, Bool) 1 == and if{ (>K:TOGGLE_ALTERNATOR1) } (L:ALTERNATOR_LEFT,Bool) 0 == (A:GENERAL ENG MASTER ALTERNATOR:1, Bool) 0 == and if{ (>K:TOGGLE_ALTERNATOR1) } (L:ALTERNATOR_LEFT,Bool) ! (>L:ALTERNATOR_LEFT,Bool) 1 (>L:MASTER_BAR,Bool) 
C414A_Alternator_Right_Toggle#(L:ALTERNATOR_RIGHT,Bool) 1 == (A:GENERAL ENG MASTER ALTERNATOR:2, Bool) 1 == and if{ (>K:TOGGLE_ALTERNATOR2) } (L:ALTERNATOR_RIGHT,Bool) 0 == (A:GENERAL ENG MASTER ALTERNATOR:2, Bool) 0 == and if{ (>K:TOGGLE_ALTERNATOR2) } (L:ALTERNATOR_RIGHT,Bool) ! (>L:ALTERNATOR_RIGHT,Bool) 1 (>L:MASTER_BAR,Bool) 
C414A_Master_Battery_Toggle#(L:ELECTRICAL_Switch_Battery_Master,Bool) 1 == (A:BUS CONNECTION ON:6,Bool) 1 == and if{ 6 1 (>K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE) } (L:ELECTRICAL_Switch_Battery_Master,Bool) 0 == (A:BUS CONNECTION ON:6,Bool) 0 == and if{ 6 1 (>K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE) } (L:ELECTRICAL_Switch_Battery_Master,Bool) ! (>L:ELECTRICAL_Switch_Battery_Master,Bool) 1 (>L:MASTER_BAR,Bool)
//Flysimware/Cessna 414A/Lights
C414A_LANDING_LIGHTS_EXTEND#0 (>K:LANDING_LIGHTS_SET) 1 (>L:GENERIC_Momentary_LIGHT_SWITCH_LANDING_1) 100 (>L:LANDING_LIGHT_MOTOR)
C414A_LANDING_LIGHTS_OFF#1 (>L:GENERIC_Momentary_LIGHT_SWITCH_LANDING_1) 0 (>K:LANDING_LIGHTS_SET) (>H:GENERIC_Momentary_LIGHT_SWITCH_LANDING_1) 
C414A_LANDING_LIGHTS_ON#2 (>L:GENERIC_Momentary_LIGHT_SWITCH_LANDING_1) 1 (>K:LANDING_LIGHTS_SET) 100 (>L:LANDING_LIGHT_MOTOR,Number) (>H:GENERIC_Momentary_LIGHT_SWITCH_LANDING_1) 
C414A_LANDING_LIGHTS_RETRACT#0 (>K:LANDING_LIGHTS_SET) 0 (>L:GENERIC_Momentary_LIGHT_SWITCH_LANDING_1) 0 (>L:LANDING_LIGHT_MOTOR) (>H:GENERIC_Momentary_LIGHT_SWITCH_LANDING_1) 
C414A_TAXI_LIGHTS_OFF#0 (>K:TAXI_LIGHTS_SET) (A:GEAR HANDLE POSITION,Bool) (L:LIGHT_TAXI, bool) ! and if{ 1 } els{ 0 } (>L:LIGHT_TAXI)
C414A_TAXI_LIGHTS_ON#1 (>K:TAXI_LIGHTS_SET) (A:GEAR HANDLE POSITION,Bool) (L:LIGHT_TAXI, bool) ! and if{ 1 } els{ 0 } (>L:LIGHT_TAXI)
//Flysimware/Cessna 414A/Navigation
TDS_GTN750U2_Direct_to_Press#1 (>L:TDSGTNXI750U2_DTOKEY)
TDS_GTN750U2_Direct_to_Rls#0 (>L:TDSGTNXI750U2_DTOKEY)
TDS_GTN750U2_Home_Press#1 (>L:TDSGTNXI750U2_HomeKEY)
TDS_GTN750U2_Home_Rls#0 (>L:TDSGTNXI750U2_HomeKEY)
TDS_GTN750U2_Knob_Push_Press#1 (>L:TDSGTNXI750U2_RKnobCRSR) 
TDS_GTN750U2_Knob_Push_Rls#0 (>L:TDSGTNXI750U2_RKnobCRSR) 
TDS_GTN750U2_Large_Knob_Dec#1 (>L:TDSGTNXI750U2_RKnobOuterDec)
TDS_GTN750U2_Large_Knob_Inc#1 (>L:TDSGTNXI750U2_RKnobOuterInc)
TDS_GTN750U2_Small_Knob_Dec#1 (>L:TDSGTNXI750U2_RKnobInnerDec)
TDS_GTN750U2_Small_Knob_Inc#1 (>L:TDSGTNXI750U2_RKnobInnerInc)
PMS_GTN750U1_CDI_Toggle#(>H:GTN750_CDI)
PMS_GTN750U1_Direct_to#(>H:GTN750_DirectToPush)
PMS_GTN750U1_FlightPlan#(>H:GTN750_GoToPage-HOME-PageFlighPlan)
PMS_GTN750U1_Home_Press#(E:SIMULATION TIME,second) 1.00 + (>L:myTimer)
PMS_GTN750U1_Home_Rls#(E:SIMULATION TIME,second) (L:myTimer) < if{ (>H:GTN750_HomePush) } els{ (>H:GTN750_HomePushLong) }
PMS_GTN750U1_Knob_Push#(>H:GTN750_KnobPush)
PMS_GTN750U1_Large_Knob_Dec#(>H:GTN750_KnobLargeDec)
PMS_GTN750U1_Large_Knob_Inc#(>H:GTN750_KnobLargeInc)
PMS_GTN750U1_Menu#(>H:GTN750_GoToPage-HOME-MENU_HOME)
PMS_GTN750U1_Procedures#(>H:GTN750_GoToPage-HOME-PageProcs)
PMS_GTN750U1_Small_Knob_Dec#(>H:GTN750_KnobSmallDec)
PMS_GTN750U1_Small_Knob_Inc#(>H:GTN750_KnobSmallInc)
PMS_GTN750U1_Transfer_Com#(>H:GTN750_GTN_COM_Switch)
PMS_GTN750U1_Transfer_Nav#(>H:GTN750_GTN_NAV_Switch)
PMS_GTN750U2_CDI_Toggle#(>H:GTN750_2_CDI)
PMS_GTN750U2_Direct_to#(>H:GTN750_2_DirectToPush)
PMS_GTN750U2_FlightPlan#(>H:GTN750_2_GoToPage-HOME-PageFlighPlan)
PMS_GTN750U2_Home_Press#(E:SIMULATION TIME,second) 1.00 + (>L:myTimer)
PMS_GTN750U2_Home_Rls#(E:SIMULATION TIME,second) (L:myTimer) < if{ (>H:GTN750_2_HomePush) } els{ (>H:GTN750_2_HomePushLong) }
PMS_GTN750U2_Knob_Push#(>H:GTN750_2_KnobPush)
PMS_GTN750U2_Large_Knob_Dec#(>H:GTN750_2_KnobLargeDec)
PMS_GTN750U2_Large_Knob_Inc#(>H:GTN750_2_KnobLargeInc)
PMS_GTN750U2_Menu#(>H:GTN750_2_GoToPage-HOME-MENU_HOME)
PMS_GTN750U2_Procedures#(>H:GTN750_2_GoToPage-HOME-PageProcs)
PMS_GTN750U2_Small_Knob_Dec#(>H:GTN750_2_KnobSmallDec)
PMS_GTN750U2_Small_Knob_Inc#(>H:GTN750_2_KnobSmallInc)
PMS_GTN750U2_Transfer_Com#(>H:GTN750_2_GTN_COM_Switch)
PMS_GTN750U2_Transfer_Nav#(>H:GTN750_2_GTN_NAV_Switch)
TDS_GTN750U1_Direct_to_Press#1 (>L:TDSGTNXI750U1_DTOKEY)
TDS_GTN750U1_Direct_to_Rls#0 (>L:TDSGTNXI750U1_DTOKEY)
TDS_GTN750U1_Home_Press#1 (>L:TDSGTNXI750U1_HomeKEY)
TDS_GTN750U1_Home_Rls#0 (>L:TDSGTNXI750U1_HomeKEY)
TDS_GTN750U1_Knob_Push_Press#1 (>L:TDSGTNXI750U1_RKnobCRSR) 
TDS_GTN750U1_Knob_Push_Rls#0 (>L:TDSGTNXI750U1_RKnobCRSR) 
TDS_GTN750U1_Large_Knob_Dec#1 (>L:TDSGTNXI750U1_RKnobOuterDec)
TDS_GTN750U1_Large_Knob_Inc#1 (>L:TDSGTNXI750U1_RKnobOuterInc)
TDS_GTN750U1_Small_Knob_Dec#1 (>L:TDSGTNXI750U1_RKnobInnerDec)
TDS_GTN750U1_Small_Knob_Inc#1 (>L:TDSGTNXI750U1_RKnobInnerInc)
//Hype Performance Group/H135/Air Condition / Pressurization
H135_AIR_CONDITION_OFF#0 (>L:AIR_COND)
H135_AIR_CONDITION_ON#1 (>L:AIR_COND)
//Hype Performance Group/H135/Autopilot System
H135_AP_ALT_HOLD_TOGGLE#(>K:AP_ALT_HOLD)
H135_AP_AP1_TOGGLE#(L:APCP_AP1) ! (>L:APCP_AP1)
H135_AP_AP2_TOGGLE#(L:APCP_AP2) ! (>L:APCP_AP2)
H135_AP_A_TRIM_TOGGLE#(L:APCP_ATRIM) ! (>L:APCP_ATRIM)
H135_AP_BACKUP_TOGGLE#(L:APCP_BACKUP) ! (>L:APCP_BACKUP)
//Hype Performance Group/H135/Avionics
H135_DISPLAY_CENTER_ON#(L:DISPLAY_CENTER_ON) ! (>L:DISPLAY_CENTER_ON)
H135_DISPLAY_LEFT_ON#(L:DISPLAY_LEFT_ON) ! (>L:DISPLAY_LEFT_ON)
H135_DISPLAY_RIGHT_ON#(L:DISPLAY_RIGHT_ON) ! (>L:DISPLAY_RIGHT_ON)
H135_Left_Lower_MFD#(L:GTN_LEFT_ON) ! (>L:GTN_LEFT_ON)
H135_MFDC_SoftKey_Bottom_1#(L:MFDC_SoftKey_Bottom_1, number) ! (>L:MFDC_SoftKey_Bottom_1, number)
H135_MFDC_SoftKey_Bottom_2#(L:MFDC_SoftKey_Bottom_2, number) ! (>L:MFDC_SoftKey_Bottom_2, number)
H135_MFDC_SoftKey_Bottom_3#(L:MFDC_SoftKey_Bottom_3, number) ! (>L:MFDC_SoftKey_Bottom_3, number)
H135_MFDC_SoftKey_Bottom_4#(L:MFDC_SoftKey_Bottom_4, number) ! (>L:MFDC_SoftKey_Bottom_4, number)
H135_MFDC_SoftKey_Bottom_5#(L:MFDC_SoftKey_Bottom_5, number) ! (>L:MFDC_SoftKey_Bottom_5, number)
H135_MFDC_SoftKey_Bottom_6#(L:MFDC_SoftKey_Bottom_6, number) ! (>L:MFDC_SoftKey_Bottom_6, number)
H135_MFDC_SoftKey_Left_1#(L:MFDC_SoftKey_Left_1, number) ! (>L:MFDC_SoftKey_Left_1, number)
H135_MFDC_SoftKey_Left_2#(L:MFDC_SoftKey_Left_2, number) ! (>L:MFDC_SoftKey_Left_2, number)
H135_MFDC_SoftKey_Left_3#(L:MFDC_SoftKey_Left_3, number) ! (>L:MFDC_SoftKey_Left_3, number)
H135_MFDC_SoftKey_Left_4#(L:MFDC_SoftKey_Left_4, number) ! (>L:MFDC_SoftKey_Left_4, number)
H135_MFDC_SoftKey_Left_5#(L:MFDC_SoftKey_Left_5, number) ! (>L:MFDC_SoftKey_Left_5, number)
H135_MFDC_SoftKey_Left_6#(L:MFDC_SoftKey_Left_6, number) ! (>L:MFDC_SoftKey_Left_6, number)
H135_MFDC_SoftKey_Right_1#(L:MFDC_SoftKey_Right_1, number) ! (>L:MFDC_SoftKey_Right_1, number)
H135_MFDC_SoftKey_Right_2#(L:MFDC_SoftKey_Right_2, number) ! (>L:MFDC_SoftKey_Right_2, number)
H135_MFDC_SoftKey_Right_3#(L:MFDC_SoftKey_Right_3, number) ! (>L:MFDC_SoftKey_Right_3, number)
H135_MFDC_SoftKey_Right_4#(L:MFDC_SoftKey_Right_4, number) ! (>L:MFDC_SoftKey_Right_4, number)
H135_MFDC_SoftKey_Right_5#(L:MFDC_SoftKey_Right_5, number) ! (>L:MFDC_SoftKey_Right_5, number)
H135_MFDC_SoftKey_Right_6#(L:MFDC_SoftKey_Right_6, number) ! (>L:MFDC_SoftKey_Right_6, number)
H135_MFDC_SoftKey_Top_1#(L:MFDC_SoftKey_Top_1, number) ! (>L:MFDC_SoftKey_Top_1, number)
H135_MFDC_SoftKey_Top_2#(L:MFDC_SoftKey_Top_2, number) ! (>L:MFDC_SoftKey_Top_2, number)
H135_MFDC_SoftKey_Top_3#(L:MFDC_SoftKey_Top_3, number) ! (>L:MFDC_SoftKey_Top_3, number)
H135_MFDC_SoftKey_Top_4#(L:MFDC_SoftKey_Top_4, number) ! (>L:MFDC_SoftKey_Top_4, number)
H135_MFDC_SoftKey_Top_5#(L:MFDC_SoftKey_Top_5, number) ! (>L:MFDC_SoftKey_Top_5, number)
H135_MFDC_SoftKey_Top_6#(L:MFDC_SoftKey_Top_6, number) ! (>L:MFDC_SoftKey_Top_6, number)
H135_MFDL_SoftKey_Bottom_1#(L:MFDL_SoftKey_Bottom_1, number) ! (>L:MFDL_SoftKey_Bottom_1, number)
H135_MFDL_SoftKey_Bottom_2#(L:MFDL_SoftKey_Bottom_2, number) ! (>L:MFDL_SoftKey_Bottom_2, number)
H135_MFDL_SoftKey_Bottom_3#(L:MFDL_SoftKey_Bottom_3, number) ! (>L:MFDL_SoftKey_Bottom_3, number)
H135_MFDL_SoftKey_Bottom_4#(L:MFDL_SoftKey_Bottom_4, number) ! (>L:MFDL_SoftKey_Bottom_4, number)
H135_MFDL_SoftKey_Bottom_5#(L:MFDL_SoftKey_Bottom_5, number) ! (>L:MFDL_SoftKey_Bottom_5, number)
H135_MFDL_SoftKey_Bottom_6#(L:MFDL_SoftKey_Bottom_6, number) ! (>L:MFDL_SoftKey_Bottom_6, number)
H135_MFDL_SoftKey_Left_1#(L:MFDL_SoftKey_Left_1, number) ! (>L:MFDL_SoftKey_Left_1, number)
H135_MFDL_SoftKey_Left_2#(L:MFDL_SoftKey_Left_2, number) ! (>L:MFDL_SoftKey_Left_2, number)
H135_MFDL_SoftKey_Left_3#(L:MFDL_SoftKey_Left_3, number) ! (>L:MFDL_SoftKey_Left_3, number)
H135_MFDL_SoftKey_Left_4#(L:MFDL_SoftKey_Left_4, number) ! (>L:MFDL_SoftKey_Left_4, number)
H135_MFDL_SoftKey_Left_5#(L:MFDL_SoftKey_Left_5, number) ! (>L:MFDL_SoftKey_Left_5, number)
H135_MFDL_SoftKey_Left_6#(L:MFDL_SoftKey_Left_6, number) ! (>L:MFDL_SoftKey_Left_6, number)
H135_MFDL_SoftKey_Right_1#(L:MFDL_SoftKey_Right_1, number) ! (>L:MFDL_SoftKey_Right_1, number)
H135_MFDL_SoftKey_Right_2#(L:MFDL_SoftKey_Right_2, number) ! (>L:MFDL_SoftKey_Right_2, number)
H135_MFDL_SoftKey_Right_3#(L:MFDL_SoftKey_Right_3, number) ! (>L:MFDL_SoftKey_Right_3, number)
H135_MFDL_SoftKey_Right_4#(L:MFDL_SoftKey_Right_4, number) ! (>L:MFDL_SoftKey_Right_4, number)
H135_MFDL_SoftKey_Right_5#(L:MFDL_SoftKey_Right_5, number) ! (>L:MFDL_SoftKey_Right_5, number)
H135_MFDL_SoftKey_Right_6#(L:MFDL_SoftKey_Right_6, number) ! (>L:MFDL_SoftKey_Right_6, number)
H135_MFDL_SoftKey_Top_1#(L:MFDL_SoftKey_Top_1, number) ! (>L:MFDL_SoftKey_Top_1, number)
H135_MFDL_SoftKey_Top_2#(L:MFDL_SoftKey_Top_2, number) ! (>L:MFDL_SoftKey_Top_2, number)
H135_MFDL_SoftKey_Top_3#(L:MFDL_SoftKey_Top_3, number) ! (>L:MFDL_SoftKey_Top_3, number)
H135_MFDL_SoftKey_Top_4#(L:MFDL_SoftKey_Top_4, number) ! (>L:MFDL_SoftKey_Top_4, number)
H135_MFDL_SoftKey_Top_5#(L:MFDL_SoftKey_Top_5, number) ! (>L:MFDL_SoftKey_Top_5, number)
H135_MFDL_SoftKey_Top_6#(L:MFDL_SoftKey_Top_6, number) ! (>L:MFDL_SoftKey_Top_6, number)
H135_MFDR_SoftKey_Bottom_1#(L:MFDR_SoftKey_Bottom_1, number) ! (>L:MFDR_SoftKey_Bottom_1, number)
H135_MFDR_SoftKey_Bottom_2#(L:MFDR_SoftKey_Bottom_2, number) ! (>L:MFDR_SoftKey_Bottom_2, number)
H135_MFDR_SoftKey_Bottom_3#(L:MFDR_SoftKey_Bottom_3, number) ! (>L:MFDR_SoftKey_Bottom_3, number)
H135_MFDR_SoftKey_Bottom_4#(L:MFDR_SoftKey_Bottom_4, number) ! (>L:MFDR_SoftKey_Bottom_4, number)
H135_MFDR_SoftKey_Bottom_5#(L:MFDR_SoftKey_Bottom_5, number) ! (>L:MFDR_SoftKey_Bottom_5, number)
H135_MFDR_SoftKey_Bottom_6#(L:MFDR_SoftKey_Bottom_6, number) ! (>L:MFDR_SoftKey_Bottom_6, number)
H135_MFDR_SoftKey_Left_1#(L:MFDR_SoftKey_Left_1, number) ! (>L:MFDR_SoftKey_Left_1, number)
H135_MFDR_SoftKey_Left_2#(L:MFDR_SoftKey_Left_2, number) ! (>L:MFDR_SoftKey_Left_2, number)
H135_MFDR_SoftKey_Left_3#(L:MFDR_SoftKey_Left_3, number) ! (>L:MFDR_SoftKey_Left_3, number)
H135_MFDR_SoftKey_Left_4#(L:MFDR_SoftKey_Left_4, number) ! (>L:MFDR_SoftKey_Left_4, number)
H135_MFDR_SoftKey_Left_5#(L:MFDR_SoftKey_Left_5, number) ! (>L:MFDR_SoftKey_Left_5, number)
H135_MFDR_SoftKey_Left_6#(L:MFDR_SoftKey_Left_6, number) ! (>L:MFDR_SoftKey_Left_6, number)
H135_MFDR_SoftKey_Right_1#(L:MFDR_SoftKey_Right_1, number) ! (>L:MFDR_SoftKey_Right_1, number)
H135_MFDR_SoftKey_Right_2#(L:MFDR_SoftKey_Right_2, number) ! (>L:MFDR_SoftKey_Right_2, number)
H135_MFDR_SoftKey_Right_3#(L:MFDR_SoftKey_Right_3, number) ! (>L:MFDR_SoftKey_Right_3, number)
H135_MFDR_SoftKey_Right_4#(L:MFDR_SoftKey_Right_4, number) ! (>L:MFDR_SoftKey_Right_4, number)
H135_MFDR_SoftKey_Right_5#(L:MFDR_SoftKey_Right_5, number) ! (>L:MFDR_SoftKey_Right_5, number)
H135_MFDR_SoftKey_Right_6#(L:MFDR_SoftKey_Right_6, number) ! (>L:MFDR_SoftKey_Right_6, number)
H135_MFDR_SoftKey_Top_1#(L:MFDR_SoftKey_Top_1, number) ! (>L:MFDR_SoftKey_Top_1, number)
H135_MFDR_SoftKey_Top_2#(L:MFDR_SoftKey_Top_2, number) ! (>L:MFDR_SoftKey_Top_2, number)
H135_MFDR_SoftKey_Top_3#(L:MFDR_SoftKey_Top_3, number) ! (>L:MFDR_SoftKey_Top_3, number)
H135_MFDR_SoftKey_Top_4#(L:MFDR_SoftKey_Top_4, number) ! (>L:MFDR_SoftKey_Top_4, number)
H135_MFDR_SoftKey_Top_5#(L:MFDR_SoftKey_Top_5, number) ! (>L:MFDR_SoftKey_Top_5, number)
H135_MFDR_SoftKey_Top_6#(L:MFDR_SoftKey_Top_6, number) ! (>L:MFDR_SoftKey_Top_6, number)
H135_Right_Lower_MFD#(L:GTN_RIGHT_ON) ! (>L:GTN_RIGHT_ON)
H135_AVIONICS_1_OFF#0 (>K:AVIONICS_MASTER_1_SET)
H135_AVIONICS_1_ON#1 (>K:AVIONICS_MASTER_1_SET)
H135_AVIONICS_2_OFF#0 (>K:AVIONICS_MASTER_2_SET)
H135_AVIONICS_2_ON#1 (>K:AVIONICS_MASTER_2_SET)
H135_PITOT_HEATER_1_OFF#1 (>K:PITOT_HEAT_OFF)
H135_PITOT_HEATER_1_ON#1 (>K:PITOT_HEAT_ON)
H135_PITOT_HEATER_2_OFF#2 (>K:PITOT_HEAT_OFF)
H135_PITOT_HEATER_2_ON#2 (>K:PITOT_HEAT_ON)
//Hype Performance Group/H135/Electrical
H135_MASTER_AND_STANDBY_BATTERY_OFF#0 (>K:MASTER_BATTERY_SET)
H135_MASTER_AND_STANDBY_BATTERY_ON#1 (>K:MASTER_BATTERY_SET)
H135_MASTER_AND_STANDBY_BATTERY_TOGGLE#0 (>K:TOGGLE_MASTER_BATTERY) 
//Hype Performance Group/H135/Engines
H135_Engine1_Down#(L:Engine1_Down, bool) ! (>L:Engine1_Down, bool)
H135_Engine1_Up#(L:Engine1_Up, bool) ! (>L:Engine1_Up, bool)
H135_Engine2_Down#(L:Engine2_Down, bool) ! (>L:Engine2_Down, bool)
H135_Engine2_Up#(L:Engine2_Up, bool) ! (>L:Engine2_Up, bool)
//Hype Performance Group/H135/Fire
H135_FIRE_TEST_ENG1#(L:ENG1_FIRE_TEST) ! (>L:ENG1_FIRE_TEST)
H135_FIRE_TEST_ENG2#(L:ENG2_FIRE_TEST) ! (>L:ENG2_FIRE_TEST)
//Hype Performance Group/H135/Fuel
H135_FUEL_AUX_TOGGLE#3 (>K:FUELSYSTEM_VALVE_TOGGLE)
H135_FUEL_PRIME_PUMP_1_OFF#0 (>L:ENG1_PRIME)
H135_FUEL_PRIME_PUMP_1_ON#1 (>L:ENG1_PRIME)
H135_FUEL_PRIME_PUMP_2_OFF#0 (>L:ENG2_PRIME)
H135_FUEL_PRIME_PUMP_2_ON#1 (>L:ENG2_PRIME)
H135_FUEL_PUMP_1_OFF#1 (>K:FUELSYSTEM_PUMP_OFF)
H135_FUEL_PUMP_1_ON#1 (>K:FUELSYSTEM_PUMP_ON)
H135_FUEL_PUMP_2_OFF#4 (>K:FUELSYSTEM_PUMP_OFF)
H135_FUEL_PUMP_2_ON#4 (>K:FUELSYSTEM_PUMP_ON)
//Hype Performance Group/H135/Lights
H135_ACOL_LIGHT_OFF#1 (>K:BEACON_LIGHTS_OFF)
H135_ACOL_LIGHT_ON#1 (>K:BEACON_LIGHTS_ON)
H135_ACOL_LIGHT_Toggle#(>K:TOGGLE_BEACON_LIGHTS)
H135_CABIN_LIGHT_OFF#1 (>K:CABIN_LIGHTS_OFF)
H135_CABIN_LIGHT_ON#1 (>K:CABIN_LIGHTS_ON)
H135_CABIN_LIGHT_TOGGLE#(>K:TOGGLE_CABIN_LIGHTS)
H135_LANDING_LIGHTS_OFF#0 (>K:LANDING_LIGHTS_SET)
H135_LANDING_LIGHTS_ON#1 (>K:LANDING_LIGHTS_SET)
H135_POS_LIGHT_OFF#1 (>K:NAV_LIGHTS_OFF)
H135_POS_LIGHT_ON#1 (>K:NAV_LIGHTS_ON)
H135_POS_LIGHT_TOGGLE#(>K:TOGGLE_NAV_LIGHTS)
H135_STROBE_LIGHT_OFF#0 (>K:STROBES_SET)
H135_STROBE_LIGHT_ON#1 (>K:STROBES_SET)
//Hype Performance Group/H135/Miscellaneous
H135_MFDC_Knob_Down#(L:MFDC_Knob_Down, bool) ! (>L:MFDC_Knob_Down, bool)
H135_MFDC_Knob_Up#(L:MFDC_Knob_Up, bool) ! (>L:MFDC_Knob_Up, bool)
H135_MFDC_SoftKey_Right_BRT_Down#(L:Bright_Down, bool) ! (>L:Bright_Down, bool)
H135_MFDC_SoftKey_Right_BRT_Up#(L:Bright_Up, bool) ! (>L:Bright_Up, bool)
H135_MFDL_Knob_Down#(L:MFDL_Knob_Down, bool) ! (>L:MFDL_Knob_Down, bool)
H135_MFDL_Knob_Up#(L:MFDL_Knob_Up, bool) ! (>L:MFDL_Knob_Up, bool)
H135_MFDL_SoftKey_Right_BRT_Down#(L:Bright_Down, bool) ! (>L:Bright_Down, bool)
H135_MFDL_SoftKey_Right_BRT_Up#(L:Bright_Up, bool) ! (>L:Bright_Up, bool)
H135_MFDR_Knob_Down#(L:MFDR_Knob_Down, bool) ! (>L:MFDR_Knob_Down, bool)
H135_MFDR_Knob_Up#(L:MFDR_Knob_Up, bool) ! (>L:MFDR_Knob_Up, bool)
H135_MFDR_SoftKey_Right_BRT_Down#(L:Bright_Down, bool) ! (>L:Bright_Down, bool)
H135_MFDR_SoftKey_Right_BRT_Up#(L:Bright_Up, bool) ! (>L:Bright_Up, bool)
H135_Search_Light#(L:SPOTLIGHT_MODE, bool) ! (>L:SPOTLIGHT_MODE, bool)
H135_Tablet_Open#(L:TABLET_OPEN, bool) ! (>L:TABLET_OPEN, bool)
H135_Turbo_Mode#(L:TURBO_MODE) ! (>L:TURBO_MODE)
//Hype Performance Group/H135/Passengers/Crew
H135_Pilot_0_Show#(L:PILOT_1_SHOW, bool) ! (>L:PILOT_0_SHOW, bool)
H135_Pilot_1_Show#(L:PILOT_1_SHOW, bool) ! (>L:PILOT_1_SHOW, bool)
//Hype Performance Group/H135/Warning System
H135_WARNING_LIGHTS_TEST_TOGGLE#(L:WARNIGNS_TEST_ON) ! (>L:WARNIGNS_TEST_ON)
//Hype Performance Group/H145/Air Condition / Pressurization
H145_SDK_OH_AIR_CONDITIONING_OFF#(>H:H145_SDK_OH_AIR_CONDITIONING_OFF)
H145_SDK_OH_AIR_CONDITIONING_ON#(>H:H145_SDK_OH_AIR_CONDITIONING_ON)
H145_SDK_OH_COCKPIT_VENT_OFF#(>H:H145_SDK_OH_COCKPIT_VENT_OFF)
H145_SDK_OH_COCKPIT_VENT_ON#(>H:H145_SDK_OH_COCKPIT_VENT_ON)
H145_SDK_OH_IBF_1_CLOSED#(>H:H145_SDK_OH_IBF_1_CLOSED)
H145_SDK_OH_IBF_1_NORMAL#(>H:H145_SDK_OH_IBF_1_NORMAL)
H145_SDK_OH_IBF_1_OPEN#(>H:H145_SDK_OH_IBF_1_OPEN)
H145_SDK_OH_IBF_2_CLOSED#(>H:H145_SDK_OH_IBF_2_CLOSED)
H145_SDK_OH_IBF_2_NORMAL#(>H:H145_SDK_OH_IBF_2_NORMAL)
H145_SDK_OH_IBF_2_OPEN#(>H:H145_SDK_OH_IBF_2_OPEN)
H145_SDK_OH_IBF_RECALL_OFF#(>H:H145_SDK_OH_IBF_RECALL_OFF)
H145_SDK_OH_IBF_RECALL_ON#(>H:H145_SDK_OH_IBF_RECALL_ON)
//Hype Performance Group/H145/Autopilot
H145_SDK_APCP_ALTA_AntiClockwise#(>H:H145_SDK_APCP_ALTA_AntiClockwise)
H145_SDK_APCP_ALTA_Clockwise#(>H:H145_SDK_APCP_ALTA_Clockwise)
H145_SDK_APCP_ALT_TOGGLE#(>H:H145_SDK_APCP_ALT_TOGGLE)
H145_SDK_APCP_AP1_TOGGLE#(>H:H145_SDK_APCP_AP1_TOGGLE)
H145_SDK_APCP_AP2_TOGGLE#(>H:H145_SDK_APCP_AP2_TOGGLE)
H145_SDK_APCP_ATRIM_TOGGLE#(>H:H145_SDK_APCP_ATRIM_TOGGLE)
H145_SDK_APCP_BKUP_TOGGLE#(>H:H145_SDK_APCP_BKUP_TOGGLE)
H145_SDK_APCP_CRHT_AntiClockwise#(>H:H145_SDK_APCP_CRHT_AntiClockwise)
H145_SDK_APCP_CRHT_Clockwise#(>H:H145_SDK_APCP_CRHT_Clockwise)
H145_SDK_APCP_CRHT_TOGGLE#(>H:H145_SDK_APCP_CRHT_TOGGLE)
H145_SDK_APCP_HDG_AntiClockwise#(>H:H145_SDK_APCP_HDG_AntiClockwise)
H145_SDK_APCP_HDG_Clockwise#(>H:H145_SDK_APCP_HDG_Clockwise)
//Hype Performance Group/H145/Avionics
H145_MFD1_SoftKey_B1#(>H:MFD1_SoftKey_B1)
H145_MFD1_SoftKey_B2#(>H:MFD1_SoftKey_B2)
H145_MFD1_SoftKey_B3#(>H:MFD1_SoftKey_B3)
H145_MFD1_SoftKey_B4#(>H:MFD1_SoftKey_B4)
H145_MFD1_SoftKey_B5#(>H:MFD1_SoftKey_B5)
H145_MFD1_SoftKey_B6#(>H:MFD1_SoftKey_B6)
H145_MFD1_SoftKey_KnobInnerAntiClockwise#(>H:MFD1_SoftKey_KnobInnerAntiClockwise)
H145_MFD1_SoftKey_KnobInnerClockwise#(>H:MFD1_SoftKey_KnobInnerClockwise)
H145_MFD1_SoftKey_KnobInnerPush#(>H:MFD1_SoftKey_KnobInnerPush)
H145_MFD1_SoftKey_KnobInnerPushLong#(>H:MFD1_SoftKey_KnobInnerPushLong)
H145_MFD1_SoftKey_KnobOuterAntiClockwise#(>H:MFD1_SoftKey_KnobOuterAntiClockwise)
H145_MFD1_SoftKey_KnobOuterClockwise#(>H:MFD1_SoftKey_KnobOuterClockwise)
H145_MFD1_SoftKey_L1#(>H:MFD1_SoftKey_L1)
H145_MFD1_SoftKey_L2#(>H:MFD1_SoftKey_L2)
H145_MFD1_SoftKey_L3#(>H:MFD1_SoftKey_L3)
H145_MFD1_SoftKey_L4#(>H:MFD1_SoftKey_L4)
H145_MFD1_SoftKey_L5#(>H:MFD1_SoftKey_L5)
H145_MFD1_SoftKey_L6#(>H:MFD1_SoftKey_L6)
H145_MFD1_SoftKey_R1#(>H:MFD1_SoftKey_R1)
H145_MFD1_SoftKey_R2#(>H:MFD1_SoftKey_R2)
H145_MFD1_SoftKey_R3#(>H:MFD1_SoftKey_R3)
H145_MFD1_SoftKey_R4#(>H:MFD1_SoftKey_R4)
H145_MFD1_SoftKey_R5#(>H:MFD1_SoftKey_R5)
H145_MFD1_SoftKey_R6#(>H:MFD1_SoftKey_R6)
H145_MFD1_SoftKey_T1#(>H:MFD1_SoftKey_T1)
H145_MFD1_SoftKey_T2#(>H:MFD1_SoftKey_T2)
H145_MFD1_SoftKey_T3#(>H:MFD1_SoftKey_T3)
H145_MFD1_SoftKey_T4#(>H:MFD1_SoftKey_T4)
H145_MFD1_SoftKey_T5#(>H:MFD1_SoftKey_T5)
H145_MFD1_SoftKey_T6#(>H:MFD1_SoftKey_T6)
H145_MFD2_SoftKey_B1#(>H:MFD2_SoftKey_B1)
H145_MFD2_SoftKey_B2#(>H:MFD2_SoftKey_B2)
H145_MFD2_SoftKey_B3#(>H:MFD2_SoftKey_B3)
H145_MFD2_SoftKey_B4#(>H:MFD2_SoftKey_B4)
H145_MFD2_SoftKey_B5#(>H:MFD2_SoftKey_B5)
H145_MFD2_SoftKey_B6#(>H:MFD2_SoftKey_B6)
H145_MFD2_SoftKey_KnobInnerAntiClockwise#(>H:MFD2_SoftKey_KnobInnerAntiClockwise)
H145_MFD2_SoftKey_KnobInnerClockwise#(>H:MFD2_SoftKey_KnobInnerClockwise)
H145_MFD2_SoftKey_KnobInnerPush#(>H:MFD2_SoftKey_KnobInnerPush)
H145_MFD2_SoftKey_KnobInnerPushLong#(>H:MFD2_SoftKey_KnobInnerPushLong)
H145_MFD2_SoftKey_KnobOuterAntiClockwise#(>H:MFD2_SoftKey_KnobOuterAntiClockwise)
H145_MFD2_SoftKey_KnobOuterClockwise#(>H:MFD2_SoftKey_KnobOuterClockwise)
H145_MFD2_SoftKey_L1#(>H:MFD2_SoftKey_L1)
H145_MFD2_SoftKey_L2#(>H:MFD2_SoftKey_L2)
H145_MFD2_SoftKey_L3#(>H:MFD2_SoftKey_L3)
H145_MFD2_SoftKey_L4#(>H:MFD2_SoftKey_L4)
H145_MFD2_SoftKey_L5#(>H:MFD2_SoftKey_L5)
H145_MFD2_SoftKey_L6#(>H:MFD2_SoftKey_L6)
H145_MFD2_SoftKey_R1#(>H:MFD2_SoftKey_R1)
H145_MFD2_SoftKey_R2#(>H:MFD2_SoftKey_R2)
H145_MFD2_SoftKey_R3#(>H:MFD2_SoftKey_R3)
H145_MFD2_SoftKey_R4#(>H:MFD2_SoftKey_R4)
H145_MFD2_SoftKey_R5#(>H:MFD2_SoftKey_R5)
H145_MFD2_SoftKey_R6#(>H:MFD2_SoftKey_R6)
H145_MFD2_SoftKey_T1#(>H:MFD2_SoftKey_T1)
H145_MFD2_SoftKey_T2#(>H:MFD2_SoftKey_T2)
H145_MFD2_SoftKey_T3#(>H:MFD2_SoftKey_T3)
H145_MFD2_SoftKey_T4#(>H:MFD2_SoftKey_T4)
H145_MFD2_SoftKey_T5#(>H:MFD2_SoftKey_T5)
H145_MFD2_SoftKey_T6#(>H:MFD2_SoftKey_T6)
H145_MFD4_SoftKey_B1#(>H:MFD4_SoftKey_B1)
H145_MFD4_SoftKey_B2#(>H:MFD4_SoftKey_B2)
H145_MFD4_SoftKey_B3#(>H:MFD4_SoftKey_B3)
H145_MFD4_SoftKey_B4#(>H:MFD4_SoftKey_B4)
H145_MFD4_SoftKey_B5#(>H:MFD4_SoftKey_B5)
H145_MFD4_SoftKey_B6#(>H:MFD4_SoftKey_B6)
H145_MFD4_SoftKey_KnobInnerAntiClockwise#(>H:MFD4_SoftKey_KnobInnerAntiClockwise)
H145_MFD4_SoftKey_KnobInnerClockwise#(>H:MFD4_SoftKey_KnobInnerClockwise)
H145_MFD4_SoftKey_KnobInnerPush#(>H:MFD4_SoftKey_KnobInnerPush)
H145_MFD4_SoftKey_KnobInnerPushLong#(>H:MFD4_SoftKey_KnobInnerPushLong)
H145_MFD4_SoftKey_KnobOuterAntiClockwise#(>H:MFD4_SoftKey_KnobOuterAntiClockwise)
H145_MFD4_SoftKey_KnobOuterClockwise#(>H:MFD4_SoftKey_KnobOuterClockwise)
H145_MFD4_SoftKey_L1#(>H:MFD4_SoftKey_L1)
H145_MFD4_SoftKey_L2#(>H:MFD4_SoftKey_L2)
H145_MFD4_SoftKey_L3#(>H:MFD4_SoftKey_L3)
H145_MFD4_SoftKey_L4#(>H:MFD4_SoftKey_L4)
H145_MFD4_SoftKey_L5#(>H:MFD4_SoftKey_L5)
H145_MFD4_SoftKey_L6#(>H:MFD4_SoftKey_L6)
H145_MFD4_SoftKey_R1#(>H:MFD4_SoftKey_R1)
H145_MFD4_SoftKey_R2#(>H:MFD4_SoftKey_R2)
H145_MFD4_SoftKey_R3#(>H:MFD4_SoftKey_R3)
H145_MFD4_SoftKey_R4#(>H:MFD4_SoftKey_R4)
H145_MFD4_SoftKey_R5#(>H:MFD4_SoftKey_R5)
H145_MFD4_SoftKey_R6#(>H:MFD4_SoftKey_R6)
H145_MFD4_SoftKey_T1#(>H:MFD4_SoftKey_T1)
H145_MFD4_SoftKey_T2#(>H:MFD4_SoftKey_T2)
H145_MFD4_SoftKey_T3#(>H:MFD4_SoftKey_T3)
H145_MFD4_SoftKey_T4#(>H:MFD4_SoftKey_T4)
H145_MFD4_SoftKey_T5#(>H:MFD4_SoftKey_T5)
H145_MFD4_SoftKey_T6#(>H:MFD4_SoftKey_T6)
H145_AVIONICS_1_OFF#0 (>K:AVIONICS_MASTER_1_SET)
H145_AVIONICS_1_ON#1 (>K:AVIONICS_MASTER_1_SET)
H145_AVIONICS_2_OFF#0 (>K:AVIONICS_MASTER_2_SET)
H145_AVIONICS_2_ON#1 (>K:AVIONICS_MASTER_2_SET)
//Hype Performance Group/H145/Electrical
H145_SDK_OH_BAT_MASTER_ENGAGE#(>H:H145_SDK_OH_BAT_MASTER_ENGAGE)
H145_SDK_OH_BAT_MASTER_OFF#(>H:H145_SDK_OH_BAT_MASTER_OFF)
H145_SDK_OH_BAT_MASTER_ON#(>H:H145_SDK_OH_BAT_MASTER_ON)
H145_SDK_OH_DC_RECEPT_OFF#(>H:H145_SDK_OH_DC_RECEPT_OFF)
H145_SDK_OH_DC_RECEPT_ON#(>H:H145_SDK_OH_DC_RECEPT_ON)
_DISCONTINUED__H145_SDK_OH_STANDBY_BATTERY_ON#1 (>K:H145_SDK_OH_STANDBY_BATTERY_SET)
H145_SDK_OH_COCKPIT_LIGHT_REAR_TOGGLE#(>H:H145_SDK_OH_COCKPIT_LIGHT_REAR_TOGGLE)
H145_SDK_OH_PITOT_1_OFF#(>H:H145_SDK_OH_PITOT_1_OFF)
H145_SDK_OH_PITOT_1_ON#(>H:H145_SDK_OH_PITOT_1_ON)
H145_SDK_OH_PITOT_2_OFF#(>H:H145_SDK_OH_PITOT_2_OFF)
H145_SDK_OH_PITOT_2_ON#(>H:H145_SDK_OH_PITOT_2_ON)
H145_SDK_OH_STANDBY_BATTERY_OFF#(>H:H145_SDK_OH_STANDBY_BATTERY_OFF)
H145_SDK_OH_STANDBY_BATTERY_ON#(>H:H145_SDK_OH_STANDBY_BATTERY_ON)
//Hype Performance Group/H145/Engines
H145_SDK_ECP_FADEC_EMER_1_OFF#(>H:H145_SDK_ECP_FADEC_EMER_1_OFF)
H145_SDK_ECP_FADEC_EMER_1_ON#(>H:H145_SDK_ECP_FADEC_EMER_1_ON)
H145_SDK_ECP_FADEC_EMER_2_OFF#(>H:H145_SDK_ECP_FADEC_EMER_2_OFF)
H145_SDK_ECP_FADEC_EMER_2_ON#(>H:H145_SDK_ECP_FADEC_EMER_2_ON)
H145_SDK_ECP_MAIN_1_FLIGHT#(>H:H145_SDK_ECP_MAIN_1_FLIGHT)
H145_SDK_ECP_MAIN_1_IDLE#(>H:H145_SDK_ECP_MAIN_1_IDLE)
H145_SDK_ECP_MAIN_1_OFF#(>H:H145_SDK_ECP_MAIN_1_OFF)
H145_SDK_ECP_MAIN_2_FLIGHT#(>H:H145_SDK_ECP_MAIN_2_FLIGHT)
H145_SDK_ECP_MAIN_2_IDLE#(>H:H145_SDK_ECP_MAIN_2_IDLE)
H145_SDK_ECP_MAIN_2_OFF#(>H:H145_SDK_ECP_MAIN_2_OFF)
H145_SDK_ECP_MAIN_LATCH_1_OFF#(>H:H145_SDK_ECP_MAIN_LATCH_1_OFF)
H145_SDK_ECP_MAIN_LATCH_1_ON#(>H:H145_SDK_ECP_MAIN_LATCH_1_ON)
H145_SDK_ECP_MAIN_LATCH_2_OFF#(>H:H145_SDK_ECP_MAIN_LATCH_2_OFF)
H145_SDK_ECP_MAIN_LATCH_2_ON#(>H:H145_SDK_ECP_MAIN_LATCH_2_ON)
H145_SDK_ECP_MAIN_1_DOWN#(>H:H145_SDK_ECP_MAIN_1_DOWN)
H145_SDK_ECP_MAIN_1_UP#(>H:H145_SDK_ECP_MAIN_1_UP)
H145_SDK_ECP_MAIN_2_DOWN#(>H:H145_SDK_ECP_MAIN_2_DOWN)
H145_SDK_ECP_MAIN_2_UP#(>H:H145_SDK_ECP_MAIN_2_UP)
//Hype Performance Group/H145/Fuel
H145_SDK_OH_FUEL_ENG1_PRIME_OFF#(>H:H145_SDK_OH_FUEL_ENG1_PRIME_OFF)
H145_SDK_OH_FUEL_ENG1_PRIME_ON#(>H:H145_SDK_OH_FUEL_ENG1_PRIME_ON)
H145_SDK_OH_FUEL_ENG2_PRIME_OFF#(>H:H145_SDK_OH_FUEL_ENG2_PRIME_OFF)
H145_SDK_OH_FUEL_ENG2_PRIME_ON#(>H:H145_SDK_OH_FUEL_ENG2_PRIME_ON)
H145_SDK_OH_FUEL_TRANSFER_AFT_OFF#(>H:H145_SDK_OH_FUEL_TRANSFER_AFT_OFF)
H145_SDK_OH_FUEL_TRANSFER_AFT_ON#(>H:H145_SDK_OH_FUEL_TRANSFER_AFT_ON)
H145_SDK_OH_FUEL_TRANSFER_FWD_OFF#(>H:H145_SDK_OH_FUEL_TRANSFER_FWD_OFF)
H145_SDK_OH_FUEL_TRANSFER_FWD_ON#(>H:H145_SDK_OH_FUEL_TRANSFER_FWD_ON)
//Hype Performance Group/H145/Lights
H145_SDK_OH_INT_LIGHT_CARGO_PAX_OFF#(>H:H145_SDK_OH_INT_LIGHT_CARGO_PAX_OFF)
H145_SDK_OH_INT_LIGHT_CARGO_PAX_ON#(>H:H145_SDK_OH_INT_LIGHT_CARGO_PAX_ON)
H145_SDK_OH_INT_LIGHT_CARGO_PAX_PAX#(>H:H145_SDK_OH_INT_LIGHT_CARGO_PAX_PAX)
H145_SDK_OH_INT_LIGHT_EMERGENCY_EXITS_ARM#(>H:H145_SDK_OH_INT_LIGHT_EMERGENCY_EXITS_ARM)
H145_SDK_OH_INT_LIGHT_EMERGENCY_EXITS_OFF#(>H:H145_SDK_OH_INT_LIGHT_EMERGENCY_EXITS_OFF)
H145_SDK_OH_INT_LIGHT_EMERGENCY_EXITS_ON#(>H:H145_SDK_OH_INT_LIGHT_EMERGENCY_EXITS_ON)
H145_SDK_OH_INT_LIGHT_INSTRUMENT_PANEL_OFF#(>H:H145_SDK_OH_INT_LIGHT_INSTRUMENT_PANEL_OFF)
H145_SDK_OH_INT_LIGHT_INSTRUMENT_PANEL_ON#(>H:H145_SDK_OH_INT_LIGHT_INSTRUMENT_PANEL_ON)
H145_SDK_MASTERBRIGHTNESS_DEC#(>H:H145_SDK_MASTERBRIGHTNESS_DEC)
H145_SDK_MASTERBRIGHTNESS_INC#(>H:H145_SDK_MASTERBRIGHTNESS_INC)
H145_SDK_OH_INT_LIGHT_INSTRUMENT_PANEL_DAY#(>H:H145_SDK_OH_INT_LIGHT_INSTRUMENT_PANEL_DAY)
H145_SDK_OH_INT_LIGHT_INSTRUMENT_PANEL_NIGHT#(>H:H145_SDK_OH_INT_LIGHT_INSTRUMENT_PANEL_NIGHT)
H145_SDK_OH_INT_LIGHT_INSTRUMENT_PANEL_NVG#(>H:H145_SDK_OH_INT_LIGHT_INSTRUMENT_PANEL_NVG)
//Hype Performance Group/H145/Miscellaneous
H145_SDK_DOOR_CARGO_L_TOGGLE#(>H:H145_SDK_DOOR_CARGO_L_TOGGLE)
H145_SDK_DOOR_CARGO_R_TOGGLE#(>H:H145_SDK_DOOR_CARGO_R_TOGGLE)
H145_SDK_DOOR_COCKPIT_L_TOGGLE#(>H:H145_SDK_DOOR_COCKPIT_L_TOGGLE)
H145_SDK_DOOR_COCKPIT_R_TOGGLE#(>H:H145_SDK_DOOR_COCKPIT_R_TOGGLE)
H145_SDK_DOOR_PAX_L_TOGGLE#(>H:H145_SDK_DOOR_PAX_L_TOGGLE)
H145_SDK_DOOR_PAX_R_TOGGLE#(>H:H145_SDK_DOOR_PAX_R_TOGGLE)
H145_SDK_OH_WINDSHIELD_WIPER_FAST#(>H:H145_SDK_OH_WINDSHIELD_WIPER_FAST)
H145_SDK_OH_WINDSHIELD_WIPER_OFF#(>H:H145_SDK_OH_WINDSHIELD_WIPER_OFF)
H145_SDK_OH_WINDSHIELD_WIPER_SLOW#(>H:H145_SDK_OH_WINDSHIELD_WIPER_SLOW)
H145_SDK_TABLET_OPENCLOSE#(>H:H145_SDK_TABLET_OPENCLOSE)
//Hype Performance Group/H145/Radio
H145_SDK_OH_AUDIO_ACAS_MUTE#(>H:H145_SDK_OH_AUDIO_ACAS_MUTE)
H145_SDK_OH_AUDIO_ACAS_NORMAL#(>H:H145_SDK_OH_AUDIO_ACAS_NORMAL)
H145_SDK_OH_AUDIO_ACAS_TEST#(>H:H145_SDK_OH_AUDIO_ACAS_TEST)
H145_SDK_OH_AUDIO_HTAWS_MUTE#(>H:H145_SDK_OH_AUDIO_HTAWS_MUTE)
H145_SDK_OH_AUDIO_HTAWS_NORMAL#(>H:H145_SDK_OH_AUDIO_HTAWS_NORMAL)
H145_SDK_OH_AUDIO_HTAWS_STANDBY#(>H:H145_SDK_OH_AUDIO_HTAWS_STANDBY)
//Hype Performance Group/H145/Safety
H145_SDK_OH_EMER_FLOATS_ARM#(>H:H145_SDK_OH_EMER_FLOATS_ARM)
H145_SDK_OH_EMER_FLOATS_OFF#(>H:H145_SDK_OH_EMER_FLOATS_OFF)
H145_SDK_OH_EMER_FLOATS_TEST#(>H:H145_SDK_OH_EMER_FLOATS_TEST)
H145_SDK_OH_FIRE_ENG1_TEST_EXT#(>H:H145_SDK_OH_FIRE_ENG1_TEST_EXT)
H145_SDK_OH_FIRE_ENG1_TEST_EXT_WARN#(>H:H145_SDK_OH_FIRE_ENG1_TEST_EXT_WARN)
H145_SDK_OH_FIRE_ENG1_TEST_OFF#(>H:H145_SDK_OH_FIRE_ENG1_TEST_OFF)
H145_SDK_OH_FIRE_ENG2_TEST_EXT#(>H:H145_SDK_OH_FIRE_ENG2_TEST_EXT)
H145_SDK_OH_FIRE_ENG2_TEST_EXT_WARN#(>H:H145_SDK_OH_FIRE_ENG2_TEST_EXT_WARN)
H145_SDK_OH_FIRE_ENG2_TEST_OFF#(>H:H145_SDK_OH_FIRE_ENG2_TEST_OFF)
H145_SDK_OH_FUZZ_CHIP_BURNER_OFF#(>H:H145_SDK_OH_FUZZ_CHIP_BURNER_OFF)
H145_SDK_OH_FUZZ_CHIP_BURNER_ON#(>H:H145_SDK_OH_FUZZ_CHIP_BURNER_ON)
H145_SDK_OH_HYD_TEST_OFF#(>H:H145_SDK_OH_HYD_TEST_OFF)
H145_SDK_OH_HYD_TEST_SYS1#(>H:H145_SDK_OH_HYD_TEST_SYS1)
H145_SDK_OH_HYD_TEST_SYS2#(>H:H145_SDK_OH_HYD_TEST_SYS2)
H145_SDK_OH_LAMP_TEST_LAMP#(>H:H145_SDK_OH_LAMP_TEST_LAMP)
H145_SDK_OH_LAMP_TEST_OFF#(>H:H145_SDK_OH_LAMP_TEST_OFF)
H145_SDK_OH_LAMP_TEST_PREFLIGHT#(>H:H145_SDK_OH_LAMP_TEST_PREFLIGHT)
H145_SDK_OH_LAVCS_OFF#(>H:H145_SDK_OH_LAVCS_OFF)
H145_SDK_OH_LAVCS_PAX#(>H:H145_SDK_OH_LAVCS_PAX)
H145_SDK_OH_LAVCS_PIL#(>H:H145_SDK_OH_LAVCS_PIL)
//Just Flight/BAE146/Autopilot System
Autopilot_ALT_ARM_Button#1 (>L:MCP_ALT_arm)
Autopilot_ALT_SEL_Decrement#(L:MCP_Alt_sel_knob) -- (>L:MCP_Alt_sel_knob)
Autopilot_ALT_SEL_Encoder#(L:MCP_Alt_sel_knob, enum) -- (>L:MCP_Alt_sel_knob, enum) (L:MCP_Alt_sel_knob, enum) 0 < if{ 99 (>MCP_Alt_sel_knob, enum) }
Autopilot_ALT_SEL_Increment#(L:MCP_Alt_sel_knob) ++ (>L:MCP_Alt_sel_knob)
//Just Flight/BAE146/Autopilot
Autopilot_ALT_Button#1 (>L:MCP_Mode_ALT)
Autopilot_BLOC_Button#1 (>L:MCP_Mode_BLOC)
Autopilot_GSL_Button#1 (>L:MCP_Mode_GSL)
Autopilot_HDG_Button#1 (>L:MCP_Mode_HDG)
Autopilot_IAS_Button#1 (>L:MCP_Mode_IAS)
Autopilot_LNAV_Button#1 (>L:MCP_Mode_LNAV)
Autopilot_MACH_Button#1 (>L:MCP_Mode_MACH)
Autopilot_TURB_Button#1 (>L:MCP_Mode_TURB)
Autopilot_V_L_Button#1 (>L:MCP_Mode_VL)
Autopilot_VNAV_Button#1 (>L:MCP_Mode_VNAV)
Autopilot_VS_Button#1 (>L:MCP_Mode_VS)
//Just Flight/BAE146/Autothrust System
TMS_Disconnect_Button_Left_Lever_#1 (>L:PED_MID_TMS_disc_L)
TMS_Disconnect_Button_Right_Lever#1 (>L:PED_MID_TMS_disc_R)
TMS_Power_Switch#1 (>L:R_TMS_Pwr)
//Just Flight/BAE146/Electrical
OVHD_APU_OFF#0 (>L:OVHD_APU_StartStop, bool)
OVHD_APU_ON#1 (>L:OVHD_APU_StartStop, bool)
//Just Flight/BAE146/FMS
FMS_System#Same Inputs like CJ4
//Just Flight/BAE146/Flight Instrumentation
HSI_RNAV_Mode_off#0 (>L:L_MISC_HSI_mode, bool)
HSI_RNAV_Mode_on#1 (>L:L_MISC_HSI_mode, bool)
//Just Flight/BAE146/Warning
Master_Warning_System_-_Amber_Button#1 (>L:L_COAMING_MWS_Amber)
Master_Warning_System_-_Red_Button#1 (>L:L_COAMING_MWS_Red)
//Just Flight/Hawk T1/Anti-Ice
HT1_FWD_LEFT_PitotHeat_Off#0 (>L:FWD_LEFT_PitotHeat)
HT1_FWD_LEFT_PitotHeat_On#1 (>L:FWD_LEFT_PitotHeat)
//Just Flight/Hawk T1/Avionics
HT1_FWD_KNEE_Erect_Press#1 (>L:FWD_KNEE_Erect_IsDown) (E:SIMULATION TIME, seconds) 0.4 + (>L:FWD_KNEE_Erect_MinReleaseTime)
HT1_FWD_KNEE_Erect_Release#0 (>L:FWD_KNEE_Erect_IsDown) (L:FWD_KNEE_Erect_MinReleaseTime) (E:SIMULATION TIME, seconds) < if{ } els{ 1 (>L:FWD_KNEE_Erect_LeftLeaveToRun) }
HT1_FWD_KNEE_HSI_Mode_DG#1 (>L:FWD_KNEE_HSI_Mode)
HT1_FWD_KNEE_HSI_Mode_Off#0 (>L:FWD_KNEE_HSI_Mode)
HT1_FWD_KNEE_HSI_Mode_SLV#2 (>L:FWD_KNEE_HSI_Mode)
HT1_FWD_KNEE_Hdg_Push#1 (L:FWD_KNEE_Hdg_Push,bool)
HT1_FWD_KNEE_Hdg_Set_Dec#(L:FWD_KNEE_Hdg_Set,enum) -- (>L:FWD_KNEE_Hdg_Set,enum) (L:FWD_KNEE_Hdg_Set,enum) 0 < if{ (99 (>L:FWD_KNEE_Hdg_Set) }
HT1_FWD_KNEE_Hdg_Set_Inc#(L:FWD_KNEE_Hdg_Set,enum) ++ 100 % (>L:FWD_KNEE_Hdg_Set,enum)
HT1_FWD_KNEE_Lat_Dec#(L:FWD_KNEE_Lat,enum) -- 0 max (>L:FWD_KNEE_Lat,enum)
HT1_FWD_KNEE_Lat_Inc#(L:FWD_KNEE_Lat,enum) ++ 90 min (>L:FWD_KNEE_Lat,enum)
HT1_FWD_RIGHT_IFF_Dig1_Down#2 (>L:FWD_RIGHT_IFF_Dig1)
HT1_FWD_RIGHT_IFF_Dig1_Release#1 (>L:FWD_RIGHT_IFF_Dig1)
HT1_FWD_RIGHT_IFF_Dig1_Up#0 (>L:FWD_RIGHT_IFF_Dig1)
HT1_FWD_RIGHT_IFF_Dig2_Down#2 (>L:FWD_RIGHT_IFF_Dig2)
HT1_FWD_RIGHT_IFF_Dig2_Release#1 (>L:FWD_RIGHT_IFF_Dig2)
HT1_FWD_RIGHT_IFF_Dig2_Up#0 (>L:FWD_RIGHT_IFF_Dig2)
HT1_FWD_RIGHT_IFF_Dig3_Down#2 (>L:FWD_RIGHT_IFF_Dig3)
HT1_FWD_RIGHT_IFF_Dig3_Release#1 (>L:FWD_RIGHT_IFF_Dig3)
HT1_FWD_RIGHT_IFF_Dig3_Up#0 (>L:FWD_RIGHT_IFF_Dig3)
HT1_FWD_RIGHT_IFF_Dig4_Down#2 (>L:FWD_RIGHT_IFF_Dig4)
HT1_FWD_RIGHT_IFF_Dig4_Release#1 (>L:FWD_RIGHT_IFF_Dig4)
HT1_FWD_RIGHT_IFF_Dig4_Up#0 (>L:FWD_RIGHT_IFF_Dig4)
HT1_FWD_RIGHT_IFF_Func_Down#2 (>L:FWD_RIGHT_IFF_Func)
HT1_FWD_RIGHT_IFF_Func_Release#1 (>L:FWD_RIGHT_IFF_Func)
HT1_FWD_RIGHT_IFF_Func_Up#0 (>L:FWD_RIGHT_IFF_Func)
HT1_FWD_RIGHT_IFF_Ident_Press#1 (>L:FWD_RIGHT_IFF_Ident_IsDown) (E:SIMULATION TIME, seconds) 0.4 + (>L:FWD_RIGHT_IFF_Ident_MinReleaseTime)
HT1_FWD_RIGHT_IFF_Ident_Release#0 (>L:FWD_RIGHT_IFF_Ident_IsDown) (L:FWD_RIGHT_IFF_Ident_MinReleaseTime) (E:SIMULATION TIME, seconds) < if{ } els{ 1 (>L:FWD_RIGHT_IFF_Ident_LeftLeaveToRun) }
HT1_FWD_RIGHT_IFF_LR_Center#1 (>L:FWD_RIGHT_IFF_LR)
HT1_FWD_RIGHT_IFF_LR_L#0 (>L:FWD_RIGHT_IFF_LR)
HT1_FWD_RIGHT_IFF_LR_R#2 (>L:FWD_RIGHT_IFF_LR)
HT1_FWD_RIGHT_IFF_M1_Auto#1 (>L:FWD_RIGHT_IFF_M1)
HT1_FWD_RIGHT_IFF_M1_M1#0 (>L:FWD_RIGHT_IFF_M1)
HT1_FWD_RIGHT_IFF_M1_Out#2 (>L:FWD_RIGHT_IFF_M1)
HT1_FWD_RIGHT_IFF_M2_M2#1 (>L:FWD_RIGHT_IFF_M2)
HT1_FWD_RIGHT_IFF_M2_Out#0 (>L:FWD_RIGHT_IFF_M2)
HT1_FWD_RIGHT_IFF_M3A_Auto#1 (>L:FWD_RIGHT_IFF_M3A)
HT1_FWD_RIGHT_IFF_M3A_M3A#0 (>L:FWD_RIGHT_IFF_M3A)
HT1_FWD_RIGHT_IFF_M3A_Out#2 (>L:FWD_RIGHT_IFF_M3A)
HT1_FWD_RIGHT_IFF_M5_M5#1 (>L:FWD_RIGHT_IFF_M5)
HT1_FWD_RIGHT_IFF_M5_Out#0 (>L:FWD_RIGHT_IFF_M5)
HT1_FWD_RIGHT_IFF_MC_MC#0 (>L:FWD_RIGHT_IFF_MC)
HT1_FWD_RIGHT_IFF_MC_MCS#1 (>L:FWD_RIGHT_IFF_MC)
HT1_FWD_RIGHT_IFF_MC_Out#2 (>L:FWD_RIGHT_IFF_MC)
HT1_FWD_RIGHT_IFF_MS_MS#1 (>L:FWD_RIGHT_IFF_MS)
HT1_FWD_RIGHT_IFF_MS_Out#0 (>L:FWD_RIGHT_IFF_MS)
HT1_FWD_RIGHT_IFF_Master_Norm#2 (>L:FWD_RIGHT_IFF_Master)
HT1_FWD_RIGHT_IFF_Master_PullEmer#5 (>L:FWD_RIGHT_IFF_Master)
HT1_FWD_RIGHT_IFF_Master_PullOff#0 (>L:FWD_RIGHT_IFF_Master)
HT1_FWD_RIGHT_IFF_Master_Stby#1 (>L:FWD_RIGHT_IFF_Master)
HT1_FWD_RIGHT_IFF_Master_TA#3 (>L:FWD_RIGHT_IFF_Master)
HT1_FWD_RIGHT_IFF_Master_TARA#4 (>L:FWD_RIGHT_IFF_Master)
HT1_FWD_RIGHT_IFF_Mode4_4A#2 (>L:FWD_RIGHT_IFF_Mode4)
HT1_FWD_RIGHT_IFF_Mode4_4B#3 (>L:FWD_RIGHT_IFF_Mode4)
HT1_FWD_RIGHT_IFF_Mode4_Hold#0 (>L:FWD_RIGHT_IFF_Mode4)
HT1_FWD_RIGHT_IFF_Mode4_PullErase#4 (>L:FWD_RIGHT_IFF_Mode4)
HT1_FWD_RIGHT_IFF_Mode4_PullOut#1 (>L:FWD_RIGHT_IFF_Mode4)
HT1_FWD_RIGHT_IFF_Test_Press#1 (>L:FWD_RIGHT_IFF_Test_IsDown) (E:SIMULATION TIME, seconds) 0.4 + (>L:FWD_RIGHT_IFF_Test_MinReleaseTime)
HT1_FWD_RIGHT_IFF_Test_Release#0 (>L:FWD_RIGHT_IFF_Test_IsDown) (L:FWD_RIGHT_IFF_Test_MinReleaseTime) (E:SIMULATION TIME, seconds) < if{ } els{ 1 (>L:FWD_RIGHT_IFF_Test_LeftLeaveToRun) }
HT1_FWD_RIGHT_ILS_Dig1_Dec#(L:FWD_RIGHT_ILS_Dig1,enum) -- 0 max (>L:FWD_RIGHT_ILS_Dig1,enum)
HT1_FWD_RIGHT_ILS_Dig1_Inc#(L:FWD_RIGHT_ILS_Dig1,enum) ++ 1 min (>L:FWD_RIGHT_ILS_Dig1,enum)
HT1_FWD_RIGHT_ILS_Dig2_Dec#(L:FWD_RIGHT_ILS_Dig2,enum) -- 0 max (>L:FWD_RIGHT_ILS_Dig2,enum)
HT1_FWD_RIGHT_ILS_Dig2_Inc#(L:FWD_RIGHT_ILS_Dig2,enum) ++ 9 min (>L:FWD_RIGHT_ILS_Dig2,enum)
HT1_FWD_RIGHT_ILS_Dig3_Dec#(L:FWD_RIGHT_ILS_Dig3,enum) -- 0 max (>L:FWD_RIGHT_ILS_Dig3,enum)
HT1_FWD_RIGHT_ILS_Dig3_Inc#(L:FWD_RIGHT_ILS_Dig3,enum) ++ 9 min (>L:FWD_RIGHT_ILS_Dig3,enum)
HT1_FWD_RIGHT_ILS_Dig4_Dec#(L:FWD_RIGHT_ILS_Dig4,enum) -- 0 max (>L:FWD_RIGHT_ILS_Dig4,enum)
HT1_FWD_RIGHT_ILS_Dig4_Inc#(L:FWD_RIGHT_ILS_Dig4,enum) ++ 1 min (>L:FWD_RIGHT_ILS_Dig4,enum)
HT1_FWD_RIGHT_ILS_Mode_Dec#(L:FWD_RIGHT_ILS_Mode,enum) -- 0 max (>L:FWD_RIGHT_ILS_Mode,enum)
HT1_FWD_RIGHT_ILS_Mode_ILS#2 (>L:FWD_RIGHT_ILS_Mode,enum)
HT1_FWD_RIGHT_ILS_Mode_Inc#(L:FWD_RIGHT_ILS_Mode,enum) ++ 2 min (>L:FWD_RIGHT_ILS_Mode,enum)
HT1_FWD_RIGHT_ILS_Mode_Off#1 (>L:FWD_RIGHT_ILS_Mode,enum)
HT1_FWD_RIGHT_ILS_Mode_VOR#0 (>L:FWD_RIGHT_ILS_Mode,enum)
HT1_FWD_RIGHT_TACAN_Left_Dec#(L:FWD_RIGHT_TACAN_Left,enum) -- (>L:FWD_RIGHT_TACAN_Left,enum) (L:FWD_RIGHT_TACAN_Left,enum) 0 < if{ 99 (>L:FWD_RIGHT_TACAN_Left,enum) }
HT1_FWD_RIGHT_TACAN_Left_Inc#(L:FWD_RIGHT_TACAN_Left,enum) ++ 100 % (>L:FWD_RIGHT_TACAN_Left,enum)
HT1_FWD_RIGHT_TACAN_Mode_Dec#(L:FWD_RIGHT_TACAN_Mode,enum) -- 0 max (>L:FWD_RIGHT_TACAN_Mode,enum)
HT1_FWD_RIGHT_TACAN_Mode_Inc#(L:FWD_RIGHT_TACAN_Mode,enum) ++ 2 min (>L:FWD_RIGHT_TACAN_Mode,enum)
HT1_FWD_RIGHT_TACAN_Mode_Off#0 (>L:FWD_RIGHT_TACAN_Mode,enum)
HT1_FWD_RIGHT_TACAN_Mode_RX#1 (>L:FWD_RIGHT_TACAN_Mode,enum)
HT1_FWD_RIGHT_TACAN_Mode_TXRX#2 (>L:FWD_RIGHT_TACAN_Mode,enum)
HT1_FWD_RIGHT_TACAN_Right_Dec#(L:FWD_RIGHT_TACAN_Right,enum) -- (>L:FWD_RIGHT_TACAN_Right,enum) (L:FWD_RIGHT_TACAN_Right,enum) 0 < if{ 99 (>L:FWD_RIGHT_TACAN_Right,enum) }
HT1_FWD_RIGHT_TACAN_Right_Inc#(L:FWD_RIGHT_TACAN_Right,enum) ++ 100 % (>L:FWD_RIGHT_TACAN_Right,enum)
HT1_FWD_RIGHT_TACAN_XY_Dec#(L:FWD_RIGHT_TACAN_XY,enum) -- (>L:FWD_RIGHT_TACAN_XY,enum) (L:FWD_RIGHT_TACAN_XY,enum) 0 < if{ 99 (>L:FWD_RIGHT_TACAN_XY,enum) }
HT1_FWD_RIGHT_TACAN_XY_Inc#(L:FWD_RIGHT_TACAN_XY,enum) ++ 100 % (>L:FWD_RIGHT_TACAN_XY,enum)
HT1_FWD_RIGHT_TACAN_XY_Toggle#(L:FWD_RIGHT_TACAN_XY) ! (>L:FWD_RIGHT_TACAN_XY,enum)
HT1_FWD_Sight_depression_Dec#(L:FWD_Sight_depression,enum) -- 0 max (>L:FWD_Sight_depression,enum) 
HT1_FWD_Sight_depression_Inc#(L:FWD_Sight_depression,enum) ++ 100 min (>L:FWD_Sight_depression,enum) 
HT1_FWD_Sight_drift_Dec#(L:FWD_Sight_drift,enum) -- 0 max (>L:FWD_Sight_drift,enum)
HT1_FWD_Sight_drift_Inc#(L:FWD_Sight_drift,enum) ++ 100 min (>L:FWD_Sight_drift,enum)
HT1_FWD_Sight_mode_B#5 (>L:FWD_Sight_mode)
HT1_FWD_Sight_mode_Dec#(L:FWD_Sight_mode) -- 0 max (>L:FWD_Sight_mode)
HT1_FWD_Sight_mode_G#3 (>L:FWD_Sight_mode)
HT1_FWD_Sight_mode_GA#1 (>L:FWD_Sight_mode)
HT1_FWD_Sight_mode_Inc#(L:FWD_Sight_mode) ++ 6 min (>L:FWD_Sight_mode)
HT1_FWD_Sight_mode_M#2 (>L:FWD_Sight_mode)
HT1_FWD_Sight_mode_Off#0 (>L:FWD_Sight_mode)
HT1_FWD_Sight_mode_R#4 (>L:FWD_Sight_mode)
HT1_FWD_Sight_mode_S#6 (>L:FWD_Sight_mode)
//Just Flight/Hawk T1/Controls
HT1_FWD_KNEE_RudderLock_Toggle#(L:FWD_KNEE_RudderLock,bool) ! (>L:FWD_KNEE_RudderLock,bool)
HT1_FWD_LEFT_AileronTrim_1_Left#0 (>L:FWD_LEFT_AileronTrim_1)
HT1_FWD_LEFT_AileronTrim_1_Release#1 (>L:FWD_LEFT_AileronTrim_1)
HT1_FWD_LEFT_AileronTrim_1_Right#2 (>L:FWD_LEFT_AileronTrim_1)
HT1_FWD_LEFT_AileronTrim_2_Left#0 (>L:FWD_LEFT_AileronTrim_2)
HT1_FWD_LEFT_AileronTrim_2_Release#1 (>L:FWD_LEFT_AileronTrim_2)
HT1_FWD_LEFT_AileronTrim_2_Right#2 (>L:FWD_LEFT_AileronTrim_2)
HT1_FWD_LEFT_Airbrake_Dec#2 (>L:FWD_LEFT_AirBrake)
HT1_FWD_LEFT_Airbrake_Inc#0 (>L:FWD_LEFT_AirBrake)
HT1_FWD_LEFT_Airbrake_Release#1 (>L:FWD_LEFT_AirBrake)
HT1_FWD_LEFT_FlapSel_Down#2 (>L:FWD_LEFT_FlapSel)
HT1_FWD_LEFT_FlapSel_Mid#1 (>L:FWD_LEFT_FlapSel)
HT1_FWD_LEFT_FlapSel_Up#0 (>L:FWD_LEFT_FlapSel)
HT1_FWD_LEFT_RudderTrim_Left#0 (>L:FWD_LEFT_RudderTrim)
HT1_FWD_LEFT_RudderTrim_Release#1 (>L:FWD_LEFT_RudderTrim)
HT1_FWD_LEFT_RudderTrim_Right#2 (>L:FWD_LEFT_RudderTrim)
HT1_FWD_LEFT_TailTrim_Cover_Close#0 (>L:FWD_LEFT_TailTrim_Cover)
HT1_FWD_LEFT_TailTrim_Cover_Open#1 (>L:FWD_LEFT_TailTrim_Cover)
HT1_FWD_LEFT_TailTrim_Switch_Down#2 (>L:FWD_LEFT_TailTrim_Switch)
HT1_FWD_LEFT_TailTrim_Switch_Release#1 (>L:FWD_LEFT_TailTrim_Switch)
HT1_FWD_LEFT_TailTrim_Switch_Up#0 (>L:FWD_LEFT_TailTrim_Switch)
HT1_FWD_STICK_Trim_Dec#2 (L:FWD_STICK_Trim)
HT1_FWD_STICK_Trim_Inc#0 (L:FWD_STICK_Trim)
HT1_FWD_STICK_Trim_Release#1 (L:FWD_STICK_Trim)
//Just Flight/Hawk T1/Electrical
HT1_FWD_LEFT_AC3Reset_Press#1 (>L:FWD_LEFT_AC3Reset_IsDown) (E:SIMULATION TIME, seconds) 0.4 + (>L:FWD_LEFT_AC3Reset_MinReleaseTime)
HT1_FWD_LEFT_AC3Reset_Release#0 (>L:FWD_LEFT_AC3Reset_IsDown) (L:FWD_LEFT_AC3Reset_MinReleaseTime) (E:SIMULATION TIME, seconds) < if{ } els{ 1 (>L:FWD_LEFT_AC3Reset_LeftLeaveToRun) }
HT1_FWD_LEFT_Batt1_Off#0 (>L:FWD_LEFT_Batt1)
HT1_FWD_LEFT_Batt1_On#1 (>L:FWD_LEFT_Batt1)
HT1_FWD_LEFT_Batt2_Off#0 (>L:FWD_LEFT_Batt2)
HT1_FWD_LEFT_Batt2_On#1 (>L:FWD_LEFT_Batt2)
//Just Flight/Hawk T1/Engines
HT1_FWD_LEFT_Airbrake_In#0 (>L:FWD_LEFT_Airbrake)
HT1_FWD_LEFT_Airbrake_Out#2 (>L:FWD_LEFT_Airbrake)
HT1_FWD_LEFT_EngStart_Off#2 (>L:FWD_LEFT_EngStart)
HT1_FWD_LEFT_EngStart_On#1 (>L:FWD_LEFT_EngStart)
HT1_FWD_LEFT_EngStart_Start#0 (>L:FWD_LEFT_EngStart)
HT1_FWD_LEFT_Ignition_off#0 (>L:FWD_LEFT_Ignition)
HT1_FWD_LEFT_Ignition_on#1 (>L:FWD_LEFT_Ignition)
HT1_FWD_LEFT_ThrottleRelight_Press#1 (>L:FWD_LEFT_ThrottleRelight_IsDown) (E:SIMULATION TIME, seconds) 1 + (>L:FWD_LEFT_ThrottleRelight_MinReleaseTime) 1 (>L:FWD_LEFT_ThrottleRelight_LC,bool)
HT1_FWD_LEFT_ThrottleRelight_Release#0 (>L:FWD_LEFT_ThrottleRelight_IsDown) (L:FWD_LEFT_ThrottleRelight_MinReleaseTime) (E:SIMULATION TIME, seconds) < if{ } els{ 1 (>L:FWD_LEFT_ThrottleRelight_LeftLeaveToRun) }
HT1_FWD_THROTTLE_Idle_Stop_Toggle#(L:SHARED_ThrottleLatch) ! (>L:SHARED_ThrottleLatch)
//Just Flight/Hawk T1/Flight Instrumentation
HT1_FWD_ALT_Baro_Dec#(L:FWD_ALT_Baro,enum) -- 0 max (>L:FWD_ALT_Baro,enum) (>K:KOHLSMAN_DEC) (L:FWD_ALT_Baro,enum) 0 == if{ 100 (>L:FWD_ALT_Baro,enum) }
HT1_FWD_ALT_Baro_Inc#(L:FWD_ALT_Baro,enum) ++ 100 min (>L:FWD_ALT_Baro,enum) (>K:KOHLSMAN_INC) (L:FWD_ALT_Baro,enum) 100 == if{ 0 (>L:FWD_ALT_Baro,enum) }
HT1_FWD_DGI_Knob_Pull#1 (>L:FWD_DGI_Knob_Pull,bool)
HT1_FWD_DGI_Knob_Push#1 (>L:FWD_DGI_Knob_Push,bool)
HT1_FWD_DGI_Knob_Set_Dec#(L:FWD_DGI_Knob_Set,enum) -- (>L:FWD_DGI_Knob_Set,enum) (L:FWD_DGI_Knob_Set,enum) 0 < if{ 99 (>L:FWD_DGI_Knob_Set,enum) }
HT1_FWD_DGI_Knob_Set_Inc#(L:FWD_DGI_Knob_Set,enum) ++ 100 % (>L:FWD_DGI_Knob_Set,enum)
HT1_FWD_Gmeter_Push_Press#1 (>L:FWD_Gmeter_Push_IsDown) (E:SIMULATION TIME, seconds) 0.4 + (>L:FWD_Gmeter_Push_MinReleaseTime)
HT1_FWD_Gmeter_Push_Release#0 (>L:FWD_Gmeter_Push_IsDown) (L:FWD_Gmeter_Push_MinReleaseTime) (E:SIMULATION TIME, seconds) < if{ } els{ 1 (>L:FWD_Gmeter_Push_LeftLeaveToRun) }
HT1_FWD_HSI_Crs_Knob_Dec#(L:FWD_HSI_Crs_Knob,enum) -- (>L:FWD_HSI_Crs_Knob,enum) (L:FWD_HSI_Crs_Knob,enum) 0 < if{ 99 (>L:FWD_HSI_Crs_Knob,enum) }
HT1_FWD_HSI_Crs_Knob_Inc#(L:FWD_HSI_Crs_Knob,enum) ++ 100 % (>L:FWD_HSI_Crs_Knob,enum)
HT1_FWD_HSI_Hdg_Knob_Dec#(L:FWD_HSI_Hdg_Knob,enum) -- 0 max (>L:FWD_HSI_Hdg_Knob,enum) (>K:HEADING_BUG_DEC) (L:FWD_HSI_Hdg_Knob,enum) 0 == if{ 100 (>L:FWD_HSI_Hdg_Knob,enum) }
HT1_FWD_HSI_Hdg_Knob_Inc#(L:FWD_HSI_Hdg_Knob,enum) ++ 100 min (>L:FWD_HSI_Hdg_Knob,enum) (>K:HEADING_BUG_INC) (L:FWD_HSI_Hdg_Knob,enum) 100 == if{ 0 (>L:FWD_HSI_Hdg_Knob,enum) }
HT1_FWD_LEFT_Altimeter_Release#0 (>L:FWD_LEFT_Altimeter_IsDown) (L:FWD_LEFT_Altimeter_MinReleaseTime) (E:SIMULATION TIME, seconds) < if{ } els{ 1 (>L:FWD_LEFT_Altimeter_LeftLeaveToRun) }
HT1_FWD_LEFT_Altimeter_Test#1 (>L:FWD_LEFT_Altimeter_IsDown) (E:SIMULATION TIME, seconds) 1 + (>L:FWD_LEFT_Altimeter_MinReleaseTime)
HT1_FWD_STBY_ALT_Baro_Dec#(L:FWD_STBY_ALT_Baro,enum) -- 0 max (>L:FWD_STBY_ALT_Baro,enum) 2 (>K:KOHLSMAN_DEC) (L:FWD_STBY_ALT_Baro,enum) 0 == if{ 100 (>L:FWD_STBY_ALT_Baro,enum) }
HT1_FWD_STBY_ALT_Baro_Inc#(L:FWD_STBY_ALT_Baro,enum) ++ 100 min (>L:FWD_STBY_ALT_Baro,enum) 2 (>K:KOHLSMAN_INC) (L:FWD_STBY_ALT_Baro,enum) 100 == if{ 0 (>L:FWD_STBY_ALT_Baro,enum) }
HT1_FWD_Stby_Inst_Pwr_Batt#1 (>L:FWD_Stby_Inst_Pwr, bool)
HT1_FWD_Stby_Inst_Pwr_Normal#0 (>L:FWD_Stby_Inst_Pwr, bool)
//Just Flight/Hawk T1/Fuel
HT1_FWD_LEFT_FuelFlow_Off#0 (>L:FWD_LEFT_FuelFlow)
HT1_FWD_LEFT_FuelFlow_On#1 (>L:FWD_LEFT_FuelFlow)
HT1_FWD_LEFT_FuelPump_Off#0 (>L:FWD_LEFT_FuelPump)
HT1_FWD_LEFT_FuelPump_On#1 (>L:FWD_LEFT_FuelPump)
//Just Flight/Hawk T1/Gear
HT1_FWD_LEFT_AntiSkid_Off#0 (>L:FWD_LEFT_AntiSkid)
HT1_FWD_LEFT_AntiSkid_On#1 (>L:FWD_LEFT_AntiSkid)
HT1_FWD_LEFT_Gear_Down_Press#(L:FWD_LEFT_Gear_Down) ! (>L:FWD_LEFT_Gear_Down)
HT1_FWD_LEFT_Gear_Up_Press#(L:FWD_LEFT_Gear_Up) ! (>L:FWD_LEFT_Gear_Up)
//Just Flight/Hawk T1/Hydraulic
HT1_FWD_LEFT_HydReset_Press#1 (>L:FWD_LEFT_HydReset_IsDown) (E:SIMULATION TIME, seconds) 0.4 + (>L:FWD_LEFT_HydReset_MinReleaseTime)
HT1_FWD_LEFT_HydReset_Release#0 (>L:FWD_LEFT_HydReset_IsDown) (L:FWD_LEFT_HydReset_MinReleaseTime) (E:SIMULATION TIME, seconds) < if{ } els{ 1 (>L:FWD_LEFT_HydReset_LeftLeaveToRun) }
//Just Flight/Hawk T1/Lights
HT1_FWD_Land_Taxi_Down#0 (>L:FWD_MAIN_LdgTaxi)
HT1_FWD_Land_Taxi_Up#1 (>L:FWD_MAIN_LdgTaxi)
HT1_FWD_RIGHT_Lights_Anticol_Lower_Off#1 (>L:FWD_RIGHT_Lights_AntiCol_Lower)
HT1_FWD_RIGHT_Lights_Anticol_Lower_Red#2 (>L:FWD_RIGHT_Lights_AntiCol_Lower)
HT1_FWD_RIGHT_Lights_Anticol_Lower_White#0 (>L:FWD_RIGHT_Lights_AntiCol_Lower)
HT1_FWD_RIGHT_Lights_Anticol_Upper_Off#1 (>L:FWD_RIGHT_Lights_AntiCol_Upper)
HT1_FWD_RIGHT_Lights_Anticol_Upper_Red#2 (>L:FWD_RIGHT_Lights_AntiCol_Upper)
HT1_FWD_RIGHT_Lights_Anticol_Upper_White#0 (>L:FWD_RIGHT_Lights_AntiCol_Upper)
HT1_FWD_RIGHT_Lights_Centre_Dec#(L:FWD_RIGHT_Lights_Centre, enum) -- 0 max (>L:FWD_RIGHT_Lights_Centre, enum) 
HT1_FWD_RIGHT_Lights_Centre_Inc#(L:FWD_RIGHT_Lights_Centre, enum) ++ 10 min (>L:FWD_RIGHT_Lights_Centre, enum) 
HT1_FWD_RIGHT_Lights_Compass_Off#0 (>L:FWD_RIGHT_Lights_Compass,bool)
HT1_FWD_RIGHT_Lights_Compass_On#1 (>L:FWD_RIGHT_Lights_Compass,bool)
HT1_FWD_RIGHT_Lights_Emer_Off#0 (>L:FWD_RIGHT_Lights_Emer,bool)
HT1_FWD_RIGHT_Lights_Emer_On#1 (>L:FWD_RIGHT_Lights_Emer,bool)
HT1_FWD_RIGHT_Lights_Nav_Down#0 (>L:FWD_RIGHT_Lights_Nav,bool)
HT1_FWD_RIGHT_Lights_Nav_Up#1 (>L:FWD_RIGHT_Lights_Nav,bool)
HT1_FWD_RIGHT_Lights_Panel_Off#0 (>L:FWD_RIGHT_Lights_Panel,bool)
HT1_FWD_RIGHT_Lights_Panel_On#1 (>L:FWD_RIGHT_Lights_Panel,bool)
HT1_FWD_RIGHT_Lights_Port_Dec#(L:FWD_RIGHT_Lights_Port, enum) -- 0 max (>L:FWD_RIGHT_Lights_Port, enum) 
HT1_FWD_RIGHT_Lights_Port_Inc#(L:FWD_RIGHT_Lights_Port, enum) ++ 10 min (>L:FWD_RIGHT_Lights_Port, enum) 
HT1_FWD_RIGHT_Lights_Stbd_Dec#(L:FWD_RIGHT_Lights_Stbd, enum) -- 0 max (>L:FWD_RIGHT_Lights_Stbd, enum) 
HT1_FWD_RIGHT_Lights_Stbd_Inc#(L:FWD_RIGHT_Lights_Stbd, enum) ++ 10 min (>L:FWD_RIGHT_Lights_Stbd, enum) 
//Just Flight/Hawk T1/Miscellaneous
HT1_Canopy_click#1 (>L:Canopy_click)
HT1_FWD_LEFT_FreqCard_Toggle#(L:FWD_LEFT_FreqCard) ! (>L:FWD_LEFT_FreqCard)
HT1_FWD_LEFT_Stopwatch_Click#(L:FWD_LEFT_Stopwatch,bool) ! (>L:FWD_LEFT_Stopwatch,bool)
HT1_FWD_LEFT_Stopwatch_Knob_Push#1 (>L:FWD_LEFT_Stopwatch_push,bool)
HT1_FWD_LEFT_Stopwatch_Knob_Release#0 (>L:FWD_LEFT_Stopwatch_push,bool)
HT1_FWD_LEFT_Stopwatch_Reset_Push#1 (>L:FWD_LEFT_Stopwatch_Reset_IsDown) (E:SIMULATION TIME, seconds) 0.4 + (>L:FWD_LEFT_Stopwatch_Reset_MinReleaseTime)
HT1_FWD_LEFT_Stopwatch_Reset_Release#0 (>L:FWD_LEFT_Stopwatch_Reset_IsDown) (L:FWD_LEFT_Stopwatch_Reset_MinReleaseTime) (E:SIMULATION TIME, seconds) < if{ } els{ 1 (>L:FWD_LEFT_Stopwatch_Reset_LeftLeaveToRun) }
HT1_FWD_MISC_MapLight_Left_Toggle#(L:FWD_MISC_MapLight_Left,bool) ! (>L:FWD_MISC_MapLight_Left,bool)
HT1_FWD_MISC_MapLight_Right_Toggle#(L:FWD_MISC_MapLight_Right,bool) ! (>L:FWD_MISC_MapLight_Right,bool)
HT1_FWD_RIGHT_Air_Mode_Dec#(L:FWD_RIGHT_Air_Mode,enum) -- 0 max (>L:FWD_RIGHT_Air_Mode,enum)
HT1_FWD_RIGHT_Air_Mode_Inc#(L:FWD_RIGHT_Air_Mode,enum) ++ 3 min (>L:FWD_RIGHT_Air_Mode,enum)
HT1_FWD_RIGHT_Air_Temp_Dec#(L:FWD_RIGHT_Air_Temp,enum) -- (>L:FWD_RIGHT_Air_Temp,enum) (L:FWD_RIGHT_Air_Temp,enum) 0 < if{ 99 (>L:FWD_RIGHT_Air_Temp,enum) }
HT1_FWD_RIGHT_Air_Temp_Inc#(L:FWD_RIGHT_Air_Temp,enum) ++ 100 % (>L:FWD_RIGHT_Air_Temp,enum)
HT1_FWD_RIGHT_Airbrake_Test_Off#0 (>L:FWD_RIGHT_Airbrake_Test)
HT1_FWD_RIGHT_Airbrake_Test_On#1 (>L:FWD_RIGHT_Airbrake_Test)
HT1_FWD_RIGHT_FreqCard_Toggle#(L:FWD_RIGHT_FreqCard) ! (>L:FWD_RIGHT_FreqCard)
HT1_FWD_RIGHT_Oxygen_Toggle#(L:FWD_RIGHT_Oxygen) ! (>L:FWD_RIGHT_Oxygen)
HT1_FWD_RIGHT_Seat_Lower#0 (>L:FWD_RIGHT_Seat)
HT1_FWD_RIGHT_Seat_Raise#2 (>L:FWD_RIGHT_Seat)
HT1_FWD_STICK_Camera_Press#1 (>L:FWD_STICK_Camera_IsDown) (E:SIMULATION TIME, seconds) 0.4 + (>L:FWD_STICK_Camera_MinReleaseTime)
HT1_FWD_STICK_Camera_Release#0 (>L:FWD_STICK_Camera_IsDown) (L:FWD_STICK_Camera_MinReleaseTime) (E:SIMULATION TIME, seconds) < if{ } els{ 1 (>L:FWD_STICK_Camera_LeftLeaveToRun) }
HT1_RA_L_Smoke_Blue_Select#1 (>L:RA_smoke_blue_LC,bool)
HT1_RA_L_Smoke_Red_Select#1 (>L:RA_smoke_red_LC,bool)
HT1_RA_L_Smoke_White_Select#1 (>L:RA_smoke_white_LC,bool)
HT1_RA_R_Smoke_Blue_Select#1 (>L:RA_smoke_blue_LC,bool)
HT1_RA_R_Smoke_Red_Select#1 (>L:RA_smoke_red_LC,bool)
HT1_RA_R_Smoke_White_Select#1 (>L:RA_smoke_white_LC,bool)
HT1_RA_Smoke_Switch_Off#0 (L:FWD_RA_Smoke,bool)
HT1_RA_Smoke_Switch_On#1 (L:FWD_RA_Smoke,bool)
HT1_SHARED_Canopy_Handle_Toggle#(L:SHARED_Canopy_Handle) ! (>L:SHARED_Canopy_Handle)
//Just Flight/Hawk T1/Navigation
HT1_FWD_GPS_Brt_Press#1 (>L:FWD_GPS_Brt_IsDown) (E:SIMULATION TIME, seconds) 0.4 + (>L:FWD_GPS_Brt_MinReleaseTime) 1 (>L:GPS_Brt_LC,bool)
HT1_FWD_GPS_Brt_Release#0 (>L:FWD_GPS_Brt_IsDown) (L:FWD_GPS_Brt_MinReleaseTime) (E:SIMULATION TIME, seconds) < if{ } els{ 1 (>L:FWD_GPS_Brt_LeftLeaveToRun) }
HT1_FWD_GPS_Func_1_Press#1 (>L:FWD_GPS_Func_1_IsDown) (E:SIMULATION TIME, seconds) 0.4 + (>L:FWD_GPS_Func_1_MinReleaseTime) (>H:INSTRUMENT_PUSH_NRST)
HT1_FWD_GPS_Func_1_Release#0 (>L:FWD_GPS_Func_1_IsDown) (L:FWD_GPS_Func_1_MinReleaseTime) (E:SIMULATION TIME, seconds) < if{ } els{ 1 (>L:FWD_GPS_Func_1_LeftLeaveToRun) }
HT1_FWD_GPS_Func_2_Press#1 (>L:FWD_GPS_Func_2_IsDown) (E:SIMULATION TIME, seconds) 0.4 + (>L:FWD_GPS_Func_2_MinReleaseTime) (>H:INSTRUMENT_PUSH_DIRECTION)
HT1_FWD_GPS_Func_2_Release#0 (>L:FWD_GPS_Func_2_IsDown) (L:FWD_GPS_Func_2_MinReleaseTime) (E:SIMULATION TIME, seconds) < if{ } els{ 1 (>L:FWD_GPS_Func_2_LeftLeaveToRun) }
HT1_FWD_GPS_Func_3_Press#1 (>L:FWD_GPS_Func_3_IsDown) (E:SIMULATION TIME, seconds) 0.4 + (>L:FWD_GPS_Func_3_MinReleaseTime) (>H:INSTRUMENT_PUSH_MENU)
HT1_FWD_GPS_Func_3_Release#0 (>L:FWD_GPS_Func_3_IsDown) (L:FWD_GPS_Func_3_MinReleaseTime) (E:SIMULATION TIME, seconds) < if{ } els{ 1 (>L:FWD_GPS_Func_3_LeftLeaveToRun) }
HT1_FWD_GPS_Func_4_Press#1 (>L:FWD_GPS_Func_4_IsDown) (E:SIMULATION TIME, seconds) 0.4 + (>L:FWD_GPS_Func_4_MinReleaseTime) (>H:INSTRUMENT_PUSH_RETURN)
HT1_FWD_GPS_Func_4_Release#0 (>L:FWD_GPS_Func_4_IsDown) (L:FWD_GPS_Func_4_MinReleaseTime) (E:SIMULATION TIME, seconds) < if{ } els{ 1 (>L:FWD_GPS_Func_4_LeftLeaveToRun) }
HT1_FWD_GPS_Func_5_Press#1 (>L:FWD_GPS_Func_5_IsDown) (E:SIMULATION TIME, seconds) 0.4 + (>L:FWD_GPS_Func_5_MinReleaseTime) (>H:INSTRUMENT_PUSH_RETURN_LONG)
HT1_FWD_GPS_Func_5_Release#0 (>L:FWD_GPS_Func_5_IsDown) (L:FWD_GPS_Func_5_MinReleaseTime) (E:SIMULATION TIME, seconds) < if{ } els{ 1 (>L:FWD_GPS_Func_5_LeftLeaveToRun) }
HT1_FWD_GPS_Power_Press#1 (>L:FWD_GPS_Power_IsDown) (E:SIMULATION TIME, seconds) 0.4 + (>L:FWD_GPS_Power_MinReleaseTime) 1 (>L:GPS_Pwr_LC,bool)
HT1_FWD_GPS_Power_Release#0 (>L:FWD_GPS_Power_IsDown) (L:FWD_GPS_Power_MinReleaseTime) (E:SIMULATION TIME, seconds) < if{ } els{ 1 (>L:FWD_GPS_Power_LeftLeaveToRun) }
HT1_FWD_MAIN_ILS_Marker_Press#1 (>L:FWD_MAIN_ILS_Marker_IsDown) (E:SIMULATION TIME, seconds) 0.4 + (>L:FWD_MAIN_ILS_Marker_MinReleaseTime)
HT1_FWD_MAIN_ILS_Marker_Release#0 (>L:FWD_MAIN_ILS_Marker_IsDown) (L:FWD_MAIN_ILS_Marker_MinReleaseTime) (E:SIMULATION TIME, seconds) < if{ } els{ 1 (>L:FWD_MAIN_ILS_Marker_LeftLeaveToRun) }
//Just Flight/Hawk T1/Radio
HT1_FWD_LEFT_AltPTT_Push#1 (>L:FWD_LEFT_AltPTT_IsDown) (E:SIMULATION TIME,seconds) 1 + (>L:FWD_LEFT_AltPTT_MinReleaseTime)
HT1_FWD_LEFT_AltPTT_Release#0 (>L:FWD_LEFT_AltPTT_IsDown) (L:FWD_LEFT_AltPTT_MinReleaseTime) (E:SIMULATION TIME,seconds) < if{ } els{ 1 (>L:FWD_LEFT_AltPTT_LeftLeaveToRun) }
HT1_FWD_LEFT_RadioMute_Off#0 (>L:FWD_LEFT_RadioMute)
HT1_FWD_LEFT_RadioMute_On#1 (>L:FWD_LEFT_RadioMute)
HT1_FWD_LEFT_ThrottleTransmit_Press#1 (>L:FWD_LEFT_ThrottleTransmit_IsDown) (E:SIMULATION TIME, seconds) 1 + (>L:FWD_LEFT_ThrottleTransmit_MinReleaseTime)
HT1_FWD_LEFT_ThrottleTransmit_Release#0 (>L:FWD_LEFT_ThrottleTransmit_IsDown) (L:FWD_LEFT_ThrottleTransmit_MinReleaseTime) (E:SIMULATION TIME, seconds) < if{ } els{ 1 (>L:FWD_LEFT_ThrottleTransmit_LeftLeaveToRun) }
HT1_FWD_LEFT_UHF_A#2 (>L:FWD_LEFT_UHF)
HT1_FWD_LEFT_UHF_Main#1 (>L:FWD_LEFT_UHF)
HT1_FWD_LEFT_UHF_Stby#0 (>L:FWD_LEFT_UHF)
HT1_FWD_MAIN_UHF_Pwr_Batt#1 (>L:FWD_MAIN_UHF_Pwr)
HT1_FWD_MAIN_UHF_Pwr_Normal#0 (>L:FWD_MAIN_UHF_Pwr)
HT1_FWD_RIGHT_CCS_Fail#1 (>L:FWD_RIGHT_CCS_NormFail)
HT1_FWD_RIGHT_CCS_Ic_Dec#(L:FWD_RIGHT_CCS_Ic,enum) -- 10 min (>L:FWD_RIGHT_CCS_Ic,enum)
HT1_FWD_RIGHT_CCS_Ic_Inc#(L:FWD_RIGHT_CCS_Ic,enum) ++ 0 max (>L:FWD_RIGHT_CCS_Ic,enum)
HT1_FWD_RIGHT_CCS_Ils_Off#0 (>L:FWD_RIGHT_CCS_Ils)
HT1_FWD_RIGHT_CCS_Ils_On#1 (>L:FWD_RIGHT_CCS_Ils)
HT1_FWD_RIGHT_CCS_Norm#0 (>L:FWD_RIGHT_CCS_NormFail)
HT1_FWD_RIGHT_CCS_Ptt_Alt#1 (>L:FWD_RIGHT_CCS_Ptt)
HT1_FWD_RIGHT_CCS_Ptt_Norm#0 (>L:FWD_RIGHT_CCS_Ptt)
HT1_FWD_RIGHT_CCS_Rx_Dec#(L:FWD_RIGHT_CCS_Rx,enum) -- 10 min (>L:FWD_RIGHT_CCS_Rx,enum)
HT1_FWD_RIGHT_CCS_Rx_Inc#(L:FWD_RIGHT_CCS_Rx,enum) ++ 0 max (>L:FWD_RIGHT_CCS_Rx,enum)
HT1_FWD_RIGHT_CCS_Sel_Uhf#1 (>L:FWD_RIGHT_CCS_Sel)
HT1_FWD_RIGHT_CCS_Sel_Vhf#0 (>L:FWD_RIGHT_CCS_Sel)
HT1_FWD_RIGHT_CCS_Tacan_Off#0 (>L:FWD_RIGHT_CCS_Tacan)
HT1_FWD_RIGHT_CCS_Tacan_On#1 (>L:FWD_RIGHT_CCS_Tacan)
HT1_FWD_RIGHT_CCS_Uhf_Off#0 (>L:FWD_RIGHT_CCS_Uhf)
HT1_FWD_RIGHT_CCS_Uhf_On#1 (>L:FWD_RIGHT_CCS_Uhf)
HT1_FWD_RIGHT_CCS_Vhf_Off#0 (>L:FWD_RIGHT_CCS_Vhf)
HT1_FWD_RIGHT_CCS_Vhf_On#1 (>L:FWD_RIGHT_CCS_Vhf)
HT1_FWD_RIGHT_VHF_Ant_Lower#0 (>L:FWD_RIGHT_VHF_Ant)
HT1_FWD_RIGHT_VHF_Ant_Upper#1 (>L:FWD_RIGHT_VHF_Ant)
HT1_FWD_RIGHT_VHF_Brt_Dec#2 (L:FWD_RIGHT_VHF_Brt)
HT1_FWD_RIGHT_VHF_Brt_Inc#0 (L:FWD_RIGHT_VHF_Brt)
HT1_FWD_RIGHT_VHF_Brt_Release#1 (L:FWD_RIGHT_VHF_Brt)
HT1_FWD_RIGHT_VHF_Enter_Press#1 (>L:FWD_RIGHT_VHF_Enter_IsDown) (E:SIMULATION TIME, seconds) 0.4 + (>L:FWD_RIGHT_VHF_Enter_MinReleaseTime)
HT1_FWD_RIGHT_VHF_Enter_Release#0 (>L:FWD_RIGHT_VHF_Enter_IsDown) (L:FWD_RIGHT_VHF_Enter_MinReleaseTime) (E:SIMULATION TIME, seconds) < if{ } els{ 1 (>L:FWD_RIGHT_VHF_Enter_LeftLeaveToRun) }
HT1_FWD_RIGHT_VHF_Frq_Mode_121#4 (>L:FWD_RIGHT_VHF_Frq_Mode)
HT1_FWD_RIGHT_VHF_Frq_Mode_243#5 (>L:FWD_RIGHT_VHF_Frq_Mode)
HT1_FWD_RIGHT_VHF_Frq_Mode_ECCM#2 (>L:FWD_RIGHT_VHF_Frq_Mode)
HT1_FWD_RIGHT_VHF_Frq_Mode_MAN#1 (>L:FWD_RIGHT_VHF_Frq_Mode)
HT1_FWD_RIGHT_VHF_Frq_Mode_MAR#3 (>L:FWD_RIGHT_VHF_Frq_Mode)
HT1_FWD_RIGHT_VHF_Frq_Mode_PRST#0 (>L:FWD_RIGHT_VHF_Frq_Mode)
HT1_FWD_RIGHT_VHF_Menu_Press#1 (>L:FWD_RIGHT_VHF_Menu_IsDown) (E:SIMULATION TIME, seconds) 0.4 + (>L:FWD_RIGHT_VHF_Menu_MinReleaseTime)
HT1_FWD_RIGHT_VHF_Menu_Release#0 (>L:FWD_RIGHT_VHF_Menu_IsDown) (L:FWD_RIGHT_VHF_Menu_MinReleaseTime) (E:SIMULATION TIME, seconds) < if{ } els{ 1 (>L:FWD_RIGHT_VHF_Menu_LeftLeaveToRun) }
HT1_FWD_RIGHT_VHF_NavSel_Down#2 (L:FWD_RIGHT_VHF_NavSel)
HT1_FWD_RIGHT_VHF_NavSel_Release#1 (L:FWD_RIGHT_VHF_NavSel)
HT1_FWD_RIGHT_VHF_NavSel_Up#0 (L:FWD_RIGHT_VHF_NavSel)
HT1_FWD_RIGHT_VHF_OP_Mode_ARF#3 (>L:FWD_RIGHT_VHF_OP_Mode)
HT1_FWD_RIGHT_VHF_OP_Mode_OFF#0 (>L:FWD_RIGHT_VHF_OP_Mode)
HT1_FWD_RIGHT_VHF_OP_Mode_TEST#4 (>L:FWD_RIGHT_VHF_OP_Mode)
HT1_FWD_RIGHT_VHF_OP_Mode_TR#2 (>L:FWD_RIGHT_VHF_OP_Mode)
HT1_FWD_RIGHT_VHF_OP_Mode_TRG#1 (>L:FWD_RIGHT_VHF_OP_Mode)
HT1_FWD_RIGHT_VHF_OP_Mode_ZERO#5 (>L:FWD_RIGHT_VHF_OP_Mode)
HT1_FWD_RIGHT_VHF_Ptt_Off#0 (>L:FWD_RIGHT_VHF_Ptt)
HT1_FWD_RIGHT_VHF_Ptt_On#1 (>L:FWD_RIGHT_VHF_Ptt)
HT1_FWD_RIGHT_VHF_Sel_1_Dec#(L:FWD_RIGHT_VHF_Sel_1,enum) -- (>L:FWD_RIGHT_VHF_Sel_1,enum) (L:FWD_RIGHT_VHF_Sel_1,enum) 0 < if{ 99 (>L:FWD_RIGHT_VHF_Sel_1,enum) }
HT1_FWD_RIGHT_VHF_Sel_1_Inc#(L:FWD_RIGHT_VHF_Sel_1,enum) ++ 100 % (>L:FWD_RIGHT_VHF_Sel_1,enum)
HT1_FWD_RIGHT_VHF_Sel_2_Dec#(L:FWD_RIGHT_VHF_Sel_2,enum) -- (>L:FWD_RIGHT_VHF_Sel_2,enum) (L:FWD_RIGHT_VHF_Sel_2,enum) 0 < if{ 99 (>L:FWD_RIGHT_VHF_Sel_2,enum) }
HT1_FWD_RIGHT_VHF_Sel_2_Inc#(L:FWD_RIGHT_VHF_Sel_2,enum) ++ 100 % (>L:FWD_RIGHT_VHF_Sel_2,enum)
HT1_FWD_RIGHT_VHF_Sel_3_Dec#(L:FWD_RIGHT_VHF_Sel_3,enum) -- (>L:FWD_RIGHT_VHF_Sel_3,enum) (L:FWD_RIGHT_VHF_Sel_3,enum) 0 < if{ 99 (>L:FWD_RIGHT_VHF_Sel_3,enum) }
HT1_FWD_RIGHT_VHF_Sel_3_Inc#(L:FWD_RIGHT_VHF_Sel_3,enum) ++ 100 % (>L:FWD_RIGHT_VHF_Sel_3,enum)
HT1_FWD_RIGHT_VHF_Sel_4_Dec#(L:FWD_RIGHT_VHF_Sel_4,enum) -- (>L:FWD_RIGHT_VHF_Sel_4,enum) (L:FWD_RIGHT_VHF_Sel_4,enum) 0 < if{ 99 (>L:FWD_RIGHT_VHF_Sel_4,enum) }
HT1_FWD_RIGHT_VHF_Sel_4_Inc#(L:FWD_RIGHT_VHF_Sel_4,enum) ++ 100 % (>L:FWD_RIGHT_VHF_Sel_4,enum)
HT1_FWD_RIGHT_VHF_Sel_5_Dec#(L:FWD_RIGHT_VHF_Sel_5,enum) -- (>L:FWD_RIGHT_VHF_Sel_5,enum) (L:FWD_RIGHT_VHF_Sel_5,enum) 0 < if{ 99 (>L:FWD_RIGHT_VHF_Sel_5,enum) }
HT1_FWD_RIGHT_VHF_Sel_5_Inc#(L:FWD_RIGHT_VHF_Sel_5,enum) ++ 100 % (>L:FWD_RIGHT_VHF_Sel_5,enum)
HT1_FWD_RIGHT_VHF_Squelch_Press#1 (>L:FWD_RIGHT_VHF_Squelch_IsDown) (E:SIMULATION TIME, seconds) 0.4 + (>L:FWD_RIGHT_VHF_Squelch_MinReleaseTime)
HT1_FWD_RIGHT_VHF_Squelch_Release#0 (>L:FWD_RIGHT_VHF_Squelch_IsDown) (L:FWD_RIGHT_VHF_Squelch_MinReleaseTime) (E:SIMULATION TIME, seconds) < if{ } els{ 1 (>L:FWD_RIGHT_VHF_Squelch_LeftLeaveToRun) }
HT1_FWD_RIGHT_VHF_Vol_Down#2 (L:FWD_RIGHT_VHF_Vol)
HT1_FWD_RIGHT_VHF_Vol_Release#1 (L:FWD_RIGHT_VHF_Vol)
HT1_FWD_RIGHT_VHF_Vol_Up#0 (L:FWD_RIGHT_VHF_Vol)
HT1_FWD_STICK_MuteButton_Press#1 (>L:FWD_STICK_MuteButton_IsDown) (E:SIMULATION TIME, seconds) 0.4 + (>L:FWD_STICK_MuteButton_MinReleaseTime)
HT1_FWD_STICK_MuteButton_Release#0 (>L:FWD_STICK_MuteButton_IsDown) (L:FWD_STICK_MuteButton_MinReleaseTime) (E:SIMULATION TIME, seconds) < if{ } els{ 1 (>L:FWD_STICK_MuteButton_LeftLeaveToRun) }
HT1_FWD_UHF_Dig1_Dec#(L:FWD_UHF_Dig1, enum) -- 0 max (>L:FWD_UHF_Dig1, enum)
HT1_FWD_UHF_Dig1_Inc#(L:FWD_UHF_Dig1, enum) ++ 9 min (>L:FWD_UHF_Dig1, enum)
HT1_FWD_UHF_Dig2_Dec#(L:FWD_UHF_Dig2, enum) -- 0 max (>L:FWD_UHF_Dig2, enum)
HT1_FWD_UHF_Dig2_Inc#(L:FWD_UHF_Dig2, enum) ++ 9 min (>L:FWD_UHF_Dig2, enum)
HT1_FWD_UHF_Dig3_Dec#(L:FWD_UHF_Dig3, enum) -- 0 max (>L:FWD_UHF_Dig3, enum)
HT1_FWD_UHF_Dig3_Inc#(L:FWD_UHF_Dig3, enum) ++ 9 min (>L:FWD_UHF_Dig3, enum)
HT1_FWD_UHF_Dig4_Dec#(L:FWD_UHF_Dig4, enum) -- 0 max (>L:FWD_UHF_Dig4, enum)
HT1_FWD_UHF_Dig4_Inc#(L:FWD_UHF_Dig4, enum) ++ 9 min (>L:FWD_UHF_Dig4, enum)
HT1_FWD_UHF_Dig5_Dec#(L:FWD_UHF_Dig5, enum) -- 0 max (>L:FWD_UHF_Dig5, enum)
HT1_FWD_UHF_Dig5_Inc#(L:FWD_UHF_Dig5, enum) ++ 3 min (>L:FWD_UHF_Dig5, enum)
HT1_FWD_UHF_Mode_ADF#3 (>L:FWD_UHF_Mode)
HT1_FWD_UHF_Mode_Both#2 (>L:FWD_UHF_Mode)
HT1_FWD_UHF_Mode_Main#1 (>L:FWD_UHF_Mode)
HT1_FWD_UHF_Mode_Off#0 (>L:FWD_UHF_Mode)
HT1_FWD_UHF_Preset_Sel_Dec#(L:FWD_UHF_Preset_Sel, enum) -- 1 max (>L:FWD_UHF_Preset_Sel, enum)
HT1_FWD_UHF_Preset_Sel_Inc#(L:FWD_UHF_Preset_Sel, enum) ++ 20 min (>L:FWD_UHF_Preset_Sel, enum)
HT1_FWD_UHF_Squelch_Off#0 (>L:FWD_UHF_Squelch)
HT1_FWD_UHF_Squelch_On#1 (>L:FWD_UHF_Squelch)
HT1_FWD_UHF_Store#1 (>L:FWD_UHF_Store,bool)
HT1_FWD_UHF_Tone_Press#1 (>L:FWD_UHF_Tone_IsDown) (E:SIMULATION TIME, seconds) 0.4 + (>L:FWD_UHF_Tone_MinReleaseTime)
HT1_FWD_UHF_Tone_Release#0 (>L:FWD_UHF_Tone_IsDown) (L:FWD_UHF_Tone_MinReleaseTime) (E:SIMULATION TIME, seconds) < if{ } els{ 1 (>L:FWD_UHF_Tone_LeftLeaveToRun) }
HT1_FWD_UHF_Trans_Guard#2 (>L:FWD_UHF_Trans)
HT1_FWD_UHF_Trans_Manual#0 (>L:FWD_UHF_Trans)
HT1_FWD_UHF_Trans_Preset#1 (>L:FWD_UHF_Trans)
HT1_FWD_UHF_Vol_Dec#(L:FWD_UHF_Vol,enum) -- 0 max (>L:FWD_UHF_Vol,enum)
HT1_FWD_UHF_Vol_Inc#(L:FWD_UHF_Vol,enum) ++ 10 min (>L:FWD_UHF_Vol,enum)
//Just Flight/Hawk T1/Safety
HT1_FWD_LEFT_FlapStby_Button#1 (>L:FWD_LEFT_FlapStby_Button_LC,bool)
HT1_FWD_LEFT_FlapStby_Handle#1 (>L:FWD_LEFT_FlapStby_Handle_LC,bool)
HT1_FWD_LEFT_GearStby_Button#1 (>L:FWD_LEFT_GearStby_Button_LC,bool)
HT1_FWD_LEFT_GearStby_Handle#1 (>L:FWD_LEFT_GearStby_Handle_LC,bool)
HT1_FWD_MAIN_CWP_FireExt_Press#1 (>L:FWD_MAIN_CWP_FireExt_IsDown) (E:SIMULATION TIME, seconds) 0.4 + (>L:FWD_MAIN_CWP_FireExt_MinReleaseTime)
HT1_FWD_MAIN_CWP_FireExt_Release#0 (>L:FWD_MAIN_CWP_FireExt_IsDown) (L:FWD_MAIN_CWP_FireExt_MinReleaseTime) (E:SIMULATION TIME, seconds) < if{ } els{ 1 (>L:FWD_MAIN_CWP_FireExt_LeftLeaveToRun) }
HT1_FWD_MAIN_CWP_Test_Cover_Toggle#(L:FWD_MAIN_CWP_Test_Cover) ! (>L:FWD_MAIN_CWP_Test_Cover)
HT1_FWD_MAIN_CWP_Test_Press#1 (>L:FWD_MAIN_CWP_Test_Switch_IsDown) (E:SIMULATION TIME, seconds) 1 + (>L:FWD_MAIN_CWP_Test_Switch_MinReleaseTime)
HT1_FWD_MAIN_CWP_Test_Release#0 (>L:FWD_MAIN_CWP_Test_Switch_IsDown) (L:FWD_MAIN_CWP_Test_Switch_MinReleaseTime) (E:SIMULATION TIME, seconds) < if{ } els{ 1 (>L:FWD_MAIN_CWP_Test_Switch_LeftLeaveToRun) }
//Just Flight/Hawk T1/Warning System
HT1_FWD_MAIN_CWS_Reset_L_Press#1 (>L:FWD_MAIN_CWS_Reset_L_IsDown) (E:SIMULATION TIME, seconds) 0.4 + (>L:FWD_LEFT_MAIN_CWS_Reset_L_MinReleaseTime)
HT1_FWD_MAIN_CWS_Reset_L_Release#0 (>L:FWD_MAIN_CWS_Reset_L_IsDown) (L:FWD_MAIN_CWS_Reset_L_MinReleaseTime) (E:SIMULATION TIME, seconds) < if{ } els{ 1 (>L:FWD_MAIN_CWS_Reset_L_LeftLeaveToRun) }
HT1_FWD_MAIN_CWS_Reset_R_Press#1 (>L:FWD_MAIN_CWS_Reset_R_IsDown) (E:SIMULATION TIME, seconds) 0.4 + (>L:FWD_LEFT_MAIN_CWS_Reset_R_MinReleaseTime)
HT1_FWD_MAIN_CWS_Reset_R_Release#0 (>L:FWD_MAIN_CWS_Reset_R_IsDown) (L:FWD_MAIN_CWS_Reset_R_MinReleaseTime) (E:SIMULATION TIME, seconds) < if{ } els{ 1 (>L:FWD_MAIN_CWS_Reset_R_LeftLeaveToRun) }
//Just Flight/Hawk T1/Weapons
HT1_FWD_AIM9_AAM_Press#1 (>L:FWD_AIM9_AAM_IsDown) (E:SIMULATION TIME, seconds) 0.4 + (>L:FWD_AIM9_AAM_MinReleaseTime)
HT1_FWD_AIM9_AAM_Release#0 (>L:FWD_AIM9_AAM_IsDown) (L:FWD_AIM9_AAM_MinReleaseTime) (E:SIMULATION TIME, seconds) < if{ } els{ 1 (>L:FWD_AIM9_AAM_LeftLeaveToRun) }
HT1_FWD_AIM9_Coolant_Off#1 (>L:FWD_AIM9_Coolant)
HT1_FWD_AIM9_Coolant_On#0 (>L:FWD_AIM9_Coolant)
HT1_FWD_AIM9_Coolant_Test#2 (>L:FWD_AIM9_Coolant)
HT1_FWD_AIM9_Jet_Guard_Toggle#(L:FWD_AIM9_Jettison_Cover) ! (>L:FWD_AIM9_Jettison_Cover)
HT1_FWD_AIM9_Jettison_Press#1 (>L:FWD_AIM9_Jettison_IsDown) (E:SIMULATION TIME, seconds) 0.4 + (>L:FWD_AIM9_Jettison_MinReleaseTime)
HT1_FWD_AIM9_Jettison_Release#0 (>L:FWD_AIM9_Jettison_IsDown) (L:FWD_AIM9_Jettison_MinReleaseTime) (E:SIMULATION TIME, seconds) < if{ } els{ 1 (>L:FWD_AIM9_Jettison_LeftLeaveToRun) }
HT1_FWD_AIM9_Mode_BS#0 (>L:FWD_AIM9_Mode)
HT1_FWD_AIM9_Mode_Scan#1 (>L:FWD_AIM9_Mode)
HT1_FWD_AIM9_Reject_Press#1 (>L:FWD_AIM9_Reject_IsDown) (E:SIMULATION TIME, seconds) 0.4 + (>L:FWD_AIM9_Reject_MinReleaseTime)
HT1_FWD_AIM9_Reject_Release#0 (>L:FWD_AIM9_Reject_IsDown) (L:FWD_AIM9_Reject_MinReleaseTime) (E:SIMULATION TIME, seconds) < if{ } els{ 1 (>L:FWD_AIM9_Reject_LeftLeaveToRun) }
HT1_FWD_AIM9_Test_Press#1 (>L:FWD_AIM9_Test_IsDown) (E:SIMULATION TIME, seconds) 0.4 + (>L:FWD_AIM9_Test_MinReleaseTime)
HT1_FWD_AIM9_Test_Release#0 (>L:FWD_AIM9_Test_IsDown) (L:FWD_AIM9_Test_MinReleaseTime) (E:SIMULATION TIME, seconds) < if{ } els{ 1 (>L:FWD_AIM9_Test_LeftLeaveToRun) }
HT1_FWD_AIM9_Vol_Dec#(L:FWD_AIM9_Vol,enum) -- 0 max (>L:FWD_AIM9_Vol,enum)
HT1_FWD_AIM9_Vol_Inc#(L:FWD_AIM9_Vol,enum) ++ 20 min (>L:FWD_AIM9_Vol,enum)
HT1_FWD_MAIN_Weapons_Safe_Lock#0 (>L:FWD_MAIN_Weapons_Safe,bool)
HT1_FWD_MAIN_Weapons_Safe_Unlock#1 (>L:FWD_MAIN_Weapons_Safe,bool)
HT1_FWD_STICK_BombRel_Cover_Toggle#(L:FWD_STICK_BombRel_Cover,bool) ! (>L:FWD_STICK_BombRel_Cover,bool)
HT1_FWD_STICK_BombRel_Press#1 (>L:FWD_STICK_BombRel_IsDown) (E:SIMULATION TIME, seconds) 0.4 + (>L:FWD_STICK_BombRel_MinReleaseTime)
HT1_FWD_STICK_BombRel_Release#0 (>L:FWD_STICK_BombRel_IsDown) (L:FWD_STICK_BombRel_MinReleaseTime) (E:SIMULATION TIME, seconds) < if{ } els{ 1 (>L:FWD_STICK_BombRel_LeftLeaveToRun) }
HT1_FWD_STICK_Trigger_Press#1 (>L:FWD_STICK_Trigger_IsDown) (E:SIMULATION TIME, seconds) 0.4 + (>L:FWD_STICK_Trigger_MinReleaseTime)
HT1_FWD_STICK_Trigger_Release#0 (>L:FWD_STICK_Trigger_IsDown) (L:FWD_STICK_Trigger_MinReleaseTime) (E:SIMULATION TIME, seconds) < if{ } els{ 1 (>L:FWD_STICK_Trigger_LeftLeaveToRun) }
HT1_FWD_Sight_Brt_Dec#(L:FWD_Sight_brt,enum) ++ 20 min (>L:FWD_Sight_brt,enum)
HT1_FWD_Sight_Brt_Inc#(L:FWD_Sight_brt,enum) -- 0 max (>L:FWD_Sight_brt,enum)
HT1_FWD_Weapons_Fuzing_N#0 (>L:FWD_Weapons_Fuzing)
HT1_FWD_Weapons_Fuzing_NT#1 (>L:FWD_Weapons_Fuzing)
HT1_FWD_Weapons_Fuzing_T#2 (>L:FWD_Weapons_Fuzing)
HT1_FWD_Weapons_Gun_Off#0 (>L:FWD_Weapons_Gun)
HT1_FWD_Weapons_Gun_On#1 (>L:FWD_Weapons_Gun)
HT1_FWD_Weapons_Jettison_Press#1 (>L:FWD_Weapons_Jettison_IsDown) (E:SIMULATION TIME, seconds) 0.4 + (>L:FWD_Weapons_Jettison_MinReleaseTime)
HT1_FWD_Weapons_Jettison_Release#0 (>L:FWD_Weapons_Jettison_IsDown) (L:FWD_Weapons_Jettison_MinReleaseTime) (E:SIMULATION TIME, seconds) < if{ } els{ 1 (>L:FWD_Weapons_Jettison_LeftLeaveToRun) }
HT1_FWD_Weapons_Pylon_port_Off#0 (>L:FWD_Weapons_Pylon_port)
HT1_FWD_Weapons_Pylon_port_On#1 (>L:FWD_Weapons_Pylon_port)
HT1_FWD_Weapons_Pylon_stbd_Off#0 (>L:FWD_Weapons_Pylon_stbd)
HT1_FWD_Weapons_Pylon_stbd_On#1 (>L:FWD_Weapons_Pylon_stbd)
HT1_FWD_Weapons_Select_B#3 (>L:FWD_Weapons_Select)
HT1_FWD_Weapons_Select_Off#0 (>L:FWD_Weapons_Select)
HT1_FWD_Weapons_Select_PB#2 (>L:FWD_Weapons_Select)
HT1_FWD_Weapons_Select_RP#1 (>L:FWD_Weapons_Select)
HT1_FWD_Weapons_Select_Toggle#(L:FWD_Weapons_Select) ++ 4 % (>L:FWD_Weapons_Select)
//Just Flight/Piper Arrow III/Anti-Ice
PITOT_HEAT_SWITCH#(L:CENTRE_LOWER_pitotheat) ! (>L:CENTRE_LOWER_pitotheat)
//Just Flight/Piper Arrow III/Autopilot
AUTOPILOT_HDG_Mode_ON_PRESS#2 (>L:AUTOPILOT_mode)
AUTOPILOT_LOC_NORM_Mode_ON_PRESS#3 (>L:AUTOPILOT_mode)
AUTOPILOT_LOC_REV_Mode_ON_PRESS#4 (>L:AUTOPILOT_mode)
AUTOPILOT_Nav_Mode_ON_PRESS#0 (>L:AUTOPILOT_mode)
AUTOPILOT_Omni_Mode_ON_PRESS#1 (>L:AUTOPILOT_mode)
AUTOPILOT_alt_ON_PRESS#1 (>L:AUTOPILOT_alt)
AUTOPILOT_hdg_OFF_PRESS#0 (>L:AUTOPILOT_hdg)
AUTOPILOT_hdg_ON_PRESS#1 (>L:AUTOPILOT_hdg)
AUTOPILOT_navgps_ON_PRESS#1 (>L:AUTOPILOT_navgps)
AUTOPILOT_off#0 (>L:AUTOPILOT_onoff)
AUTOPILOT_on#1 (>L:AUTOPILOT_onoff)
AUTOPILOT_HSI_HDG_BUG_DEC#(L:HSI_hdg_bug,enum) -- 0 max (>L:HSI_hdg_bug,enum) (>K:HEADING_BUG_DEC) (L:HSI_hdg_bug,enum) 0 == if{ 100 (>L:HSI_hdg_bug,enum) }
AUTOPILOT_HSI_HDG_BUG_INC#(L:HSI_hdg_bug,enum) ++ 100 min (>L:HSI_hdg_bug,enum) (>K:HEADING_BUG_INC) (L:HSI_hdg_bug,enum) 100 == if{ 0 (>L:HSI_hdg_bug,enum) }
AutoPilot_Mode_Decrease#(L:AUTOPILOT_mode) -- (>L:AUTOPILOT_mode)
AutoPilot_Mode_Increase#(L:AUTOPILOT_mode) ++ (>L:AUTOPILOT_mode)
NAV_GPS_SELECTOR_SW#(L:LEFT_MISC_navgps) ! (>L:LEFT_MISC_navgps)
PA28_AUTOPILOT_TOGGLE#(L:AUTOPILOT_onoff,bool) ! (>L:AUTOPILOT_onoff,bool)
//Just Flight/Piper Arrow III/EFIS
ALT_baro_knob_left#(L:ALTIMETER_baro_knob, enum) ++ 100 min (>L:ALTIMETER_baro_knob, enum) (>K:KOHLSMAN_INC) (L:ALTIMETER_baro_knob, enum) 100 == if{ 0 (>L:ALTIMETER_baro_knob, enum) }
ALT_baro_knob_right#(L:ALTIMETER_baro_knob, enum) -- 0 max (>L:ALTIMETER_baro_knob, enum) (>K:KOHLSMAN_DEC) (L:ALTIMETER_baro_knob, enum) 0 == if{ 100 (>L:ALTIMETER_baro_knob, enum) }
//Just Flight/Piper Arrow III/Electrical
_Circuit_Breaker_-ON#1 (>L:CIRCUIT_BREAKERS_autopilot, bool) 
CENTRE_LOWER_bat_ON_PRESS#1 (>L:CENTRE_LOWER_bat)
CENTRE_LOWER_bat_ON_RELEASE#0 (>L:CENTRE_LOWER_bat)
Center_Lower_Alternator_ON#1 (>L:CENTRE_LOWER_alt)
Center_Lower_Alternator_OFF#0 (>L:CENTRE_LOWER_alt)
//Just Flight/Piper Arrow III/Engines
EGT_knob_left#(L:RIGHT_LOWER_egt_knob, enum) ++ 100 % (>L:RIGHT_LOWER_egt_knob, enum)
EGT_knob_right#(L:RIGHT_LOWER_egt_knob, enum) -- (>L:RIGHT_LOWER_egt_knob, enum) (L:RIGHT_LOWER_egt_knob, enum) 0 < if{ 99 (>L:RIGHT_LOWER_egt_knob, enum) }
THROTTLE_QUADRANT_mixture_lock_ON_PRESS#1 (>L:THROTTLE_QUADRANT_mixture_lock)
THROTTLE_QUADRANT_mixture_lock_ON_RELEASE#0 (>L:THROTTLE_QUADRANT_mixture_lock)
//Just Flight/Piper Arrow III/Environment
Electronic_Flight_Board#1 (>L:EFB_On_Switch) (L:EFB_On, bool) ! (>L:EFB_On, bool)
Left_hand_window_latch#(>L:LEFT_MISC_window_latch,bool) 
Lower_Door_latch_unlock#1 (>L:DOOR_lower_latch) 
Open_the_Right_hand_door#(>L:DOOR_door,bool)
Open_the_left_hand_window#1 (>L:LEFT_MISC_window_LC,bool) 
Upper_Door_latch_unlatch#1 (>L:DOOR_upper_latch)
//Just Flight/Piper Arrow III/Fuel
FUEL_PRIMER_SWITCH#(L:LEFT_MISC_prime_IsDown) ! (>L:LEFT_MISC_prime_IsDown)
FUEL_PUMP_SELECTOR_SWITCH#(L:CENTRE_LOWER_fuelpump) 0 == if{ 1 (>L:CENTRE_LOWER_fuelpump) } els{ (L:CENTRE_LOWER_fuelpump) 1 == if{ 2 (>L:CENTRE_LOWER_fuelpump) } els{ (L:CENTRE_LOWER_fuelpump) 2 == if{ 0 (>L:CENTRE_LOWER_fuelpump) }
FUEL_TANK_SELECTOR_SWITCH#(L:LEFT_MISC_fuel_sel) ++ 3 % (>L:LEFT_MISC_fuel_sel) }
//Just Flight/Piper Arrow III/Gear
Emergency_gear_down#0 (>L:LOWER_emergency_gear)
Emergency_gear_off#1 (>L:LOWER_emergency_gear)
Emergency_gear_on#2 (>L:LOWER_emergency_gear)
LANDING_GEAR_SWITCH#(L:LDG_GEAR_lever) ! (>L:LDG_GEAR_lever)
PARKING_BRAKE_SWITCH#(>K:PARKING_BRAKES)
//Just Flight/Piper Arrow III/Lights
ANT_COL_LIGHT_SWITCH#(L:CENTRE_LOWER_anticol_light) ! (>L:CENTRE_LOWER_anticol_light)
LANDING_LIGHT_SWITCH#(L:CENTRE_LOWER_ldg_light) ! (>L:CENTRE_LOWER_ldg_light)
PA28_LIGHTS_CABIN_DEC#(L:LIGHTING_CABIN_0) 5 - 0 max s0 (>L:LIGHTING_CABIN_0) l0 10 (>K:2:LIGHT_POTENTIOMETER_SET) 
PA28_LIGHTS_CABIN_INC#(L:LIGHTING_CABIN_0) 5 + 100 min s0 (>L:LIGHTING_CABIN_0) l0 10 (>K:2:LIGHT_POTENTIOMETER_SET)
ROT_BCN_LIGHT_SWITCH#(L:CENTRE_LOWER_bcn_light) ! (>L:CENTRE_LOWER_bcn_light)
//Just Flight/Piper Arrow III/Miscellaneous
Timer_mode#Press = 1 (>L:YOKE_mode) Release = 0 (>L:YOKE_mode)
PA28_GLARESHIELD_VISOR_TOGGLE#(L:JF_Visor_Position_1) 0 == if{ 100 } els{ 0 } (>L:JF_Visor_Position_1)
//Just Flight/Piper Arrow III/Radio
DME_Input_to_NAV2#0 (>L:RIGHT_MISC_dme_nav, Number)
DME_input_to_NAV1#1 (>L:RIGHT_MISC_dme_nav, Number)
GNS530_COM_RADIO_VOLUME_DEC#(K:COM1_VOLUME_SET) ++ (>K:COM1_VOLUME_SET)
GNS530_COM_RADIO_VOLUME_INC#(K:COM1_VOLUME_SET) -- (>K:COM1_VOLUME_SET)
GNS530_NAV_RADIO_VOLUME_DEC#(K:NAV1_VOLUME_SET_EX1) ++ (>K:NAV1_VOLUME_SET_EX1)
GNS530_NAV_RADIO_VOLUME_INC#(K:NAV1_VOLUME_SET_EX1) -- (>K:NAV1_VOLUME_SET_EX1)
GNS530_COM_RADIO_VOLUME_POTENTIOMETER#@ 10.23 / 0 max 100 min (>K:COM1_VOLUME_SET)
GNS530_NAV_RADIO_VOLUME_POTENTIOMETER#@ 10.23 / 0 max 100 min (>K:NAV1_VOLUME_SET_EX1)
KR85_ADF_MODE_KNOB_DEC#(L:KR85_mode_knob) 0 > if{ 1 if{ (L:KR85_mode_knob) 1 - (>L:KR85_mode_knob) } }
KR85_ADF_MODE_KNOB_INC#(L:KR85_mode_knob) 3 < if{ 1 if{ (L:KR85_mode_knob) 1 + (>L:KR85_mode_knob) } }
KT76_XPNDR_MODE_ON-LEFT#(L:KT76_mode_knob) -- 0 max (>L:KT76_mode_knob)
KT76_XPNDR_MODE_ON-RIGHT#(L:KT76_mode_knob) ++ 4 min (>L:KT76_mode_knob)
KX170B_COM1_RADIO_VOLUME_DEC#(L:KX170_COMM1_vol_knob) 0 > if{ (L:KX170_COMM1_vol_knob) -- (>L:KX170_COMM1_vol_knob) }
KX170B_COM1_RADIO_VOLUME_INC#(L:KX170_COMM1_vol_knob) 10 < if{ (L:KX170_COMM1_vol_knob) ++ (>L:KX170_COMM1_vol_knob) }
KX170B_NAV1_RADIO_VOLUME_DEC#(L:KX170_NAV1_vol_knob) 0 > if{ (L:KX170_NAV1_vol_knob) -- (>L:KX170_NAV1_vol_knob) }
KX170B_NAV1_RADIO_VOLUME_INC#(L:KX170_NAV1_vol_knob) 10 < if{ (L:KX170_NAV1_vol_knob) ++ (>L:KX170_NAV1_vol_knob) }
KX170_COM1_OFF_ON_SWITCH#(L:KX170_COMM1_offon) ! (>L:KX170_COMM1_offon)
KX170_COMM1_inner_knob_left#(L:KX170_COMM1_inner_knob, enum) ++ 100 % (>L:KX170_COMM1_inner_knob, enum)
KX170_COMM1_inner_knob_right#(L:KX170_COMM1_inner_knob, enum) -- (>L:KX170_COMM1_inner_knob, enum) (L:KX170_COMM1_inner_knob, enum) 0 < if{ 99 (>L:KX170_COMM1_inner_knob, enum) }
KX170_COMM1_outer_knob_left#(L:KX170_COMM1_outer_knob, enum) ++ 100 % (>L:KX170_COMM1_outer_knob, enum)
KX170_COMM1_outer_knob_right#(L:KX170_COMM1_outer_knob, enum) -- (>L:KX170_COMM1_outer_knob, enum) (L:KX170_COMM1_outer_knob, enum) 0 < if{ 99 (>L:KX170_COMM1_outer_knob, enum) }
KX170_NAV1_OFF_ON_SWITCH#(L:KX170_NAV1_offon) ! (>L:KX170_NAV1_offon)
KX170_NAV1_inner_knob_left#(L:KX170_NAV1_inner_knob, enum) ++ 100 % (>L:KX170_NAV1_inner_knob, enum)
KX170_NAV1_inner_knob_right#(L:KX170_NAV1_inner_knob, enum) -- (>L:KX170_NAV1_inner_knob, enum) (L:KX170_NAV1_inner_knob, enum) 0 < if{ 99 (>L:KX170_NAV1_inner_knob, enum) }
KX170_NAV1_outer_knob_left#(L:KX170_NAV1_outer_knob, enum) ++ 100 % (>L:KX170_NAV1_outer_knob, enum)
KX170_NAV1_outer_knob_right#(L:KX170_NAV1_outer_knob, enum) -- (>L:KX170_NAV1_outer_knob, enum) (L:KX170_NAV1_outer_knob, enum) 0 < if{ 99 (>L:KX170_NAV1_outer_knob, enum) }
KX175B_COM2_RADIO_VOLUME_DEC#(L:KX175_COMM2_vol_knob) 0 > if{ (L:KX175_COMM2_vol_knob) -- (>L:KX175_COMM2_vol_knob) }
KX175B_COM2_RADIO_VOLUME_INC#(L:KX175_COMM2_vol_knob) 10 < if{ (L:KX175_COMM2_vol_knob) ++ (>L:KX175_COMM2_vol_knob) }
KX175B_NAV2_RADIO_VOLUME_DEC#(L:KX175_NAV2_vol_knob) 0 > if{ (L:KX175_NAV2_vol_knob) -- (>L:KX175_NAV2_vol_knob) }
KX175B_NAV2_RADIO_VOLUME_INC#(L:KX175_NAV2_vol_knob) 10 < if{ (L:KX175_NAV2_vol_knob) ++ (>L:KX175_NAV2_vol_knob) }
KX175_COM2_OFF_ON_SWITCH#(L:KX175_COMM2_offon) ! (>L:KX175_COMM2_offon)
KX175_COMM2_inner_knob_left#(L:KX175_COMM2_inner_knob, enum) ++ 100 % (>L:KX175_COMM2_inner_knob, enum)
KX175_COMM2_inner_knob_right#(L:KX175_COMM2_inner_knob, enum) -- (>L:KX175_COMM2_inner_knob, enum) (L:KX175_COMM2_inner_knob, enum) 0 < if{ 99 (>L:KX175_COMM2_inner_knob, enum) }
KX175_COMM2_outer_knob_left#(L:KX175_COMM2_outer_knob, enum) ++ 100 % (>L:KX175_COMM2_outer_knob, enum)
KX175_COMM2_outer_knob_right#(L:KX175_COMM2_outer_knob, enum) -- (>L:KX175_COMM2_outer_knob, enum) (L:KX175_COMM2_outer_knob, enum) 0 < if{ 99 (>L:KX175_COMM2_outer_knob, enum) }
KX175_NAV2_OFF_ON_SWITCH#(L:KX175_NAV2_offon) ! (>L:KX175_NAV2_offon)
KX175_NAV2_inner_knob_left#(L:KX175_NAV2_inner_knob, enum) ++ 100 % (>L:KX175_NAV2_inner_knob, enum)
KX175_NAV2_inner_knob_right#(L:KX175_NAV2_inner_knob, enum) -- (>L:KX175_NAV2_inner_knob, enum) (L:KX175_NAV2_inner_knob, enum) 0 < if{ 99 (>L:KX175_NAV2_inner_knob, enum) }
KX175_NAV2_outer_knob_left#(L:KX175_NAV2_outer_knob, enum) ++ 100 % (>L:KX175_NAV2_outer_knob, enum)
KX175_NAV2_outer_knob_right#(L:KX175_NAV2_outer_knob, enum) -- (>L:KX175_NAV2_outer_knob, enum) (L:KX175_NAV2_outer_knob, enum) 0 < if{ 99 (>L:KX175_NAV2_outer_knob, enum) }
//Leonardo/MadDog MD-82/Autopilot
MD82_FGCP_ALTHOLD_SWITCH#536870912 18 + (>L:fgcp_event, number)
MD82_FGCP_ALT_KNOB_DEC#8192 23 + (>L:fgcp_event,number)
MD82_FGCP_ALT_KNOB_INC#16384 23 + (>L:fgcp_event,number)
MD82_FGCP_ALT_KNOB_PULL#536870912 23 + (>L:fgcp_event,number)
MD82_FGCP_ALT_SWITCH#536870912 23 + (>L:fgcp_event,number)
MD82_FGCP_AP_MACH_SEL_SWITCH#536870912 4 + (>L:fgcp_event, number)
MD82_FGCP_AP_SPEED_SWITCH#536870912 3 + (>L:fgcp_event, number)
MD82_FGCP_AUTOLAND_SWITCH#536870912 11 + (>L:fgcp_event, number)
MD82_FGCP_BANK_KNOB_DEC#8192 12 + (>L:fgcp_event,number)
MD82_FGCP_BANK_KNOB_INC#16384 12 + (>L:fgcp_event,number)
MD82_FGCP_EPR_LIM_SWITCH#536870912 5 + (>L:fgcp_event, number)
MD82_FGCP_FMS_OVRD_SWITCH#536870912 2 + (>L:fgcp_event, number)
MD82_FGCP_HDG_KNOB_DEC#8192 13 + (>L:fgcp_event,number)
MD82_FGCP_HDG_KNOB_INC#16384 13 + (>L:fgcp_event,number)
MD82_FGCP_HDG_KNOB_PULL#536870912 13 + (>L:fgcp_event,number) 
MD82_FGCP_IASMACH_SWITCH#536870912 16 + (>L:fgcp_event, number)
MD82_FGCP_ILS_SWITCH#536870912 10 + (>L:fgcp_event, number)
MD82_FGCP_NAV1_CRS_DEC_KNOB#8192 2 + (>L:NAV1_event,number)
MD82_FGCP_NAV1_CRS_INC_KNOB#16384 2 + (>L:NAV1_event,number)
MD82_FGCP_NAV_SWITCH#536870912 8 + (>L:fgcp_event, number)
MD82_FGCP_SPDSEL_SWITCH#536870912 6 + (>L:fgcp_event,number)
MD82_FGCP_SPD_DEC_KNOB#8192 6 + (>L:fgcp_event,number)
MD82_FGCP_SPD_KNOB_DEC#8192 6 + (>L:fgcp_event,number)
MD82_FGCP_SPD_KNOB_INC#16384 6 + (>L:fgcp_event,number)
MD82_FGCP_SPD_KNOB_PUSH#536870912 6 + (>L:fgcp_event,number)
MD82_FGCP_VERTSPD_SWITCH#536870912 15 + (>L:fgcp_event, number)
MD82_FGCP_VNAV_SWITCH#536870912 17 + (>L:fgcp_event, number)
MD82_FGCP_VOR_LOC_SWITCH#536870912 9 + (>L:fgcp_event, number)
MD82_FGCP_VS_KNOB_DEC#16384 14 + (>L:fgcp_event,number)
MD82_FGCP_VS_KNOB_INC#8192 14 + (>L:fgcp_event,number)
MD_82_CM1_FD_SWITCH#536870912 0 + (>L:fgcp_event,number)
MD_82_CM2_FD_SWITCH#536870912 1 + (>L:fgcp_event,number)
MD_82_FGCP_AP_AUTOTHROTTLE_SWITCH#536870912 7 + (>L:fgcp_event, number)
MD_82_VC_FGCP_AP_ENGAGE_SWITCH#536870912 19 + (>L:fgcp_event, number)
MD_82_YOKE_AP_DISC#536870912 8 + (>L:cockpit_event,number)
//Leonardo/MadDog MD-82/Autothrust System
MD82_PED_THROTTLE1_SWITCH#536870912 9 + (>L:pedestal_event,number)
MD82_PED_THROTTLE2_SWITCH##536870912 28 + (>L:pedestal_event,number)
//Leonardo/MadDog MD-82/Electrical
MD_82_OVHD_APU_LEFT_BUS_SWITCH#536870912 34 + (>L:overhead_event,number)
MD_82_OVHD_APU_RIGHT_BUS_SWITCH#536870912 35 + (>L:overhead_event,number)
MD_82_OVHD_BATTERY_SWITCH#536870912 42 + (>L:overhead_event,number)
MD_82_OVHD_EXT_POWER_LEFT_BUS_SWITCH#536870912 36 + (>L:overhead_event,number)
MD_82_OVHD_EXT_POWER_RIGHT_BUS_SWITCH#536870912 37 + (>L:overhead_event,number)
//Leonardo/MadDog MD-82/Fuel
MD82_PED_FUELCUT_LEVER1_OFF#2147483648 11 + (>L:pedestal_event,number)
MD82_PED_FUELCUT_LEVER1_ON#536870912 11 + (>L:pedestal_event,number)
MD82_PED_FUELCUT_LEVER2_OFF#2147483648 12 + (>L:pedestal_event,number)
MD82_PED_FUELCUT_LEVER2_ON#536870912 12 + (>L:pedestal_event,number)
//Leonardo/MadDog MD-82/Gear
MD82_PED_GEAR_HORN_SW_PUSH#536870912 17 + (>L:pedestal_event,number)
MD82_PED_GEAR_HORN_SW_RELEASE#131072 17 + (>L:pedestal_event,number)
MD_82_VC_PARKING_BRAKE_OFF#(L:vc_parking_brake_knob, bool) if{ 536870912 1 + (>L:cockpit_event,number) }
MD_82_VC_PARKING_BRAKE_ON#(L:vc_parking_brake_knob, bool) ! if{ 536870912 1 + (>L:cockpit_event,number) }
MD_82_VC_PARKING_BRAKE_SWITCH#536870912 1 + (>L:cockpit_event,number)
//Leonardo/MadDog MD-82/Lights
MD82_CM1_NOSELIGHT_SWITCH_DN#8192 2 + (>L:ext_lights_event,number)
MD82_CM1_NOSELIGHT_SWITCH_UP#16384 2 + (>L:ext_lights_event,number)
MD82_CM1_WINGLIGHTL_SWITCH_DN#536870912 0 + (>L:ext_lights_event,number)
MD82_CM1_WINGLIGHTL_SWITCH_UP#2147483648 0 + (>L:ext_lights_event,number)
MD82_CM1_WINGLIGHTR_SWITCH_DN#536870912 1 + (>L:ext_lights_event,number)
MD82_CM1_WINGLIGHTR_SWITCH_UP#2147483648 1 + (>L:ext_lights_event,number)
MD82_CM2_STROBE_SWITCH1_DN#536870912 7 + (>L:ext_lights_event,number)
MD82_CM2_STROBE_SWITCH1_UP#2147483648 7 + (>L:ext_lights_event,number)
MD82_OVHD_FLOOD_SWITCH_ALT#(L:ovhd_ckpt_flood_switch1, enum) 0 == if{ 536870912 90 + (>L:overhead_event,number) (SLEEP:100) 536870912 90 + (>L:overhead_event,number) } (L:ovhd_ckpt_flood_switch1, enum) 1 == if{ 536870912 90 + (>L:overhead_event,number) } 
MD82_OVHD_FLOOD_SWITCH_OFF#(L:ovhd_ckpt_flood_switch1, enum) 1 == if{ 2147483648 90 + (>L:overhead_event,number) } (L:ovhd_ckpt_flood_switch1, enum) 2 == if{ 2147483648 90 + (>L:overhead_event,number) (SLEEP:100) 2147483648 90 + (>L:overhead_event,number) } 
MD82_OVHD_FLOOD_SWITCH_ON##(L:ovhd_ckpt_flood_switch1, enum) 2 == if{ 2147483648 90 + (>L:overhead_event,number) } (L:ovhd_ckpt_flood_switch1, enum) 0 == if{ 536870912 90 + (>L:overhead_event,number) }
//M Gharib/HJET HA420/Autopilot
HA420_AP_ALT_HOLD_BUTTON#(L:VNAV_Armed,bool) ! (>L:VNAV_Armed) (L:XMLVAR_VNAVButtonValue,bool) ! (>L:XMLVAR_VNAVButtonValue)
HA420_AP_ALT_KNOB_DEC#(L:HJET_AP_ALT_VAR,number) 100 - (>L:HJET_AP_ALT_VAR,number) (>H:AP_KNOB_Up)
HA420_AP_ALT_KNOB_INC#(L:HJET_AP_ALT_VAR,number) 100 + (>L:HJET_AP_ALT_VAR,number) (>H:AP_KNOB_Up)
HA420_AP_CO_BUTTON#(>K:AP_MANAGED_SPEED_IN_MACH_TOGGLE) (L:XMLVAR_AirSpeedIsInMach,bool) ! (>L:XMLVAR_AirSpeedIsInMach)
HA420_AP_CSC_BUTTON#(L:CSC Pushed,bool) ! (>L:CSC Pushed)
HA420_AP_HEADING_BUTTON#(L:HDG_Pushed,bool) ! (>L:HDG_Pushed)
HA420_AP_HEADING_KNOB_DEC#1 (>K:HEADING_BUG_DEC)
HA420_AP_HEADING_KNOB_INC#1 (>K:HEADING_BUG_INC)
HA420_AP_SPEED_BUTTON#(L:FLC_Pushed,bool) ! (>L:FLC_Pushed)
HA420_AP_SPEED_KNOB_DEC#(>K:AP_SPD_VAR_DEC)
HA420_AP_SPEED_KNOB_INC#(>K:AP_SPD_VAR_INC)
HA420_AP_VS_BUTTON#(L:VS_Pushed,bool) ! (>L:VS_Pushed)
HA420_AP_VS_KNOB_DEC#(A:AUTOPILOT VERTICAL HOLD VAR, feet/minute) 100 - (>K:AP_VS_SET)
HA420_AP_VS_KNOB_INC#(>K:AP_VS_VAR_INC)
//Microsoft/737-MAX/Autopilot
Altitude_Knob#1 (>B:AUTOPILOT_Altitude_Inc)
Bank_Angle_Limit__-_10_Degrees#4 (>K:AP_MAX_BANK_SET)
Bank_Angle_Limit__-_15_Degrees#3 (>K:AP_MAX_BANK_SET)
Bank_Angle_Limit__-_20_Degrees#2 (>K:AP_MAX_BANK_SET)
Bank_Angle_Limit__-_25_Degrees#1 (>K:AP_MAX_BANK_SET)
Bank_Angle_Limit__-_30_Degrees#0 (>K:AP_MAX_BANK_SET)
//Microsoft/Generic/Anti-Ice
ANTI_ICE_OFF#(>K:ANTI_ICE_OFF)
ANTI_ICE_ON#(>K:ANTI_ICE_ON)
ANTI_ICE_TOGGLE#(>K:ANTI_ICE_TOGGLE)
ANTI_ICE_TOGGLE_ENG1#(>K:ANTI_ICE_TOGGLE_ENG1)
ANTI_ICE_TOGGLE_ENG2#(>K:ANTI_ICE_TOGGLE_ENG2)
ANTI_ICE_TOGGLE_ENG3#(>K:ANTI_ICE_TOGGLE_ENG3)
ANTI_ICE_TOGGLE_ENG4#(>K:ANTI_ICE_TOGGLE_ENG4)
PITOT_HEAT_OFF#(>K:PITOT_HEAT_OFF)
PITOT_HEAT_ON#(>K:PITOT_HEAT_ON)
PITOT_HEAT_TOGGLE#(>K:PITOT_HEAT_TOGGLE)
TOGGLE_WINDSHIELD_De-Ice#(>K:WINDSHIELD_DEICE_TOGGLE)
TOGGLE_PITOT_BLOCKAGE#(>K:TOGGLE_PITOT_BLOCKAGE)
TOGGLE_PROPELLER_DEICE#(>K:TOGGLE_PROPELLER_DEICE)
TOGGLE_STRUCTURAL_DEICE#(>K:TOGGLE_STRUCTURAL_DEICE)
WINDSHIELD_DE-ICE_OFF#(>K:WINDSHIELD_DEICE_OFF)
WINDSHIELD_DE-ICE_ON#(>K:WINDSHIELD_DEICE_ON)
//Microsoft/Generic/Autopilot
AP_AIRSPEED_HOLD#(>K:AP_AIRSPEED_HOLD)
AP_AIRSPEED_OFF#(>K:AP_AIRSPEED_OFF)
AP_AIRSPEED_ON#(>K:AP_AIRSPEED_ON)
AP_ALT_HOLD#(>K:AP_ALT_HOLD)
AP_ALT_HOLD_OFF#(>K:AP_ALT_HOLD_OFF)
AP_ALT_HOLD_ON#(>K:AP_ALT_HOLD_ON)
AP_ALT_VAR_DEC#(>K:AP_ALT_VAR_DEC)
AP_ALT_VAR_INC#(>K:AP_ALT_VAR_INC)
AP_APR_HOLD#(>K:AP_APR_HOLD)
AP_APR_HOLD_OFF#(>K:AP_APR_HOLD_OFF)
AP_APR_HOLD_ON#(>K:AP_APR_HOLD_ON)
AP_ATT_HOLD#(>K:AP_ATT_HOLD)
AP_ATT_HOLD_OFF#(>K:AP_ATT_HOLD_OFF)
AP_ATT_HOLD_ON#(>K:AP_ATT_HOLD_ON)
AP_BC_HOLD#(>K:AP_BC_HOLD)
AP_BC_HOLD_OFF#(>K:AP_BC_HOLD_OFF)
AP_BC_HOLD_ON#(>K:AP_BC_HOLD_ON)
AP_HDG_HOLD#(>K:AP_HDG_HOLD)
AP_HDG_HOLD_OFF#(>K:AP_HDG_HOLD_OFF)
AP_HDG_HOLD_ON#(>K:AP_HDG_HOLD_ON)
AP_LOC_HOLD#(>K:AP_LOC_HOLD)
AP_LOC_HOLD_OFF#(>K:AP_LOC_HOLD_OFF)
AP_LOC_HOLD_ON#(>K:AP_LOC_HOLD_ON)
AP_MACH_HOLD#(>K:AP_MACH_HOLD)
AP_MACH_OFF#(>K:AP_MACH_OFF)
AP_MACH_ON#(>K:AP_MACH_ON)
AP_MACH_VAR_DEC#(>K:AP_MACH_VAR_DEC)
AP_MACH_VAR_INC#(>K:AP_MACH_VAR_INC)
AP_MASTER#(>K:AP_MASTER)
AP_MAX_BANK_DEC#(>K:AP_MAX_BANK_DEC)
AP_MAX_BANK_INC#(>K:AP_MAX_BANK_INC)
AP_N1_HOLD#(>K:AP_N1_HOLD)
AP_N1_REF_DEC#(>K:AP_N1_REF_DEC)
AP_N1_REF_INC#(>K:AP_N1_REF_INC)
AP_NAV1_HOLD#(>K:AP_NAV1_HOLD)
AP_NAV1_HOLD_OFF#(>K:AP_NAV1_HOLD_OFF)
AP_NAV1_HOLD_ON#(>K:AP_NAV1_HOLD_ON)
AP_PANEL_ALTITUDE_HOLD#(>K:AP_PANEL_ALTITUDE_HOLD)
AP_PANEL_ALTITUDE_OFF#(>K:AP_PANEL_ALTITUDE_OFF)
AP_PANEL_ALTITUDE_ON#(>K:AP_PANEL_ALTITUDE_ON)
AP_PANEL_HEADING_HOLD#(>K:AP_PANEL_HEADING_HOLD)
AP_PANEL_HEADING_OFF#(>K:AP_PANEL_HEADING_OFF)
AP_PANEL_HEADING_ON#(>K:AP_PANEL_HEADING_ON)
AP_PANEL_MACH_HOLD#(>K:AP_PANEL_MACH_HOLD)
AP_PANEL_MACH_HOLD_TOGGLE#(>K:AP_PANEL_MACH_HOLD_TOGGLE)
AP_PANEL_MACH_OFF#(>K:AP_PANEL_MACH_OFF)
AP_PANEL_MACH_ON#(>K:AP_PANEL_MACH_ON)
AP_PANEL_SPEED_HOLD#(>K:AP_PANEL_SPEED_HOLD)
AP_PANEL_SPEED_HOLD_TOGGLE#(>K:AP_PANEL_SPEED_HOLD_TOGGLE)
AP_PANEL_SPEED_OFF#(>K:AP_PANEL_SPEED_OFF)
AP_PANEL_SPEED_ON#(>K:AP_PANEL_SPEED_ON)
AP_PANEL_VS_HOLD#(>K:AP_PANEL_VS_HOLD)
AP_PITCH_REF_INC_DN#(>K:AP_PITCH_REF_INC_DN)
AP_PITCH_REF_INC_UP#(>K:AP_PITCH_REF_INC_UP)
AP_PITCH_REF_SELECT#(>K:AP_PITCH_REF_SELECT)
AP_SPD_VAR_DEC#(>K:AP_SPD_VAR_DEC)
AP_SPD_VAR_INC#(>K:AP_SPD_VAR_INC)
AP_VS_VAR_DEC#(>K:AP_VS_VAR_DEC)
AP_VS_VAR_INC#(>K:AP_VS_VAR_INC)
AP_WING_LEVELER#(>K:AP_WING_LEVELER)
AP_WING_LEVELER_OFF#(>K:AP_WING_LEVELER_OFF)
AP_WING_LEVELER_ON#(>K:AP_WING_LEVELER_ON)
AUTOPILOT_OFF#(>K:AUTOPILOT_OFF)
AUTOPILOT_ON#(>K:AUTOPILOT_ON)
SYNC_FLIGHT_DIRECTOR_PITCH#(>K:SYNC_FLIGHT_DIRECTOR_PITCH)
TOGGLE_FLIGHT_DIRECTOR#(>K:TOGGLE_FLIGHT_DIRECTOR)
YAW_DAMPER_OFF#(>K:YAW_DAMPER_OFF)
YAW_DAMPER_ON#(>K:YAW_DAMPER_ON)
YAW_DAMPER_TOGGLE#(>K:YAW_DAMPER_TOGGLE)
//Microsoft/Generic/Avionics
AS1000_AP_ALT_DEC_100# (A:AUTOPILOT ALTITUDE LOCK VAR, feet) 100 - (>K:AP_ALT_VAR_SET_ENGLISH) (>H:AP_KNOB_Up)
AS1000_AP_ALT_DEC_1000# (A:AUTOPILOT ALTITUDE LOCK VAR, feet) 1000 - (>K:AP_ALT_VAR_SET_ENGLISH) (>H:AP_KNOB_Up)
AS1000_AP_ALT_INC_100# (A:AUTOPILOT ALTITUDE LOCK VAR, feet) 100 + (>K:AP_ALT_VAR_SET_ENGLISH) (>H:AP_KNOB_Up)
AS1000_AP_ALT_INC_1000# (A:AUTOPILOT ALTITUDE LOCK VAR, feet) 1000 + (>K:AP_ALT_VAR_SET_ENGLISH) (>H:AP_KNOB_Up)
AS1000_AP_ALT_SYNC#(A:INDICATED ALTITUDE, feet) (>K:AP_ALT_VAR_SET_ENGLISH) (>H:AP_KNOB)
AS1000_AP_VNAV_Push#(L:XMLVAR_VNAVButtonValue, Bool) ! (>L:XMLVAR_VNAVButtonValue)
AS1000_MFD_ActivateMapCursor#(>H:AS1000_MFD_ActivateMapCursor)
AS1000_MFD_BARO_DEC#(>H:AS1000_MFD_BARO_DEC)
AS1000_MFD_BARO_INC#(>H:AS1000_MFD_BARO_INC)
AS1000_MFD_CLR#(>H:AS1000_MFD_CLR)
AS1000_MFD_CLR_Long#(>H:AS1000_MFD_CLR_Long)
AS1000_MFD_COM_Large_DEC#(>H:AS1000_MFD_COM_Large_DEC)
AS1000_MFD_COM_Large_INC#(>H:AS1000_MFD_COM_Large_INC)
AS1000_MFD_COM_Small_DEC#(>H:AS1000_MFD_COM_Small_DEC)
AS1000_MFD_COM_Small_INC#(>H:AS1000_MFD_COM_Small_INC)
AS1000_MFD_COM_Switch#(>H:AS1000_MFD_COM_Switch)
AS1000_MFD_COM_Switch_Long#(>H:AS1000_MFD_COM_Switch_Long)
AS1000_MFD_CRS_DEC#(>H:AS1000_MFD_CRS_DEC)
AS1000_MFD_CRS_INC#(>H:AS1000_MFD_CRS_INC)
AS1000_MFD_CRS_PUSH#(>H:AS1000_MFD_CRS_PUSH)
AS1000_MFD_DIRECTTO#(>H:AS1000_MFD_DIRECTTO)
AS1000_MFD_DeactivateMapCursor#(>H:AS1000_MFD_DeactivateMapCursor)
AS1000_MFD_ENT_Push#(>H:AS1000_MFD_ENT_Push)
AS1000_MFD_FLIGHT_DIRECTOR_PUSH#(A:AUTOPILOT MASTER, Bool) ! if{ 1 (>K:TOGGLE_FLIGHT_DIRECTOR) }
AS1000_MFD_FMS_Lower_DEC#(>H:AS1000_MFD_FMS_Lower_DEC)
AS1000_MFD_FMS_Lower_INC#(>H:AS1000_MFD_FMS_Lower_INC)
AS1000_MFD_FMS_Upper_DEC#(>H:AS1000_MFD_FMS_Upper_DEC)
AS1000_MFD_FMS_Upper_INC#(>H:AS1000_MFD_FMS_Upper_INC)
AS1000_MFD_FMS_Upper_PUSH#(>H:AS1000_MFD_FMS_Upper_PUSH)
AS1000_MFD_FPL_Push#(>H:AS1000_MFD_FPL_Push)
AS1000_MFD_HEADING_DEC#1 (>K:HEADING_BUG_DEC)
AS1000_MFD_HEADING_FAST_DEC#(A:AUTOPILOT HEADING LOCK DIR:1, Degrees) 5 - dnor (>K:1:HEADING_BUG_SET)
AS1000_MFD_HEADING_FAST_INC#(A:AUTOPILOT HEADING LOCK DIR:1, Degrees) 5 + dnor (>K:1:HEADING_BUG_SET)
AS1000_MFD_HEADING_INC#1 (>K:HEADING_BUG_INC)
AS1000_MFD_HEADING_SYNC#(A:HEADING INDICATOR, degrees) (>K:HEADING_BUG_SET)
AS1000_MFD_JOYSTICK_DOWN#(>H:AS1000_MFD_JOYSTICK_DOWN)
AS1000_MFD_JOYSTICK_LEFT#(>H:AS1000_MFD_JOYSTICK_LEFT)
AS1000_MFD_JOYSTICK_PUSH#(>H:AS1000_MFD_JOYSTICK_PUSH)
AS1000_MFD_JOYSTICK_RIGHT#(>H:AS1000_MFD_JOYSTICK_RIGHT)
AS1000_MFD_JOYSTICK_UP#(>H:AS1000_MFD_JOYSTICK_UP)
AS1000_MFD_MENU_Push#(>H:AS1000_MFD_MENU_Push)
AS1000_MFD_NAV_Large_DEC#(>H:AS1000_MFD_NAV_Large_DEC)
AS1000_MFD_NAV_Large_INC#(>H:AS1000_MFD_NAV_Large_INC)
AS1000_MFD_NAV_Push#(>H:AS1000_MFD_NAV_Push)
AS1000_MFD_NAV_Small_DEC#(>H:AS1000_MFD_NAV_Small_DEC)
AS1000_MFD_NAV_Small_INC#(>H:AS1000_MFD_NAV_Small_INC)
AS1000_MFD_NAV_Switch#(>H:AS1000_MFD_NAV_Switch)
AS1000_MFD_NOSE_DN#(A:AUTOPILOT VERTICAL HOLD, Bool) if{ (>K:AP_VS_VAR_DEC) (>H:AP_UP) } (A:AUTOPILOT FLIGHT LEVEL CHANGE, Bool) if{ (>K:AP_SPD_VAR_INC) } (A:AUTOPILOT PITCH HOLD, Bool) if{ (>K:AP_PITCH_REF_INC_DN) }
AS1000_MFD_NOSE_UP#(A:AUTOPILOT VERTICAL HOLD, Bool) if{ (>K:AP_VS_VAR_INC) (>H:AP_DN) } (A:AUTOPILOT FLIGHT LEVEL CHANGE, Bool) if{ (>K:AP_SPD_VAR_DEC) } (A:AUTOPILOT PITCH HOLD, Bool) if{ (>K:AP_PITCH_REF_INC_UP) }
AS1000_MFD_PROC_Push#(>H:AS1000_MFD_PROC_Push)
AS1000_MFD_RANGE_DEC#(>H:AS1000_MFD_RANGE_DEC)
AS1000_MFD_RANGE_INC#(>H:AS1000_MFD_RANGE_INC)
AS1000_MFD_SOFTKEYS_1#(>H:AS1000_MFD_SOFTKEYS_1)
AS1000_MFD_SOFTKEYS_10#(>H:AS1000_MFD_SOFTKEYS_10)
AS1000_MFD_SOFTKEYS_11#(>H:AS1000_MFD_SOFTKEYS_11)
AS1000_MFD_SOFTKEYS_12#(>H:AS1000_MFD_SOFTKEYS_12)
AS1000_MFD_SOFTKEYS_2#(>H:AS1000_MFD_SOFTKEYS_2)
AS1000_MFD_SOFTKEYS_3#(>H:AS1000_MFD_SOFTKEYS_3)
AS1000_MFD_SOFTKEYS_4#(>H:AS1000_MFD_SOFTKEYS_4)
AS1000_MFD_SOFTKEYS_5#(>H:AS1000_MFD_SOFTKEYS_5)
AS1000_MFD_SOFTKEYS_6#(>H:AS1000_MFD_SOFTKEYS_6)
AS1000_MFD_SOFTKEYS_7#(>H:AS1000_MFD_SOFTKEYS_7)
AS1000_MFD_SOFTKEYS_8#(>H:AS1000_MFD_SOFTKEYS_8)
AS1000_MFD_SOFTKEYS_9#(>H:AS1000_MFD_SOFTKEYS_9)
AS1000_MFD_VOL_1_DEC#(>H:AS1000_MFD_VOL_1_DEC)
AS1000_MFD_VOL_1_INC#(>H:AS1000_MFD_VOL_1_INC)
AS1000_MFD_VOL_2_DEC#(>H:AS1000_MFD_VOL_2_DEC)
AS1000_MFD_VOL_2_INC#(>H:AS1000_MFD_VOL_2_INC)
AS1000_MID_ADF_Push#(>H:AS1000_MID_ADF_Push)
AS1000_MID_AUX_Push#(>H:AS1000_MID_AUX_Push)
AS1000_MID_COM_1_Push#(>H:AS1000_MID_COM_1_Push)
AS1000_MID_COM_2_Push#(>H:AS1000_MID_COM_2_Push)
AS1000_MID_COM_3_Push#(>H:AS1000_MID_COM_3_Push)
AS1000_MID_COM_Mic_1_Push#(>H:AS1000_MID_COM_Mic_1_Push)
AS1000_MID_COM_Mic_2_Push#(>H:AS1000_MID_COM_Mic_2_Push)
AS1000_MID_COM_Mic_3_Push#(>H:AS1000_MID_COM_Mic_3_Push)
AS1000_MID_COM_Swap_1_2_Push#(>H:AS1000_MID_COM_Swap_1_2_Push)
AS1000_MID_DME_Push#(>H:AS1000_MID_DME_Push)
AS1000_MID_Display_Backup_Push#(>H:AS1000_MID_Display_Backup_Push)
AS1000_MID_HI_SENS_Push#(>H:AS1000_MID_HI_SENS_Push)
AS1000_MID_Isolate_Copilot_Push#(>H:AS1000_MID_Isolate_Copilot_Push)
AS1000_MID_Isolate_Pilot_Push#(>H:AS1000_MID_Isolate_Pilot_Push)
AS1000_MID_MAN_SQ_Push#(>H:AS1000_MID_MAN_SQ_Push)
AS1000_MID_MKR_Mute_Push#(>H:AS1000_MID_MKR_Mute_Push)
AS1000_MID_NAV_1_Push#(>H:AS1000_MID_NAV_1_Push)
AS1000_MID_NAV_2_Push#(>H:AS1000_MID_NAV_2_Push)
AS1000_MID_PA_Push#(>H:AS1000_MID_PA_Push)
AS1000_MID_Pass_Copilot_DEC#(>H:AS1000_MID_Pass_Copilot_DEC)
AS1000_MID_Pass_Copilot_INC#(>H:AS1000_MID_Pass_Copilot_INC)
AS1000_MID_Play_Push#(>H:AS1000_MID_Play_Push)
AS1000_MID_SPKR_Push#(>H:AS1000_MID_SPKR_Push)
AS1000_MID_TEL_Push#(>H:AS1000_MID_TEL_Push)
AS1000_PFD_ActivateMapCursor#(>H:AS1000_PFD_ActivateMapCursor)
AS1000_PFD_BARO_DEC#(>H:AS1000_PFD_BARO_DEC)
AS1000_PFD_BARO_INC#(>H:AS1000_PFD_BARO_INC)
AS1000_PFD_CLR#(>H:AS1000_PFD_CLR)
AS1000_PFD_CLR_Long#(>H:AS1000_PFD_CLR_Long)
AS1000_PFD_COM_Large_DEC#(>H:AS1000_PFD_COM_Large_DEC)
AS1000_PFD_COM_Large_INC#(>H:AS1000_PFD_COM_Large_INC)
AS1000_PFD_COM_Push#(>H:AS1000_PFD_COM_Push)
AS1000_PFD_COM_Small_DEC#(>H:AS1000_PFD_COM_Small_DEC)
AS1000_PFD_COM_Small_INC#(>H:AS1000_PFD_COM_Small_INC)
AS1000_PFD_COM_Switch#(>H:AS1000_PFD_COM_Switch)
AS1000_PFD_COM_Switch_Long#(>H:AS1000_PFD_COM_Switch_Long)
AS1000_PFD_CRS_DEC#(>H:AS1000_PFD_CRS_DEC)
AS1000_PFD_CRS_INC#(>H:AS1000_PFD_CRS_INC)
AS1000_PFD_DIRECTTO#(>H:AS1000_PFD_DIRECTTO)
AS1000_PFD_DeactivateMapCursor#(>H:AS1000_PFD_DeactivateMapCursor)
AS1000_PFD_ENT_Push#(>H:AS1000_PFD_ENT_Push)
AS1000_PFD_FMS_Lower_DEC#(>H:AS1000_PFD_FMS_Lower_DEC)
AS1000_PFD_FMS_Lower_INC#(>H:AS1000_PFD_FMS_Lower_INC)
AS1000_PFD_FMS_Upper_DEC#(>H:AS1000_PFD_FMS_Upper_DEC)
AS1000_PFD_FMS_Upper_INC#(>H:AS1000_PFD_FMS_Upper_INC)
AS1000_PFD_FMS_Upper_PUSH#(>H:AS1000_PFD_FMS_Upper_PUSH)
AS1000_PFD_FPL_Push#(>H:AS1000_PFD_FPL_Push)
AS1000_PFD_HEADING_DEC#1 (>K:HEADING_BUG_DEC)
AS1000_PFD_HEADING_FAST_DEC#(A:AUTOPILOT HEADING LOCK DIR:1, Degrees) 5 - dnor (>K:1:HEADING_BUG_SET)
AS1000_PFD_HEADING_FAST_INC#(A:AUTOPILOT HEADING LOCK DIR:1, Degrees) 5 + dnor (>K:1:HEADING_BUG_SET)
AS1000_PFD_HEADING_INC#1 (>K:HEADING_BUG_INC)
AS1000_PFD_HEADING_SYNC#(A:HEADING INDICATOR, degrees) (>K:HEADING_BUG_SET)
AS1000_PFD_JOYSTICK_DOWN#(>H:AS1000_PFD_JOYSTICK_DOWN)
AS1000_PFD_JOYSTICK_LEFT#(>H:AS1000_PFD_JOYSTICK_LEFT)
AS1000_PFD_JOYSTICK_PUSH#(>H:AS1000_PFD_JOYSTICK_PUSH)
AS1000_PFD_JOYSTICK_RIGHT#(>H:AS1000_PFD_JOYSTICK_RIGHT)
AS1000_PFD_JOYSTICK_UP#(>H:AS1000_PFD_JOYSTICK_UP)
AS1000_PFD_MENU_Push#(>H:AS1000_PFD_MENU_Push)
AS1000_PFD_NAV_Large_DEC#(>H:AS1000_PFD_NAV_Large_DEC)
AS1000_PFD_NAV_Large_INC#(>H:AS1000_PFD_NAV_Large_INC)
AS1000_PFD_NAV_Push#(>H:AS1000_PFD_NAV_Push)
AS1000_PFD_NAV_Small_DEC#(>H:AS1000_PFD_NAV_Small_DEC)
AS1000_PFD_NAV_Small_INC#(>H:AS1000_PFD_NAV_Small_INC)
AS1000_PFD_NAV_Switch#(>H:AS1000_PFD_NAV_Switch)
AS1000_PFD_PROC_Push#(>H:AS1000_PFD_PROC_Push)
AS1000_PFD_RANGE_DEC#(>H:AS1000_PFD_RANGE_DEC)
AS1000_PFD_RANGE_INC#(>H:AS1000_PFD_RANGE_INC)
AS1000_PFD_SOFTKEYS_1#(>H:AS1000_PFD_SOFTKEYS_1)
AS1000_PFD_SOFTKEYS_10#(>H:AS1000_PFD_SOFTKEYS_10)
AS1000_PFD_SOFTKEYS_11#(>H:AS1000_PFD_SOFTKEYS_11)
AS1000_PFD_SOFTKEYS_12#(>H:AS1000_PFD_SOFTKEYS_12)
AS1000_PFD_SOFTKEYS_2#(>H:AS1000_PFD_SOFTKEYS_2)
AS1000_PFD_SOFTKEYS_3#(>H:AS1000_PFD_SOFTKEYS_3)
AS1000_PFD_SOFTKEYS_4#(>H:AS1000_PFD_SOFTKEYS_4)
AS1000_PFD_SOFTKEYS_5#(>H:AS1000_PFD_SOFTKEYS_5)
AS1000_PFD_SOFTKEYS_6#(>H:AS1000_PFD_SOFTKEYS_6)
AS1000_PFD_SOFTKEYS_7#(>H:AS1000_PFD_SOFTKEYS_7)
AS1000_PFD_SOFTKEYS_8#(>H:AS1000_PFD_SOFTKEYS_8)
AS1000_PFD_SOFTKEYS_9#(>H:AS1000_PFD_SOFTKEYS_9)
AS1000_PFD_VOL_1_DEC#(>H:AS1000_PFD_VOL_1_DEC)
AS1000_PFD_VOL_2_DEC#(>H:AS1000_PFD_VOL_2_DEC)
AS1000_PFD_VOL_2_INC#(>H:AS1000_PFD_VOL_2_INC)
AS3000_MFD_SOFTKEYS_1#(>H:AS3000_MFD_SOFTKEYS_1)
AS3000_MFD_SOFTKEYS_10#(>H:AS3000_MFD_SOFTKEYS_10)
AS3000_MFD_SOFTKEYS_11#(>H:AS3000_MFD_SOFTKEYS_11)
AS3000_MFD_SOFTKEYS_12#(>H:AS3000_MFD_SOFTKEYS_12)
AS3000_MFD_SOFTKEYS_2#(>H:AS3000_MFD_SOFTKEYS_2)
AS3000_MFD_SOFTKEYS_3#(>H:AS3000_MFD_SOFTKEYS_3)
AS3000_MFD_SOFTKEYS_4#(>H:AS3000_MFD_SOFTKEYS_4)
AS3000_MFD_SOFTKEYS_5#(>H:AS3000_MFD_SOFTKEYS_5)
AS3000_MFD_SOFTKEYS_6#(>H:AS3000_MFD_SOFTKEYS_6)
AS3000_MFD_SOFTKEYS_7#(>H:AS3000_MFD_SOFTKEYS_7)
AS3000_MFD_SOFTKEYS_8#(>H:AS3000_MFD_SOFTKEYS_8)
AS3000_MFD_SOFTKEYS_9#(>H:AS3000_MFD_SOFTKEYS_9)
AS3000_PFD_BottomKnob_Large_DEC#(>H:AS3000_PFD_BottomKnob_Large_DEC)
AS3000_PFD_BottomKnob_Large_INC#(>H:AS3000_PFD_BottomKnob_Large_INC)
AS3000_PFD_BottomKnob_Push#(>H:AS3000_PFD_BottomKnob_Push)
AS3000_PFD_BottomKnob_Push_Long#(>H:AS3000_PFD_BottomKnob_Push_Long)
AS3000_PFD_BottomKnob_Small_DEC#(>H:AS3000_PFD_BottomKnob_Small_DEC)
AS3000_PFD_BottomKnob_Small_INC#(>H:AS3000_PFD_BottomKnob_Small_INC)
AS3000_PFD_SOFTKEYS_1#(>H:AS3000_PFD_SOFTKEYS_1)
AS3000_PFD_SOFTKEYS_10#(>H:AS3000_PFD_SOFTKEYS_10)
AS3000_PFD_SOFTKEYS_11#(>H:AS3000_PFD_SOFTKEYS_11)
AS3000_PFD_SOFTKEYS_12#(>H:AS3000_PFD_SOFTKEYS_12)
AS3000_PFD_SOFTKEYS_2#(>H:AS3000_PFD_SOFTKEYS_2)
AS3000_PFD_SOFTKEYS_3#(>H:AS3000_PFD_SOFTKEYS_3)
AS3000_PFD_SOFTKEYS_4#(>H:AS3000_PFD_SOFTKEYS_4)
AS3000_PFD_SOFTKEYS_5#(>H:AS3000_PFD_SOFTKEYS_5)
AS3000_PFD_SOFTKEYS_6#(>H:AS3000_PFD_SOFTKEYS_6)
AS3000_PFD_SOFTKEYS_7#(>H:AS3000_PFD_SOFTKEYS_7)
AS3000_PFD_SOFTKEYS_8#(>H:AS3000_PFD_SOFTKEYS_8)
AS3000_PFD_SOFTKEYS_9#(>H:AS3000_PFD_SOFTKEYS_9)
AS3000_PFD_TopKnob_Large_DEC#(>H:AS3000_PFD_TopKnob_Large_DEC)
AS3000_PFD_TopKnob_Large_INC#(>H:AS3000_PFD_TopKnob_Large_INC)
AS3000_PFD_TopKnob_Small_DEC#(>H:AS3000_PFD_TopKnob_Small_DEC)
AS3000_PFD_TopKnob_Small_INC#(>H:AS3000_PFD_TopKnob_Small_INC)
AS3X_Touch_1_Back_Push#(>H:AS3X_Touch_1_Back_Push)
AS3X_Touch_1_DirectTo_Push#(>H:AS3X_Touch_1_DirectTo_Push)
AS3X_Touch_1_Knob_Inner_L_DEC#(>H:AS3X_Touch_1_Knob_Inner_L_DEC)
AS3X_Touch_1_Knob_Inner_L_INC#(>H:AS3X_Touch_1_Knob_Inner_L_INC)
AS3X_Touch_1_Knob_Inner_R_DEC#(>H:AS3X_Touch_1_Knob_Inner_R_DEC)
AS3X_Touch_1_Knob_Inner_R_INC#(>H:AS3X_Touch_1_Knob_Inner_R_INC)
AS3X_Touch_1_Knob_Outer_L_DEC#(>H:AS3X_Touch_1_Knob_Outer_L_DEC)
AS3X_Touch_1_Knob_Outer_L_INC#(>H:AS3X_Touch_1_Knob_Outer_L_INC)
AS3X_Touch_1_Knob_Outer_R_DEC#(>H:AS3X_Touch_1_Knob_Outer_R_DEC)
AS3X_Touch_1_Knob_Outer_R_INC#(>H:AS3X_Touch_1_Knob_Outer_R_INC)
AS3X_Touch_1_Menu_Push#(>H:AS3X_Touch_1_Menu_Push)
AS3X_Touch_1_NRST_Push#(>H:AS3X_Touch_1_NRST_Push)
BARO_1_DEC#0 (>K:KOHLSMAN_DEC)
BARO_1_INC#0 (>K:KOHLSMAN_INC)
BARO_2_DEC#1 (>K:KOHLSMAN_DEC)
BARO_2_INC#1 (>K:KOHLSMAN_INC)
BARO_3_DEC#3 (>K:KOHLSMAN_DEC)
BARO_3_INC#2 (>K:KOHLSMAN_INC)
AS1000_MFD_COM_Push#(>H:AS1000_MFD_COM_Push)
AS1000_MFD_FLC_Push#(>K:FLIGHT_LEVEL_CHANGE) (A:AIRSPEED INDICATED, knots) (>K:AP_SPD_VAR_SET)
AS1000_PFD_CRS_PUSH#(>H:AS1000_PFD_CRS_PUSH)
AS1000_PFD_VOL_1_INC#(>H:AS1000_PFD_VOL_1_INC)
AS430_CLR_Push#(>H:AS430_CLR_Push)
AS430_CLR_Push_Long#(>H:AS430_CLR_Push_Long)
AS430_COMSWAP_Push#(>H:AS430_COMSWAP_Push)
AS430_DirectTo_Push#(>H:AS430_DirectTo_Push)
AS430_ENT_Push#(>H:AS430_ENT_Push)
AS430_FPL_Push#(>H:AS430_FPL_Push)
AS430_LeftLargeKnob_Left#(>H:AS430_LeftLargeKnob_Left)
AS430_LeftLargeKnob_Right#(>H:AS430_LeftLargeKnob_Right)
AS430_LeftSmallKnob_Left#(>H:AS430_LeftSmallKnob_Left)
AS430_LeftSmallKnob_Push#(>H:AS430_LeftSmallKnob_Push)
AS430_LeftSmallKnob_Right#(>H:AS430_LeftSmallKnob_Right)
AS430_MENU_Push#(>H:AS430_MENU_Push)
AS430_MSG_Push#(>H:AS430_MSG_Push)
AS430_NAVSWAP_Push#(>H:AS430_NAVSWAP_Push)
AS430_OBS_Push#(>H:AS430_OBS_Push)
AS430_PROC_Push#(>H:AS430_PROC_Push)
AS430_RNG_Dezoom#(>H:AS430_RNG_Dezoom)
AS430_RNG_Zoom#(>H:AS430_RNG_Zoom)
AS430_RightLargeKnob_Left#(>H:AS430_RightLargeKnob_Left)
AS430_RightLargeKnob_Right#(>H:AS430_RightLargeKnob_Right)
AS430_RightSmallKnob_Left#(>H:AS430_RightSmallKnob_Left)
AS430_RightSmallKnob_Push#(>H:AS430_RightSmallKnob_Push)
AS430_RightSmallKnob_Right#(>H:AS430_RightSmallKnob_Right)
AS530_CDI_Push#(>K:TOGGLE_GPS_DRIVES_NAV1)
AS530_CLR_Push#(>H:AS530_CLR_Push)
AS530_CLR_Push_Long#(>H:AS530_CLR_Push_Long)
AS530_COMSWAP_Push#(>H:AS530_COMSWAP_Push)
AS530_DirectTo_Push#(>H:AS530_DirectTo_Push)
AS530_ENT_Push#(>H:AS530_ENT_Push)
AS530_FPL_Push#(>H:AS530_FPL_Push)
AS530_LeftLargeKnob_Left#(>H:AS530_LeftLargeKnob_Left)
AS530_LeftLargeKnob_Right#(>H:AS530_LeftLargeKnob_Right)
AS530_LeftSmallKnob_Left#(>H:AS530_LeftSmallKnob_Left)
AS530_LeftSmallKnob_Push#(>H:AS530_LeftSmallKnob_Push)
AS530_LeftSmallKnob_Right#(>H:AS530_LeftSmallKnob_Right)
AS530_MENU_Push#(>H:AS530_MENU_Push)
AS530_MSG_Push#(>H:AS530_MSG_Push)
AS530_NAVSWAP_Push#(>H:AS530_NAVSWAP_Push)
AS530_OBS_Push#(>H:AS530_OBS_Push)
AS530_PROC_Push#(>H:AS530_PROC_Push)
AS530_RNG_Dezoom#(>H:AS530_RNG_Dezoom)
AS530_RNG_Zoom#(>H:AS530_RNG_Zoom)
AS530_RightLargeKnob_Left#(>H:AS530_RightLargeKnob_Left)
AS530_RightLargeKnob_Right#(>H:AS530_RightLargeKnob_Right)
AS530_RightSmallKnob_Left#(>H:AS530_RightSmallKnob_Left)
AS530_RightSmallKnob_Push#(>H:AS530_RightSmallKnob_Push)
AS530_RightSmallKnob_Right#(>H:AS530_RightSmallKnob_Right)
AS530_VNAV_Push#(>H:AS530_VNAV_Push)
BAROMETRIC_STD_PRESSURE#(>K:BAROMETRIC_STD_PRESSURE)
Transponder0#(>H:A320_Neo_ATC_BTN_0)
Transponder1#(>H:A320_Neo_ATC_BTN_1)
Transponder2#(>H:A320_Neo_ATC_BTN_2)
Transponder3#(>H:A320_Neo_ATC_BTN_3)
Transponder4#(>H:A320_Neo_ATC_BTN_4)
Transponder5#(>H:A320_Neo_ATC_BTN_5)
Transponder6#(>H:A320_Neo_ATC_BTN_6)
Transponder7#(>H:A320_Neo_ATC_BTN_7)
KAP140_Knob_Inner_DEC#(>H:KAP140_Knob_Inner_DEC)
KAP140_Knob_Inner_INC#(>H:KAP140_Knob_Inner_INC)
KAP140_Knob_Outer_DEC#(>H:KAP140_Knob_Outer_DEC)
KAP140_Knob_Outer_INC#(>H:KAP140_Knob_Outer_INC)
KAP140_Long_Push_BARO#(>H:KAP140_Long_Push_BARO)
KAP140_Push_ALT#(>H:KAP140_Push_ALT)
KAP140_Push_AP#(>H:KAP140_Push_AP)
KAP140_Push_APR#(>H:KAP140_Push_APR)
KAP140_Push_ARM#(>H:KAP140_Push_ARM)
KAP140_Push_BARO#(>H:KAP140_Push_BARO)
KAP140_Push_DN#(>H:KAP140_Push_DN)
KAP140_Push_HDG#(>H:KAP140_Push_HDG)
KAP140_Push_NAV#(>H:KAP140_Push_NAV)
KAP140_Push_REV#(>H:KAP140_Push_REV)
KAP140_Push_UP#(>H:KAP140_Push_UP)
TOGGLE_AVIONICS_MASTER#(>K:TOGGLE_AVIONICS_MASTER)
TransponderALT#4 (>A:TRANSPONDER STATE:1, Enum)
TransponderCLR#(>H:TransponderCLR)
TransponderIDT#(>K:XPNDR_IDENT_ON)
TransponderOFF#0 (>A:TRANSPONDER STATE:1, Enum)
TransponderON#3 (>A:TRANSPONDER STATE:1, Enum)
TransponderSTBY#1 (>A:TRANSPONDER STATE:1, Enum)
TransponderTST#2 (>A:TRANSPONDER STATE:1, Enum)
TransponderVFR#(>H:TransponderVFR)
adf_AntAdf#(>H:adf_AntAdf)
adf_FltEt#(>H:adf_FltEt)
adf_SetRst#(>H:adf_SetRst)
adf_bfo#(>H:adf_bfo)
adf_frqTransfert#(>H:adf_frqTransfert)
oclock_control#(>H:oclock_control)
oclock_control_long#(>H:oclock_control_long)
oclock_oat#(>H:oclock_oat)
oclock_select#(>H:oclock_select)
//Microsoft/Generic/Camera
CAPTURE_SCREENSHOT#(>K:CAPTURE_SCREENSHOT)
CHASE_VIEW_NEXT#(>K:CHASE_VIEW_NEXT)
CHASE_VIEW_PREV#(>K:CHASE_VIEW_PREV)
CHASE_VIEW_TOGGLE#(>K:CHASE_VIEW_TOGGLE)
CLOSE_VIEW#(>K:CLOSE_VIEW)
EYEPOINT_BACK#(>K:EYEPOINT_BACK)
EYEPOINT_DOWN#(>K:EYEPOINT_DOWN)
EYEPOINT_FORWARD#(>K:EYEPOINT_FORWARD)
EYEPOINT_LEFT#(>K:EYEPOINT_LEFT)
EYEPOINT_RIGHT#(>K:EYEPOINT_RIGHT)
EYEPOINT_UP#(>K:EYEPOINT_UP)
KNEEBOARD_VIEW#(>K:KNEEBOARD_VIEW)
NEW_VIEW#(>K:NEW_VIEW)
NEXT_SUB_VIEW#(>K:NEXT_SUB_VIEW)
NEXT_VIEW#(>K:NEXT_VIEW)
PAN_DOWN#(>K:PAN_DOWN)
PAN_LEFT#(>K:PAN_LEFT)
PAN_LEFT_DOWN#(>K:PAN_LEFT_DOWN)
PAN_LEFT_UP#(>K:PAN_LEFT_UP)
PAN_RIGHT#(>K:PAN_RIGHT)
PAN_RIGHT_DOWN#(>K:PAN_RIGHT_DOWN)
PAN_RIGHT_UP#(>K:PAN_RIGHT_UP)
PAN_TILT_LEFT#(>K:PAN_TILT_LEFT)
PAN_TILT_RIGHT#(>K:PAN_TILT_RIGHT)
PAN_UP#(>K:PAN_UP)
PREV_SUB_VIEW#(>K:PREV_SUB_VIEW)
PREV_VIEW#(>K:PREV_VIEW)
VIEW_ALWAYS_PAN_DOWN#(>K:VIEW_ALWAYS_PAN_DOWN)
VIEW_ALWAYS_PAN_UP#(>K:VIEW_ALWAYS_PAN_UP)
VIEW_AXIS_INDICATOR_CYCLE#(>K:VIEW_AXIS_INDICATOR_CYCLE)
VIEW_CAMERA_SELECT_START#(>K:VIEW_CAMERA_SELECT_START)
VIEW_CHASE_DISTANCE_ADD#(>K:VIEW_CHASE_DISTANCE_ADD)
VIEW_CHASE_DISTANCE_SUB#(>K:VIEW_CHASE_DISTANCE_SUB)
VIEW_COCKPIT_FORWARD#(>K:VIEW_COCKPIT_FORWARD)
VIEW_DOWN#(>K:VIEW_DOWN)
VIEW_FORWARD#(>K:VIEW_FORWARD)
VIEW_FORWARD_LEFT#(>K:VIEW_FORWARD_LEFT)
VIEW_FORWARD_LEFT_UP#(>K:VIEW_FORWARD_LEFT_UP)
VIEW_FORWARD_RIGHT#(>K:VIEW_FORWARD_RIGHT)
VIEW_FORWARD_RIGHT_UP#(>K:VIEW_FORWARD_RIGHT_UP)
VIEW_FORWARD_UP#(>K:VIEW_FORWARD_UP)
VIEW_LEFT#(>K:VIEW_LEFT)
VIEW_LEFT_UP#(>K:VIEW_LEFT_UP)
VIEW_LINKING_TOGGLE#(>K:VIEW_LINKING_TOGGLE)
VIEW_MAP_ORIENTATION_CYCLE#(>K:VIEW_MAP_ORIENTATION_CYCLE)
VIEW_MODE#(>K:VIEW_MODE)
VIEW_MODE_REV#(>K:VIEW_MODE_REV)
VIEW_PANEL_ALPHA_DEC#(>K:VIEW_PANEL_ALPHA_DEC)
VIEW_PANEL_ALPHA_INC#(>K:VIEW_PANEL_ALPHA_INC)
VIEW_PANEL_ALPHA_SELECT#(>K:VIEW_PANEL_ALPHA_SELECT)
VIEW_PREVIOUS_TOGGLE#(>K:VIEW_PREVIOUS_TOGGLE)
VIEW_REAR#(>K:VIEW_REAR)
VIEW_REAR_LEFT#(>K:VIEW_REAR_LEFT)
VIEW_REAR_LEFT_UP#(>K:VIEW_REAR_LEFT_UP)
VIEW_REAR_RIGHT#(>K:VIEW_REAR_RIGHT)
VIEW_REAR_RIGHT_UP#(>K:VIEW_REAR_RIGHT_UP)
VIEW_REAR_UP#(>K:VIEW_REAR_UP)
VIEW_RIGHT#(>K:VIEW_RIGHT)
VIEW_RIGHT_UP#(>K:VIEW_RIGHT_UP)
VIEW_TRACK_PAN_TOGGLE#(>K:VIEW_TRACK_PAN_TOGGLE)
VIEW_UP#(>K:VIEW_UP)
VIEW_VIRTUAL_COCKPIT_FORWARD#(>K:VIEW_VIRTUAL_COCKPIT_FORWARD)
VIEW_WINDOW_TITLES_TOGGLE#(>K:VIEW_WINDOW_TITLES_TOGGLE)
VIEW_WINDOW_TO_FRONT#(>K:VIEW_WINDOW_TO_FRONT)
ZOOM_1X#(>K:ZOOM_1X)
ZOOM_IN#(>K:ZOOM_IN)
ZOOM_IN_FINE#(>K:ZOOM_IN_FINE)
ZOOM_MINUS#(>K:ZOOM_MINUS)
ZOOM_OUT#(>K:ZOOM_OUT)
ZOOM_OUT_FINE#(>K:ZOOM_OUT_FINE)
ZOOM_PLUS#(>K:ZOOM_PLUS)
//Microsoft/Generic/Controls
AILERONS_LEFT#(>K:AILERONS_LEFT)
AILERONS_RIGHT#(>K:AILERONS_RIGHT)
AILERON_TRIM_LEFT#(>K:AILERON_TRIM_LEFT)
AILERON_TRIM_RIGHT#(>K:AILERON_TRIM_RIGHT)
BRAKES#(>K:BRAKES)
BRAKES_LEFT#(>K:BRAKES_LEFT)
BRAKES_RIGHT#(>K:BRAKES_RIGHT)
CENTER_AILER_RUDDER#(>K:CENTER_AILER_RUDDER)
DEC_AUTOBRAKE_CONTROL#(>K:DEC_AUTOBRAKE_CONTROL)
ELEV_DOWN#(>K:ELEV_DOWN)
ELEV_TRIM_DN#(>K:ELEV_TRIM_DN)
ELEV_TRIM_UP#(>K:ELEV_TRIM_UP)
ELEV_UP#(>K:ELEV_UP)
Elevator_Trim_Fast_Dec#(A:ELEVATOR TRIM PCT,Percent) -- 163.83 * -16383 max (>K:ELEVATOR_TRIM_SET)
Elevator_Trim_Fast_Inc#(A:ELEVATOR TRIM PCT,Percent) ++ 163.83 * 16383 min (>K:ELEVATOR_TRIM_SET)
FLAPS_1#(>K:FLAPS_1)
FLAPS_2#(>K:FLAPS_2)
FLAPS_3#(>K:FLAPS_3)
FLAPS_DECR#(>K:FLAPS_DECR)
FLAPS_DOWN#(>K:FLAPS_DOWN)
FLAPS_INCR#(>K:FLAPS_INCR)
FLAPS_UP#(>K:FLAPS_UP)
INC_AUTOBRAKE_CONTROL#(>K:INC_AUTOBRAKE_CONTROL)
RUDDER_TRIM_LEFT#(>K:RUDDER_TRIM_LEFT)
RUDDER_TRIM_RIGHT#(>K:RUDDER_TRIM_RIGHT)
PARKING_BRAKES_TOGGLE#(>K:PARKING_BRAKES)
PARKING_BRAKES_OFF#0 (>K:PARKING_BRAKE_SET)
PARKING_BRAKES_ON#1 (>K:PARKING_BRAKE_SET)
ROTOR_BRAKE#(>K:ROTOR_BRAKE)
RUDDER_CENTER#(>K:RUDDER_CENTER)
RUDDER_LEFT#(>K:RUDDER_LEFT)
RUDDER_RIGHT#(>K:RUDDER_RIGHT)
RUDDER_TRIM_LEFT#(>K:RUDDER_TRIM_LEFT)
RUDDER_TRIM_RESET#(>K:RUDDER_TRIM_RESET) 
RUDDER_TRIM_RIGHT#(>K:RUDDER_TRIM_RIGHT)
SPOILERS_ARM_OFF#(>K:SPOILERS_ARM_OFF)
SPOILERS_ARM_ON#(>K:SPOILERS_ARM_ON)
SPOILERS_ARM_TOGGLE#(>K:SPOILERS_ARM_TOGGLE)
SPOILERS_OFF#(>K:SPOILERS_OFF)
SPOILERS_ON#(>K:SPOILERS_ON)
SPOILERS_TOGGLE#(>K:SPOILERS_TOGGLE)
TOGGLE_LEFT_BRAKE_FAILURE#(>K:TOGGLE_LEFT_BRAKE_FAILURE)
TOGGLE_RIGHT_BRAKE_FAILURE#(>K:TOGGLE_RIGHT_BRAKE_FAILURE)
TOGGLE_TOTAL_BRAKE_FAILURE#(>K:TOGGLE_TOTAL_BRAKE_FAILURE)
//Microsoft/Generic/Electrical
APU_GENERATOR_SWITCH_TOGGLE#(>K:APU_GENERATOR_SWITCH_TOGGLE)
APU_OFF_SWITCH#(>K:APU_OFF_SWITCH)
APU_STARTER#(>K:APU_STARTER)
BATTERY_OFF#(A:ELECTRICAL MASTER BATTERY:1, Bool) 1 == if{ 1 (>K:TOGGLE_MASTER_BATTERY) }
BATTERY_ON#(A:ELECTRICAL MASTER BATTERY:1, Bool) 0 == if{ 1 (>K:TOGGLE_MASTER_BATTERY) }
TOGGLE_ALTERNATOR1#(>K:TOGGLE_ALTERNATOR1)
TOGGLE_ALTERNATOR2#(>K:TOGGLE_ALTERNATOR2)
TOGGLE_ALTERNATOR3#(>K:TOGGLE_ALTERNATOR3)
TOGGLE_ALTERNATOR4#(>K:TOGGLE_ALTERNATOR4)
TOGGLE_ELECTRICAL_FAILURE#(>K:TOGGLE_ELECTRICAL_FAILURE)
TOGGLE_MASTER_ALTERNATOR#(>K:TOGGLE_MASTER_ALTERNATOR)
TOGGLE_MASTER_BATTERY#(>K:TOGGLE_MASTER_BATTERY)
TOGGLE_MASTER_BATTERY_ALTERNATOR#(>K:TOGGLE_MASTER_BATTERY_ALTERNATOR)
//Microsoft/Generic/Engines
DEC_THROTTLE#(>K:DEC_THROTTLE)
ENGINE#(>K:ENGINE)
ENGINE_AUTO_SHUTDOWN#(>K:ENGINE_AUTO_SHUTDOWN)
ENGINE_AUTO_START#(>K:ENGINE_AUTO_START)
ENGINE_PRIMER#(>K:ENGINE_PRIMER)
INC_THROTTLE#(>K:INC_THROTTLE)
JET_STARTER#(>K:JET_STARTER)
MIXTURE1_DECR#(>K:MIXTURE1_DECR)
MIXTURE1_DECR_SMALL#(>K:MIXTURE1_DECR_SMALL)
MIXTURE1_INCR#(>K:MIXTURE1_INCR)
MIXTURE1_INCR_SMALL#(>K:MIXTURE1_INCR_SMALL)
MIXTURE1_LEAN#(>K:MIXTURE1_LEAN)
MIXTURE1_RICH#(>K:MIXTURE1_RICH)
MIXTURE2_DECR#(>K:MIXTURE2_DECR)
MIXTURE2_DECR_SMALL#(>K:MIXTURE2_DECR_SMALL)
MIXTURE2_INCR#(>K:MIXTURE2_INCR)
MIXTURE2_INCR_SMALL#(>K:MIXTURE2_INCR_SMALL)
MIXTURE2_LEAN#(>K:MIXTURE2_LEAN)
MIXTURE2_RICH#(>K:MIXTURE2_RICH)
MIXTURE3_DECR#(>K:MIXTURE3_DECR)
MIXTURE3_DECR_SMALL#(>K:MIXTURE3_DECR_SMALL)
MIXTURE3_INCR#(>K:MIXTURE3_INCR)
MIXTURE3_INCR_SMALL#(>K:MIXTURE3_INCR_SMALL)
MIXTURE3_LEAN#(>K:MIXTURE3_LEAN)
MIXTURE3_RICH#(>K:MIXTURE3_RICH)
MIXTURE4_DECR#(>K:MIXTURE4_DECR)
MIXTURE4_DECR_SMALL#(>K:MIXTURE4_DECR_SMALL)
MIXTURE4_INCR#(>K:MIXTURE4_INCR)
MIXTURE4_INCR_SMALL#(>K:MIXTURE4_INCR_SMALL)
MIXTURE4_LEAN#(>K:MIXTURE4_LEAN)
MIXTURE4_RICH#(>K:MIXTURE4_RICH)
MIXTURE_DECR#(>K:MIXTURE_DECR)
MIXTURE_DECR_SMALL#(>K:MIXTURE_DECR_SMALL)
MIXTURE_INCR#(>K:MIXTURE_INCR)
MIXTURE_INCR_SMALL#(>K:MIXTURE_INCR_SMALL)
MIXTURE_LEAN#(>K:MIXTURE_LEAN)
MIXTURE_RICH#(>K:MIXTURE_RICH)
THROTTLE1_CUT#(>K:THROTTLE1_CUT)
THROTTLE1_DECR#(>K:THROTTLE1_DECR)
THROTTLE1_DECR_SMALL#(>K:THROTTLE1_DECR_SMALL)
THROTTLE1_FULL#(>K:THROTTLE1_FULL)
THROTTLE1_INCR#(>K:THROTTLE1_INCR)
THROTTLE1_INCR_SMALL#(>K:THROTTLE1_INCR_SMALL)
THROTTLE2_CUT#(>K:THROTTLE2_CUT)
THROTTLE2_DECR#(>K:THROTTLE2_DECR)
THROTTLE2_DECR_SMALL#(>K:THROTTLE2_DECR_SMALL)
THROTTLE2_FULL#(>K:THROTTLE2_FULL)
THROTTLE2_INCR#(>K:THROTTLE2_INCR)
THROTTLE2_INCR_SMALL#(>K:THROTTLE2_INCR_SMALL)
THROTTLE3_CUT#(>K:THROTTLE3_CUT)
THROTTLE3_DECR#(>K:THROTTLE3_DECR)
THROTTLE3_DECR_SMALL#(>K:THROTTLE3_DECR_SMALL)
THROTTLE3_FULL#(>K:THROTTLE3_FULL)
THROTTLE3_INCR#(>K:THROTTLE3_INCR)
THROTTLE3_INCR_SMALL#(>K:THROTTLE3_INCR_SMALL)
THROTTLE4_CUT#(>K:THROTTLE4_CUT)
THROTTLE4_DECR#(>K:THROTTLE4_DECR)
THROTTLE4_DECR_SMALL#(>K:THROTTLE4_DECR_SMALL)
THROTTLE4_FULL#(>K:THROTTLE4_FULL)
THROTTLE4_INCR#(>K:THROTTLE4_INCR)
THROTTLE4_INCR_SMALL#(>K:THROTTLE4_INCR_SMALL)
THROTTLE_10#(>K:THROTTLE_10)
THROTTLE_20#(>K:THROTTLE_20)
THROTTLE_30#(>K:THROTTLE_30)
THROTTLE_40#(>K:THROTTLE_40)
THROTTLE_50#(>K:THROTTLE_50)
THROTTLE_60#(>K:THROTTLE_60)
THROTTLE_70#(>K:THROTTLE_70)
THROTTLE_80#(>K:THROTTLE_80)
THROTTLE_90#(>K:THROTTLE_90)
THROTTLE_CUT#(>K:THROTTLE_CUT)
THROTTLE_DECR#Engines
THROTTLE_DECR_SMALL#(>K:THROTTLE_DECR_SMALL)
THROTTLE_FULL#(>K:THROTTLE_FULL)
THROTTLE_INCR#(>K:THROTTLE_INCR)
THROTTLE_INCR_SMALL#(>K:THROTTLE_INCR_SMALL)
THROTTLE_REVERSE_THRUST_HOLD#(>K:THROTTLE_REVERSE_THRUST_HOLD)
THROTTLE_REVERSE_THRUST_TOGGLE#(>K:THROTTLE_REVERSE_THRUST_TOGGLE)
TOGGLE_ENGINE1_FAILURE#(>K:TOGGLE_ENGINE1_FAILURE)
TOGGLE_ENGINE2_FAILURE#(>K:TOGGLE_ENGINE2_FAILURE)
TOGGLE_ENGINE3_FAILURE#(>K:TOGGLE_ENGINE3_FAILURE)
TOGGLE_ENGINE4_FAILURE#(>K:TOGGLE_ENGINE4_FAILURE)
//Microsoft/Generic/Environment
SET_SIMULATOR_RATE#1 sp0  :0 (E:SIMULATION RATE, number) l0 !=  if{  (E:SIMULATION RATE, number) l0 <  if{  (>K:SIM_RATE_INCR) g0  } els{  (>K:SIM_RATE_DECR) g0  }  }
SIMUI_WINDOW_HIDESHOW#(>K:SIMUI_WINDOW_HIDESHOW)
SIM_RATE#(>K:SIM_RATE)
SIM_RATE_DECR#(>K:SIM_RATE_DECR)
SIM_RATE_INCR#(>K:SIM_RATE_INCR)
//Microsoft/Generic/Flight Instrumentation
GYRO_DRIFT_DEC#(>K:GYRO_DRIFT_DEC)
GYRO_DRIFT_INC#(>K:GYRO_DRIFT_INC)
HEADING_BUG_DEC#(>K:HEADING_BUG_DEC)
HEADING_BUG_INC#(>K:HEADING_BUG_INC)
HEADING_BUG_SELECT#(>K:HEADING_BUG_SELECT)
KOHLSMAN_DEC#(>K:KOHLSMAN_DEC)
KOHLSMAN_INC#(>K:KOHLSMAN_INC)
//Microsoft/Generic/Fuel
FUEL_DUMP_TOGGLE#(>K:FUEL_DUMP_TOGGLE)
FUEL_PUMP#(>K:FUEL_PUMP)
FUEL_SELECTOR_2_ALL#(>K:FUEL_SELECTOR_2_ALL)
FUEL_SELECTOR_2_CENTER#(>K:FUEL_SELECTOR_2_CENTER)
FUEL_SELECTOR_2_LEFT#(>K:FUEL_SELECTOR_2_LEFT)
FUEL_SELECTOR_2_LEFT_AUX#(>K:FUEL_SELECTOR_2_LEFT_AUX)
FUEL_SELECTOR_2_LEFT_MAIN#(>K:FUEL_SELECTOR_2_LEFT_MAIN)
FUEL_SELECTOR_2_OFF#(>K:FUEL_SELECTOR_2_OFF)
FUEL_SELECTOR_2_RIGHT#(>K:FUEL_SELECTOR_2_RIGHT)
FUEL_SELECTOR_2_RIGHT_AUX#(>K:FUEL_SELECTOR_2_RIGHT_AUX)
FUEL_SELECTOR_2_RIGHT_MAIN#(>K:FUEL_SELECTOR_2_RIGHT_MAIN)
FUEL_SELECTOR_3_ALL#(>K:FUEL_SELECTOR_3_ALL)
FUEL_SELECTOR_3_CENTER#(>K:FUEL_SELECTOR_3_CENTER)
FUEL_SELECTOR_3_LEFT#(>K:FUEL_SELECTOR_3_LEFT)
FUEL_SELECTOR_3_LEFT_AUX#(>K:FUEL_SELECTOR_3_LEFT_AUX)
FUEL_SELECTOR_3_LEFT_MAIN#(>K:FUEL_SELECTOR_3_LEFT_MAIN)
FUEL_SELECTOR_3_OFF#(>K:FUEL_SELECTOR_3_OFF)
FUEL_SELECTOR_3_RIGHT#(>K:FUEL_SELECTOR_3_RIGHT)
FUEL_SELECTOR_3_RIGHT_AUX#(>K:FUEL_SELECTOR_3_RIGHT_AUX)
FUEL_SELECTOR_3_RIGHT_MAIN#(>K:FUEL_SELECTOR_3_RIGHT_MAIN)
FUEL_SELECTOR_4_ALL#(>K:FUEL_SELECTOR_4_ALL)
FUEL_SELECTOR_4_CENTER#(>K:FUEL_SELECTOR_4_CENTER)
FUEL_SELECTOR_4_LEFT#(>K:FUEL_SELECTOR_4_LEFT)
FUEL_SELECTOR_4_LEFT_AUX#(>K:FUEL_SELECTOR_4_LEFT_AUX)
FUEL_SELECTOR_4_LEFT_MAIN#(>K:FUEL_SELECTOR_4_LEFT_MAIN)
FUEL_SELECTOR_4_OFF#(>K:FUEL_SELECTOR_4_OFF)
FUEL_SELECTOR_4_RIGHT#(>K:FUEL_SELECTOR_4_RIGHT)
FUEL_SELECTOR_4_RIGHT_AUX#(>K:FUEL_SELECTOR_4_RIGHT_AUX)
FUEL_SELECTOR_4_RIGHT_MAIN#(>K:FUEL_SELECTOR_4_RIGHT_MAIN)
FUEL_SELECTOR_ALL#(>K:FUEL_SELECTOR_ALL)
FUEL_SELECTOR_CENTER#(>K:FUEL_SELECTOR_CENTER)
FUEL_SELECTOR_LEFT#(>K:FUEL_SELECTOR_LEFT)
FUEL_SELECTOR_LEFT_AUX#(>K:FUEL_SELECTOR_LEFT_AUX)
FUEL_SELECTOR_LEFT_MAIN#(>K:FUEL_SELECTOR_LEFT_MAIN)
FUEL_SELECTOR_OFF#(>K:FUEL_SELECTOR_OFF)
FUEL_SELECTOR_RIGHT#(>K:FUEL_SELECTOR_RIGHT)
FUEL_SELECTOR_RIGHT_AUX#(>K:FUEL_SELECTOR_RIGHT_AUX)
FUEL_SELECTOR_RIGHT_MAIN#(>K:FUEL_SELECTOR_RIGHT_MAIN)
MANUAL_FUEL_PRESSURE_PUMP#(>K:MANUAL_FUEL_PRESSURE_PUMP)
REQUEST_FUEL_KEY#(>K:REQUEST_FUEL_KEY)
TOGGLE_ELECT_FUEL_PUMP#(>K:TOGGLE_ELECT_FUEL_PUMP)
TOGGLE_ELECT_FUEL_PUMP1#(>K:TOGGLE_ELECT_FUEL_PUMP1)
TOGGLE_ELECT_FUEL_PUMP2#(>K:TOGGLE_ELECT_FUEL_PUMP2)
TOGGLE_ELECT_FUEL_PUMP3#(>K:TOGGLE_ELECT_FUEL_PUMP3)
TOGGLE_ELECT_FUEL_PUMP4#(>K:TOGGLE_ELECT_FUEL_PUMP4)
TOGGLE_FUEL_VALVE_ALL#(>K:TOGGLE_FUEL_VALVE_ALL)
TOGGLE_FUEL_VALVE_ENG1#(>K:TOGGLE_FUEL_VALVE_ENG1)
TOGGLE_FUEL_VALVE_ENG2#(>K:TOGGLE_FUEL_VALVE_ENG2)
TOGGLE_FUEL_VALVE_ENG3#(>K:TOGGLE_FUEL_VALVE_ENG3)
TOGGLE_FUEL_VALVE_ENG4#(>K:TOGGLE_FUEL_VALVE_ENG4)
//Microsoft/Generic/Gear
GEAR_DOWN#(>K:GEAR_DOWN)
GEAR_TOGGLE#(>K:GEAR_TOGGLE)
GEAR_UP#(>K:GEAR_UP)
ANTISKID_BRAKES_TOGGLE#(>K:ANTISKID_BRAKES_TOGGLE)
//Microsoft/Generic/Interaction
COCKPIT_CAMERA_ZOOM_DEC#(A:COCKPIT CAMERA ZOOM,Percent) 5 - (>A:COCKPIT CAMERA ZOOM,Percent)
COCKPIT_CAMERA_ZOOM_INC#(A:COCKPIT CAMERA ZOOM,Percent) 5 + (>A:COCKPIT CAMERA ZOOM,Percent)
EXTERNAL_CAMERA_ZOOM_DEC#(A:CHASE CAMERA ZOOM,Percent) 5 - (>A:CHASE CAMERA ZOOM,Percent)
EXTERNAL_CAMERA_ZOOM_INC#(A:CHASE CAMERA ZOOM,Percent) 5 + (>A:CHASE CAMERA ZOOM,Percent)
COCKPIT-EXTERNAL-VIEW-SWAP-SWITCH#50 (>A:COCKPIT CAMERA ZOOM,Percent) 50 (>A:CHASE CAMERA ZOOM,Percent) (A:CAMERA STATE,Enum) 2 == if{ 3 (>A:CAMERA STATE,Enum) } els{ (A:CAMERA STATE,Enum) 3 == if{ 2 (>A:CAMERA STATE,Enum) }
COCKPIT-EXTERNAL-VIEW-SWAP-SWITCH_-_DUPLICATE__OLD_#50 (>A:COCKPIT CAMERA ZOOM,Percent) 50 (>A:CHASE CAMERA ZOOM,Percent) (A:CAMERA STATE,Enum) 2 == if{ 3 (>A:CAMERA STATE,Enum) } els{ (A:CAMERA STATE,Enum) 3 == if{ 2 (>A:CAMERA STATE,Enum) }
TOGGLE_JETWAY#(>K:TOGGLE_JETWAY)
TOGGLE_PUSHBACK#(>K:TOGGLE_PUSHBACK)
TOW_PLANE_RELEASE#(>K:TOW_PLANE_RELEASE)
TOW_PLANE_REQUEST#(>K:TOW_PLANE_REQUEST)
TUG_DISABLE#(>K:TUG_DISABLE)
TUG_HEADING#(>K:TUG_HEADING)
TUG_SPEED#(>K:TUG_SPEED)
//Microsoft/Generic/Lights
ALL_LIGHTS_TOGGLE#(>K:ALL_LIGHTS_TOGGLE)
BEACON_LIGHTS_OFF#0 (>K:BEACON_LIGHTS_SET)
BEACON_LIGHTS_ON#1 (>K:BEACON_LIGHTS_SET)
LANDING_LIGHTS_OFF#(>K:LANDING_LIGHTS_OFF)
LANDING_LIGHTS_ON#(>K:LANDING_LIGHTS_ON)
LANDING_LIGHTS_TOGGLE#(>K:LANDING_LIGHTS_TOGGLE)
LANDING_LIGHT_DOWN#(>K:LANDING_LIGHT_DOWN)
LANDING_LIGHT_HOME#(>K:LANDING_LIGHT_HOME)
LANDING_LIGHT_LEFT#(>K:LANDING_LIGHT_LEFT)
LANDING_LIGHT_RIGHT#(>K:LANDING_LIGHT_RIGHT)
LANDING_LIGHT_UP#(>K:LANDING_LIGHT_UP)
NAV_LIGHTS_OFF#0 (>K:NAV_LIGHTS_SET)
NAV_LIGHTS_ON#1 (>K:NAV_LIGHTS_SET)
PANEL_LIGHTS_OFF#(>K:PANEL_LIGHTS_OFF)
PANEL_LIGHTS_ON#(>K:PANEL_LIGHTS_ON)
PANEL_LIGHTS_SET__#(>K:PANEL_LIGHTS_SET )
STROBES_OFF#(>K:STROBES_OFF)
STROBES_ON#(>K:STROBES_ON)
STROBES_TOGGLE#(>K:STROBES_TOGGLE)
TAXI_LIGHTS_OFF#0 (>K:TAXI_LIGHTS_SET)
TAXI_LIGHTS_ON#1 (>K:TAXI_LIGHTS_SET)
TOGGLE_BEACON_LIGHTS#(>K:TOGGLE_BEACON_LIGHTS)
TOGGLE_CABIN_LIGHTS#(>K:TOGGLE_CABIN_LIGHTS)
TOGGLE_LOGO_LIGHTS#(>K:TOGGLE_LOGO_LIGHTS)
TOGGLE_NAV_LIGHTS#(>K:TOGGLE_NAV_LIGHTS)
TOGGLE_RECOGNITION_LIGHTS#(>K:TOGGLE_RECOGNITION_LIGHTS)
TOGGLE_TAXI_LIGHTS#(>K:TOGGLE_TAXI_LIGHTS)
TOGGLE_WING_LIGHTS#(>K:TOGGLE_WING_LIGHTS)
WING_LIGHTS_OFF#0 (>K:WING_LIGHTS_SET)
WING_LIGHTS_ON#1 (>K:WING_LIGHTS_SET)
//Microsoft/Generic/Radio
ADF_100_DEC#(>K:ADF_100_DEC)
ADF_100_INC#(>K:ADF_100_INC)
ADF_10_DEC#(>K:ADF_10_DEC)
ADF_10_INC#(>K:ADF_10_INC)
ADF_1_DEC#(>K:ADF_1_DEC)
ADF_1_INC#(>K:ADF_1_INC)
COM1_TRANSMIT_SELECT#(>K:COM1_TRANSMIT_SELECT)
COM1_VOLUME_DEC#(>K:COM1_VOLUME_DEC)
COM1_VOLUME_INC#(>K:COM1_VOLUME_INC)
COM1_VOLUME_SET#@ 10.23 / (>K:COM1_VOLUME_SET)
COM2_RADIO_FRACT_DEC#(>K:COM2_RADIO_FRACT_DEC)
COM2_RADIO_FRACT_DEC_CARRY#(>K:COM2_RADIO_FRACT_DEC_CARRY)
COM2_RADIO_FRACT_INC#(>K:COM2_RADIO_FRACT_INC)
COM2_RADIO_FRACT_INC_CARRY#(>K:COM2_RADIO_FRACT_INC_CARRY)
COM2_RADIO_SWAP#(>K:COM2_RADIO_SWAP)
COM2_RADIO_WHOLE_DEC#(>K:COM2_RADIO_WHOLE_DEC)
COM2_RADIO_WHOLE_INC#(>K:COM2_RADIO_WHOLE_INC)
COM2_TRANSMIT_SELECT#(>K:COM2_TRANSMIT_SELECT)
COM2_VOLUME_SET#@ 10.23 / (>K:COM2_VOLUME_SET)
COM_RADIO#(>K:COM_RADIO)
COM_RADIO_FRACT_DEC#(>K:COM_RADIO_FRACT_DEC)
COM_RADIO_FRACT_DEC_CARRY#(>K:COM_RADIO_FRACT_DEC_CARRY)
COM_RADIO_FRACT_INC#(>K:COM_RADIO_FRACT_INC)
COM_RADIO_FRACT_INC_CARRY#(>K:COM_RADIO_FRACT_INC_CARRY)
COM_RADIO_WHOLE_DEC#(>K:COM_RADIO_WHOLE_DEC)
COM_RADIO_WHOLE_INC#(>K:COM_RADIO_WHOLE_INC)
COM_RECEIVE_ALL_TOGGLE#(>K:COM_RECEIVE_ALL_TOGGLE)
COM_STBY_RADIO_SWAP#(>K:COM_STBY_RADIO_SWAP)
DME#(>K:DME)
DME1_TOGGLE#(>K:DME1_TOGGLE)
DME2_TOGGLE#(>K:DME2_TOGGLE)
DME_SELECT#(>K:DME_SELECT)
FREQUENCY_SWAP#(>K:FREQUENCY_SWAP)
MARKER_SOUND_TOGGLE#(>K:MARKER_SOUND_TOGGLE)
NAV1_RADIO_FRACT_DEC#(>K:NAV1_RADIO_FRACT_DEC)
NAV1_RADIO_FRACT_DEC_CARRY#(>K:NAV1_RADIO_FRACT_DEC_CARRY)
NAV1_RADIO_FRACT_INC#(>K:NAV1_RADIO_FRACT_INC)
NAV1_RADIO_FRACT_INC_CARRY#(>K:NAV1_RADIO_FRACT_INC_CARRY)
NAV1_RADIO_SWAP#(>K:NAV1_RADIO_SWAP)
NAV1_RADIO_WHOLE_DEC#(>K:NAV1_RADIO_WHOLE_DEC)
NAV1_RADIO_WHOLE_INC#(>K:NAV1_RADIO_WHOLE_INC)
NAV2_RADIO_FRACT_DEC#(>K:NAV2_RADIO_FRACT_DEC)
NAV2_RADIO_FRACT_DEC_CARRY#(>K:NAV2_RADIO_FRACT_DEC_CARRY)
NAV2_RADIO_FRACT_INC#(>K:NAV2_RADIO_FRACT_INC)
NAV2_RADIO_FRACT_INC_CARRY#(>K:NAV2_RADIO_FRACT_INC_CARRY)
NAV2_RADIO_SWAP#(>K:NAV2_RADIO_SWAP)
NAV2_RADIO_WHOLE_DEC#(>K:NAV2_RADIO_WHOLE_DEC)
NAV2_RADIO_WHOLE_INC#(>K:NAV2_RADIO_WHOLE_INC)
NAV_RADIO#(>K:NAV_RADIO)
RADIO_ADF2_IDENT_DISABLE#(>K:RADIO_ADF2_IDENT_DISABLE)
RADIO_ADF2_IDENT_ENABLE#(>K:RADIO_ADF2_IDENT_ENABLE)
RADIO_ADF2_IDENT_TOGGLE#(>K:RADIO_ADF2_IDENT_TOGGLE)
RADIO_ADF_IDENT_DISABLE#(>K:RADIO_ADF_IDENT_DISABLE)
RADIO_ADF_IDENT_ENABLE#(>K:RADIO_ADF_IDENT_ENABLE)
RADIO_ADF_IDENT_TOGGLE#(>K:RADIO_ADF_IDENT_TOGGLE)
RADIO_DME1_IDENT_DISABLE#(>K:RADIO_DME1_IDENT_DISABLE)
RADIO_DME1_IDENT_ENABLE#(>K:RADIO_DME1_IDENT_ENABLE)
RADIO_DME1_IDENT_TOGGLE#(>K:RADIO_DME1_IDENT_TOGGLE)
RADIO_DME2_IDENT_DISABLE#(>K:RADIO_DME2_IDENT_DISABLE)
RADIO_DME2_IDENT_ENABLE#(>K:RADIO_DME2_IDENT_ENABLE)
RADIO_DME2_IDENT_TOGGLE#(>K:RADIO_DME2_IDENT_TOGGLE)
RADIO_SELECTED_DME_IDENT_DISABLE#(>K:RADIO_SELECTED_DME_IDENT_DISABLE)
RADIO_SELECTED_DME_IDENT_ENABLE#(>K:RADIO_SELECTED_DME_IDENT_ENABLE)
RADIO_SELECTED_DME_IDENT_TOGGLE#(>K:RADIO_SELECTED_DME_IDENT_TOGGLE)
RADIO_VOR1_IDENT_DISABLE#(>K:RADIO_VOR1_IDENT_DISABLE)
RADIO_VOR1_IDENT_ENABLE#(>K:RADIO_VOR1_IDENT_ENABLE)
RADIO_VOR1_IDENT_TOGGLE#(>K:RADIO_VOR1_IDENT_TOGGLE)
RADIO_VOR2_IDENT_DISABLE#(>K:RADIO_VOR2_IDENT_DISABLE)
RADIO_VOR2_IDENT_ENABLE#(>K:RADIO_VOR2_IDENT_ENABLE)
RADIO_VOR2_IDENT_TOGGLE#(>K:RADIO_VOR2_IDENT_TOGGLE)
TOGGLE_DME#(>K:TOGGLE_DME)
TOGGLE_SPEAKER#(>K:TOGGLE_SPEAKER)
VOR1_OBI_DEC#(>K:VOR1_OBI_DEC)
VOR1_OBI_INC#(>K:VOR1_OBI_INC)
VOR2_OBI_DEC#(>K:VOR2_OBI_DEC)
VOR2_OBI_INC#(>K:VOR2_OBI_INC)
VOR_OBS#(>K:VOR_OBS)
XPNDR#(>K:XPNDR)
XPNDR_1000_DEC#(>K:XPNDR_1000_DEC)
XPNDR_1000_INC#(>K:XPNDR_1000_INC)
XPNDR_100_DEC#(>K:XPNDR_100_DEC)
XPNDR_100_INC#(>K:XPNDR_100_INC)
XPNDR_10_DEC#(>K:XPNDR_10_DEC)
XPNDR_10_INC#(>K:XPNDR_10_INC)
XPNDR_1_DEC#(>K:XPNDR_1_DEC)
XPNDR_1_INC#(>K:XPNDR_1_INC)
XPNDR_DEC_CARRY#(>K:XPNDR_DEC_CARRY)
XPNDR_IDENT_OFF#(>K:XPNDR_IDENT_OFF)
XPNDR_IDENT_ON#(K:XPNDR_IDENT_ON)
XPNDR_IDENT_SET#(>K:XPNDR_IDENT_SET)
XPNDR_IDENT_TOGGLE#(>K:XPNDR_IDENT_TOGGLE)
XPNDR_INC_CARRY#(>K:XPNDR_INC_CARRY)
XPNDR_SET#(>K:XPNDR_SET)
//Microsoft/Generic/Unsorted
ADF_CARD_DEC#(>K:ADF_CARD_DEC)
ADF_CARD_INC#(>K:ADF_CARD_INC)
AIRSPEED_BUG_SELECT#(>K:AIRSPEED_BUG_SELECT)
ALTITUDE_BUG_SELECT#(>K:ALTITUDE_BUG_SELECT)
ATC#(>K:ATC)
ATC_MENU_0#(>K:ATC_MENU_0)
ATC_MENU_1#(>K:ATC_MENU_1)
ATC_MENU_2#(>K:ATC_MENU_2)
ATC_MENU_3#(>K:ATC_MENU_3)
ATC_MENU_4#(>K:ATC_MENU_4)
ATC_MENU_5#(>K:ATC_MENU_5)
ATC_MENU_6#(>K:ATC_MENU_6)
ATC_MENU_7#(>K:ATC_MENU_7)
ATC_MENU_8#(>K:ATC_MENU_8)
ATC_MENU_9#(>K:ATC_MENU_9)
ATTITUDE_BARS_POSITION_DOWN#(>K:ATTITUDE_BARS_POSITION_DOWN)
ATTITUDE_BARS_POSITION_UP#(>K:ATTITUDE_BARS_POSITION_UP)
ATTITUDE_CAGE_BUTTON#(>K:ATTITUDE_CAGE_BUTTON)
AUTORUDDER_TOGGLE#(>K:AUTORUDDER_TOGGLE)
AUTO_THROTTLE_ARM#(>K:AUTO_THROTTLE_ARM)
AUTO_THROTTLE_TO_GA#(>K:AUTO_THROTTLE_TO_GA)
AXIS_PAN_HEADING#(>K:AXIS_PAN_HEADING)
AXIS_PAN_PITCH#(>K:AXIS_PAN_PITCH)
AXIS_PAN_TILT#(>K:AXIS_PAN_TILT)
BLEED_AIR_SOURCE_CONTROL_DEC#(>K:BLEED_AIR_SOURCE_CONTROL_DEC)
BLEED_AIR_SOURCE_CONTROL_INC#(>K:BLEED_AIR_SOURCE_CONTROL_INC)
CLOCK_HOURS_DEC#(>K:CLOCK_HOURS_DEC)
CLOCK_HOURS_INC#(>K:CLOCK_HOURS_INC)
CLOCK_MINUTES_DEC#(>K:CLOCK_MINUTES_DEC)
CLOCK_MINUTES_INC#(>K:CLOCK_MINUTES_INC)
CLOCK_SECONDS_ZERO#(>K:CLOCK_SECONDS_ZERO)
CROSS_FEED_OFF#(>K:CROSS_FEED_OFF)
CROSS_FEED_OPEN#(>K:CROSS_FEED_OPEN)
CROSS_FEED_TOGGLE#(>K:CROSS_FEED_TOGGLE)
DEC_COWL_FLAPS#(>K:DEC_COWL_FLAPS)
DEC_COWL_FLAPS1#(>K:DEC_COWL_FLAPS1)
DEC_COWL_FLAPS2#(>K:DEC_COWL_FLAPS2)
DEC_COWL_FLAPS3#(>K:DEC_COWL_FLAPS3)
DEC_COWL_FLAPS4#(>K:DEC_COWL_FLAPS4)
DEC_DECISION_HEIGHT#(>K:DEC_DECISION_HEIGHT)
DEMO_STOP#(>K:DEMO_STOP)
EGT#(>K:EGT)
EGT1_DEC#(>K:EGT1_DEC)
EGT1_INC#(>K:EGT1_INC)
EGT2_DEC#(>K:EGT2_DEC)
EGT2_INC#(>K:EGT2_INC)
EGT3_DEC#(>K:EGT3_DEC)
EGT3_INC#(>K:EGT3_INC)
EGT4_DEC#(>K:EGT4_DEC)
EGT4_INC#(>K:EGT4_INC)
EGT_DEC#(>K:EGT_DEC)
EGT_INC#(>K:EGT_INC)
FLIGHT_MAP#(>K:FLIGHT_MAP)
FLY_BY_WIRE_ELAC_TOGGLE#(>K:FLY_BY_WIRE_ELAC_TOGGLE)
FLY_BY_WIRE_FAC_TOGGLE#(>K:FLY_BY_WIRE_FAC_TOGGLE)
FLY_BY_WIRE_SEC_TOGGLE#(>K:FLY_BY_WIRE_SEC_TOGGLE)
FREEZE_ALTITUDE_TOGGLE#(>K:FREEZE_ALTITUDE_TOGGLE)
FREEZE_ATTITUDE_TOGGLE#(>K:FREEZE_ATTITUDE_TOGGLE)
FREEZE_LATITUDE_LONGITUDE_TOGGLE#(>K:FREEZE_LATITUDE_LONGITUDE_TOGGLE)
GAUGE_KEYSTROKE#(>K:GAUGE_KEYSTROKE)
GEAR_PUMP#(>K:GEAR_PUMP)
GPWS_SWITCH_TOGGLE#(>K:GPWS_SWITCH_TOGGLE)
HOIST_DEPLOY_TOGGLE#(>K:HOIST_DEPLOY_TOGGLE)
HOIST_SWITCH_EXTEND#(>K:HOIST_SWITCH_EXTEND)
HOIST_SWITCH_RETRACT#(>K:HOIST_SWITCH_RETRACT)
HYDRAULIC_SWITCH_TOGGLE#(>K:HYDRAULIC_SWITCH_TOGGLE)
INC_COWL_FLAPS#(>K:INC_COWL_FLAPS)
INC_COWL_FLAPS1#(>K:INC_COWL_FLAPS1)
INC_COWL_FLAPS2#(>K:INC_COWL_FLAPS2)
INC_COWL_FLAPS3#(>K:INC_COWL_FLAPS3)
INC_COWL_FLAPS4#(>K:INC_COWL_FLAPS4)
INC_DECISION_HEIGHT#(>K:INC_DECISION_HEIGHT)
INVOKE_HELP#(>K:INVOKE_HELP)
BAROMETRIC#(>K:BAROMETRIC)
JOYSTICK_CALIBRATE#(>K:JOYSTICK_CALIBRATE)
MAGNETO#(>K:MAGNETO)
MAGNETO1_BOTH#(>K:MAGNETO1_BOTH)
MAGNETO1_DECR#(>K:MAGNETO1_DECR)
MAGNETO1_INCR#(>K:MAGNETO1_INCR)
MAGNETO1_LEFT#(>K:MAGNETO1_LEFT)
MAGNETO1_OFF#(>K:MAGNETO1_OFF)
MAGNETO1_RIGHT#(>K:MAGNETO1_RIGHT)
MAGNETO1_START#(>K:MAGNETO1_START)
MAGNETO2_BOTH#(>K:MAGNETO2_BOTH)
MAGNETO2_DECR#(>K:MAGNETO2_DECR)
MAGNETO2_INCR#(>K:MAGNETO2_INCR)
MAGNETO2_LEFT#(>K:MAGNETO2_LEFT)
MAGNETO2_OFF#(>K:MAGNETO2_OFF)
MAGNETO2_RIGHT#(>K:MAGNETO2_RIGHT)
MAGNETO2_START#(>K:MAGNETO2_START)
MAGNETO3_BOTH#(>K:MAGNETO3_BOTH)
MAGNETO3_DECR#(>K:MAGNETO3_DECR)
MAGNETO3_INCR#(>K:MAGNETO3_INCR)
MAGNETO3_LEFT#(>K:MAGNETO3_LEFT)
MAGNETO3_OFF#(>K:MAGNETO3_OFF)
MAGNETO3_RIGHT#(>K:MAGNETO3_RIGHT)
MAGNETO3_START#(>K:MAGNETO3_START)
MAGNETO4_BOTH#(>K:MAGNETO4_BOTH)
MAGNETO4_DECR#(>K:MAGNETO4_DECR)
MAGNETO4_INCR#(>K:MAGNETO4_INCR)
MAGNETO4_LEFT#(>K:MAGNETO4_LEFT)
MAGNETO4_OFF#(>K:MAGNETO4_OFF)
MAGNETO4_RIGHT#(>K:MAGNETO4_RIGHT)
MAGNETO4_START#(>K:MAGNETO4_START)
MAGNETO_BOTH#(>K:MAGNETO_BOTH)
MAGNETO_DECR#(>K:MAGNETO_DECR)
MAGNETO_INCR#(>K:MAGNETO_INCR)
MAGNETO_LEFT#(>K:MAGNETO_LEFT)
MAGNETO_OFF#(>K:MAGNETO_OFF)
MAGNETO_RIGHT#(>K:MAGNETO_RIGHT)
MAGNETO_START#(>K:MAGNETO_START)
MAP_ZOOM_FINE_IN#(>K:MAP_ZOOM_FINE_IN)
MAP_ZOOM_FINE_OUT#(>K:MAP_ZOOM_FINE_OUT)
MINUS#(>K:MINUS)
MINUS_SHIFT#(>K:MINUS_SHIFT)
MOUSE_LOOK_TOGGLE#(>K:MOUSE_LOOK_TOGGLE)
MP_ACTIVATE_CHAT#(>K:MP_ACTIVATE_CHAT)
MP_BROADCAST_VOICE_CAPTURE_START#(>K:MP_BROADCAST_VOICE_CAPTURE_START)
MP_BROADCAST_VOICE_CAPTURE_STOP#(>K:MP_BROADCAST_VOICE_CAPTURE_STOP)
MP_CHAT#(>K:MP_CHAT)
MP_PLAYER_CYCLE#(>K:MP_PLAYER_CYCLE)
MP_PLAYER_FOLLOW#(>K:MP_PLAYER_FOLLOW)
MP_TRANSFER_CONTROL#(>K:MP_TRANSFER_CONTROL)
MP_VOICE_CAPTURE_START#(>K:MP_VOICE_CAPTURE_START)
MP_VOICE_CAPTURE_STOP#(>K:MP_VOICE_CAPTURE_STOP)
NEW_MAP#(>K:NEW_MAP)
NITROUS_TANK_VALVE_TOGGLE#(>K:NITROUS_TANK_VALVE_TOGGLE)
PANEL_1#(>K:PANEL_1)
PANEL_2#(>K:PANEL_2)
PANEL_3#(>K:PANEL_3)
PANEL_4#(>K:PANEL_4)
PANEL_5#(>K:PANEL_5)
PANEL_6#(>K:PANEL_6)
PANEL_7#(>K:PANEL_7)
PANEL_8#(>K:PANEL_8)
PANEL_9#(>K:PANEL_9)
PANEL_HUD_NEXT#(>K:PANEL_HUD_NEXT)
PANEL_HUD_PREVIOUS#(>K:PANEL_HUD_PREVIOUS)
PANEL_ID_CLOSE#(>K:PANEL_ID_CLOSE)
PANEL_ID_OPEN#(>K:PANEL_ID_OPEN)
PANEL_ID_TOGGLE#(>K:PANEL_ID_TOGGLE)
PAUSE_OFF#(>K:PAUSE_OFF)
PAUSE_ON#(>K:PAUSE_ON)
PAUSE_TOGGLE#(>K:PAUSE_TOGGLE)
PLUS#(>K:PLUS)
PLUS_SHIFT#(>K:PLUS_SHIFT)
POINT_OF_INTEREST_CYCLE_NEXT#(>K:POINT_OF_INTEREST_CYCLE_NEXT)
POINT_OF_INTEREST_CYCLE_PREVIOUS#(>K:POINT_OF_INTEREST_CYCLE_PREVIOUS)
POINT_OF_INTEREST_TOGGLE_POINTER#(>K:POINT_OF_INTEREST_TOGGLE_POINTER)
PRESSURIZATION_CLIMB_RATE_DEC#(>K:PRESSURIZATION_CLIMB_RATE_DEC)
PRESSURIZATION_CLIMB_RATE_INC#(>K:PRESSURIZATION_CLIMB_RATE_INC)
PRESSURIZATIPRESSURE_ALT_DEC#(>K:PRESSURIZATIPRESSURE_ALT_DEC)
PRESSURIZATIPRESSURE_ALT_INC#(>K:PRESSURIZATIPRESSURE_ALT_INC)
PROP_PITCH1_DECR#(>K:PROP_PITCH1_DECR)
PROP_PITCH1_DECR_SMALL#(>K:PROP_PITCH1_DECR_SMALL)
PROP_PITCH1_HI#(>K:PROP_PITCH1_HI)
PROP_PITCH1_INCR#(>K:PROP_PITCH1_INCR)
PROP_PITCH1_INCR_SMALL#(>K:PROP_PITCH1_INCR_SMALL)
PROP_PITCH1_LO#(>K:PROP_PITCH1_LO)
PROP_PITCH2_DECR#(>K:PROP_PITCH2_DECR)
PROP_PITCH2_DECR_SMALL#(>K:PROP_PITCH2_DECR_SMALL)
PROP_PITCH2_HI#(>K:PROP_PITCH2_HI)
PROP_PITCH2_INCR#(>K:PROP_PITCH2_INCR)
PROP_PITCH2_INCR_SMALL#(>K:PROP_PITCH2_INCR_SMALL)
PROP_PITCH2_LO#(>K:PROP_PITCH2_LO)
PROP_PITCH3_DECR#(>K:PROP_PITCH3_DECR)
PROP_PITCH3_DECR_SMALL#(>K:PROP_PITCH3_DECR_SMALL)
PROP_PITCH3_HI#(>K:PROP_PITCH3_HI)
PROP_PITCH3_INCR#(>K:PROP_PITCH3_INCR)
PROP_PITCH3_INCR_SMALL#(>K:PROP_PITCH3_INCR_SMALL)
PROP_PITCH3_LO#(>K:PROP_PITCH3_LO)
PROP_PITCH4_DECR#(>K:PROP_PITCH4_DECR)
PROP_PITCH4_DECR_SMALL#(>K:PROP_PITCH4_DECR_SMALL)
PROP_PITCH4_HI#(>K:PROP_PITCH4_HI)
PROP_PITCH4_INCR#(>K:PROP_PITCH4_INCR)
PROP_PITCH4_INCR_SMALL#(>K:PROP_PITCH4_INCR_SMALL)
PROP_PITCH4_LO#(>K:PROP_PITCH4_LO)
PROP_PITCH_DECR#(>K:PROP_PITCH_DECR)
PROP_PITCH_DECR_SMALL#(>K:PROP_PITCH_DECR_SMALL)
PROP_PITCH_HI#(>K:PROP_PITCH_HI)
PROP_PITCH_INCR#(>K:PROP_PITCH_INCR)
PROP_PITCH_INCR_SMALL#(>K:PROP_PITCH_INCR_SMALL)
PROP_PITCH_LO#(>K:PROP_PITCH_LO)
READOUTS_FLIGHT#(>K:READOUTS_FLIGHT)
READOUTS_SLEW#(>K:READOUTS_SLEW)
REFRESH_SCENERY#(>K:REFRESH_SCENERY)
RELEASE_DROPPABLE_OBJECTS#(>K:RELEASE_DROPPABLE_OBJECTS)
RELOAD_PANELS#(>K:RELOAD_PANELS)
RELOAD_USER_AIRCRAFT#(>K:RELOAD_USER_AIRCRAFT)
REPAIR_AND_REFUEL#(>K:REPAIR_AND_REFUEL)
RETRACT_FLOAT_SWITCH_DEC#(>K:RETRACT_FLOAT_SWITCH_DEC)
RETRACT_FLOAT_SWITCH_INC#(>K:RETRACT_FLOAT_SWITCH_INC)
ROTOR_CLUTCH_SWITCH_TOGGLE#(>K:ROTOR_CLUTCH_SWITCH_TOGGLE)
ROTOR_GOV_SWITCH_TOGGLE#(>K:ROTOR_GOV_SWITCH_TOGGLE)
ROTOR_LATERAL_TRIM_DEC#(>K:ROTOR_LATERAL_TRIM_DEC)
ROTOR_LATERAL_TRIM_INC#(>K:ROTOR_LATERAL_TRIM_INC)
SELECT_1#(>K:SELECT_1)
SELECT_2#(>K:SELECT_2)
SELECT_3#(>K:SELECT_3)
SELECT_4#(>K:SELECT_4)
SITUATION_SAVE#(>K:SITUATION_SAVE)
SLEW_AHEAD_MINUS#(>K:SLEW_AHEAD_MINUS)
SLEW_AHEAD_PLUS#(>K:SLEW_AHEAD_PLUS)
SLEW_ALTIT_DN_FAST#(>K:SLEW_ALTIT_DN_FAST)
SLEW_ALTIT_DN_SLOW#(>K:SLEW_ALTIT_DN_SLOW)
SLEW_ALTIT_FREEZE#(>K:SLEW_ALTIT_FREEZE)
SLEW_ALTIT_MINUS#(>K:SLEW_ALTIT_MINUS)
SLEW_ALTIT_PLUS#(>K:SLEW_ALTIT_PLUS)
SLEW_ALTIT_UP_FAST#(>K:SLEW_ALTIT_UP_FAST)
SLEW_ALTIT_UP_SLOW#(>K:SLEW_ALTIT_UP_SLOW)
SLEW_BANK_MINUS#(>K:SLEW_BANK_MINUS)
SLEW_BANK_PLUS#(>K:SLEW_BANK_PLUS)
SLEW_FREEZE#(>K:SLEW_FREEZE)
SLEW_HEADING_MINUS#(>K:SLEW_HEADING_MINUS)
SLEW_HEADING_PLUS#(>K:SLEW_HEADING_PLUS)
SLEW_LEFT#(>K:SLEW_LEFT)
SLEW_OFF#(>K:SLEW_OFF)
SLEW_ON#(>K:SLEW_ON)
SLEW_PITCH_DN_FAST#(>K:SLEW_PITCH_DN_FAST)
SLEW_PITCH_DN_SLOW#(>K:SLEW_PITCH_DN_SLOW)
SLEW_PITCH_FREEZE#(>K:SLEW_PITCH_FREEZE)
SLEW_PITCH_MINUS#(>K:SLEW_PITCH_MINUS)
SLEW_PITCH_PLUS#(>K:SLEW_PITCH_PLUS)
SLEW_PITCH_UP_FAST#(>K:SLEW_PITCH_UP_FAST)
SLEW_PITCH_UP_SLOW#(>K:SLEW_PITCH_UP_SLOW)
SLEW_RIGHT#(>K:SLEW_RIGHT)
SLEW_TOGGLE#(>K:SLEW_TOGGLE)
SLING_PICKUP_RELEASE#(>K:SLING_PICKUP_RELEASE)
SMOKE_OFF#(>K:SMOKE_OFF)
SMOKE_ON#(>K:SMOKE_ON)
SMOKE_TOGGLE#(>K:SMOKE_TOGGLE)
SOUND_OFF#(>K:SOUND_OFF)
SOUND_ON#(>K:SOUND_ON)
SOUND_TOGGLE#(>K:SOUND_TOGGLE)
STEERING_DEC#(>K:STEERING_DEC)
STEERING_INC#(>K:STEERING_INC)
TAKEOFF_ASSIST_ARM_TOGGLE#(>K:TAKEOFF_ASSIST_ARM_TOGGLE)
TAKEOFF_ASSIST_FIRE#(>K:TAKEOFF_ASSIST_FIRE)
TOGGLE_AFTERBURNER#(>K:TOGGLE_AFTERBURNER)
TOGGLE_AFTERBURNER1#(>K:TOGGLE_AFTERBURNER1)
TOGGLE_AFTERBURNER2#(>K:TOGGLE_AFTERBURNER2)
TOGGLE_AFTERBURNER3#(>K:TOGGLE_AFTERBURNER3)
TOGGLE_AFTERBURNER4#(>K:TOGGLE_AFTERBURNER4)
TOGGLE_AIRCRAFT_EXIT#(>K:TOGGLE_AIRCRAFT_EXIT)
TOGGLE_AIRCRAFT_LABELS#(>K:TOGGLE_AIRCRAFT_LABELS)
TOGGLE_AIRPORT_NAME_DISPLAY#(>K:TOGGLE_AIRPORT_NAME_DISPLAY)
TOGGLE_ALL_STARTERS#(>K:TOGGLE_ALL_STARTERS)
TOGGLE_ALTERNATE_STATIC#(>K:TOGGLE_ALTERNATE_STATIC)
TOGGLE_AUTOFEATHER_ARM#(>K:TOGGLE_AUTOFEATHER_ARM)
TOGGLE_ELECTRIC_VACUUM_PUMP#(>K:TOGGLE_ELECTRIC_VACUUM_PUMP)
TOGGLE_FEATHER_SWITCHES#(>K:TOGGLE_FEATHER_SWITCHES)
TOGGLE_FEATHER_SWITCH_1#(>K:TOGGLE_FEATHER_SWITCH_1)
TOGGLE_FEATHER_SWITCH_2#(>K:TOGGLE_FEATHER_SWITCH_2)
TOGGLE_FEATHER_SWITCH_3#(>K:TOGGLE_FEATHER_SWITCH_3)
TOGGLE_FEATHER_SWITCH_4#(>K:TOGGLE_FEATHER_SWITCH_4)
TOGGLE_GPS_DRIVES_NAV1#(>K:TOGGLE_GPS_DRIVES_NAV1)
TOGGLE_HYDRAULIC_FAILURE#(>K:TOGGLE_HYDRAULIC_FAILURE)
TOGGLE_LAUNCH_BAR_SWITCH#(>K:TOGGLE_LAUNCH_BAR_SWITCH)
TOGGLE_MASTER_IGNITION_SWITCH#(>K:TOGGLE_MASTER_IGNITION_SWITCH)
TOGGLE_PRIMER#(>K:TOGGLE_PRIMER)
TOGGLE_PRIMER1#(>K:TOGGLE_PRIMER1)
TOGGLE_PRIMER2#(>K:TOGGLE_PRIMER2)
TOGGLE_PRIMER3#(>K:TOGGLE_PRIMER3)
TOGGLE_PRIMER4#(>K:TOGGLE_PRIMER4)
TOGGLE_PROPELLER_SYNC#(>K:TOGGLE_PROPELLER_SYNC)
TOGGLE_RACERESULTS_WINDOW#(>K:TOGGLE_RACERESULTS_WINDOW)
TOGGLE_STARTER1#(>K:TOGGLE_STARTER1)
TOGGLE_STARTER2#(>K:TOGGLE_STARTER2)
TOGGLE_STARTER3#(>K:TOGGLE_STARTER3)
TOGGLE_STARTER4#(>K:TOGGLE_STARTER4)
TOGGLE_STATIC_PORT_BLOCKAGE#(>K:TOGGLE_STATIC_PORT_BLOCKAGE)
TOGGLE_TAILWHEEL_LOCK#(>K:TOGGLE_TAILWHEEL_LOCK)
TOGGLE_TAIL_HOOK_HANDLE#(>K:TOGGLE_TAIL_HOOK_HANDLE)
TOGGLE_TURN_INDICATOR_SWITCH#(>K:TOGGLE_TURN_INDICATOR_SWITCH)
TOGGLE_VACUUM_FAILURE#(>K:TOGGLE_VACUUM_FAILURE)
TOGGLE_VARIOMETER_SWITCH#(>K:TOGGLE_VARIOMETER_SWITCH)
TOGGLE_WATER_BALLAST_VALVE#(>K:TOGGLE_WATER_BALLAST_VALVE)
TOGGLE_WATER_RUDDER#(>K:TOGGLE_WATER_RUDDER)
TOGGLE_WING_FOLD#(>K:TOGGLE_WING_FOLD)
TRUE_AIRSPEED_CAL_DEC#(>K:TRUE_AIRSPEED_CAL_DEC)
TRUE_AIRSPEED_CAL_INC#(>K:TRUE_AIRSPEED_CAL_INC)
TURBINE_IGNITION_SWITCH_TOGGLE#(>K:TURBINE_IGNITION_SWITCH_TOGGLE)
VIDEO_RECORD_TOGGLE#(>K:VIDEO_RECORD_TOGGLE)
VIRTUAL_COPILOT_ACTION#(>K:VIRTUAL_COPILOT_ACTION)
VIRTUAL_COPILOT_TOGGLE#(>K:VIRTUAL_COPILOT_TOGGLE)
VSI_BUG_SELECT#(>K:VSI_BUG_SELECT)
YAXIS_INVERT_TOGGLE#(>K:YAXIS_INVERT_TOGGLE)
//Microsoft/Generic/Warning System
CABIN_NO_SMOKING_ALERT_SWITCH_TOGGLE#(>K:CABIN_NO_SMOKING_ALERT_SWITCH_TOGGLE)
CABIN_SEATBELTS_ALERT_SWITCH_TOGGLE#(>K:CABIN_SEATBELTS_ALERT_SWITCH_TOGGLE)
EXTINGUISH_ENGINE_FIRE#(>K:EXTINGUISH_ENGINE_FIRE)
//Milviz/Cessna 310R/Air Conditioning / Pressurisation / Ventilation
C310R_Cabin_Air_Control_DEC#(L:C310_SW_CABIN_AIR) 5 - 0 max (>L:C310_SW_CABIN_AIR)
C310R_Cabin_Air_Control_INC#(L:C310_SW_CABIN_AIR) 5 + 100 min (>L:C310_SW_CABIN_AIR)
C310R_Forward_Cabin_Air_Control_DEC#(L:C310_SW_FWD_CABIN_AIR) 5 - 0 max (>L:C310_SW_FWD_CABIN_AIR)
C310R_Forward_Cabin_Air_Control_INC#(L:C310_SW_FWD_CABIN_AIR) 5 + 100 min (>L:C310_SW_FWD_CABIN_AIR)
C310R_Temperature_Control_DEC#(L:C310_SW_TEMP_CONTROL) 5 - 0 max (>L:C310_SW_TEMP_CONTROL)
C310R_Temperature_Control_INC#(L:C310_SW_TEMP_CONTROL) 5 + 100 min (>L:C310_SW_TEMP_CONTROL)
C310R_Window_Defrost_DEC#(L:C310_SW_DEFROST) 5 - 0 max (>L:C310_SW_DEFROST)
C310R_Window_Defrost_INC#(L:C310_SW_DEFROST) 5 + 100 min (>L:C310_SW_DEFROST)
//Milviz/Cessna 310R/Anti-Ice
C310R_Cabin_Heat_Fan#2 (>L:C310_SW_HEATER, enum)
C310R_Cabin_Heat_Off#1 (>L:C310_SW_HEATER, enum)
C310R_Cabin_Heat_On#0 (>L:C310_SW_HEATER, enum)
C310R_Deice_Boots_Auto#2 (>L:C310_SW_DEICE_SURFACE, enum)
C310R_Deice_Boots_Inflate#0 (>L:C310_SW_DEICE_SURFACE, enum)
C310R_Deice_Boots_Off#1 (>L:C310_SW_DEICE_SURFACE, enum)
C310R_Pitot_Heat_Off#(>K:PITOT_HEAT_OFF)
C310R_Pitot_Heat_On#(>K:PITOT_HEAT_ON)
C310R_Prop_Deice_Off#(>K:ANTI_ICE_OFF)
C310R_Prop_Deice_On#(>K:ANTI_ICE_ON)
C310R_Windshield_Heat_Off#0 (>L:C310_SW_DEICE_WINDSHLD, bool)
C310R_Windshield_Heat_On#1 (>L:C310_SW_DEICE_WINDSHLD, bool)
//Milviz/Cessna 310R/Autopilot
C310R_AP_ALT_HOLD#(>H:KAP140_PUSH_ALT)
C310R_AP_HDG_HOLD#(A:AUTOPILOT MASTER, Bool) if{ (>K:AP_PANEL_HEADING_HOLD) }
C310R_AP_NAV_HOLD#(A:AUTOPILOT MASTER, Bool) if{ (>K:AP_NAV1_HOLD) }
C310R_AP_ON_OFF#(L:C310_SW_AVIONICS) if{ (A:AUTOPILOT DISENGAGED, Bool) ! if{ (>K:AP_MASTER) } }
C310R_APR_HOLD#(A:AUTOPILOT MASTER, Bool) if{ (>K:AP_APR_HOLD) }
C310R_Altitude_DEC_-_1000#1000 (>K:AP_ALT_VAR_DEC)
C310R_Altitude_INC__100#100 (>K:AP_ALT_VAR_INC)
C310R_Altitude_INC__1000#1000 (>K:AP_ALT_VAR_INC)
C319_Altitude_DEC_-100#100 (>K:AP_ALT_VAR_DEC)
//Milviz/Cessna 310R/Avionics
C310R_Avionics_Master_Off#(A:AVIONICS MASTER SWITCH:1, Bool) 1 == if{ 1 (>K:TOGGLE_AVIONICS_MASTER) }
C310R_Avionics_Master_On#(A:AVIONICS MASTER SWITCH:1, Bool) 0 == if{ 1 (>K:TOGGLE_AVIONICS_MASTER) }
C310R_Nav_1_Select#1 (>L:C310_SW_NAV_SELECTOR, bool)
C310R_Nav_2_Select#0 (>L:C310_SW_NAV_SELECTOR, bool)
//Milviz/Cessna 310R/Controls
Elevator_Trim_Slow_DOWN#(A:ELEVATOR TRIM PCT, Percent) 163.83 * 81.915 - -16383 max (>K:ELEVATOR_TRIM_SET)
Elevator_Trim_Slow_UP#(A:ELEVATOR TRIM PCT, Percent) 163.83 * 81.915 + 16383 min (>K:ELEVATOR_TRIM_SET)
//Milviz/Cessna 310R/Electrical
C310R_Battery_Off#(A:ELECTRICAL MASTER BATTERY:1, Bool) 1 == if{ 1 (>K:TOGGLE_MASTER_BATTERY) }
C310R_Battery_On#(A:ELECTRICAL MASTER BATTERY:1, Bool) 0 == if{ 1 (>K:TOGGLE_MASTER_BATTERY) }
C310R_Left_Alt_Off#(A:GENERAL ENG MASTER ALTERNATOR:1, Bool) 1 == if{ 1 (>K:TOGGLE_ALTERNATOR1) }
C310R_Left_Alt_On#(A:GENERAL ENG MASTER ALTERNATOR:1, Bool) 0 == if{ 1 (>K:TOGGLE_ALTERNATOR1) }
C310R_Right_Alt_Off#(A:GENERAL ENG MASTER ALTERNATOR:2, Bool) 1 == if{ 1 (>K:TOGGLE_ALTERNATOR2) }
C310R_Right_Alt_On#(A:GENERAL ENG MASTER ALTERNATOR:2, Bool) 0 == if{ 1 (>K:TOGGLE_ALTERNATOR2) }
//Milviz/Cessna 310R/Engine
C310R_Left_Engine_EDM_LF_Button_Press#1 (>L:C310_SW_EDML_R, bool)
C310R_Left_Engine_EDM_LF_Button_Release#0 (>L:C310_SW_EDML_R, bool)
C310R_Left_Engine_EDM_Step_Button_Press#1 (>L:C310_SW_EDML_L, bool)
C310R_Left_Engine_EDM_Step_Button_Release#0 (>L:C310_SW_EDML_L, bool)
C310R_Left_Mag_1_Off#0 (>A:RECIP ENG LEFT MAGNETO:1, Bool)
C310R_Left_Mag_1_On#1 (>A:RECIP ENG LEFT MAGNETO:1, Bool)
C310R_Left_Mag_2_Off#0 (>A:RECIP ENG RIGHT MAGNETO:1, Bool)
C310R_Left_Mag_2_On#1 (>A:RECIP ENG RIGHT MAGNETO:1, Bool)
C310R_Primer_Left#0 (>L:C310_SW_PRIMER, enum)
C310R_Primer_Right#2 (>L:C310_SW_PRIMER, enum)
C310R_Primer_off#1 (>L:C310_SW_PRIMER, enum)
C310R_Right_Engine_EDM_LF_Button_Press#1 (>L:C310_SW_EDMR_R, bool)
C310R_Right_Engine_EDM_LF_Button_Release#0 (>L:C310_SW_EDMR_R, bool)
C310R_Right_Engine_EDM_Step_Button_Press#1 (>L:C310_SW_EDMR_L, bool)
C310R_Right_Engine_EDM_Step_Button_Release#0 (>L:C310_SW_EDMR_L, bool)
C310R_Right_Mag_1_Off#0 (>A:RECIP ENG LEFT MAGNETO:2, Bool)
C310R_Right_Mag_1_On#1 (>A:RECIP ENG LEFT MAGNETO:2, Bool)
C310R_Right_Mag_2_Off#0 (>A:RECIP ENG RIGHT MAGNETO:2, Bool)
C310R_Right_Mag_2_On#1 (>A:RECIP ENG RIGHT MAGNETO:2, Bool)
C310R_Start_Left_Engine#(>K:TOGGLE_STARTER1)
C310R_Start_Right_Engine#(>K:TOGGLE_STARTER2)
//Milviz/Cessna 310R/Fuel
C310R_Fuel_Gauge_Aux#2 (>L:C310_SW_FUEL_IND, enum)
C310R_Fuel_Gauge_Main#0 (>L:C310_SW_FUEL_IND, enum)
C310R_Fuel_Gauge_Selected#1 (>L:C310_SW_FUEL_IND, enum)
C310R_Fuel_Pump_Left__Low#2 (>L:C310_SW_FUEL_PUMP_LEFT, enum)
C310R_Fuel_Pump_Left__Off#1 (>L:C310_SW_FUEL_PUMP_LEFT, enum)
C310R_Fuel_Pump_Left_High#0 (>L:C310_SW_FUEL_PUMP_LEFT, enum)
C310R_Fuel_Pump_Right_High#0 (>L:C310_SW_FUEL_PUMP_RIGHT, enum)
C310R_Fuel_Pump_Right_Low#2 (>L:C310_SW_FUEL_PUMP_RIGHT, enum)
C310R_Fuel_Pump_Right_Off#1 (>L:C310_SW_FUEL_PUMP_RIGHT, enum)
C310R_Left_Fuel_Selector_Left_Aux#1 (>L:C310_SW_FUEL_SEL_LEFT, enum)
C310R_Left_Fuel_Selector_Left_Main#2 (>L:C310_SW_FUEL_SEL_LEFT, enum)
C310R_Left_Fuel_Selector_Off#3 (>L:C310_SW_FUEL_SEL_LEFT, enum)
C310R_Left_Fuel_Selector_Right_Main#0 (>L:C310_SW_FUEL_SEL_LEFT, enum)
C310R_Right_Fuel_Selector_Left_Main#0 (>L:C310_SW_FUEL_SEL_RIGHT, enum)
C310R_Right_Fuel_Selector_Off#3 (>L:C310_SW_FUEL_SEL_RIGHT, enum)
C310R_Right_Fuel_Selector_Right_Aux#1 (>L:C310_SW_FUEL_SEL_RIGHT, enum)
C310R_Right_Fuel_Selector_Right_Main#2 (>L:C310_SW_FUEL_SEL_RIGHT, enum)
//Milviz/Cessna 310R/Lights
C310R_Beacon_Lights__On#1 (>K:BEACON_LIGHTS_SET)
C310R_Beacon_Lights_Off#0 (>K:BEACON_LIGHTS_SET)
C310R_Engine_Instrument_Lighting_DEC#(L:C310_SW_LIGHTS_ENG_INST) 5 - 0 max (>L:C310_SW_LIGHTS_ENG_INST) (L:C310_SW_LIGHTS_ENG_INST, enum) (>K:LIGHT_POTENTIOMETER_6_SET)
C310R_Engine_Instrument_Lighting_INC#(L:C310_SW_LIGHTS_ENG_INST) 5 + 100 min (>L:C310_SW_LIGHTS_ENG_INST) (L:C310_SW_LIGHTS_ENG_INST, enum) (>K:LIGHT_POTENTIOMETER_6_SET)
C310R_Flight_Instrument_Lighting_DEC#(L:C310_SW_LIGHTS_FLT_INST) 5 - 0 max (>L:C310_SW_LIGHTS_FLT_INST) (L:C310_SW_LIGHTS_FLT_INST) (>K:LIGHT_POTENTIOMETER_4_SET)
C310R_Flight_Instrument_Lighting_INC#(L:C310_SW_LIGHTS_FLT_INST) 5 + 100 min (>L:C310_SW_LIGHTS_FLT_INST) (L:C310_SW_LIGHTS_FLT_INST) (>K:LIGHT_POTENTIOMETER_4_SET)
C310R_Forward_Cabin_Light_DEC#(L:C310_SW_FLOOD_LEFT) 5 - 0 max (>L:C310_SW_FLOOD_LEFT) (L:C310_SW_FLOOD_LEFT, enum) (>K:LIGHT_POTENTIOMETER_8_SET) (L:C310_SW_FLOOD_LEFT, enum) ! if{ (A:CIRCUIT SWITCH ON:23, bool) if{ 23 (>K:ELECTRICAL_CIRCUIT_TOGGLE) } }
C310R_Forward_Cabin_Light_INC#(L:C310_SW_FLOOD_LEFT) 5 + 100 min (>L:C310_SW_FLOOD_LEFT) (L:C310_SW_FLOOD_LEFT, enum) (>K:LIGHT_POTENTIOMETER_8_SET) (L:C310_SW_FLOOD_LEFT, enum) if{ (A:CIRCUIT SWITCH ON:23, bool) ! if{ 23 (>K:ELECTRICAL_CIRCUIT_TOGGLE) } }
C310R_Front_Cabin_Light_DEC#(L:C310_SW_FLOOD_CENTER) 5 - 0 max (>L:C310_SW_FLOOD_CENTER) (L:C310_SW_FLOOD_CENTER, enum) (>K:LIGHT_POTENTIOMETER_9_SET) (L:C310_SW_FLOOD_CENTER, enum) ! if{ (A:CIRCUIT SWITCH ON:53, bool) if{ 53 (>K:ELECTRICAL_CIRCUIT_TOGGLE) } }
C310R_Front_Cabin_Light_INC#(L:C310_SW_FLOOD_CENTER) 5 + 100 min (>L:C310_SW_FLOOD_CENTER) (L:C310_SW_FLOOD_CENTER, enum) (>K:LIGHT_POTENTIOMETER_9_SET) (L:C310_SW_FLOOD_CENTER, enum) if{ (A:CIRCUIT SWITCH ON:53, bool) ! if{ 53 (>K:ELECTRICAL_CIRCUIT_TOGGLE) } }
C310R_Landing_Lights_Extend#0 (>L:C310_SW_LIGHTS_LANDING, enum)
C310R_Landing_Lights_Off#1 (>L:C310_SW_LIGHTS_LANDING, enum)
C310R_Landing_Lights_Retract#2 (>L:C310_SW_LIGHTS_LANDING, enum)
C310R_Left_Switch_Panel_Lighting_DEC#(L:C310_SW_LIGHTS_SIDE) 5 - 0 max (>L:C310_SW_LIGHTS_SIDE) (L:C310_SW_LIGHTS_SIDE, enum) (>K:LIGHT_POTENTIOMETER_7_SET)
C310R_Left_Switch_Panel_Lighting_INC#(L:C310_SW_LIGHTS_SIDE) 5 + 100 min (>L:C310_SW_LIGHTS_SIDE) (L:C310_SW_LIGHTS_SIDE, enum) (>K:LIGHT_POTENTIOMETER_7_SET)
C310R_Nav_Lghts_Off#0 (>K:NAV_LIGHTS_SET)
C310R_Nav_Lights_On#1 (>K:NAV_LIGHTS_SET)
C310R_Radio_Lighting_DEC#(L:C310_SW_LIGHTS_RADIO) 5 - 0 max (>L:C310_SW_LIGHTS_RADIO) (L:C310_SW_LIGHTS_RADIO, enum) (>K:LIGHT_POTENTIOMETER_5_SET)
C310R_Radio_Lighting_INC#(L:C310_SW_LIGHTS_RADIO) 5 + 100 min (>L:C310_SW_LIGHTS_RADIO) (L:C310_SW_LIGHTS_RADIO, enum) (>K:LIGHT_POTENTIOMETER_5_SET)
C310R_Strobe_Lights_Off#(>K:STROBES_OFF)
C310R_Strobe_Lights_On#(>K:STROBES_ON)
C310R_Taxi_Lights_Off#0 (>K:TAXI_LIGHTS_SET)
C310R_Taxi_Lights_On#1 (>K:TAXI_LIGHTS_SET)
C310R_Wing_Ice_Lights_Off#0 (>K:WING_LIGHTS_SET)
C310R_Wing_Ice_Lights_On#1 (>K:WING_LIGHTS_SET)
//Milviz/Cessna 310R/Miscellaneous
Copilot_Window_Shade_Down#(L:WindowShadeLeft) 0.05 + 1 min (>L:WindowShadeLeft)
Copilot_Window_Shade_Up#(L:WindowShadeRight) 0.05 - 0 max (>L:WindowShadeRight)
Pilot_Window_Shade_Down#(L:WindowShadeLeft) 0.05 + 1 min (>L:WindowShadeLeft)
Pilot_Window_Shade_Up#(L:WindowShadeLeft) 0.05 - 0 max (>L:WindowShadeLeft)
//Milviz/PC6 Turbo Porter/Avionics
Avionics_BUS_1_On#3 4 (>K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE)
Avionics_BUS_2#3 5 (>K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE)
PC6_AVIONICS1_TOGGLE#3 4 (>K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE)
PC6_AVIONICS2_TOGGLE#3 5 (>K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE)
//Milviz/PC6 Turbo Porter/Fuel
Left_Transfer_Tank_Pump_Toggle#3 (>K:ELECTRICAL_CIRCUIT_TOGGLE) 
Right_Transfer_Tank_Pump_Toggle#4 (>K:ELECTRICAL_CIRCUIT_TOGGLE) 
//Milviz/PC6 Turbo Porter/Gear
TailWheel_Lock#(A:TAILWHEEL LOCK ON, Bool) 0 == if{(>K:TOGGLE_TAILWHEEL_LOCK)} 
Tailwheel_Unlock#(A:TAILWHEEL LOCK ON, Bool) 1 == if{(>K:TOGGLE_TAILWHEEL_LOCK)} 
//Milviz/PC6 Turbo Porter/Lights
Landing_Light_Position_DOWN#(L:LandingLight_Position) 0 == if{(>L:LandingLight_Position,Number) 0 (>L:LandingLight_SwitchPosition, Number)} 
Landing_Light_Position_UP#(L:LandingLight_Position) 0 == if{(>L:LandingLight_Position,Number) 1 (>L:LandingLight_SwitchPosition, Number)} 
//PMDG/B737-700/Air Condition / Pressurization
Air_temp_source__Pass_cabin#(L:switch_187_73X, number) 0 == if{ 18701 (>K:ROTOR_BRAKE) }
Air_temp_source__Supply_duct#(L:switch_187_73X, number) 100 == if{ 18701 (>K:ROTOR_BRAKE) }
PMDG_B737_Aft_Cab_Temp_Dec#30707 (>K:ROTOR_BRAKE)
PMDG_B737_Aft_Cab_Temp_Dec_1#30708 (>K:ROTOR_BRAKE)
PMDG_B737_Air_Temp_Source#18701 (>K:ROTOR_BRAKE)
PMDG_B737_Air_Temp_Src_CONT_CAB_AFT#40 (L:switch_313_73X,number) - 10 div s0 :1 l0 0 > if{ 31307 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 31308 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737_Air_Temp_Src_CONT_CAB_FWD#30 (L:switch_313_73X,number) - 10 div s0 :1 l0 0 > if{ 31307 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 31308 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737_Air_Temp_Src_Dec#31308 (>K:ROTOR_BRAKE)
PMDG_B737_Air_Temp_Src_Inc#31307 (>K:ROTOR_BRAKE)
PMDG_B737_Air_Temp_Src_PACK_L#20 (L:switch_313_73X,number) - 10 div s0 :1 l0 0 > if{ 31307 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 31308 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737_Air_Temp_Src_PACK_R#10 (L:switch_313_73X,number) - 10 div s0 :1 l0 0 > if{ 31307 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 31308 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737_Air_Temp_Src_PASS_CAB_AFT#0 (L:switch_313_73X,number) - 10 div s0 :1 l0 0 > if{ 31307 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 31308 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737_Air_Temp_Src_PASS_CAB_FWD#50 (L:switch_313_73X,number) - 10 div s0 :1 l0 0 > if{ 31307 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 31308 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737_Cont_Cab_Temp_Dec#30508 (>K:ROTOR_BRAKE)
PMDG_B737_Cont_Cab_Temp_Inc#30507 (>K:ROTOR_BRAKE)
PMDG_B737_Cont_Cabin_Temp_Dec#19108 (>K:ROTOR_BRAKE)
PMDG_B737_Cont_Cabin_Temp_Inc#19107 (>K:ROTOR_BRAKE)
PMDG_B737_Filter_Switch_Dec#87008 (>K:ROTOR_BRAKE)
PMDG_B737_Filter_Switch_Inc#87007 (>K:ROTOR_BRAKE)
PMDG_B737_Fwd_Cab_Temp_Dec#30608 (>K:ROTOR_BRAKE)
PMDG_B737_Fwd_Cab_Temp_Inc#30607 (>K:ROTOR_BRAKE)
PMDG_B737_Outflow_Valve_Close#22201 (>K:ROTOR_BRAKE)
PMDG_B737_Outflow_Valve_Open#22202 (>K:ROTOR_BRAKE)
PMDG_B737_Pass_Cabin_Temp_Dec#19208 (>K:ROTOR_BRAKE)
PMDG_B737_Pass_Cabin_Temp_Inc#19207 (>K:ROTOR_BRAKE)
PMDG_B737_Pressurization_Mode_ALTN#10 (L:switch_223_73X,number) - 10 div s0 :1 l0 0 > if{ 22307 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 22308 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737_Pressurization_Mode_AUTO#0 (L:switch_223_73X,number) - 10 div s0 :1 l0 0 > if{ 22307 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 22308 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737_Pressurization_Mode_MAN#20 (L:switch_223_73X,number) - 10 div s0 :1 l0 0 > if{ 22307 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 22308 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737_Recirc_Fan#87201 (>K:ROTOR_BRAKE)
PMDG_B737_Trim_Air#31101 (>K:ROTOR_BRAKE)
//PMDG/B737-700/Anti-Ice
PMDG_B737-7_ANTI_ICE_ENG_1_OFF#100 (L:switch_157_73X, number) == if{ 15702 (>K:ROTOR_BRAKE) }
PMDG_B737-7_ANTI_ICE_ENG_1_ON#0 (L:switch_157_73X, number) == if{ 15701 (>K:ROTOR_BRAKE) }
PMDG_B737-7_ANTI_ICE_ENG_1_TOGGLE#15701 (>K:ROTOR_BRAKE)
PMDG_B737-7_ANTI_ICE_ENG_2_OFF#100 (L:switch_158_73X, number) == if{ 15802 (>K:ROTOR_BRAKE) }
PMDG_B737-7_ANTI_ICE_ENG_2_ON#0 (L:switch_158_73X, number) == if{ 15801 (>K:ROTOR_BRAKE) }
PMDG_B737-7_ANTI_ICE_ENG_2_TOGGLE#15801 (>K:ROTOR_BRAKE)
PMDG_B737-7_ANTI_ICE_PROBE_A_OFF#100 (L:switch_140_73X, number) == if{ 14002 (>K:ROTOR_BRAKE) }
PMDG_B737-7_ANTI_ICE_PROBE_A_ON#0 (L:switch_140_73X, number) == if{ 14001 (>K:ROTOR_BRAKE) }
PMDG_B737-7_ANTI_ICE_PROBE_A_TOGGLE#14001 (>K:ROTOR_BRAKE)
PMDG_B737-7_ANTI_ICE_PROBE_B_OFF#100 (L:switch_141_73X, number) == if{ 14102 (>K:ROTOR_BRAKE) }
PMDG_B737-7_ANTI_ICE_PROBE_B_ON#0 (L:switch_141_73X, number) == if{ 14101 (>K:ROTOR_BRAKE) }
PMDG_B737-7_ANTI_ICE_PROBE_B_TOGGLE#14101 (>K:ROTOR_BRAKE)
PMDG_B737-7_ANTI_ICE_WINDOW_HEAT_FWD_L_OFF#100 (L:switch_136_73X, number) == if{ 13602 (>K:ROTOR_BRAKE) }
PMDG_B737-7_ANTI_ICE_WINDOW_HEAT_FWD_L_ON#0 (L:switch_136_73X, number) == if{ 13601 (>K:ROTOR_BRAKE) }
PMDG_B737-7_ANTI_ICE_WINDOW_HEAT_FWD_L_TOGGLE#13601 (>K:ROTOR_BRAKE)
PMDG_B737-7_ANTI_ICE_WINDOW_HEAT_FWD_R_OFF#100 (L:switch_138_73X, number) == if{ 13802 (>K:ROTOR_BRAKE) }
PMDG_B737-7_ANTI_ICE_WINDOW_HEAT_FWD_R_ON#0 (L:switch_138_73X, number) == if{ 13801 (>K:ROTOR_BRAKE) }
PMDG_B737-7_ANTI_ICE_WINDOW_HEAT_FWD_R_TOGGLE#13801 (>K:ROTOR_BRAKE)
PMDG_B737-7_ANTI_ICE_WINDOW_HEAT_SIDE_L_OFF#100 (L:switch_135_73X, number) == if{ 13502 (>K:ROTOR_BRAKE) }
PMDG_B737-7_ANTI_ICE_WINDOW_HEAT_SIDE_L_ON#0 (L:switch_135_73X, number) == if{ 13501 (>K:ROTOR_BRAKE) }
PMDG_B737-7_ANTI_ICE_WINDOW_HEAT_SIDE_L_TOGGLE#13501 (>K:ROTOR_BRAKE)
PMDG_B737-7_ANTI_ICE_WINDOW_HEAT_SIDE_R_OFF#100 (L:switch_139_73X, number) == if{ 13902 (>K:ROTOR_BRAKE) }
PMDG_B737-7_ANTI_ICE_WINDOW_HEAT_SIDE_R_ON#0 (L:switch_139_73X, number) == if{ 13901 (>K:ROTOR_BRAKE) }
PMDG_B737-7_ANTI_ICE_WINDOW_HEAT_SIDE_R_TOGGLE#13901 (>K:ROTOR_BRAKE)
PMDG_B737-7_ANTI_ICE_WINDOW_HEAT_TEST_OVTH#13702 (>K:ROTOR_BRAKE)
PMDG_B737-7_ANTI_ICE_WINDOW_HEAT_TEST_POWER#13701 (>K:ROTOR_BRAKE)
PMDG_B737-7_ANTI_ICE_WING_OFF#100 (L:switch_156_73X, number) == if{ 15602 (>K:ROTOR_BRAKE) }
PMDG_B737-7_ANTI_ICE_WING_ON#0 (L:switch_156_73X, number) == if{ 15601 (>K:ROTOR_BRAKE) }
PMDG_B737-7_ANTI_ICE_WING_TOGGLE#15601 (>K:ROTOR_BRAKE)
PMDG_B737_Ovht_Test#19901 (>K:ROTOR_BRAKE)
//PMDG/B737-700/Autopilot
PMDG_B737_Bank_Angle_Selector_10#0 (L:switch_389_73X,number) - 10 div s0 :1 l0 0 > if{ 38902 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 38901 (>K:ROTOR_BRAKE) l0 ++ s0 g1 } 
PMDG_B737_Bank_Angle_Selector_15#10 (L:switch_389_73X,number) - 10 div s0 :1 l0 0 > if{ 38902 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 38901 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737_Bank_Angle_Selector_20#20 (L:switch_389_73X,number) - 10 div s0 :1 l0 0 > if{ 38902 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 38901 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737_Bank_Angle_Selector_25#30 (L:switch_389_73X,number) - 10 div s0 :1 l0 0 > if{ 38902 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 38901 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737_Bank_Angle_Selector_30#40 (L:switch_389_73X,number) - 10 div s0 :1 l0 0 > if{ 38902 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 38901 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737_FD_Switch_Capt_Off#(L:ngx_MCP_FDLeft,bool) if{ 37801 (>K:ROTOR_BRAKE) }
PMDG_B737_FD_Switch_Capt_On#(L:ngx_MCP_FDLeft,bool) ! if{ 37801 (>K:ROTOR_BRAKE) }
PMDG_B737_FD_Switch_FO_Off#(L:ngx_MCP_FDRight,bool) if{ 40701 (>K:ROTOR_BRAKE) }
PMDG_B737_FD_Switch_FO_On#(L:ngx_MCP_FDRight,bool) ! if{ 40701 (>K:ROTOR_BRAKE) }
PMDG_B737_MCP_AT_Switch_Off#(L:ngx_MCP_ATArm,bool) if{ 38001 (>K:ROTOR_BRAKE) }
PMDG_B737_MCP_AT_Switch_On#(L:ngx_MCP_ATArm,bool) ! if{ 38001 (>K:ROTOR_BRAKE) }
PMDG_B737-7_CPT_FD_TOGGLE#37801 (>K:ROTOR_BRAKE)
PMDG_B737-7_FO_FD_TOGGLE#40701 (>K:ROTOR_BRAKE)
PMDG_B737-7_MCP_ALT_INTV_BUTTON#88501 (>K:ROTOR_BRAKE)
PMDG_B737-7_MCP_C_O_BUTTON#38301 (>K:ROTOR_BRAKE)
PMDG_B737_MCP_A_T__TOGGLE#38001 (>K:ROTOR_BRAKE)
PMDG_B737_MCP_A_T_TOGGLE#38001 (>K:ROTOR_BRAKE)
PMDG_B737_MCP_ALT_DEC#40008 (>K:ROTOR_BRAKE)
PMDG_B737_MCP_ALT_HLD_SWITCH#39401 (>K:ROTOR_BRAKE)
PMDG_B737_MCP_ALT_INC#40007 (>K:ROTOR_BRAKE)
PMDG_B737_MCP_APP_SWITCH#39301 (>K:ROTOR_BRAKE)
PMDG_B737_MCP_AUTOPILOT_DISENGAGE_SWITCH#40601 (>K:ROTOR_BRAKE)
PMDG_B737_MCP_AUTOPILOT_DISENGAGE_YOKE#100401 (>K:ROTOR_BRAKE)
PMDG_B737_MCP_BANK_ANGLE_DEC#38901 (>K:ROTOR_BRAKE)
PMDG_B737_MCP_BANK_ANGLE_INC#38902 (>K:ROTOR_BRAKE)
PMDG_B737_MCP_CMD_A_SWITCH#40201 (>K:ROTOR_BRAKE)
PMDG_B737_MCP_CMD_B_SWITCH#40301 (>K:ROTOR_BRAKE)
PMDG_B737_MCP_CPT_CRS_DEC#37608 (>K:ROTOR_BRAKE)
PMDG_B737_MCP_CPT_CRS_INC#37607 (>K:ROTOR_BRAKE)
PMDG_B737_MCP_CWS_A_SWITCH#40401 (>K:ROTOR_BRAKE)
PMDG_B737_MCP_CWS_B_SWITCH#40501 (>K:ROTOR_BRAKE)
PMDG_B737_MCP_FO_CRS_DEC#40908 (>K:ROTOR_BRAKE)
PMDG_B737_MCP_FO_CRS_INC#40907 (>K:ROTOR_BRAKE)
PMDG_B737_MCP_HDG_DEC#39008 (>K:ROTOR_BRAKE)
PMDG_B737_MCP_HDG_INC#39007 (>K:ROTOR_BRAKE)
PMDG_B737_MCP_HDG_SEL-SWITCH#39201 (>K:ROTOR_BRAKE)
PMDG_B737_MCP_IAS_MACH_DEC#38408 (>K:ROTOR_BRAKE)
PMDG_B737_MCP_IAS_MACH_INC#38407 (>K:ROTOR_BRAKE)
PMDG_B737_MCP_LNAV_SWITCH#39701 (>K:ROTOR_BRAKE)
PMDG_B737_MCP_LVL_CHG_SWITCH#39101 (>K:ROTOR_BRAKE)
PMDG_B737_MCP_N1_LIMIT_SWITCH#38101 (>K:ROTOR_BRAKE)
PMDG_B737_MCP_SPD_INTV_BUTTON#38701 (>K:ROTOR_BRAKE)
PMDG_B737_MCP_SPEED_SWITCH#38201 (>K:ROTOR_BRAKE)
PMDG_B737_MCP_V_S_SWITCH#39501 (>K:ROTOR_BRAKE)
PMDG_B737_MCP_VNAV_SWITCH#38601 (>K:ROTOR_BRAKE)
PMDG_B737_MCP_VOR_LOC_SWITCH#39601 (>K:ROTOR_BRAKE)
PMDG_B737_MCP_VS_DEC#40107 (>K:ROTOR_BRAKE)
PMDG_B737_MCP_VS_INC#40108 (>K:ROTOR_BRAKE)
PMDG_B737_Ap_Disc_Left#101501 (>K:ROTOR_BRAKE)
PMDG_B737_Ap_Disc_Right#100501 (>K:ROTOR_BRAKE)
//PMDG/B737-700/Autothrust System
PMDG_B737-7_AUTOTHRUST_DISENGAGE#68201 (>K:ROTOR_BRAKE)
PMDG_B737-7_AUTOTHRUST_TOGA_L_BTN#68401 (>K:ROTOR_BRAKE)
PMDG_B737-7_AUTOTHRUST_TOGA_R_BTN#68701 (>K:ROTOR_BRAKE)
//PMDG/B737-700/Avionics
PMDG_B737_ADSF_Test_1_Switch_Press#34202 (>K:ROTOR_BRAKE)
PMDG_B737_ADSF_Test_2_Switch_Press#34201 (>K:ROTOR_BRAKE)
PMDG_B737_ADSF_Test_Switch_Release#34204 (>K:ROTOR_BRAKE)
PMDG_B737_Annunciator_Panel_L_Press#34901 (>K:ROTOR_BRAKE)
PMDG_B737_Annunciator_Panel_L_Release#34904 (>K:ROTOR_BRAKE)
PMDG_B737_Fuel_Flow_Switch_Release#46804 (>K:ROTOR_BRAKE)
PMDG_B737_Fuel_Flow_Switch_Reset#46802 (>K:ROTOR_BRAKE)
PMDG_B737_Fuel_Flow_Switch_Used#46801 (>K:ROTOR_BRAKE)
PMDG_B737_Main_Panel_DUs_ENG_PRI#20 (L:switch_335_73X,number) - 10 div s0 :1 l0 0 > if{ 33507 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 33508 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737_Main_Panel_DUs_MFD#40 (L:switch_335_73X,number) - 10 div s0 :1 l0 0 > if{ 33507 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 33508 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737_Main_Panel_DUs_NORM#10 (L:switch_335_73X,number) - 10 div s0 :1 l0 0 > if{ 33507 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 33508 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737_Main_Panel_DUs_OUTBD_PFD#0 (L:switch_335_73X,number) - 10 div s0 :1 l0 0 > if{ 33507 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 33508 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737_Main_Panel_DUs_PFD#30 (L:switch_335_73X,number) - 10 div s0 :1 l0 0 > if{ 33507 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 33508 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737_N1_Set_Inner_Dec#46708 (>K:ROTOR_BRAKE)
PMDG_B737_N1_Set_Inner_Inc#46707 (>K:ROTOR_BRAKE)
PMDG_B737_N1_Set_Mode_Outer_Dec#46608 (>K:ROTOR_BRAKE)
PMDG_B737_N1_Set_Mode_Outer_Inc#46607 (>K:ROTOR_BRAKE)
PMDG_B737_N1_Set_Outer_Knob_1#10 (L:switch_466_73X) - 10 div s0 :1 l0 0 > if{ 46607 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 46608 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737_N1_Set_Outer_Knob_2#0 (L:switch_466_73X) - 10 div s0 :1 l0 0 > if{ 46607 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 46608 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737_N1_Set_Outer_Knob_Auto#20 (L:switch_466_73X) - 10 div s0 :1 l0 0 > if{ 46607 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 46608 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737_N1_Set_Outer_Knob_Both#30 (L:switch_466_73X) - 10 div s0 :1 l0 0 > if{ 46607 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 46608 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737_Spd_Ref_Outer_Knob_AUTO#10 (L:switch_464_73X) - 10 div s0 :1 l0 0 > if{ 46407 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 46408 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737_Spd_Ref_Outer_Knob_BUG#60 (L:switch_464_73X) - 10 div s0 :1 l0 0 > if{ 46407 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 46408 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737_Spd_Ref_Outer_Knob_SET#0 (L:switch_464_73X) - 10 div s0 :1 l0 0 > if{ 46407 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 46408 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737_Spd_Ref_Outer_Knob_V1#20 (L:switch_464_73X) - 10 div s0 :1 l0 0 > if{ 46407 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 46408 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737_Spd_Ref_Outer_Knob_VR#30 (L:switch_464_73X) - 10 div s0 :1 l0 0 > if{ 46407 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 46408 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737_Spd_Ref_Outer_Knob_VREF#50 (L:switch_464_73X) - 10 div s0 :1 l0 0 > if{ 46407 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 46408 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737_Spd_Ref_Outer_Knob_WT#40 (L:switch_464_73X) - 10 div s0 :1 l0 0 > if{ 46407 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 46408 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737_A_P_P_RST_Button#33901 (>K:ROTOR_BRAKE)
PMDG_B737_A_P_P_Rst_R#44501 (>K:ROTOR_BRAKE)
PMDG_B737_A_T_P_RST_Button#34001 (>K:ROTOR_BRAKE)
PMDG_B737_A_T_P_Rst_R#44401 (>K:ROTOR_BRAKE)
PMDG_B737_Ai_Mode_Dec#47408 (>K:ROTOR_BRAKE)
PMDG_B737_Ai_Mode_Inc#47407 (>K:ROTOR_BRAKE)
PMDG_B737_Baro_FO_Dec#42108 (>K:ROTOR_BRAKE)
PMDG_B737_Baro_FO_Inc#42107 (>K:ROTOR_BRAKE)
PMDG_B737_Baro_Ref#42201 (>K:ROTOR_BRAKE)
PMDG_B737_Below_G_S_P-Inhibit#44601 (>K:ROTOR_BRAKE)
PMDG_B737_Cage#47601 (>K:ROTOR_BRAKE)
PMDG_B737_Control_Panel_Both_1#0 (L:switch_59_73X,number) - 50 div s0 :1 l0 0 > if{ 5902 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 5901 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737_Control_Panel_Both_2#100 (L:switch_59_73X,number) - 50 div s0 :1 l0 0 > if{ 5902 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 5901 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737_Control_Panel_Normal#50 (L:switch_59_73X,number) - 50 div s0 :1 l0 0 > if{ 5902 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 5901 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737_Cr#462101 (>K:ROTOR_BRAKE)
PMDG_B737_Ctr_R#41601 (>K:ROTOR_BRAKE)
PMDG_B737_Displays_Source_All_1#0 (L:switch_58_73X,number) - 10 div s0 :1 l0 0 > if{ 5807 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 5808 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737_Displays_Source_All_2#20 (L:switch_58_73X,number) - 10 div s0 :1 l0 0 > if{ 5807 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 5808 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737_Displays_Source_Auto#10 (L:switch_58_73X,number) - 10 div s0 :1 l0 0 > if{ 5807 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 5808 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737_Eng#46301 (>K:ROTOR_BRAKE)
PMDG_B737_FMC_P_RST_Button#34101 (>K:ROTOR_BRAKE)
PMDG_B737_Flight_Control_A_Guard#7901 (>K:ROTOR_BRAKE)
PMDG_B737_Flight_Control_A_Off#50 (L:switch_78_73X,number) - 50 div s0 :1 l0 0 > if{ 7801 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 7802 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737_Flight_Control_A_On#100 (L:switch_78_73X,number) - 50 div s0 :1 l0 0 > if{ 7801 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 7802 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737_Flight_Control_A_Stby#0 (L:switch_78_73X,number) - 50 div s0 :1 l0 0 > if{ 7801 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 7802 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737_Flight_Control_B_Guard#8101 (>K:ROTOR_BRAKE)
PMDG_B737_Flight_Control_B_Off#50 (L:switch_80_73X,number) - 50 div s0 :1 l0 0 > if{ 8001 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 8002 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737_Flight_Control_B_On#100 (L:switch_80_73X,number) - 50 div s0 :1 l0 0 > if{ 8001 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 8002 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737_Flight_Control_B_Stby#0 (L:switch_80_73X,number) - 50 div s0 :1 l0 0 > if{ 8001 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 8002 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737_Flt_Alt_Dec#21808 (>K:ROTOR_BRAKE)
PMDG_B737_Flt_Alt_Inc#21807 (>K:ROTOR_BRAKE)
PMDG_B737_Fmc_P_Rst_R#44301 (>K:ROTOR_BRAKE)
PMDG_B737_Fmc_Source_Both_L#0 (L:switch_60_73X,number) - 50 div s0 :1 l0 0 > if{ 6002 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 6001 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737_Fmc_Source_Both_R#100 (L:switch_60_73X,number) - 50 div s0 :1 l0 0 > if{ 6002 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 6001 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737_Fmc_Source_Normal#50 (L:switch_60_73X,number) - 50 div s0 :1 l0 0 > if{ 6002 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 6001 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737_Fpv_R#41901 (>K:ROTOR_BRAKE)
PMDG_B737_HGS_Brt_#77601 (>K:ROTOR_BRAKE)
PMDG_B737_HGS_Clr#77501 (>K:ROTOR_BRAKE)
PMDG_B737_HGS_Dim-#77701 (>K:ROTOR_BRAKE)
PMDG_B737_HGS_Enter#78701 (>K:ROTOR_BRAKE)
PMDG_B737_HGS_G_S#77301 (>K:ROTOR_BRAKE)
PMDG_B737_HGS_Mode#77001 (>K:ROTOR_BRAKE)
PMDG_B737_HGS_Num_0#78801 (>K:ROTOR_BRAKE)
PMDG_B737_HGS_Num_1#77801 (>K:ROTOR_BRAKE)
PMDG_B737_HGS_Num_2#77901 (>K:ROTOR_BRAKE)
PMDG_B737_HGS_Num_3#78001 (>K:ROTOR_BRAKE)
PMDG_B737_HGS_Num_4#78101 (>K:ROTOR_BRAKE)
PMDG_B737_HGS_Num_5#78201 (>K:ROTOR_BRAKE)
PMDG_B737_HGS_Num_6#78301 (>K:ROTOR_BRAKE)
PMDG_B737_HGS_Num_7#78401 (>K:ROTOR_BRAKE)
PMDG_B737_HGS_Num_8#78501 (>K:ROTOR_BRAKE)
PMDG_B737_HGS_Num_9#78601 (>K:ROTOR_BRAKE)
PMDG_B737_HGS_Rwy#77201 (>K:ROTOR_BRAKE)
PMDG_B737_HGS_Stby#77101 (>K:ROTOR_BRAKE)
PMDG_B737_HGS_Test#78901 (>K:ROTOR_BRAKE)
PMDG_B737_Hgs_Fail#52201 (>K:ROTOR_BRAKE)
PMDG_B737_IRS_0#24301 (>K:ROTOR_BRAKE)
PMDG_B737_IRS_1#23201 (>K:ROTOR_BRAKE)
PMDG_B737_IRS_2#23301 (>K:ROTOR_BRAKE)
PMDG_B737_IRS_3#23401 (>K:ROTOR_BRAKE)
PMDG_B737_IRS_4#23501 (>K:ROTOR_BRAKE)
PMDG_B737_IRS_5#23601 (>K:ROTOR_BRAKE)
PMDG_B737_IRS_6#23701 (>K:ROTOR_BRAKE)
PMDG_B737_IRS_7#23801 (>K:ROTOR_BRAKE)
PMDG_B737_IRS_8#23901 (>K:ROTOR_BRAKE)
PMDG_B737_IRS_9#24001 (>K:ROTOR_BRAKE)
PMDG_B737_IRS_Clr#24401 (>K:ROTOR_BRAKE)
PMDG_B737_IRS_Ent#24101 (>K:ROTOR_BRAKE)
PMDG_B737_Irs_Display_Selector_Dec#22908 (>K:ROTOR_BRAKE)
PMDG_B737_Irs_Display_Selector_HDG_STS#40 (L:switch_229_73X,number) - 10 div s0 :1 l0 0 > if{ 22907 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 22908 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737_Irs_Display_Selector_Inc#22907 (>K:ROTOR_BRAKE)
PMDG_B737_Irs_Display_Selector_PPOS#20 (L:switch_229_73X,number) - 10 div s0 :1 l0 0 > if{ 22907 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 22908 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737_Irs_Display_Selector_TEST#0 (L:switch_229_73X,number) - 10 div s0 :1 l0 0 > if{ 22907 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 22908 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737_Irs_Display_Selector_TK_GS#10 (L:switch_229_73X,number) - 10 div s0 :1 l0 0 > if{ 22907 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 22908 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737_Irs_Display_Selector_WIND#30 (L:switch_229_73X,number) - 10 div s0 :1 l0 0 > if{ 22907 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 22908 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737_Irs_Dspl_Brt_Dec#23008 (>K:ROTOR_BRAKE)
PMDG_B737_Irs_Dspl_Brt_Inc#23007 (>K:ROTOR_BRAKE)
PMDG_B737_Irs_Sys_Dspl_Dec#23108 (>K:ROTOR_BRAKE)
PMDG_B737_Irs_Sys_Dspl_Inc#23107 (>K:ROTOR_BRAKE)
PMDG_B737_Irs_Transfer_Both_L#0 (L:switch_61_73X,number) - 50 div s0 :1 l0 0 > if{ 6102 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 6101 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737_Irs_Transfer_Both_R#100 (L:switch_61_73X,number) - 50 div s0 :1 l0 0 > if{ 6102 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 6101 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737_Irs_Transfer_Normal#50 (L:switch_61_73X,number) - 50 div s0 :1 l0 0 > if{ 6102 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 6101 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737_Isfd__#98801 (>K:ROTOR_BRAKE)
PMDG_B737_Isfd_-#98901 (>K:ROTOR_BRAKE)
PMDG_B737_Isfd_Adjust_Knob_Dec#202208 (>K:ROTOR_BRAKE)
PMDG_B737_Isfd_Adjust_Knob_Inc#202207 (>K:ROTOR_BRAKE)
PMDG_B737_Isfd_Adjust_Push#202301 (>K:ROTOR_BRAKE)
PMDG_B737_Isfd_App#98701 (>K:ROTOR_BRAKE)
PMDG_B737_Isfd_Att_Rst_Switch#99001 (>K:ROTOR_BRAKE)
PMDG_B737_Isfd_Baro_Knob_Dec#99108 (>K:ROTOR_BRAKE)
PMDG_B737_Isfd_Baro_Knob_Inc#99107 (>K:ROTOR_BRAKE)
PMDG_B737_Isfd_Hp_In#98601 (>K:ROTOR_BRAKE)
PMDG_B737_Isfd_Menu#202101 (>K:ROTOR_BRAKE)
PMDG_B737_Isfd_Std#99301 (>K:ROTOR_BRAKE)
PMDG_B737_Land_Alt_Dec#22008 (>K:ROTOR_BRAKE)
PMDG_B737_Land_Alt_Inc#22007 (>K:ROTOR_BRAKE)
PMDG_B737_Le_Devices_Test#22401 (>K:ROTOR_BRAKE)
PMDG_B737_Mins_R_Rst#41301 (>K:ROTOR_BRAKE)
PMDG_B737_Mins_Slew_FO_Dec#41108 (>K:ROTOR_BRAKE)
PMDG_B737_Mins_Slew_FO_Inc#41107 (>K:ROTOR_BRAKE)
PMDG_B737_Mtrs_R#42001 (>K:ROTOR_BRAKE)
PMDG_B737_STBY_Baro_Set_Dec#49208 (>K:ROTOR_BRAKE)
PMDG_B737_STBY_Baro_Set_Inc#49207 (>K:ROTOR_BRAKE)
PMDG_B737_STBY_RMI_Vor1_Adf1#49701 (>K:ROTOR_BRAKE)
PMDG_B737_STBY_RMI_Vor2_Adf2#49801 (>K:ROTOR_BRAKE)
PMDG_B737_Spd_Ref_Mode_Dec#46408 (>K:ROTOR_BRAKE)
PMDG_B737_Spd_Ref_Mode_Inc#46407 (>K:ROTOR_BRAKE)
PMDG_B737_Spd_Ref_Sel_Dec#46508 (>K:ROTOR_BRAKE)
PMDG_B737_Spd_Ref_Sel_Inc#46507 (>K:ROTOR_BRAKE)
PMDG_B737_Std_R#42301 (>K:ROTOR_BRAKE)
PMDG_B737_Sys#46201 (>K:ROTOR_BRAKE)
PMDG_B737_Sys_Test#50001 (>K:ROTOR_BRAKE)
PMDG_B737_Test_1_2_R#44201 (>K:ROTOR_BRAKE)
PMDG_B737_Tfc_R#41801 (>K:ROTOR_BRAKE)
PMDG_B737_Vor1_Adf1_R#41401 (>K:ROTOR_BRAKE)
PMDG_B737_Vor2_Adf2_R#42401 (>K:ROTOR_BRAKE)
PMDG_B737_Weather_Radar_Auto#91701 (>K:ROTOR_BRAKE)
PMDG_B737_Weather_Radar_Gain_Control_Left_Dec#92308 (>K:ROTOR_BRAKE)
PMDG_B737_Weather_Radar_Gain_Control_Left_Inc#92307 (>K:ROTOR_BRAKE)
PMDG_B737_Weather_Radar_Gain_Control_Right_Dec#92208 (>K:ROTOR_BRAKE)
PMDG_B737_Weather_Radar_Gain_Control_Right_Inc#92207 (>K:ROTOR_BRAKE)
PMDG_B737_Weather_Radar_Gc_Left#79301 (>K:ROTOR_BRAKE)
PMDG_B737_Weather_Radar_Gc_Right#92101 (>K:ROTOR_BRAKE)
PMDG_B737_Weather_Radar_Map_Left#79201 (>K:ROTOR_BRAKE)
PMDG_B737_Weather_Radar_Map_Right#79701 (>K:ROTOR_BRAKE)
PMDG_B737_Weather_Radar_Test#91801 (>K:ROTOR_BRAKE)
PMDG_B737_Weather_Radar_Tfr_Left#79001 (>K:ROTOR_BRAKE)
PMDG_B737_Weather_Radar_Tfr_Right#91901 (>K:ROTOR_BRAKE)
PMDG_B737_Weather_Radar_Tilt_Control_Left_Dec#79408 (>K:ROTOR_BRAKE)
PMDG_B737_Weather_Radar_Tilt_Control_Left_Inc#79407 (>K:ROTOR_BRAKE)
PMDG_B737_Weather_Radar_Tilt_Control_Right_Dec#79508 (>K:ROTOR_BRAKE)
PMDG_B737_Weather_Radar_Tilt_Control_Right_Inc#79507 (>K:ROTOR_BRAKE)
PMDG_B737_Weather_Radar_Wx_Left#79101 (>K:ROTOR_BRAKE)
PMDG_B737_Weather_Radar_Wx_Right#79601 (>K:ROTOR_BRAKE)
PMDG_B737_Weather_Radar_Wx_T_Left#91601 (>K:ROTOR_BRAKE)
PMDG_B737_Weather_Radar_Wx_T_Right#92001 (>K:ROTOR_BRAKE)
//PMDG/B737-700/Controls
PMDG_B737_Alternate_Flaps_Down_Press#7501 (>K:ROTOR_BRAKE)
PMDG_B737_Alternate_Flaps_Down_Release#7501 (>K:ROTOR_BRAKE)
PMDG_B737_Alternate_Flaps_Up_Press#7502 (>K:ROTOR_BRAKE)
PMDG_B737_Alternate_Flaps_Up_Release#7501 (>K:ROTOR_BRAKE)
PMDG_B737_Engines_Fire_Ext_Test_1#0 (L:switch_715_73X,number) - 50 div s0 :1 l0 0 > if{ 71502 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 71501 (>K:ROTOR_BRAKE) l0 ++ s0 g1 } 
PMDG_B737_Engines_Fire_Ext_Test_2#100 (L:switch_715_73X,number) - 50 div s0 :1 l0 0 > if{ 71502 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 71501 (>K:ROTOR_BRAKE) l0 ++ s0 g1 } 
PMDG_B737_Engines_Fire_Ext_Test_Middle#50 (L:switch_715_73X,number) - 50 div s0 :1 l0 0 > if{ 71502 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 71501 (>K:ROTOR_BRAKE) l0 ++ s0 g1 } 
PMDG_B737_Nose_Wheel_Steering_Switch#32501 (>K:ROTOR_BRAKE)
PMDG_B737_Aileron_Trim_Switch_Left#81001 (>K:ROTOR_BRAKE)
PMDG_B737_Aileron_Trim_Switch_Right#81002 (>K:ROTOR_BRAKE)
PMDG_B737_Alternate_Flaps_Master_Guard#7401 (>K:ROTOR_BRAKE)
PMDG_B737_Below_G_S_P-Inhibit#32701 (>K:ROTOR_BRAKE)
PMDG_B737_Move_Flap_Lever#71401 (>K:ROTOR_BRAKE)
PMDG_B737_Move_Spoilers_Lever#67901 (>K:ROTOR_BRAKE)
PMDG_B737_Nose_Wheel_Steering_Guard#32601 (>K:ROTOR_BRAKE)
PMDG_B737_Rudder_Trim_Dec#81108 (>K:ROTOR_BRAKE)
PMDG_B737_Rudder_Trim_Inc#81107 (>K:ROTOR_BRAKE)
PMDG_B737_Set_Flaps_1#714201 (>K:ROTOR_BRAKE)
PMDG_B737_Set_Flaps_10#714501 (>K:ROTOR_BRAKE)
PMDG_B737_Set_Flaps_15#714601 (>K:ROTOR_BRAKE)
PMDG_B737_Set_Flaps_2#714301 (>K:ROTOR_BRAKE)
PMDG_B737_Set_Flaps_25#714701 (>K:ROTOR_BRAKE)
PMDG_B737_Set_Flaps_30#714801 (>K:ROTOR_BRAKE)
PMDG_B737_Set_Flaps_40#714901 (>K:ROTOR_BRAKE)
PMDG_B737_Set_Flaps_5#714401 (>K:ROTOR_BRAKE)
PMDG_B737_Set_Flaps_Up#714101 (>K:ROTOR_BRAKE)
PMDG_B737_Set_Spoilers_50_Percent#679301 (>K:ROTOR_BRAKE)
PMDG_B737_Set_Spoilers_Armed#679201 (>K:ROTOR_BRAKE)
PMDG_B737_Set_Spoilers_Down#679101 (>K:ROTOR_BRAKE)
PMDG_B737_Set_Spoilers_Flight_Detent#679401 (>K:ROTOR_BRAKE)
PMDG_B737_Set_Spoilers_Up#679501 (>K:ROTOR_BRAKE)
PMDG_B737_Spoiler_A#6501 (>K:ROTOR_BRAKE)
PMDG_B737_Spoiler_A_Guard#6601 (>K:ROTOR_BRAKE)
PMDG_B737_Spoiler_B#6701 (>K:ROTOR_BRAKE)
PMDG_B737_Spoiler_B_Guard#6801 (>K:ROTOR_BRAKE)
//PMDG/B737-700/EFIS
PMDG_B737_EFIS_L_BARO_STD_Press#36701 (>K:ROTOR_BRAKE) (L:mf_STD_Push,number) ! (>L:mf_STD_Push,number)
PMDG_B737_EFIS_L_Baro_Select_Knob_HPa#(L:switch_366_73X) 0 != if{ 36601 (>K:ROTOR_BRAKE) }
PMDG_B737_EFIS_L_Baro_Select_Knob_InHg#(L:switch_366_73X) 0 == if{ 36601 (>K:ROTOR_BRAKE) }
PMDG_B737_EFIS_L_MINS_KNOB_BARO#(L:swtich_356_73X) 0 == if{ 35601 (>K:ROTOR_BRAKE) }
PMDG_B737_EFIS_L_MINS_KNOB_RADIO#(L:swtich_356_73X) 0 != if{ 35601 (>K:ROTOR_BRAKE) }
PMDG_B737_EFIS_L_MINS_REF#35601 (>K:ROTOR_BRAKE)
PMDG_B737_EFIS_L_VOR_ADF_ADF1#100 (L:switch_358_73X) - 50 div s0 :1 l0 0 > if{ 35801 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 35802 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737_EFIS_L_VOR_ADF_OFF#50 (L:switch_358_73X) - 50 div s0 :1 l0 0 > if{ 35801 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 35802 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737_EFIS_L_VOR_ADF_VOR1#0 (L:switch_358_73X) - 50 div s0 :1 l0 0 > if{ 35801 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 35802 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737_EFIS_L_VOR2_ADF2#36801 (>K:ROTOR_BRAKE)
PMDG_B737_EFIS_R_MINS_KNOB_BARO#(L:swtich_412_73X) 0 == if{ 41201 (>K:ROTOR_BRAKE) }
PMDG_B737_EFIS_R_MINS_KNOB_RADIO#(L:swtich_412_73X) 0 != if{ 41201 (>K:ROTOR_BRAKE) }
PMDG_B737_EFIS_R_Map_Btn_TERR#43101 (>K:ROTOR_BRAKE)
PMDG_B737_EFIS_R_Mins_Ref_Toggle#41201 (>K:ROTOR_BRAKE)
PMDG_B737_Efis_Mode_FO_Dec#41508 (>K:ROTOR_BRAKE)
PMDG_B737_Efis_Mode_FO_Inc#41507 (>K:ROTOR_BRAKE)
PMDG_B737_Efis_Range_FO_Dec#41708 (>K:ROTOR_BRAKE)
PMDG_B737_Efis_Range_FO_Inc#41709 (>K:ROTOR_BRAKE)
PMDG_B737_EFIS_CPT_RANGE_DEC#36108 (>K:ROTOR_BRAKE)
PMDG_B737_EFIS_CPT_RANGE_INC#36107 (>K:ROTOR_BRAKE)
PMDG_B737_EFIS_R_Mode_CTR#41601 (>K:ROTOR_BRAKE)
PMDG_B737_EFIS_R_Mode_Dec#41508 (>K:ROTOR_BRAKE)
PMDG_B737_EFIS_R_Mode_Inc#41507 (>K:ROTOR_BRAKE)
PMDG_B737_EFIS_R_Range_Dec#41708 (>K:ROTOR_BRAKE)
PMDG_B737_EFIS_R_Range_Inc#41707 (>K:ROTOR_BRAKE)
PMDG_B737_EFIS_R_TFC#41801 (>K:ROTOR_BRAKE)
PMDG_B737_EFIS_L_BARO_Dec#36508 (>K:ROTOR_BRAKE)
PMDG_B737_EFIS_L_BARO_IN_HPA#36601 (>K:ROTOR_BRAKE)
PMDG_B737_EFIS_L_BARO_Inc#36507 (>K:ROTOR_BRAKE)
PMDG_B737_EFIS_L_FPV#36301 (>K:ROTOR_BRAKE)
PMDG_B737_EFIS_L_MINS_RST#35701 (>K:ROTOR_BRAKE)
PMDG_B737_EFIS_L_MINS_Slew_Dec#35508 (>K:ROTOR_BRAKE)
PMDG_B737_EFIS_L_MINS_Slew_Inc#35507 (>K:ROTOR_BRAKE)
PMDG_B737_EFIS_L_MTRS#36401 (>K:ROTOR_BRAKE)
PMDG_B737_EFIS_L_Map_Btn_ARPT#37201 (>K:ROTOR_BRAKE)
PMDG_B737_EFIS_L_Map_Btn_DATA#37301 (>K:ROTOR_BRAKE)
PMDG_B737_EFIS_L_Map_Btn_POS#37401 (>K:ROTOR_BRAKE)
PMDG_B737_EFIS_L_Map_Btn_STA#37001 (>K:ROTOR_BRAKE)
PMDG_B737_EFIS_L_Map_Btn_TERR#37501 (>K:ROTOR_BRAKE)
PMDG_B737_EFIS_L_Map_Btn_WPT#37101 (>K:ROTOR_BRAKE)
PMDG_B737_EFIS_L_Map_Btn_WXR#36901 (>K:ROTOR_BRAKE)
PMDG_B737_EFIS_L_Mode_APP#0 (L:switch_359_73X) - 10 div s0 :1 l0 0 > if{ 35907 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 35908 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737_EFIS_L_Mode_CTR#36001 (>K:ROTOR_BRAKE)
PMDG_B737_EFIS_L_Mode_Dec#35908 (>K:ROTOR_BRAKE)
PMDG_B737_EFIS_L_Mode_Inc#35907 (>K:ROTOR_BRAKE)
PMDG_B737_EFIS_L_Mode_MAP#20 (L:switch_359_73X) - 10 div s0 :1 l0 0 > if{ 35907 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 35908 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737_EFIS_L_Mode_PLN#30 (L:switch_359_73X) - 10 div s0 :1 l0 0 > if{ 35907 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 35908 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737_EFIS_L_Mode_VOR#10 (L:switch_359_73X) - 10 div s0 :1 l0 0 > if{ 35907 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 35908 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737_EFIS_L_Range_10#10 (L:switch_361_73X) - 10 div s0 :1 l0 0 > if{ 36107 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 36108 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737_EFIS_L_Range_160#50 (L:switch_361_73X) - 10 div s0 :1 l0 0 > if{ 36107 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 36108 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737_EFIS_L_Range_20#20 (L:switch_361_73X) - 10 div s0 :1 l0 0 > if{ 36107 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 36108 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737_EFIS_L_Range_320#60 (L:switch_361_73X) - 10 div s0 :1 l0 0 > if{ 36107 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 36108 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737_EFIS_L_Range_40#30 (L:switch_361_73X) - 10 div s0 :1 l0 0 > if{ 36107 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 36108 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737_EFIS_L_Range_5#0 (L:switch_361_73X) - 10 div s0 :1 l0 0 > if{ 36107 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 36108 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737_EFIS_L_Range_640#70 (L:switch_361_73X) - 10 div s0 :1 l0 0 > if{ 36107 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 36108 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737_EFIS_L_Range_80#40 (L:switch_361_73X) - 10 div s0 :1 l0 0 > if{ 36107 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 36108 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737_EFIS_L_Range_Dec#36108 (>K:ROTOR_BRAKE)
PMDG_B737_EFIS_L_Range_Inc#36107 (>K:ROTOR_BRAKE)
PMDG_B737_EFIS_L_TFC#36201 (>K:ROTOR_BRAKE)
PMDG_B737_EFIS_R_Map_Btn_ARPT#42801 (>K:ROTOR_BRAKE)
PMDG_B737_EFIS_R_Map_Btn_Data#42901 (>K:ROTOR_BRAKE)
PMDG_B737_EFIS_R_Map_Btn_POS#43001 (>K:ROTOR_BRAKE)
PMDG_B737_EFIS_R_Map_Btn_STA#42601 (>K:ROTOR_BRAKE)
PMDG_B737_EFIS_R_Map_Btn_WPT#42701 (>K:ROTOR_BRAKE)
PMDG_B737_EFIS_R_Map_Btn_WXR#42501 (>K:ROTOR_BRAKE)
//PMDG/B737-700/Electrical
PMDG_B737_Master_Battery_Switch_Off#(L:switch_01_73X) 0 != if{ 101 (>K:ROTOR_BRAKE) }
PMDG_B737_Master_Battery_Switch_On#(L:switch_01_73X) 0 == if{ 101 (>K:ROTOR_BRAKE) }
PMDG_B737-7_APU_OFF_POS_SW#50 (L:switch_118_73X) - 10 div == if{ 11802 (>K:ROTOR_BRAKE) (SLEEP:500) } 
PMDG_B737-7_APU_ON_POS_SW#(L:switch_118_73X) 10 div == if{ 11801 (>K:ROTOR_BRAKE) }
PMDG_B737-7_APU_START_POS_SW#50 (L:switch_118_73X) - 10 div == if{ 11801 (>K:ROTOR_BRAKE) } els{ 11801 (>K:ROTOR_BRAKE) (SLEEP:500) 11801 (>K:ROTOR_BRAKE) }
PMDG_B737-7_ELECTRICAL_APU_GEN1_OFF#2802 (>K:ROTOR_BRAKE)
PMDG_B737-7_ELECTRICAL_APU_GEN1_ON#2801 (>K:ROTOR_BRAKE)
PMDG_B737-7_ELECTRICAL_APU_GEN2_OFF#2902 (>K:ROTOR_BRAKE)
PMDG_B737-7_ELECTRICAL_APU_GEN2_ON#2901 (>K:ROTOR_BRAKE)
PMDG_B737-7_ELECTRICAL_GALLEY_POWER_OFF#100 (L:switch_974_73X, number) == if{ 97402 (>K:ROTOR_BRAKE) }
PMDG_B737-7_ELECTRICAL_GALLEY_POWER_ON#0 (L:switch_974_73X, number) == if{ 97401 (>K:ROTOR_BRAKE) }
PMDG_B737-7_ELECTRICAL_GALLEY_POWER_TOGGLE#97401 (>K:ROTOR_BRAKE)
PMDG_B737-7_ELECTRICAL_GEN1_OFF#2702 (>K:ROTOR_BRAKE)
PMDG_B737-7_ELECTRICAL_GEN1_ON#2701 (>K:ROTOR_BRAKE)
PMDG_B737-7_ELECTRICAL_GEN2_OFF#3002 (>K:ROTOR_BRAKE)
PMDG_B737-7_ELECTRICAL_GEN2_ON#3001 (>K:ROTOR_BRAKE)
PMDG_B737-7_GRD_PWR_OFF_POS_SW#1702 (>K:ROTOR_BRAKE)
PMDG_B737-7_GRD_PWR_ON_POS_SW#1701 (>K:ROTOR_BRAKE)
PMDG_B737_BATT_GUARD_SWITCH#201 (>K:ROTOR_BRAKE)
PMDG_B737_BATT_ON_OFF_SWITCH#101 (>K:ROTOR_BRAKE)
PMDG_B737_Ac_Source_Knob_APU_GEN#30 (L:switch_04_73X,number) - 10 div s0 :1 l0 0 > if{ 407 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 408 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737_Ac_Source_Knob_Dec#408 (>K:ROTOR_BRAKE)
PMDG_B737_Ac_Source_Knob_GEN_1#20 (L:switch_04_73X,number) - 10 div s0 :1 l0 0 > if{ 407 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 408 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737_Ac_Source_Knob_GEN_2#40 (L:switch_04_73X,number) - 10 div s0 :1 l0 0 > if{ 407 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 408 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737_Ac_Source_Knob_GND_PWR#10 (L:switch_04_73X,number) - 10 div s0 :1 l0 0 > if{ 407 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 408 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737_Ac_Source_Knob_INV#50 (L:switch_04_73X,number) - 10 div s0 :1 l0 0 > if{ 407 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 408 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737_Ac_Source_Knob_Inc#407 (>K:ROTOR_BRAKE)
PMDG_B737_Ac_Source_Knob_STBY_PWR#0 (L:switch_04_73X,number) - 10 div s0 :1 l0 0 > if{ 407 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 408 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737_Ac_Source_Knob_TEST#60 (L:switch_04_73X,number) - 10 div s0 :1 l0 0 > if{ 407 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 408 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737_Apu_Start_OFF#0 (L:switch_118_73X,number) - 50 div s0 :1 l0 0 > if{ 11801 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 11802 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737_Apu_Start_ON#50 (L:switch_118_73X,number) - 50 div s0 :1 l0 0 > if{ 11801 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 11802 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737_Apu_Start_START#100 (L:switch_118_73X,number) - 50 div s0 :1 l0 0 > if{ 11801 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 11802 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737_Bus_Transfer#1801 (>K:ROTOR_BRAKE)
PMDG_B737_Bus_Transfer_Guard#1901 (>K:ROTOR_BRAKE)
PMDG_B737_Cvr_Erase#18001 (>K:ROTOR_BRAKE)
PMDG_B737_Cvr_Test#17801 (>K:ROTOR_BRAKE)
PMDG_B737_Dc_Source_Knob_AUX_BAT#30 (L:switch_03_73X,number) - 10 div s0 :1 l0 0 > if{ 307 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 308 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737_Dc_Source_Knob_BAT#20 (L:switch_03_73X,number) - 10 div s0 :1 l0 0 > if{ 307 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 308 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737_Dc_Source_Knob_BAT_BUS#10 (L:switch_03_73X,number) - 10 div s0 :1 l0 0 > if{ 307 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 308 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737_Dc_Source_Knob_Dec#308 (>K:ROTOR_BRAKE)
PMDG_B737_Dc_Source_Knob_Inc#307 (>K:ROTOR_BRAKE)
PMDG_B737_Dc_Source_Knob_STBY_PWR#0 (L:switch_03_73X,number) - 10 div s0 :1 l0 0 > if{ 307 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 308 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737_Dc_Source_Knob_TEST#70 (L:switch_03_73X,number) - 10 div s0 :1 l0 0 > if{ 307 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 308 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737_Dc_Source_Knob_TR1#40 (L:switch_03_73X,number) - 10 div s0 :1 l0 0 > if{ 307 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 308 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737_Dc_Source_Knob_TR2#50 (L:switch_03_73X,number) - 10 div s0 :1 l0 0 > if{ 307 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 308 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737_Dc_Source_Knob_TR3#60 (L:switch_03_73X,number) - 10 div s0 :1 l0 0 > if{ 307 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 308 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737_Elec_Maint#9301 (>K:ROTOR_BRAKE)
PMDG_B737_Gen_Drive_Disc_Left#1201 (>K:ROTOR_BRAKE)
PMDG_B737_Gen_Drive_Disc_Left_Guard#1301 (>K:ROTOR_BRAKE)
PMDG_B737_Gen_Drive_Disc_Right#1401 (>K:ROTOR_BRAKE)
PMDG_B737_Gen_Drive_Disc_Right_Guard#1501 (>K:ROTOR_BRAKE)
PMDG_B737_Standby_Power_Auto#100 (L:switch_10_73X,number) - 50 div s0 :1 l0 0 > if{ 1002 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 1001 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737_Standby_Power_Bat#0 (L:switch_10_73X,number) - 50 div s0 :1 l0 0 > if{ 1002 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 1001 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737_Standby_Power_Off#50 (L:switch_10_73X,number) - 50 div s0 :1 l0 0 > if{ 1002 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 1001 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737_Trip_Reset#20901 (>K:ROTOR_BRAKE)
//PMDG/B737-700/Engines
Engine_2_Start_Lever#ENG2 68901 (>K:ROTOR_BRAKE) - ON 68902 (>K:ROTOR_BRAKE - OFF Read variable to get switch position from aircraft L:switch_689_73X
PMDG_B737_Eng_1_Reverse_Thrust_Kill#68001 (>K:ROTOR_BRAKE)
PMDG_B737_Eng_2_Reverse_Thrust_Kill#68101 (>K:ROTOR_BRAKE)
PMDG_B737_Engine_Start_Left_GRD#0 (L:switch_119_73X,number) - 10 div s0 :1 l0 0 > if{ 11907 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 11908 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737-7_ENGINE_START_LEFT_ROTARY_SWITCH_CONT_POS#20 (L:switch_119_73X) - 10 div s0 :1 l0 0 > if{ 11907 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 11908 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737-7_ENGINE_START_LEFT_ROTARY_SWITCH_FLT_POS#30 (L:switch_119_73X) - 10 div s0 :1 l0 0 > if{ 11907 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 11908 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737-7_ENGINE_START_LEFT_ROTARY_SWITCH_GRD_POS#0 (L:switch_119_73X) - 10 div s0 :1 l0 0 > if{ 11907 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 11908 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737-7_ENGINE_START_LEFT_ROTARY_SWITCH_OFF_POS#10 (L:switch_119_73X) - 10 div s0 :1 l0 0 > if{ 11907 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 11908 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737-7_ENGINE_START_RIGHT_ROTARY_SWITCH_CONT_POS#20 (L:switch_121_73X) - 10 div s0 :1 l0 0 > if{ 12107 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 12108 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737-7_ENGINE_START_RIGHT_ROTARY_SWITCH_FLT_POS#30 (L:switch_121_73X) - 10 div s0 :1 l0 0 > if{ 12107 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 12108 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737-7_ENGINE_START_RIGHT_ROTARY_SWITCH_GRD_POS#0 (L:switch_121_73X) - 10 div s0 :1 l0 0 > if{ 12107 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 12108 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737-7_ENGINE_START_RIGHT_ROTARY_SWITCH_OFF_POS#10 (L:switch_121_73X) - 10 div s0 :1 l0 0 > if{ 12107 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 12108 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737_ENGINE_START_LEFT_LEVER_CUTOFF#68802 (>K:ROTOR_BRAKE)
PMDG_B737_ENGINE_START_LEFT_LEVER_IDLE#68801 (>K:ROTOR_BRAKE)
PMDG_B737_ENGINE_START_RIGHT_LEVER_CUTOFF#68902 (>K:ROTOR_BRAKE)
PMDG_B737_ENGINE_START_RIGHT_LEVER_IDLE#68901 (>K:ROTOR_BRAKE)
PMDG_B737_Eng_1_Throttle#68301 (>K:ROTOR_BRAKE)
PMDG_B737_Eng_2_A_T_Disengage#68501 (>K:ROTOR_BRAKE)
PMDG_B737_Eng_2_Throttle#68601 (>K:ROTOR_BRAKE)
PMDG_B737_Engine_Start_Left_CONT#20 (L:switch_119_73X,number) - 10 div s0 :1 l0 0 > if{ 11907 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 11908 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737_Engine_Start_Left_Dec#11908 (>K:ROTOR_BRAKE)
PMDG_B737_Engine_Start_Left_FLT#30 (L:switch_119_73X,number) - 10 div s0 :1 l0 0 > if{ 11907 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 11908 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737_Engine_Start_Left_Inc#11909 (>K:ROTOR_BRAKE)
PMDG_B737_Engine_Start_Left_OFF#10 (L:switch_119_73X,number) - 10 div s0 :1 l0 0 > if{ 11907 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 11908 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737_Ignition_Select_Both#50 (L:switch_120_73X,number) - 50 div s0 :1 l0 0 > if{ 12002 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 12001 (>K:ROTOR_BRAKE) l0 ++ s0 g1 } 
PMDG_B737_Ignition_Select_IGN_L#0 (L:switch_120_73X,number) - 50 div s0 :1 l0 0 > if{ 12002 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 12001 (>K:ROTOR_BRAKE) l0 ++ s0 g1 } 
PMDG_B737_Ignition_Select_IGN_R#100 (L:switch_120_73X,number) - 50 div s0 :1 l0 0 > if{ 12002 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 12001 (>K:ROTOR_BRAKE) l0 ++ s0 g1 } 
//PMDG/B737-700/FMS
PMDG_B737_FMS_Left___-#57201 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Left__#60101 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Left_A#57301 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Left_B#57401 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Left_BRT_Dec#60502 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Left_BRT_Inc#60501 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Left_C#57501 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Left_CLB#54801 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Left_CLR#60201 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Left_CRZ#54901 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Left_D#57601 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Left_DECIMAL#57001 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Left_DEL#60001 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Left_DEP_ARR#55301 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Left_DES#55001 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Left_E#57701 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Left_EXEC#55601 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Left_F#57801 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Left_FIX#55801 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Left_G#57901 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Left_H#58001 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Left_HOLD#55401 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Left_I#58101 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Left_INIT_REF#54601 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Left_J#58201 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Left_K#58301 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Left_L#58401 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Left_LEGS#55201 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Left_LS_1#53401 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Left_LS_10#54301 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Left_LS_11#54401 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Left_LS_12#54501 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Left_LS_2#53501 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Left_LS_3#53601 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Left_LS_4#53701 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Left_LS_5#53801 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Left_LS_6#53901 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Left_LS_7#54001 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Left_LS_8#54101 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Left_LS_9#54201 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Left_M#58501 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Left_MENU#55101 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Left_N#58601 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Left_N1_LIMIT#55701 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Left_NEXT_PAGE#56001 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Left_NUM_0#57101 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Left_NUM_1#56101 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Left_NUM_2#56201 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Left_NUM_3#56301 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Left_NUM_4#56401 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Left_NUM_5#56501 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Left_NUM_6#56601 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Left_NUM_7#56701 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Left_NUM_8#56801 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Left_NUM_9#56901 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Left_O#58701 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Left_P#58801 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Left_PREV_PAGE#55901 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Left_PROG#55501 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Left_Q#58901 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Left_R#59001 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Left_RTE#54701 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Left_S#59101 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Left_SP#59901 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Left_T#59201 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Left_U#59301 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Left_V#59401 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Left_W#59501 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Left_X#59601 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Left_Y#59701 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Left_Z#59801 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Right___-#64401 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Right__#67301 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Right_A#64501 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Right_B#64601 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Right_BRT_Dec#67702 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Right_BRT_Inc#67701 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Right_C#64701 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Right_CLB#62001 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Right_CLR#67401 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Right_CRZ#62101 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Right_D#64801 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Right_DECIMAL#64201 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Right_DEL#67201 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Right_DEP_ARR#62501 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Right_DES#62201 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Right_E#64901 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Right_EXEC#62801 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Right_F#65001 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Right_FIX#63001 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Right_G#65101 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Right_H#65201 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Right_HOLD#62601 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Right_I#65301 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Right_INIT_REF#61801 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Right_J#65401 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Right_K#65501 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Right_L#65601 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Right_LEGS#62401 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Right_LS_1#60601 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Right_LS_10#61501 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Right_LS_11#61601 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Right_LS_12#61701 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Right_LS_2#60701 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Right_LS_3#60801 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Right_LS_4#60901 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Right_LS_5#61001 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Right_LS_6#61101 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Right_LS_7#61201 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Right_LS_8#61301 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Right_LS_9#61401 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Right_M#65701 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Right_MENU#62301 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Right_N#65801 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Right_N1_LIMIT#62901 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Right_NEXT_PAGE#63201 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Right_NUM_0#64301 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Right_NUM_1#63301 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Right_NUM_2#63401 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Right_NUM_3#63501 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Right_NUM_4#63601 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Right_NUM_5#63701 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Right_NUM_6#63801 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Right_NUM_7#63901 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Right_NUM_8#64001 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Right_NUM_9#64101 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Right_O#65901 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Right_P#66001 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Right_PREV_PAGE#63101 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Right_PROG#62701 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Right_Q#66101 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Right_R#66201 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Right_RTE#61901 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Right_S#66301 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Right_SP#67101 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Right_T#66401 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Right_U#66501 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Right_V#66601 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Right_W#66701 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Right_X#66801 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Right_Y#66901 (>K:ROTOR_BRAKE)
PMDG_B737_FMS_Right_Z#67001 (>K:ROTOR_BRAKE)
//PMDG/B737-700/Flight Controls
PMDG_B737-7_FLT_CONTROL_YAW_DAMPER_OFF#100 (L:switch_63_73X, number) == if{ 6302 (>K:ROTOR_BRAKE) }
PMDG_B737-7_FLT_CONTROL_YAW_DAMPER_ON#0 (L:switch_63_73X, number) == if{ 6301 (>K:ROTOR_BRAKE) }
PMDG_B737-7_FLT_CONTROL_YAW_DAMPER_TOGGLE#6301 (>K:ROTOR_BRAKE)
//PMDG/B737-700/Flight Instrumentation
PMDG_B737-7_HGS_HUD_BRIGHTNESS_KNOB_DEC#98008 (>K:ROTOR_BRAKE)
PMDG_B737-7_HGS_HUD_BRIGHTNESS_KNOB_INC#98007 (>K:ROTOR_BRAKE)
PMDG_B737-7_HGS_HUD_BRT_AUTO_MAN_SWITCH#98101 (>K:ROTOR_BRAKE)
PMDG_B737-7_HGS_HUD_UP_DOWN_SWITCH#97901 (>K:ROTOR_BRAKE)
//PMDG/B737-700/Fuel
PMDG_B737-7_FUEL_CROSSFEED_OFF#100 (L:switch_49_73X, number) == if{ 4902 (>K:ROTOR_BRAKE) }
PMDG_B737-7_FUEL_CROSSFEED_ON#0 (L:switch_49_73X, number) == if{ 4901 (>K:ROTOR_BRAKE) }
PMDG_B737-7_FUEL_CROSSFEED_TOGGLE#4901 (>K:ROTOR_BRAKE)
PMDG_B737-7_FUEL_CUT_OFF_LEVER1_DN#(L:switch_688_73X) 0 == if{ 68801 (>K:ROTOR_BRAKE) }
PMDG_B737-7_FUEL_CUT_OFF_LEVER1_UP#(L:switch_688_73X) 100 == if{ 68801 (>K:ROTOR_BRAKE) }
PMDG_B737-7_FUEL_CUT_OFF_LEVER2_DN#(L:switch_689_73X) 0 == if{ 68901 (>K:ROTOR_BRAKE) }
PMDG_B737-7_FUEL_CUT_OFF_LEVER2_UP#(L:switch_689_73X) 100 == if{ 68901 (>K:ROTOR_BRAKE) }
PMDG_B737-7_FUEL_PUMP_AFT_LEFT_OFF#100 (L:switch_37_73X, number) == if{ 3702 (>K:ROTOR_BRAKE) }
PMDG_B737-7_FUEL_PUMP_AFT_LEFT_ON#0 (L:switch_37_73X, number) == if{ 3701 (>K:ROTOR_BRAKE) }
PMDG_B737-7_FUEL_PUMP_AFT_LEFT_SW#3701 (>K:ROTOR_BRAKE)
PMDG_B737-7_FUEL_PUMP_AFT_RIGHT_OFF#100 (L:switch_40_73X, number) == if{ 4002 (>K:ROTOR_BRAKE) }
PMDG_B737-7_FUEL_PUMP_AFT_RIGHT_ON#0 (L:switch_40_73X, number) == if{ 4001 (>K:ROTOR_BRAKE) }
PMDG_B737-7_FUEL_PUMP_AFT_RIGHT_SW#4001 (>K:ROTOR_BRAKE)
PMDG_B737-7_FUEL_PUMP_CTR_L_OFF#100 (L:switch_45_73X, number) == if{ 4502 (>K:ROTOR_BRAKE) }
PMDG_B737-7_FUEL_PUMP_CTR_L_ON#0 (L:switch_45_73X, number) == if{ 4501 (>K:ROTOR_BRAKE) }
PMDG_B737-7_FUEL_PUMP_CTR_L_SW#4501 (>K:ROTOR_BRAKE)
PMDG_B737-7_FUEL_PUMP_CTR_R_OFF#100 (L:switch_46_73X, number) == if{ 4602 (>K:ROTOR_BRAKE) }
PMDG_B737-7_FUEL_PUMP_CTR_R_ON#0 (L:switch_46_73X, number) == if{ 4601 (>K:ROTOR_BRAKE) }
PMDG_B737-7_FUEL_PUMP_CTR_R_SW#4601 (>K:ROTOR_BRAKE)
PMDG_B737-7_FUEL_PUMP_FWD_LEFT_OFF#100 (L:switch_38_73X, number) == if{ 3802 (>K:ROTOR_BRAKE) }
PMDG_B737-7_FUEL_PUMP_FWD_LEFT_ON#0 (L:switch_38_73X, number) == if{ 3801 (>K:ROTOR_BRAKE) }
PMDG_B737-7_FUEL_PUMP_FWD_LEFT_SW#3801 (>K:ROTOR_BRAKE)
PMDG_B737-7_FUEL_PUMP_FWD_RIGHT_OFF#100 (L:switch_39_73X, number) == if{ 3902 (>K:ROTOR_BRAKE) }
PMDG_B737-7_FUEL_PUMP_FWD_RIGHT_ON#0 (L:switch_39_73X, number) == if{ 3901 (>K:ROTOR_BRAKE) }
PMDG_B737-7_FUEL_PUMP_FWD_RIGHT_SW#3901 (>K:ROTOR_BRAKE)
PMDG_B737_Aux_Fuel_A_Aft#201101 (>K:ROTOR_BRAKE)
PMDG_B737_Aux_Fuel_A_Fwd#200901 (>K:ROTOR_BRAKE)
PMDG_B737_Aux_Fuel_Aft_Bleed#201401 (>K:ROTOR_BRAKE)
PMDG_B737_Aux_Fuel_B_Aft#201201 (>K:ROTOR_BRAKE)
PMDG_B737_Aux_Fuel_B_Fwd#201001 (>K:ROTOR_BRAKE)
PMDG_B737_Aux_Fuel_Fwd_Bleed#201301 (>K:ROTOR_BRAKE)
PMDG_B737_Aux_Fuel_Gnd_Guard#201801 (>K:ROTOR_BRAKE)
PMDG_B737_Aux_Fuel_Gnd_Switch#201901 (>K:ROTOR_BRAKE)
PMDG_B737_Bbj_Aux_Fuel_Left_Alert_Switch#203201 (>K:ROTOR_BRAKE)
PMDG_B737_Bbj_Aux_Fuel_Left_Maint_Switch#203401 (>K:ROTOR_BRAKE)
PMDG_B737_Bbj_Aux_Fuel_Left_Test_Switch#203001 (>K:ROTOR_BRAKE)
PMDG_B737_Bbj_Aux_Fuel_Right_Alert_Switch#203301 (>K:ROTOR_BRAKE)
PMDG_B737_Bbj_Aux_Fuel_Right_Maint_Switch#203501 (>K:ROTOR_BRAKE)
PMDG_B737_Bbj_Aux_Fuel_Right_Test_Switch#203101 (>K:ROTOR_BRAKE)
//PMDG/B737-700/Gear
PMDG_B737-7_ANTISKID_1_POS_SW#20 (L:switch_460_73X) - 10 div s0 :1 l0 0 > if{ 46007 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 46008 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737-7_ANTISKID_2_POS_SW#30 (L:switch_460_73X) - 10 div s0 :1 l0 0 > if{ 46007 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 46008 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737-7_ANTISKID_3_POS_SW#40 (L:switch_460_73X) - 10 div s0 :1 l0 0 > if{ 46007 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 46008 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737-7_ANTISKID_MAX_POS_SW#50 (L:switch_460_73X) - 10 div s0 :1 l0 0 > if{ 46007 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 46008 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737-7_ANTISKID_OFF_POS_SW#10 (L:switch_460_73X) - 10 div s0 :1 l0 0 > if{ 46007 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 46008 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737-7_ANTISKID_RTO_POS_SW#0 (L:switch_460_73X) - 10 div s0 :1 l0 0 > if{ 46007 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 46008 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737-7_AUTOBRAKE_DEC#46008 (>K:ROTOR_BRAKE)
PMDG_B737-7_AUTOBRAKE_INC#46007 (>K:ROTOR_BRAKE)
PMDG_B737-7_GEAR_DOWN#(>K:GEAR_DOWN)
PMDG_B737-7_GEAR_HORN_CUTOUT#71301 (>K:ROTOR_BRAKE)
PMDG_B737-7_GEAR_LEVER_DEC#45501 (>K:ROTOR_BRAKE)
PMDG_B737-7_GEAR_LEVER_INC#45502 (>K:ROTOR_BRAKE)
PMDG_B737-7_GEAR_OFF#30 (L:switch_455_73X) - 10 div s0 :1 l0 0 > if{ 45501 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 45502 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737-7_GEAR_UP#30 (L:switch_455_73X) - 10 div == if{ 45502 (>K:ROTOR_BRAKE) } els{ (>K:GEAR_UP) }
PMDG_B737-7_PARKING_BRAKE_OFF#100 (L:switch_693_73X, number) == if{ 69301 (>K:ROTOR_BRAKE) }
PMDG_B737-7_PARKING_BRAKE_ON#0 (L:switch_693_73X, number) == if{ 69302 (>K:ROTOR_BRAKE) }
PMDG_B737_00_Alt_Gear_Ext_Door#200201 (>K:ROTOR_BRAKE)
PMDG_B737_00_Alt_Gear_Ext_Handle_Left#200401 (>K:ROTOR_BRAKE)
PMDG_B737_00_Alt_Gear_Ext_Handle_Nose#200501 (>K:ROTOR_BRAKE)
PMDG_B737_00_Alt_Gear_Ext_Handle_Right#200301 (>K:ROTOR_BRAKE)
PMDG_B737_Center_Manual_Gear_Extension#102001 (>K:ROTOR_BRAKE)
PMDG_B737_Landing_Gear_Off#455101 (>K:ROTOR_BRAKE)
PMDG_B737_Landing_Gear_Unlock#455201 (>K:ROTOR_BRAKE)
PMDG_B737_Left_Manual_Gear_Extension#101901 (>K:ROTOR_BRAKE)
PMDG_B737_Right_Manual_Gear_Extension#101701 (>K:ROTOR_BRAKE)
//PMDG/B737-700/Hydraulic
PMDG_B737-7_HYDRAULIC_PUMP_A_ELEC_2_OFF#100 (L:switch_167_73X, number) == if{ 16702 (>K:ROTOR_BRAKE) }
PMDG_B737-7_HYDRAULIC_PUMP_A_ELEC_2_ON#0 (L:switch_167_73X, number) == if{ 16701 (>K:ROTOR_BRAKE) }
PMDG_B737-7_HYDRAULIC_PUMP_A_ELEC_2_TOGGLE#16701 (>K:ROTOR_BRAKE)
PMDG_B737-7_HYDRAULIC_PUMP_A_ENG_1_OFF#100 (L:switch_165_73X, number) == if{ 16502 (>K:ROTOR_BRAKE) }
PMDG_B737-7_HYDRAULIC_PUMP_A_ENG_1_ON#0 (L:switch_165_73X, number) == if{ 16501 (>K:ROTOR_BRAKE) }
PMDG_B737-7_HYDRAULIC_PUMP_A_ENG_1_TOGGLE#16501 (>K:ROTOR_BRAKE)
PMDG_B737-7_HYDRAULIC_PUMP_B_ELEC_1_OFF#100 (L:switch_168_73X, number) == if{ 16802 (>K:ROTOR_BRAKE) }
PMDG_B737-7_HYDRAULIC_PUMP_B_ELEC_1_ON#0 (L:switch_168_73X, number) == if{ 16801 (>K:ROTOR_BRAKE) }
PMDG_B737-7_HYDRAULIC_PUMP_B_ELEC_1_TOGGLE#16801 (>K:ROTOR_BRAKE)
PMDG_B737-7_HYDRAULIC_PUMP_B_ENG_2_OFF#100 (L:switch_166_73X, number) == if{ 16602 (>K:ROTOR_BRAKE) }
PMDG_B737-7_HYDRAULIC_PUMP_B_ENG_2_ON#0 (L:switch_166_73X, number) == if{ 16601 (>K:ROTOR_BRAKE) }
PMDG_B737-7_HYDRAULIC_PUMP_B_ENG_2_TOGGLE#16601 (>K:ROTOR_BRAKE)
//PMDG/B737-700/Lights
PMDG_B737_Emergency_Light_Switch_Armed#50 (L:switch_100_73X) - 50 div s0 :1 l0 0 > if{ 10001 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 10002 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737_Emergency_Light_Switch_Guard_Toggle#10101 (>K:ROTOR_BRAKE) 
PMDG_B737_Emergency_Light_Switch_Off#0 (L:switch_100_73X) - 50 div s0 :1 l0 0 > if{ 10001 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 10002 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737_Emergency_Light_Switch_On#100 (L:switch_100_73X) - 50 div s0 :1 l0 0 > if{ 10001 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 10002 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737_Flood_Lights_Knob_Dec#75608 (>K:ROTOR_BRAKE) 
PMDG_B737_Flood_Lights_Knob_Inc#75607 (>K:ROTOR_BRAKE)
PMDG_B737_Lights_Switch_BRT#50 (L:switch_346_73X) - 50 div s0 :1 l0 0 > if{ 34601 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 34602 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737_Lights_Switch_DIM#100 (L:switch_346_73X) - 50 div s0 :1 l0 0 > if{ 34601 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 34602 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737_Lights_Switch_Test#0 (L:switch_346_73X) - 50 div s0 :1 l0 0 > if{ 34601 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 34602 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737_Panel_Lights_Knob__Dec#75708 (>K:ROTOR_BRAKE) 
PMDG_B737_Panel_Lights_Knob__Inc#75707 (>K:ROTOR_BRAKE) 
PMDG_B737_Spotlight_Capt_Knob_Dec#201508 (>K:ROTOR_BRAKE)
PMDG_B737_Spotlight_Capt_Knob_Inc#201507 (>K:ROTOR_BRAKE)
PMDG_B737-7_LIGHTS_ANTI_COLLISION_OFF#100 (L:switch_124_73X, number) == if{ 12401 (>K:ROTOR_BRAKE) } 
PMDG_B737-7_LIGHTS_ANTI_COLLISION_ON#0 (L:switch_124_73X, number) == if{ 12401 (>K:ROTOR_BRAKE) } 
PMDG_B737-7_LIGHTS_ANTI_COLLISION_TOGGLE#12401 (>K:ROTOR_BRAKE)
PMDG_B737-7_LIGHTS_FIXED_LANDING_BOTH_OFF#100 (L:switch_113_73X, number) == if{ 11301 (>K:ROTOR_BRAKE) } 100 (L:switch_114_73X, number) == if{ 11401 (>K:ROTOR_BRAKE) }
PMDG_B737-7_LIGHTS_FIXED_LANDING_BOTH_ON#0 (L:switch_113_73X, number) == if{ 11301 (>K:ROTOR_BRAKE) } 0 (L:switch_114_73X, number) == if{ 11401 (>K:ROTOR_BRAKE) }
PMDG_B737-7_LIGHTS_FIXED_LANDING_BOTH_TOGGLE#11301 (>K:ROTOR_BRAKE) 11401 (>K:ROTOR_BRAKE)
PMDG_B737-7_LIGHTS_FIXED_LANDING_L_OFF#100 (L:switch_113_73X, number) == if{ 11301 (>K:ROTOR_BRAKE) }
PMDG_B737-7_LIGHTS_FIXED_LANDING_L_ON#0 (L:switch_113_73X, number) == if{ 11301 (>K:ROTOR_BRAKE) }
PMDG_B737-7_LIGHTS_FIXED_LANDING_L_TOGGLE#11301 (>K:ROTOR_BRAKE)
PMDG_B737-7_LIGHTS_FIXED_LANDING_R_OFF#100 (L:switch_114_73X, number) == if{ 11401 (>K:ROTOR_BRAKE) }
PMDG_B737-7_LIGHTS_FIXED_LANDING_R_ON#0 (L:switch_114_73X, number) == if{ 11401 (>K:ROTOR_BRAKE) }
PMDG_B737-7_LIGHTS_FIXED_LANDING_R_TOGGLE#11401 (>K:ROTOR_BRAKE)
PMDG_B737-7_LIGHTS_INTERIOR_DOME_WHITE_BRIGHT#(L:switch_258_73X, number) s0 l0 50 == if{ 25801 (>K:ROTOR_BRAKE) } l0 0 == if{ 25801 (>K:ROTOR_BRAKE) 25801 (>K:ROTOR_BRAKE) }
PMDG_B737-7_LIGHTS_INTERIOR_DOME_WHITE_DIM#(L:switch_258_73X, number) s0 l0 50 == if{ 25802 (>K:ROTOR_BRAKE) } l0 100 == if{ 25802 (>K:ROTOR_BRAKE) 25802 (>K:ROTOR_BRAKE) }
PMDG_B737-7_LIGHTS_INTERIOR_DOME_WHITE_OFF#(L:switch_258_73X, number) s0 l0 0 == if{ 25801 (>K:ROTOR_BRAKE) } l0 100 == if{ 25802 (>K:ROTOR_BRAKE) }
PMDG_B737-7_LIGHTS_LOGO_OFF#100 (L:switch_122_73X, number) == if{ 12201 (>K:ROTOR_BRAKE) } 
PMDG_B737-7_LIGHTS_LOGO_ON#0 (L:switch_122_73X, number) == if{ 12201 (>K:ROTOR_BRAKE) } 
PMDG_B737-7_LIGHTS_LOGO_TOGGLE#12201 (>K:ROTOR_BRAKE)
PMDG_B737-7_LIGHTS_POSITION_OFF#(L:switch_123_73X, number) s0 l0 0 == if{ 12301 (>K:ROTOR_BRAKE) } l0 100 == if{ 12302 (>K:ROTOR_BRAKE) }
PMDG_B737-7_LIGHTS_POSITION_STEADY#(L:switch_123_73X, number) s0 l0 50 == if{ 12301 (>K:ROTOR_BRAKE) } l0 0 == if{ 12301 (>K:ROTOR_BRAKE) 12301 (>K:ROTOR_BRAKE) }
PMDG_B737-7_LIGHTS_POSITION_STROBE#(L:switch_123_73X, number) s0 l0 50 == if{ 12302 (>K:ROTOR_BRAKE) } l0 100 == if{ 12302 (>K:ROTOR_BRAKE) 12302 (>K:ROTOR_BRAKE) }
PMDG_B737-7_LIGHTS_RETRACTABLE_LANDING_ALL_OFF#11002 (>K:ROTOR_BRAKE)
PMDG_B737-7_LIGHTS_RETRACTABLE_LANDING_ALL_ON#11001 (>K:ROTOR_BRAKE)
PMDG_B737-7_LIGHTS_RETRACTABLE_LANDING_BOTH_EXTENDED#(L:switch_111_73X, number) s0 (L:switch_112_73X, number) s1 l0 0 == if{ 11101 (>K:ROTOR_BRAKE) } l0 100 == if{ 11102 (>K:ROTOR_BRAKE) } l1 0 == if{ 11201 (>K:ROTOR_BRAKE) } l1 100 == if{ 11202 (>K:ROTOR_BRAKE) }
PMDG_B737-7_LIGHTS_RETRACTABLE_LANDING_BOTH_OFF#(L:switch_111_73X, number) s0 (L:switch_112_73X, number) s1 l0 50 == if{ 11102 (>K:ROTOR_BRAKE) } l0 100 == if{ 11102 (>K:ROTOR_BRAKE) 11102 (>K:ROTOR_BRAKE) } l1 50 == if{ 11202 (>K:ROTOR_BRAKE) } l1 100 == if{ 11202 (>K:ROTOR_BRAKE) 11202 (>K:ROTOR_BRAKE) }
PMDG_B737-7_LIGHTS_RETRACTABLE_LANDING_BOTH_ON#(L:switch_111_73X, number) s0 (L:switch_112_73X, number) s1 l0 50 == if{ 11101 (>K:ROTOR_BRAKE) } l0 0 == if{ 11101 (>K:ROTOR_BRAKE) 11101 (>K:ROTOR_BRAKE) } l1 50 == if{ 11201 (>K:ROTOR_BRAKE) } l1 0 == if{ 11201 (>K:ROTOR_BRAKE) 11201 (>K:ROTOR_BRAKE) }
PMDG_B737-7_LIGHTS_RETRACTABLE_LANDING_L_EXTENDED#(L:switch_111_73X, number) s0 l0 0 == if{ 11101 (>K:ROTOR_BRAKE) } l0 100 == if{ 11102 (>K:ROTOR_BRAKE) }
PMDG_B737-7_LIGHTS_RETRACTABLE_LANDING_L_OFF#(L:switch_111_73X, number) s0 l0 50 == if{ 11102 (>K:ROTOR_BRAKE) } l0 100 == if{ 11102 (>K:ROTOR_BRAKE) 11102 (>K:ROTOR_BRAKE) }
PMDG_B737-7_LIGHTS_RETRACTABLE_LANDING_L_ON#(L:switch_111_73X, number) s0 l0 50 == if{ 11101 (>K:ROTOR_BRAKE) } l0 0 == if{ 11101 (>K:ROTOR_BRAKE) 11101 (>K:ROTOR_BRAKE) }
PMDG_B737-7_LIGHTS_RETRACTABLE_LANDING_R_EXTENDED#(L:switch_112_73X, number) s0 l0 0 == if{ 11201 (>K:ROTOR_BRAKE) } l0 100 == if{ 11202 (>K:ROTOR_BRAKE) }
PMDG_B737-7_LIGHTS_RETRACTABLE_LANDING_R_OFF#(L:switch_112_73X, number) s0 l0 50 == if{ 11202 (>K:ROTOR_BRAKE) } l0 100 == if{ 11202 (>K:ROTOR_BRAKE) 11202 (>K:ROTOR_BRAKE) }
PMDG_B737-7_LIGHTS_RETRACTABLE_LANDING_R_ON#(L:switch_112_73X, number) s0 l0 50 == if{ 11201 (>K:ROTOR_BRAKE) } l0 0 == if{ 11201 (>K:ROTOR_BRAKE) 11201 (>K:ROTOR_BRAKE) }
PMDG_B737-7_LIGHTS_RUNWAY_BOTH_OFF#100 (L:switch_115_73X, number) == if{ 11501 (>K:ROTOR_BRAKE) } 100 (L:switch_116_73X, number) == if{ 11601 (>K:ROTOR_BRAKE) }
PMDG_B737-7_LIGHTS_RUNWAY_BOTH_ON#0 (L:switch_115_73X, number) == if{ 11501 (>K:ROTOR_BRAKE) } 0 (L:switch_116_73X, number) == if{ 11601 (>K:ROTOR_BRAKE) }
PMDG_B737-7_LIGHTS_RUNWAY_BOTH_TOGGLE#11501 (>K:ROTOR_BRAKE) 11601 (>K:ROTOR_BRAKE)
PMDG_B737-7_LIGHTS_RUNWAY_L_OFF#100 (L:switch_115_73X, number) == if{ 11501 (>K:ROTOR_BRAKE) }
PMDG_B737-7_LIGHTS_RUNWAY_L_ON#0 (L:switch_115_73X, number) == if{ 11501 (>K:ROTOR_BRAKE) }
PMDG_B737-7_LIGHTS_RUNWAY_L_TOGGLE#11501 (>K:ROTOR_BRAKE)
PMDG_B737-7_LIGHTS_RUNWAY_R_OFF#100 (L:switch_116_73X, number) == if{ 11601 (>K:ROTOR_BRAKE) }
PMDG_B737-7_LIGHTS_RUNWAY_R_ON#0 (L:switch_116_73X, number) == if{ 11601 (>K:ROTOR_BRAKE) }
PMDG_B737-7_LIGHTS_RUNWAY_R_TOGGLE#11601 (>K:ROTOR_BRAKE)
PMDG_B737-7_LIGHTS_TAXI_OFF#100 (L:switch_117_73X, number) == if{ 11701 (>K:ROTOR_BRAKE) } 
PMDG_B737-7_LIGHTS_TAXI_ON#0 (L:switch_117_73X, number) == if{ 11701 (>K:ROTOR_BRAKE) } 
PMDG_B737-7_LIGHTS_TAXI_TOGGLE#11701 (>K:ROTOR_BRAKE)
PMDG_B737-7_LIGHTS_WHEEL_WELL_OFF#100 (L:switch_126_73X, number) == if{ 12601 (>K:ROTOR_BRAKE) }
PMDG_B737-7_LIGHTS_WHEEL_WELL_ON#0 (L:switch_126_73X, number) == if{ 12601 (>K:ROTOR_BRAKE) }
PMDG_B737-7_LIGHTS_WHEEL_WELL_TOGGLE#12601 (>K:ROTOR_BRAKE)
PMDG_B737-7_LIGHTS_WING_OFF#100 (L:switch_125_73X, number) == if{ 12501 (>K:ROTOR_BRAKE) }
PMDG_B737-7_LIGHTS_WING_ON#0 (L:switch_125_73X, number) == if{ 12501 (>K:ROTOR_BRAKE) }
PMDG_B737-7_LIGHTS_WING_TOGGLE#12501 (>K:ROTOR_BRAKE)
PMDG_B737_Background_Bright_Dec#33808 (>K:ROTOR_BRAKE)
PMDG_B737_Background_Bright_Inc#33807 (>K:ROTOR_BRAKE)
PMDG_B737_Chart_Light_CA_Adjust_Dec#31908 (>K:ROTOR_BRAKE)
PMDG_B737_Chart_Light_CA_Adjust_Inc#31907 (>K:ROTOR_BRAKE)
PMDG_B737_Chart_Light_FO_Adjust_Dec#32208 (>K:ROTOR_BRAKE)
PMDG_B737_Chart_Light_FO_Adjust_Inc#32207 (>K:ROTOR_BRAKE)
PMDG_B737_Circuit_Breaker_Light_Control_Dec#9408 (>K:ROTOR_BRAKE)
PMDG_B737_Circuit_Breaker_Light_Control_Inc#9407 (>K:ROTOR_BRAKE)
PMDG_B737_Compass_Light#98201 (>K:ROTOR_BRAKE)
PMDG_B737_INBD_DU_BRT_Dec#33008 (>K:ROTOR_BRAKE)
PMDG_B737_INBD_DU_BRT_Inc#33007 (>K:ROTOR_BRAKE)
PMDG_B737_INBD_DU_RDR_BRT_Dec#33108 (>K:ROTOR_BRAKE)
PMDG_B737_INBD_DU_RDR_BRT_Inc#33107 (>K:ROTOR_BRAKE)
PMDG_B737_Inbd_Du_R_Brt_Dec#50708 (>K:ROTOR_BRAKE)
PMDG_B737_Inbd_Du_R_Brt_Inc#50707 (>K:ROTOR_BRAKE)
PMDG_B737_Inbd_Du_Rdr_R_Brt_Dec#50808 (>K:ROTOR_BRAKE)
PMDG_B737_Inbd_Du_Rdr_R_Brt_Inc#50807 (>K:ROTOR_BRAKE)
PMDG_B737_LOW_DU_BRT_Dec#33208 (>K:ROTOR_BRAKE)
PMDG_B737_LOW_DU_BRT_Dec_C#33308 (>K:ROTOR_BRAKE)
PMDG_B737_LOW_DU_BRT_Inc#33207 (>K:ROTOR_BRAKE)
PMDG_B737_LOW_DU_BRT_Inc_C#33307 (>K:ROTOR_BRAKE)
PMDG_B737_LOWER_DU_Dec#33608 (>K:ROTOR_BRAKE)
PMDG_B737_LOWER_DU_Inc#33607 (>K:ROTOR_BRAKE)
PMDG_B737_Lights_FLOOD_Brightness_Dec#75608 (>K:ROTOR_BRAKE)
PMDG_B737_Lights_FLOOD_Brightness_Inc#75607 (>K:ROTOR_BRAKE)
PMDG_B737_Lights_PANEL_Brightness_Dec#75708 (>K:ROTOR_BRAKE)
PMDG_B737_Lights_PANEL_Brightness_Inc#75707 (>K:ROTOR_BRAKE)
PMDG_B737_Lower_Du_R_Dec#44108 (>K:ROTOR_BRAKE)
PMDG_B737_Lower_Du_R_Inc#44107 (>K:ROTOR_BRAKE)
PMDG_B737_MAIN_PANEL_Dus_Dec#33508 (>K:ROTOR_BRAKE)
PMDG_B737_MAIN_PANEL_Dus_Inc#33507 (>K:ROTOR_BRAKE)
PMDG_B737_Main_Panel_Bright_Dec#32808 (>K:ROTOR_BRAKE)
PMDG_B737_Main_Panel_Bright_Inc#32807 (>K:ROTOR_BRAKE)
PMDG_B737_Main_Panel_Dus_R_Dec#44008 (>K:ROTOR_BRAKE)
PMDG_B737_Main_Panel_Dus_R_Inc#44007 (>K:ROTOR_BRAKE)
PMDG_B737_Main_Panel_R_Brt_Dec#51008 (>K:ROTOR_BRAKE)
PMDG_B737_Main_Panel_R_Brt_Inc#51007 (>K:ROTOR_BRAKE)
PMDG_B737_Map_Light_L_Adjust_Dec#32308 (>K:ROTOR_BRAKE)
PMDG_B737_Map_Light_L_Adjust_Inc#32307 (>K:ROTOR_BRAKE)
PMDG_B737_Map_Light_L_Pull#89501 (>K:ROTOR_BRAKE)
PMDG_B737_Map_Light_R_Adjust_Dec#32408 (>K:ROTOR_BRAKE)
PMDG_B737_Map_Light_R_Adjust_Inc#32407 (>K:ROTOR_BRAKE)
PMDG_B737_Map_Light_R_Pull#89601 (>K:ROTOR_BRAKE)
PMDG_B737_OUTBD_DU_BRT_Dec#32907 (>K:ROTOR_BRAKE)
PMDG_B737_OUTBD_DU_BRT_Inc#32908 (>K:ROTOR_BRAKE)
PMDG_B737_Outbd_Du_R_Brt_Dec#50908 (>K:ROTOR_BRAKE)
PMDG_B737_Outbd_Du_R_Brt_Inc#50907 (>K:ROTOR_BRAKE)
PMDG_B737_Panel_Bright_Dec#33707 (>K:ROTOR_BRAKE)
PMDG_B737_Panel_Bright_Inc#33708 (>K:ROTOR_BRAKE)
PMDG_B737_Panel_Light_Control_Dec#9508 (>K:ROTOR_BRAKE)
PMDG_B737_Panel_Light_Control_Inc#9507 (>K:ROTOR_BRAKE)
PMDG_B737_Position_Light_OFF#50 (L:switch_123_73X,number) - 50 div s0 :1 l0 0 > if{ 12301 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 12302 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737_Position_Light_STEADY#100 (L:switch_123_73X,number) - 50 div s0 :1 l0 0 > if{ 12301 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 12302 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737_Position_Light_STROBE_STEADY#0 (L:switch_123_73X,number) - 50 div s0 :1 l0 0 > if{ 12301 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 12302 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737_Retractable_Landing_Light_Left_EXT#50 (L:switch_111_73X,number) - 50 div s0 :1 l0 0 > if{ 11101 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 11102 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737_Retractable_Landing_Light_Left_ON#100 (L:switch_111_73X,number) - 50 div s0 :1 l0 0 > if{ 11101 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 11102 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737_Retractable_Landing_Light_Left_RET#0 (L:switch_111_73X,number) - 50 div s0 :1 l0 0 > if{ 11101 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 11102 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737_Retractable_Landing_Light_Right_EXT#50 (L:switch_112_73X,number) - 50 div s0 :1 l0 0 > if{ 11201 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 11202 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737_Retractable_Landing_Light_Right_ON#100 (L:switch_112_73X,number) - 50 div s0 :1 l0 0 > if{ 11201 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 11202 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737_Retractable_Landing_Light_Right_RET#0 (L:switch_112_73X,number) - 50 div s0 :1 l0 0 > if{ 11201 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 11202 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737_Spotlight_Knob_Fo_Dec#201608 (>K:ROTOR_BRAKE)
PMDG_B737_Spotlight_Knob_Fo_Inc#201607 (>K:ROTOR_BRAKE)
PMDG_B737_Spotlight_Knob_Obs_Dec#201708 (>K:ROTOR_BRAKE)
PMDG_B737_Spotlight_Knob_Obs_Inc#201707 (>K:ROTOR_BRAKE)
PMDG_B737_Standby_Power_Guard#1101 (>K:ROTOR_BRAKE)
PMDG_B737_UPPER_DU_BRT_Dec#33408 (>K:ROTOR_BRAKE)
PMDG_B737_UPPER_DU_BRT_Inc#33407 (>K:ROTOR_BRAKE)
//PMDG/B737-700/Miscellaneous
PMDG_B737-7_WIPER_LEFT_HIGH_POS_SW#30 (L:switch_36_73X) - 10 div s0 :1 l0 0 > if{ 3607 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 3608 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737-7_WIPER_LEFT_INT_POS_SW#10 (L:switch_36_73X) - 10 div s0 :1 l0 0 > if{ 3607 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 3608 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737-7_WIPER_LEFT_LOW_POS_SW#20 (L:switch_36_73X) - 10 div s0 :1 l0 0 > if{ 3607 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 3608 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737-7_WIPER_LEFT_OFF_POS_SW#0 (L:switch_36_73X) - 10 div s0 :1 l0 0 > if{ 3607 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 3608 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737-7_WIPER_RIGHT_HIGH_POS_SW#30 (L:switch_109_73X) - 10 div s0 :1 l0 0 > if{ 10907 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 10908 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737-7_WIPER_RIGHT_INT_POS_SW#10 (L:switch_109_73X) - 10 div s0 :1 l0 0 > if{ 10907 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 10908 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737-7_WIPER_RIGHT_LOW_POS_SW#20 (L:switch_109_73X) - 10 div s0 :1 l0 0 > if{ 10907 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 10908 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737-7_WIPER_RIGHT_OFF_POS_SW#0 (L:switch_109_73X) - 10 div s0 :1 l0 0 > if{ 10907 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 10908 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737_00_Checklist_Knob_Left#752101 (>K:ROTOR_BRAKE)
PMDG_B737_00_Checklist_Knob_Right#752201 (>K:ROTOR_BRAKE)
PMDG_B737_00_Combiner_Cover#200601 (>K:ROTOR_BRAKE)
PMDG_B737_00_Efb_Left_Arrow#170101 (>K:ROTOR_BRAKE)
PMDG_B737_00_Efb_Left_Chart#170001 (>K:ROTOR_BRAKE)
PMDG_B737_00_Efb_Left_Power#173001 (>K:ROTOR_BRAKE)
PMDG_B737_00_Efb_Left_Star#172901 (>K:ROTOR_BRAKE)
PMDG_B737_00_Efb_Left_Sun#172801 (>K:ROTOR_BRAKE)
PMDG_B737_00_Efb_Right_Arrow#178701 (>K:ROTOR_BRAKE)
PMDG_B737_00_Efb_Right_Chart#178601 (>K:ROTOR_BRAKE)
PMDG_B737_00_Efb_Right_Power#181601 (>K:ROTOR_BRAKE)
PMDG_B737_00_Efb_Right_Star#181501 (>K:ROTOR_BRAKE)
PMDG_B737_00_Efb_Right_Sun#181401 (>K:ROTOR_BRAKE)
PMDG_B737_00_Grimes_Light_Ca#202001 (>K:ROTOR_BRAKE)
PMDG_B737_00_Hgs_Projector_Mover#(L:hgs_projector_mover,bool) ! (>L:hgs_projector_mover,bool)
PMDG_B737_00_Jumpseat#200101 (>K:ROTOR_BRAKE)
PMDG_B737_00_Noclick#0 (L:NoClick,bool) ! (>L:NoClick,bool) 1
PMDG_B737_00_Yoke_Left_Hide#200701 (>K:ROTOR_BRAKE)
PMDG_B737_00_Yoke_Right_Hide#200801 (>K:ROTOR_BRAKE)
PMDG_B737_A_Testswitch#(L:TestSwitch,bool) ! (>L:TestSwitch,bool)
PMDG_B737_Ca_Left_Arm_Rest#100601 (>K:ROTOR_BRAKE)
PMDG_B737_Ca_Right_Arm_Rest#100701 (>K:ROTOR_BRAKE)
PMDG_B737_Cab_Util#501 (>K:ROTOR_BRAKE)
PMDG_B737_Equipment_Cooling_Exhaust#9701 (>K:ROTOR_BRAKE)
PMDG_B737_Equipment_Cooling_Supply#9601 (>K:ROTOR_BRAKE)
PMDG_B737_Fo_Left_Arm_Rest#100801 (>K:ROTOR_BRAKE)
PMDG_B737_Fo_Right_Arm_Rest#100901 (>K:ROTOR_BRAKE)
PMDG_B737_Fs2Crew#200001 (>K:ROTOR_BRAKE)
PMDG_B737_Galley#97501 (>K:ROTOR_BRAKE)
PMDG_B737_Ife_Pass#601 (>K:ROTOR_BRAKE)
PMDG_B737_Service_Interphone#25701 (>K:ROTOR_BRAKE)
PMDG_B737_Wlan#88801 (>K:ROTOR_BRAKE)
PMDG_B737_Wlan_Guard#88901 (>K:ROTOR_BRAKE)
PMDG_B737_Yoke_Counter_1#99801 (>K:ROTOR_BRAKE)
PMDG_B737_Yoke_Counter_2#99901 (>K:ROTOR_BRAKE)
PMDG_B737_Yoke_Counter_3#100001 (>K:ROTOR_BRAKE)
PMDG_B737_Yoke_Counter_4#100101 (>K:ROTOR_BRAKE)
PMDG_B737_Yoke_Counter_5#100201 (>K:ROTOR_BRAKE)
PMDG_B737_Yoke_Counter_6#100301 (>K:ROTOR_BRAKE)
//PMDG/B737-700/Navigation
PMDG_B737-7_IRS_LEFT_ALIGN_POS_SW#10 (L:switch_255_73X) - 10 div s0 :1 l0 0 > if{ 25507 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 25508 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737-7_IRS_LEFT_ATT_POS_SW#30 (L:switch_255_73X) - 10 div s0 :1 l0 0 > if{ 25507 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 25508 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737-7_IRS_LEFT_NAV_POS_SW#20 (L:switch_255_73X) - 10 div s0 :1 l0 0 > if{ 25507 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 25508 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737-7_IRS_LEFT_OFF_POS_SW#0 (L:switch_255_73X) - 10 div s0 :1 l0 0 > if{ 25507 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 25508 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737-7_IRS_RIGHT_ALIGN_POS_SW#10 (L:switch_256_73X) - 10 div s0 :1 l0 0 > if{ 25607 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 25608 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737-7_IRS_RIGHT_ATT_POS_SW#30 (L:switch_256_73X) - 10 div s0 :1 l0 0 > if{ 25607 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 25608 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737-7_IRS_RIGHT_NAV_POS_SW#20 (L:switch_256_73X) - 10 div s0 :1 l0 0 > if{ 25607 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 25608 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737-7_IRS_RIGHT_OFF_POS_SW#0 (L:switch_256_73X) - 10 div s0 :1 l0 0 > if{ 25607 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 25608 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737__#31701 (>K:ROTOR_BRAKE)
PMDG_B737_-#31801 (>K:ROTOR_BRAKE)
PMDG_B737_Chr#52301 (>K:ROTOR_BRAKE)
PMDG_B737_Chr__#52601 (>K:ROTOR_BRAKE)
PMDG_B737_Chr_-#52701 (>K:ROTOR_BRAKE)
PMDG_B737_Chr_1#31401 (>K:ROTOR_BRAKE)
PMDG_B737_Chr_Et#53001 (>K:ROTOR_BRAKE)
PMDG_B737_Chr_Reset#52901 (>K:ROTOR_BRAKE)
PMDG_B737_Chr_Set#52501 (>K:ROTOR_BRAKE)
PMDG_B737_Chr_Tc_Sr#523101 (>K:ROTOR_BRAKE)
PMDG_B737_Chr_Time_Date#52401 (>K:ROTOR_BRAKE)
PMDG_B737_Compass_Stow#(L:NGXCompassStow,bool) ! (>L:NGXCompassStow,bool)
PMDG_B737_Et#32101 (>K:ROTOR_BRAKE)
PMDG_B737_Reset#32001 (>K:ROTOR_BRAKE)
PMDG_B737_Set#31601 (>K:ROTOR_BRAKE)
PMDG_B737_Tc_Sr#314101 (>K:ROTOR_BRAKE)
PMDG_B737_Time_Date#31501 (>K:ROTOR_BRAKE)
//PMDG/B737-700/Passengers/Crew
PMDG_B737-7_MISCELLANEOUS_ATTENDANT_CALL_BTN#10501 (>K:ROTOR_BRAKE)
PMDG_B737-7_MISCELLANEOUS_NO_SMOKING_OFF#100 (L:switch_103_73X, number) == if{ 10302 (>K:ROTOR_BRAKE) }
PMDG_B737-7_MISCELLANEOUS_NO_SMOKING_ON#0 (L:switch_103_73X, number) == if{ 10301 (>K:ROTOR_BRAKE) }
PMDG_B737-7_MISCELLANEOUS_NO_SMOKING_TOGGLE#10301 (>K:ROTOR_BRAKE)
//PMDG/B737-700/Pneumatic
PMDG_B737-7_PNEUMATIC_APU_BLEED_OFF#100 (L:switch_211_73X, number) == if{ 21102 (>K:ROTOR_BRAKE) }
PMDG_B737-7_PNEUMATIC_APU_BLEED_ON#0 (L:switch_211_73X, number) == if{ 21101 (>K:ROTOR_BRAKE) }
PMDG_B737-7_PNEUMATIC_APU_BLEED_TOGGLE#21101 (>K:ROTOR_BRAKE)
PMDG_B737-7_PNEUMATIC_ENG_BLEED_1_OFF#100 (L:switch_210_73X, number) == if{ 21002 (>K:ROTOR_BRAKE) }
PMDG_B737-7_PNEUMATIC_ENG_BLEED_1_ON#0 (L:switch_210_73X, number) == if{ 21001 (>K:ROTOR_BRAKE) }
PMDG_B737-7_PNEUMATIC_ENG_BLEED_1_TOGGLE#21001 (>K:ROTOR_BRAKE)
PMDG_B737-7_PNEUMATIC_ENG_BLEED_2_OFF#100 (L:switch_212_73X, number) == if{ 21202 (>K:ROTOR_BRAKE) }
PMDG_B737-7_PNEUMATIC_ENG_BLEED_2_ON#0 (L:switch_212_73X, number) == if{ 21201 (>K:ROTOR_BRAKE) }
PMDG_B737-7_PNEUMATIC_ENG_BLEED_2_TOGGLE#21201 (>K:ROTOR_BRAKE)
PMDG_B737-7_PNEUMATIC_ISOLATION_VALVE_AUTO#(L:switch_202_73X, number) s0 l0 0 == if{ 20201 (>K:ROTOR_BRAKE) } l0 100 == if{ 20202 (>K:ROTOR_BRAKE) }
PMDG_B737-7_PNEUMATIC_ISOLATION_VALVE_CLOSE#(L:switch_202_73X, number) s0 l0 50 == if{ 20202 (>K:ROTOR_BRAKE) } l0 100 == if{ 20202 (>K:ROTOR_BRAKE) 20202 (>K:ROTOR_BRAKE) }
PMDG_B737-7_PNEUMATIC_ISOLATION_VALVE_OPEN#(L:switch_202_73X, number) s0 l0 50 == if{ 20201 (>K:ROTOR_BRAKE) } l0 0 == if{ 20201 (>K:ROTOR_BRAKE) 20201 (>K:ROTOR_BRAKE) }
PMDG_B737-7_PNEUMATIC_PACK_L_AUTO#(L:switch_200_73X, number) s0 l0 0 == if{ 20001 (>K:ROTOR_BRAKE) } l0 100 == if{ 20002 (>K:ROTOR_BRAKE) }
PMDG_B737-7_PNEUMATIC_PACK_L_HIGH#(L:switch_200_73X, number) s0 l0 50 == if{ 20001 (>K:ROTOR_BRAKE) } l0 0 == if{ 20001 (>K:ROTOR_BRAKE) 20001 (>K:ROTOR_BRAKE) }
PMDG_B737-7_PNEUMATIC_PACK_L_OFF#(L:switch_200_73X, number) s0 l0 50 == if{ 20002 (>K:ROTOR_BRAKE) } l0 100 == if{ 20002 (>K:ROTOR_BRAKE) 20002 (>K:ROTOR_BRAKE) }
PMDG_B737-7_PNEUMATIC_PACK_R_AUTO#(L:switch_201_73X, number) s0 l0 0 == if{ 20101 (>K:ROTOR_BRAKE) } l0 100 == if{ 20102 (>K:ROTOR_BRAKE) }
PMDG_B737-7_PNEUMATIC_PACK_R_HIGH#(L:switch_201_73X, number) s0 l0 50 == if{ 20101 (>K:ROTOR_BRAKE) } l0 0 == if{ 20101 (>K:ROTOR_BRAKE) 20101 (>K:ROTOR_BRAKE) }
PMDG_B737-7_PNEUMATIC_PACK_R_OFF#(L:switch_201_73X, number) s0 l0 50 == if{ 20102 (>K:ROTOR_BRAKE) } l0 100 == if{ 20102 (>K:ROTOR_BRAKE) 20102 (>K:ROTOR_BRAKE) }
PMDG_B737-7_PNEUMATIC_RECIRC_FAN_AUTO#0 (L:switch_196_73X, number) == if{ 19601 (>K:ROTOR_BRAKE) }
PMDG_B737-7_PNEUMATIC_RECIRC_FAN_OFF#100 (L:switch_196_73X, number) == if{ 19602 (>K:ROTOR_BRAKE) }
PMDG_B737-7_PNEUMATIC_RECIRC_FAN_TOGGLE#19601 (>K:ROTOR_BRAKE)
//PMDG/B737-700/Radio
PMDG_B737_ADF_Tfr#82701 (>K:ROTOR_BRAKE)
PMDG_B737_COM_Unit_3_Vhf_Frq_Tfr#94601 (>K:ROTOR_BRAKE)
PMDG_B737_SELCAL_HF1#93701 (>K:ROTOR_BRAKE)
PMDG_B737_SELCAL_HF2#93801 (>K:ROTOR_BRAKE)
PMDG_B737_SELCAL_VHF1#81201 (>K:ROTOR_BRAKE)
PMDG_B737_SELCAL_VHF2#81301 (>K:ROTOR_BRAKE)
PMDG_B737_SELCAL_VHF3#81401 (>K:ROTOR_BRAKE)
PMDG_B737-7_COM1_RADIO_FRACT_DEC#72708 (>K:ROTOR_BRAKE)
PMDG_B737-7_COM1_RADIO_FRACT_INC#72707 (>K:ROTOR_BRAKE)
PMDG_B737-7_COM1_RADIO_SWAP_SWITCH#72101 (>K:ROTOR_BRAKE)
PMDG_B737-7_COM1_RADIO_WHOLE_DEC#72608 (>K:ROTOR_BRAKE)
PMDG_B737-7_COM1_RADIO_WHOLE_INC#72607 (>K:ROTOR_BRAKE)
PMDG_B737-7_COM2_RADIO_FRACT_DEC#84308 (>K:ROTOR_BRAKE)
PMDG_B737-7_COM2_RADIO_FRACT_INC#84307 (>K:ROTOR_BRAKE)
PMDG_B737-7_COM2_RADIO_SWAP_SWITCH#83701 (>K:ROTOR_BRAKE)
PMDG_B737-7_COM2_RADIO_WHOLE_DEC#84208 (>K:ROTOR_BRAKE)
PMDG_B737-7_COM2_RADIO_WHOLE_INC#84207 (>K:ROTOR_BRAKE)
PMDG_B737-7_NAV1_RADIO_FRACT_DEC#73208 (>K:ROTOR_BRAKE)
PMDG_B737-7_NAV1_RADIO_FRACT_INC#73207 (>K:ROTOR_BRAKE)
PMDG_B737-7_NAV1_RADIO_SWAP_SWITCH#72901 (>K:ROTOR_BRAKE)
PMDG_B737-7_NAV1_RADIO_WHOLE_DEC#73308 (>K:ROTOR_BRAKE)
PMDG_B737-7_NAV1_RADIO_WHOLE_INC#73307 (>K:ROTOR_BRAKE)
PMDG_B737-7_NAV2_RADIO_FRACT_DEC#84908 (>K:ROTOR_BRAKE)
PMDG_B737-7_NAV2_RADIO_FRACT_INC#84907 (>K:ROTOR_BRAKE)
PMDG_B737-7_NAV2_RADIO_SWAP_SWITCH#84501 (>K:ROTOR_BRAKE)
PMDG_B737-7_NAV2_RADIO_WHOLE_DEC#84808 (>K:ROTOR_BRAKE)
PMDG_B737-7_NAV2_RADIO_WHOLE_INC#84807 (>K:ROTOR_BRAKE)
PMDG_B737-7_TRANSPONDER_MODE_CHANGE_ENCODER_DEC#80008 (>K:ROTOR_BRAKE)
PMDG_B737-7_TRANSPONDER_MODE_CHANGE_ENCODER_INC#80007 (>K:ROTOR_BRAKE)
PMDG_B737_ATC_ALT_SOURCE#80301 (>K:ROTOR_BRAKE)
PMDG_B737_ATC_Code_Left_Inner_Dec#80508 (>K:ROTOR_BRAKE)
PMDG_B737_ATC_Code_Left_Inner_Inc#80507 (>K:ROTOR_BRAKE)
PMDG_B737_ATC_Code_Left_Outer_Dec#80408 (>K:ROTOR_BRAKE)
PMDG_B737_ATC_Code_Left_Outer_Inc#80407 (>K:ROTOR_BRAKE)
PMDG_B737_ATC_Code_Right_Inner_Dec#80808 (>K:ROTOR_BRAKE)
PMDG_B737_ATC_Code_Right_Inner_Inc#80807 (>K:ROTOR_BRAKE)
PMDG_B737_ATC_Code_Right_Outer_Dec#80708 (>K:ROTOR_BRAKE)
PMDG_B737_ATC_Code_Right_Outer_Inc#80707 (>K:ROTOR_BRAKE)
PMDG_B737_Adf_Frq_Inner_Dec#82208 (>K:ROTOR_BRAKE)
PMDG_B737_Adf_Frq_Inner_Inc#82207 (>K:ROTOR_BRAKE)
PMDG_B737_Adf_Frq_Middle#81601 (>K:ROTOR_BRAKE)
PMDG_B737_Adf_Frq_Middle_Dec#82308 (>K:ROTOR_BRAKE)
PMDG_B737_Adf_Frq_Middle_Inc#82307 (>K:ROTOR_BRAKE)
PMDG_B737_Adf_Frq_Outer#81701 (>K:ROTOR_BRAKE)
PMDG_B737_Adf_Frq_Outer_1#81501 (>K:ROTOR_BRAKE)
PMDG_B737_Adf_Frq_Outer_Dec#82408 (>K:ROTOR_BRAKE)
PMDG_B737_Adf_Frq_Outer_Inc#82407 (>K:ROTOR_BRAKE)
PMDG_B737_Adf_Ant#81801 (>K:ROTOR_BRAKE)
PMDG_B737_Alternate_Flaps_Master#7301 (>K:ROTOR_BRAKE)
PMDG_B737_Am_Switch#96201 (>K:ROTOR_BRAKE)
PMDG_B737_Am_Switch_1#93301 (>K:ROTOR_BRAKE)
PMDG_B737_Flt_Dk_Door_Dec#83408 (>K:ROTOR_BRAKE)
PMDG_B737_Flt_Dk_Door_Inc#83407 (>K:ROTOR_BRAKE)
PMDG_B737_Flt_Mic#85201 (>K:ROTOR_BRAKE)
PMDG_B737_Flt_Mic_1#73601 (>K:ROTOR_BRAKE)
PMDG_B737_Hf_Sensor_Dec#94908 (>K:ROTOR_BRAKE)
PMDG_B737_Hf_Sensor_Dec_1#72408 (>K:ROTOR_BRAKE)
PMDG_B737_Hf_Sensor_Inc#94907 (>K:ROTOR_BRAKE)
PMDG_B737_Hf_Sensor_Inc_1#72407 (>K:ROTOR_BRAKE)
PMDG_B737_Hf1#96001 (>K:ROTOR_BRAKE)
PMDG_B737_Hf1_1#93101 (>K:ROTOR_BRAKE)
PMDG_B737_Hf1_Receive#87501 (>K:ROTOR_BRAKE)
PMDG_B737_Hf2#96401 (>K:ROTOR_BRAKE)
PMDG_B737_Hf2_1#93501 (>K:ROTOR_BRAKE)
PMDG_B737_Hf2_Switch#91401 (>K:ROTOR_BRAKE)
PMDG_B737_IDENT_Button#80601 (>K:ROTOR_BRAKE)
PMDG_B737_MMR1_0#722301 (>K:ROTOR_BRAKE)
PMDG_B737_MMR1_1#721401 (>K:ROTOR_BRAKE)
PMDG_B737_MMR1_2#721501 (>K:ROTOR_BRAKE)
PMDG_B737_MMR1_3#721601 (>K:ROTOR_BRAKE)
PMDG_B737_MMR1_4#721701 (>K:ROTOR_BRAKE)
PMDG_B737_MMR1_5#721801 (>K:ROTOR_BRAKE)
PMDG_B737_MMR1_6#721901 (>K:ROTOR_BRAKE)
PMDG_B737_MMR1_7#722001 (>K:ROTOR_BRAKE)
PMDG_B737_MMR1_8#722101 (>K:ROTOR_BRAKE)
PMDG_B737_MMR1_9#722201 (>K:ROTOR_BRAKE)
PMDG_B737_MMR1_Act_Stby#721001 (>K:ROTOR_BRAKE)
PMDG_B737_MMR1_Clr#722401 (>K:ROTOR_BRAKE)
PMDG_B737_MMR1_Mode_Dn#721201 (>K:ROTOR_BRAKE)
PMDG_B737_MMR1_Mode_Up#721301 (>K:ROTOR_BRAKE)
PMDG_B737_MMR1_Test#721101 (>K:ROTOR_BRAKE)
PMDG_B737_MMR2_0#723901 (>K:ROTOR_BRAKE)
PMDG_B737_MMR2_1#722901 (>K:ROTOR_BRAKE)
PMDG_B737_MMR2_2#723001 (>K:ROTOR_BRAKE)
PMDG_B737_MMR2_3#723101 (>K:ROTOR_BRAKE)
PMDG_B737_MMR2_4#723201 (>K:ROTOR_BRAKE)
PMDG_B737_MMR2_5#723401 (>K:ROTOR_BRAKE)
PMDG_B737_MMR2_6#723501 (>K:ROTOR_BRAKE)
PMDG_B737_MMR2_7#723601 (>K:ROTOR_BRAKE)
PMDG_B737_MMR2_8#723701 (>K:ROTOR_BRAKE)
PMDG_B737_MMR2_9#723801 (>K:ROTOR_BRAKE)
PMDG_B737_MMR2_Act_Stby#722501 (>K:ROTOR_BRAKE)
PMDG_B737_MMR2_Clr#724001 (>K:ROTOR_BRAKE)
PMDG_B737_MMR2_Mode_Dn#722701 (>K:ROTOR_BRAKE)
PMDG_B737_MMR2_Mode_Up#722801 (>K:ROTOR_BRAKE)
PMDG_B737_MMR2_Test#722601 (>K:ROTOR_BRAKE)
PMDG_B737_MMR3_0#725401 (>K:ROTOR_BRAKE)
PMDG_B737_MMR3_1#724501 (>K:ROTOR_BRAKE)
PMDG_B737_MMR3_2#724601 (>K:ROTOR_BRAKE)
PMDG_B737_MMR3_3#724701 (>K:ROTOR_BRAKE)
PMDG_B737_MMR3_4#724801 (>K:ROTOR_BRAKE)
PMDG_B737_MMR3_5#724901 (>K:ROTOR_BRAKE)
PMDG_B737_MMR3_6#725001 (>K:ROTOR_BRAKE)
PMDG_B737_MMR3_7#725101 (>K:ROTOR_BRAKE)
PMDG_B737_MMR3_8#725201 (>K:ROTOR_BRAKE)
PMDG_B737_MMR3_9#725301 (>K:ROTOR_BRAKE)
PMDG_B737_MMR3_Act_Stby#724101 (>K:ROTOR_BRAKE)
PMDG_B737_MMR3_Clr#725501 (>K:ROTOR_BRAKE)
PMDG_B737_MMR3_Mode_Dn#724301 (>K:ROTOR_BRAKE)
PMDG_B737_MMR3_Mode_Up#724401 (>K:ROTOR_BRAKE)
PMDG_B737_MMR3_Test#724201 (>K:ROTOR_BRAKE)
PMDG_B737_Nav1_Test#73101 (>K:ROTOR_BRAKE)
PMDG_B737_Nav2_Test#84701 (>K:ROTOR_BRAKE)
PMDG_B737_Off_On#82001 (>K:ROTOR_BRAKE)
PMDG_B737_Pa_Mic#87301 (>K:ROTOR_BRAKE)
PMDG_B737_Pa_Mic_1#73801 (>K:ROTOR_BRAKE)
PMDG_B737_Radio_L_ADF1_RECEIVE#74801 (>K:ROTOR_BRAKE)
PMDG_B737_Radio_L_ADF2_RECEIVE#74901 (>K:ROTOR_BRAKE)
PMDG_B737_Radio_L_ALT_NORM#75501 (>K:ROTOR_BRAKE)
PMDG_B737_Radio_L_FLT_RECEIVE#74301 (>K:ROTOR_BRAKE)
PMDG_B737_Radio_L_HF1_RECEIVE#74201 (>K:ROTOR_BRAKE)
PMDG_B737_Radio_L_MASK_BOOM#75301 (>K:ROTOR_BRAKE)
PMDG_B737_Radio_L_MKR_RECEIVE#75001 (>K:ROTOR_BRAKE)
PMDG_B737_Radio_L_NAV1_RECEIVE#74601 (>K:ROTOR_BRAKE)
PMDG_B737_Radio_L_NAV2_RECEIVE#74701 (>K:ROTOR_BRAKE)
PMDG_B737_Radio_L_PA_RECEIVE#74501 (>K:ROTOR_BRAKE)
PMDG_B737_Radio_L_R_T_I_C#75201 (>K:ROTOR_BRAKE)
PMDG_B737_Radio_L_SPKR_RECEIVE#75101 (>K:ROTOR_BRAKE)
PMDG_B737_Radio_L_SVC_RECEIVE#74401 (>K:ROTOR_BRAKE)
PMDG_B737_Radio_L_VHF1_RECEIVE#73901 (>K:ROTOR_BRAKE)
PMDG_B737_Radio_L_VHF2_RECEIVE#74001 (>K:ROTOR_BRAKE)
PMDG_B737_Radio_L_VHF3_RECEIVE#74101 (>K:ROTOR_BRAKE)
PMDG_B737_Radio_R_ADF1_RECEIVE#86401 (>K:ROTOR_BRAKE)
PMDG_B737_Radio_R_ADF2_RECEIVE#86501 (>K:ROTOR_BRAKE)
PMDG_B737_Radio_R_ALT_NORM#87101 (>K:ROTOR_BRAKE)
PMDG_B737_Radio_R_FLT_RECEIVE#85901 (>K:ROTOR_BRAKE)
PMDG_B737_Radio_R_HF1_RECEIVE#85801 (>K:ROTOR_BRAKE)
PMDG_B737_Radio_R_MASK_BOOM#86901 (>K:ROTOR_BRAKE)
PMDG_B737_Radio_R_MKR_RECEIVE#86601 (>K:ROTOR_BRAKE)
PMDG_B737_Radio_R_NAV1_RECEIVE#86201 (>K:ROTOR_BRAKE)
PMDG_B737_Radio_R_NAV2_RECEIVE#86301 (>K:ROTOR_BRAKE)
PMDG_B737_Radio_R_PA_RECEIVE#86101 (>K:ROTOR_BRAKE)
PMDG_B737_Radio_R_R_T_I_C#86801 (>K:ROTOR_BRAKE)
PMDG_B737_Radio_R_SPKR_RECEIVE#86701 (>K:ROTOR_BRAKE)
PMDG_B737_Radio_R_SVC_RECEIVE#86001 (>K:ROTOR_BRAKE)
PMDG_B737_Radio_R_VHF1_RECEIVE#85501 (>K:ROTOR_BRAKE)
PMDG_B737_Radio_R_VHF2_RECEIVE#85601 (>K:ROTOR_BRAKE)
PMDG_B737_Radio_R_VHF3_RECEIVE#85701 (>K:ROTOR_BRAKE)
PMDG_B737_Select_XPNDR_1_2#79801 (>K:ROTOR_BRAKE)
PMDG_B737_Stab_Trim#83001 (>K:ROTOR_BRAKE)
PMDG_B737_Stab_Trim_Guard#83101 (>K:ROTOR_BRAKE)
PMDG_B737_Svc_Mic#85301 (>K:ROTOR_BRAKE)
PMDG_B737_Svc_Mic_1#73701 (>K:ROTOR_BRAKE)
PMDG_B737_TCAS_MODE_ALT_RPTG_OFF#10 (L:switch_800_73X) - 10 div s0 :1 l0 0 > if{ 80007 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 80008 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737_TCAS_MODE_Knob_Dec#80008 (>K:ROTOR_BRAKE)
PMDG_B737_TCAS_MODE_Knob_Inc#80007 (>K:ROTOR_BRAKE)
PMDG_B737_TCAS_MODE_STBY#0 (L:switch_800_73X) - 10 div s0 :1 l0 0 > if{ 80007 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 80008 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737_TCAS_MODE_TA_ONLY#30 (L:switch_800_73X) - 10 div s0 :1 l0 0 > if{ 80007 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 80008 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737_TCAS_MODE_TA_RA#40 (L:switch_800_73X) - 10 div s0 :1 l0 0 > if{ 80007 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 80008 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737_TCAS_MODE_XPNDR#20 (L:switch_800_73X) - 10 div s0 :1 l0 0 > if{ 80007 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 80008 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737_TCAS_TEST_Button#80101 (>K:ROTOR_BRAKE)
PMDG_B737_Test#82101 (>K:ROTOR_BRAKE)
PMDG_B737_Test_1_2_R#81901 (>K:ROTOR_BRAKE)
PMDG_B737_Vhf_Inner_Frq_Dec#95208 (>K:ROTOR_BRAKE)
PMDG_B737_Vhf_Inner_Frq_Inc#95207 (>K:ROTOR_BRAKE)
PMDG_B737_Vhf_Nav_Both_on_1#0 (L:switch_62_73X,number) - 50 div s0 :1 l0 0 > if{ 6202 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 6201 (>K:ROTOR_BRAKE) l0 ++ s0 g1 } 
PMDG_B737_Vhf_Nav_Both_on_2#100 (L:switch_62_73X,number) - 50 div s0 :1 l0 0 > if{ 6202 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 6201 (>K:ROTOR_BRAKE) l0 ++ s0 g1 } 
PMDG_B737_Vhf_Nav_Normal#50 (L:switch_62_73X,number) - 50 div s0 :1 l0 0 > if{ 6202 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 6201 (>K:ROTOR_BRAKE) l0 ++ s0 g1 } 
PMDG_B737_Vhf_Off#95301 (>K:ROTOR_BRAKE)
PMDG_B737_Vhf_Off_1#92401 (>K:ROTOR_BRAKE)
PMDG_B737_Vhf_Outer_Frq#72301 (>K:ROTOR_BRAKE)
PMDG_B737_Vhf_Outer_Frq_Dec#95108 (>K:ROTOR_BRAKE)
PMDG_B737_Vhf_Outer_Frq_Inc#95107 (>K:ROTOR_BRAKE)
PMDG_B737_Vhf_Test#95001 (>K:ROTOR_BRAKE)
PMDG_B737_Vhf_Test_1#72501 (>K:ROTOR_BRAKE)
PMDG_B737_Vhf1#95401 (>K:ROTOR_BRAKE)
PMDG_B737_Vhf1_Mic#85001 (>K:ROTOR_BRAKE)
PMDG_B737_Vhf1_Mic_1#73401 (>K:ROTOR_BRAKE)
PMDG_B737_Vhf2#95601 (>K:ROTOR_BRAKE)
PMDG_B737_Vhf2_Mic#85101 (>K:ROTOR_BRAKE)
PMDG_B737_Vhf2_Mic_1#73501 (>K:ROTOR_BRAKE)
PMDG_B737_Vhf2_Outer_Frq#83901 (>K:ROTOR_BRAKE)
PMDG_B737_Vhf3_Receive#87401 (>K:ROTOR_BRAKE)
//PMDG/B737-700/Safety
PMDG_B737_Apu_Fire_Warn_Disch_Lock_Switch#97701 (>K:ROTOR_BRAKE)
PMDG_B737_Eng_1_Fire_Warn_Disch_Lock_Switch#97601 (>K:ROTOR_BRAKE)
PMDG_B737_Eng_2_Fire_Warn_Lock_Switch#97801 (>K:ROTOR_BRAKE)
PMDG_B737-7_SAFETY_FASTEN_BELTS_AUTO#(L:switch_104_73X, number) s0 l0 0 == if{ 10401 (>K:ROTOR_BRAKE) } l0 100 == if{ 10402 (>K:ROTOR_BRAKE) }
PMDG_B737-7_SAFETY_FASTEN_BELTS_OFF#(L:switch_104_73X, number) s0 l0 50 == if{ 10402 (>K:ROTOR_BRAKE) } l0 100 == if{ 10402 (>K:ROTOR_BRAKE) 10402 (>K:ROTOR_BRAKE) }
PMDG_B737-7_SAFETY_FASTEN_BELTS_ON#(L:switch_104_73X, number) s0 l0 50 == if{ 10401 (>K:ROTOR_BRAKE) } l0 0 == if{ 10401 (>K:ROTOR_BRAKE) 10401 (>K:ROTOR_BRAKE) }
PMDG_B737_Adf1_Receive#28201 (>K:ROTOR_BRAKE)
PMDG_B737_Adf2_Receive#28301 (>K:ROTOR_BRAKE)
PMDG_B737_Aft_Cargo_Fire_Arm#76501 (>K:ROTOR_BRAKE)
PMDG_B737_Aft_Det_Select_Switch_Dec#76108 (>K:ROTOR_BRAKE)
PMDG_B737_Aft_Det_Select_Switch_Inc#76107 (>K:ROTOR_BRAKE)
PMDG_B737_Alt_Horn_Cutout#18301 (>K:ROTOR_BRAKE)
PMDG_B737_Alt_Norm#27901 (>K:ROTOR_BRAKE)
PMDG_B737_Apu_Fire_Warn_Disch#698101 (>K:ROTOR_BRAKE)
PMDG_B737_Apu_Fire_Warn_Disch_Dec#69808 (>K:ROTOR_BRAKE)
PMDG_B737_Apu_Fire_Warn_Disch_Inc#69807 (>K:ROTOR_BRAKE)
PMDG_B737_Bell_Cutout#70401 (>K:ROTOR_BRAKE)
PMDG_B737_Cargo_Fire_Discharge#76701 (>K:ROTOR_BRAKE)
PMDG_B737_Cargo_Fire_Discharge_Guard#76801 (>K:ROTOR_BRAKE)
PMDG_B737_Cargo_Fire_Test#76901 (>K:ROTOR_BRAKE)
PMDG_B737_Eec_1#26801 (>K:ROTOR_BRAKE)
PMDG_B737_Eec_1_Guard#26701 (>K:ROTOR_BRAKE)
PMDG_B737_Eec_2#27101 (>K:ROTOR_BRAKE)
PMDG_B737_Eec_2_Guard#27001 (>K:ROTOR_BRAKE)
PMDG_B737_Eng_1_Fire_Warn_Disch#697101 (>K:ROTOR_BRAKE)
PMDG_B737_Eng_1_Fire_Warn_Disch_Dec#69708 (>K:ROTOR_BRAKE)
PMDG_B737_Eng_1_Fire_Warn_Disch_Inc#69707 (>K:ROTOR_BRAKE)
PMDG_B737_Eng_1_Ovht_Det_A#0 (L:switch_694_73X,number) - 50 div s0 :1 l0 0 > if{ 69402 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 69401 (>K:ROTOR_BRAKE) l0 ++ s0 g1 } 
PMDG_B737_Eng_1_Ovht_Det_B#100 (L:switch_694_73X,number) - 50 div s0 :1 l0 0 > if{ 69402 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 69401 (>K:ROTOR_BRAKE) l0 ++ s0 g1 } 
PMDG_B737_Eng_1_Ovht_Det_Normal#50 (L:switch_694_73X,number) - 50 div s0 :1 l0 0 > if{ 69402 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 69401 (>K:ROTOR_BRAKE) l0 ++ s0 g1 } 
PMDG_B737_Eng_2_Fire_Warn_Disch_Dec#69908 (>K:ROTOR_BRAKE)
PMDG_B737_Eng_2_Fire_Warn_Disch_Inc#69907 (>K:ROTOR_BRAKE)
PMDG_B737_Eng_2_Ovht_Det_A#0 (L:switch_705_73X,number) - 50 div s0 :1 l0 0 > if{ 70502 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 70501 (>K:ROTOR_BRAKE) l0 ++ s0 g1 } 
PMDG_B737_Eng_2_Ovht_Det_B#100 (L:switch_705_73X,number) - 50 div s0 :1 l0 0 > if{ 70502 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 70501 (>K:ROTOR_BRAKE) l0 ++ s0 g1 } 
PMDG_B737_Eng_2_Ovht_Det_Normal#50 (L:switch_705_73X,number) - 50 div s0 :1 l0 0 > if{ 70502 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 70501 (>K:ROTOR_BRAKE) l0 ++ s0 g1 } 
PMDG_B737_Fasten_Belts_AUTO#50 (L:switch_104_73X,number) - 50 div s0 :1 l0 0 > if{ 10401 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 10402 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737_Fasten_Belts_OFF#0 (L:switch_104_73X,number) - 50 div s0 :1 l0 0 > if{ 10401 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 10402 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737_Fasten_Belts_ON#100 (L:switch_104_73X,number) - 50 div s0 :1 l0 0 > if{ 10401 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 10402 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737_Filter_B#10 (L:switch_278_73X,number) - 10 div s0 :1 l0 0 > if{ 27807 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 27808 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737_Filter_Dec#27808 (>K:ROTOR_BRAKE)
PMDG_B737_Filter_Inc#27807 (>K:ROTOR_BRAKE)
PMDG_B737_Filter_R#20 (L:switch_278_73X,number) - 10 div s0 :1 l0 0 > if{ 27807 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 27808 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737_Filter_Switch_Dec#75408 (>K:ROTOR_BRAKE)
PMDG_B737_Filter_Switch_Inc#75407 (>K:ROTOR_BRAKE)
PMDG_B737_Filter_V#0 (L:switch_278_73X,number) - 10 div s0 :1 l0 0 > if{ 27807 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 27808 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737_Flight_Recorder#29801 (>K:ROTOR_BRAKE)
PMDG_B737_Flight_Recorder_Guard#29901 (>K:ROTOR_BRAKE)
PMDG_B737_Flt_Mic#29601 (>K:ROTOR_BRAKE)
PMDG_B737_Flt_Receive#28801 (>K:ROTOR_BRAKE)
PMDG_B737_Freighter_Lav_Bell_Cut_Out#91501 (>K:ROTOR_BRAKE)
PMDG_B737_Freighter_Lav_Smoke_Test#91301 (>K:ROTOR_BRAKE)
PMDG_B737_Freighter_Smoke_Switch_Guard#91101 (>K:ROTOR_BRAKE)
PMDG_B737_Fwd_Cargo_Fire_Arm#76301 (>K:ROTOR_BRAKE)
PMDG_B737_Fwd_Det_Select_Dec#76008 (>K:ROTOR_BRAKE)
PMDG_B737_Fwd_Det_Select_Inc#76007 (>K:ROTOR_BRAKE)
PMDG_B737_Ground_Call#10601 (>K:ROTOR_BRAKE)
PMDG_B737_Hf1_Mic#29401 (>K:ROTOR_BRAKE)
PMDG_B737_Hf2_Mic#29501 (>K:ROTOR_BRAKE)
PMDG_B737_Main_Det_Select_Switch_Dec#761108 (>K:ROTOR_BRAKE)
PMDG_B737_Main_Det_Select_Switch_Inc#761107 (>K:ROTOR_BRAKE)
PMDG_B737_Mask_Boom#27701 (>K:ROTOR_BRAKE)
PMDG_B737_Mkr_Receive#28401 (>K:ROTOR_BRAKE)
PMDG_B737_Nav1_Receive#28001 (>K:ROTOR_BRAKE)
PMDG_B737_Nav2_Receive#28101 (>K:ROTOR_BRAKE)
PMDG_B737_No_Smoking_AUTO#50 (L:switch_103_73X,number) - 50 div s0 :1 l0 0 > if{ 10301 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 10302 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737_No_Smoking_OFF#0 (L:switch_103_73X,number) - 50 div s0 :1 l0 0 > if{ 10301 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 10302 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737_No_Smoking_ON#100 (L:switch_103_73X,number) - 50 div s0 :1 l0 0 > if{ 10301 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 10302 (>K:ROTOR_BRAKE) l0 ++ s0 g1 }
PMDG_B737_O2_Test_Reset_1#98301 (>K:ROTOR_BRAKE)
PMDG_B737_O2_Test_Reset_2#983101 (>K:ROTOR_BRAKE)
PMDG_B737_O2_Test_Reset_3#983201 (>K:ROTOR_BRAKE)
PMDG_B737_O2_Test_Reset_4#983301 (>K:ROTOR_BRAKE)
PMDG_B737_Ovht_Test_Fault_Inop#0 (L:switch_696_73X,number) - 50 div s0 :1 l0 0 > if{ 69602 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 69601 (>K:ROTOR_BRAKE) l0 ++ s0 g1 } 
PMDG_B737_Ovht_Test_Fire#100 (L:switch_696_73X,number) - 50 div s0 :1 l0 0 > if{ 69602 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 69601 (>K:ROTOR_BRAKE) l0 ++ s0 g1 } 
PMDG_B737_Ovht_Test_Normal_#50 (L:switch_696_73X,number) - 50 div s0 :1 l0 0 > if{ 69602 (>K:ROTOR_BRAKE) l0 -- s0 g1 } l0 0 < if{ 69601 (>K:ROTOR_BRAKE) l0 ++ s0 g1 } 
PMDG_B737_Pa_Receive#29001 (>K:ROTOR_BRAKE)
PMDG_B737_Pass_Oxygen#26401 (>K:ROTOR_BRAKE)
PMDG_B737_Pass_Oxygen_Guard#26501 (>K:ROTOR_BRAKE)
PMDG_B737_R_T_I_C#27601 (>K:ROTOR_BRAKE)
PMDG_B737_Smoke#90901 (>K:ROTOR_BRAKE)
PMDG_B737_Smoke_Bell_Cut_Out#90701 (>K:ROTOR_BRAKE)
PMDG_B737_Smoke_Test#90501 (>K:ROTOR_BRAKE)
PMDG_B737_Spkr_Receive#28501 (>K:ROTOR_BRAKE)
PMDG_B737_Stabtrim_Autopilot_Cutout#71101 (>K:ROTOR_BRAKE)
PMDG_B737_Stabtrim_Autopilot_Cutout_Guard#71201 (>K:ROTOR_BRAKE)
PMDG_B737_Stabtrim_Main_Elec_Cutout#70901 (>K:ROTOR_BRAKE)
PMDG_B737_Stabtrim_Main_Elec_Cutout_Guard#71001 (>K:ROTOR_BRAKE)
PMDG_B737_Svc_Mic#29701 (>K:ROTOR_BRAKE)
PMDG_B737_Svc_Receive#28901 (>K:ROTOR_BRAKE)
PMDG_B737_Vhf1_Mic#29101 (>K:ROTOR_BRAKE)
PMDG_B737_Vhf1_Receive#28601 (>K:ROTOR_BRAKE)
PMDG_B737_Vhf2_Mic#29201 (>K:ROTOR_BRAKE)
PMDG_B737_Vhf2_Receive#28701 (>K:ROTOR_BRAKE)
PMDG_B737_Vhf3_Mic#29301 (>K:ROTOR_BRAKE)
//PMDG/B737-700/Warning System
PMDG_B737_MASTER_CAUTION_YELLOW_SWITCH#34801 (>K:ROTOR_BRAKE)
PMDG_B737_MASTER_WARNING_FIRE_RED_SWITCH#34701 (>K:ROTOR_BRAKE)
//PMDG/B737-700/Warning
PMDG_B737_Annunciator_Panel_R_Release#43704 (>K:ROTOR_BRAKE)
PMDG_B737_Flap_Inhibit#50101 (>K:ROTOR_BRAKE)
PMDG_B737_Flap_Inhibit_Guard#50201 (>K:ROTOR_BRAKE)
PMDG_B737_Gear_Inhibit#50301 (>K:ROTOR_BRAKE)
PMDG_B737_Gear_Inhibit_Guard#50401 (>K:ROTOR_BRAKE)
PMDG_B737_TERR_Inhibit#50501 (>K:ROTOR_BRAKE)
PMDG_B737_TERR_Inhibit_Guard#50601 (>K:ROTOR_BRAKE)
PMDG_B737_Annunciator_Panel_R_Press#43701 (>K:ROTOR_BRAKE)
PMDG_B737_Fire_Warn#43901 (>K:ROTOR_BRAKE)
PMDG_B737_Mach_Airspeed_Warning_Test_1#30101 (>K:ROTOR_BRAKE)
PMDG_B737_Mach_Airspeed_Warning_Test_2#30201 (>K:ROTOR_BRAKE)
PMDG_B737_Master_Caution#43801 (>K:ROTOR_BRAKE)
PMDG_B737_Stall_Warning_Test_1#30301 (>K:ROTOR_BRAKE)
PMDG_B737_Stall_Warning_Test_2#30401 (>K:ROTOR_BRAKE)
//PMDG/DC-6/Anti-Ice
PMDGDC6_AIRFOIL_HEAT_TOGGLE#21601 (>K:ROTOR_BRAKE)
PMDGDC6_CABIN_HEAT_TOGGLE#21401 (>K:ROTOR_BRAKE
PMDGDC6_CARB_1_TOGGLE#21801 (>K:ROTOR_BRAKE)
PMDGDC6_CARB_2_TOGGLE#21901 (>K:ROTOR_BRAKE)
PMDGDC6_CARB_3_TOGGLE#22001 (>K:ROTOR_BRAKE)
PMDGDC6_CARB_4_TOGGLE#22101 (>K:ROTOR_BRAKE)
PMDGDC6_ENG_1_COWL_DEC#12408 (>K:ROTOR_BRAKE)
PMDGDC6_ENG_1_COWL_INC#12407 (>K:ROTOR_BRAKE)
PMDGDC6_ENG_2_COWL_DEC#12508 (>K:ROTOR_BRAKE)
PMDGDC6_ENG_2_COWL_INC#12507 (>K:ROTOR_BRAKE)
PMDGDC6_ENG_3_COWL_DEC#12608 (>K:ROTOR_BRAKE)
PMDGDC6_ENG_3_COWL_INC#12607 (>K:ROTOR_BRAKE)
PMDGDC6_ENG_4_COWL_DEC#12708 (>K:ROTOR_BRAKE)
PMDGDC6_ENG_4_COWL_INC#12707 (>K:ROTOR_BRAKE)
PMDGDC6_PITOT_TOGGLE#09601 (>K:ROTOR_BRAKE)
PMDGDC6_PROP_DEICE_TOGGLE#21701 (>K:ROTOR_BRAKE)
//PMDG/DC-6/Autopilot
PMDGDC6_AP_NEUTRAL#95701 (>K:ROTOR_BRAKE)
PMDGDC6_AP_ALT_HOLD_TOGGLE#43607 (>K:ROTOR_BRAKE)
PMDGDC6_AP_APPR#44508 (>K:ROTOR_BRAKE) (SLEEP:100) 44508 (>K:ROTOR_BRAKE) (SLEEP:100) 44507 (>K:ROTOR_BRAKE) (SLEEP:100) 44507 (>K:ROTOR_BRAKE)
PMDGDC6_AP_GYROPILOT#(L:dc6_445_obj, enum) 1 == if{ 44508 (>K:ROTOR_BRAKE) } 
PMDGDC6_AP_HDG_DOWN#44208 (>K:ROTOR_BRAKE)
PMDGDC6_AP_HDG_UP#44207 (>K:ROTOR_BRAKE)
PMDGDC6_AP_LEVER_TOGGLE#40401 (>K:ROTOR_BRAKE)
PMDGDC6_AP_LOC#44508 (>K:ROTOR_BRAKE) (SLEEP:100) 44508 (>K:ROTOR_BRAKE) (SLEEP:100) 44507 (>K:ROTOR_BRAKE)
PMDGDC6_AP_MODE_DEC#44508 (>K:ROTOR_BRAKE)
PMDGDC6_AP_MODE_INC#44507 (>K:ROTOR_BRAKE)
PMDGDC6_AP_MODE_TOGGLE#(L:dc6_445_dir) s1 (L:dc6_445_obj, enum) 2 == if{ 44508 s1 } (L:dc6_445_obj, enum) 0 == if{ 44507 s1 } (L:dc6_445_obj, enum) 1 == (L:dc6_445_dir) 0 == and if{ 44507 s1 } l1 (>K:ROTOR_BRAKE) l1 (>L:dc6_445_dir)
PMDGDC6_AP_NAV_OFF#(L:dc6_445_obj, enum) 1 == if{ 44508 (>K:ROTOR_BRAKE) } 
PMDGDC6_AP_NAV_ON#(L:dc6_445_obj, enum) 0 == if{ 44507 (>K:ROTOR_BRAKE) } els{ (L:dc6_445_obj, enum) 2 == if{ 44508 (>K:ROTOR_BRAKE) } }
PMDGDC6_AP_PITCH_DOWN#44007 (>K:ROTOR_BRAKE)
PMDGDC6_AP_PITCH_UP#44008 (>K:ROTOR_BRAKE)
PMDGDC6_AP_TOGGLE#43407 (>K:ROTOR_BRAKE)
PMDGDC6_AUTOPILOT_LEVER_TOGGLE#40401 (>K:ROTOR_BRAKE)
PMDGDC6_AUTOPILOT_TOGGLE#43401 (>K:ROTOR_BRAKE)
//PMDG/DC-6/Electrical
PMDGDC6_BATT___GND_POWER___OFF#8201 (>K:ROTOR_BRAKE)
PMDGDC6_Generator_1#8301 (>K:ROTOR_BRAKE)
PMDGDC6_Generator_2#8401 (>K:ROTOR_BRAKE)
PMDGDC6_Generator_3#8501 (>K:ROTOR_BRAKE)
PMDGDC6_Generator_4#8601 (>K:ROTOR_BRAKE)
PMDGDC6_Inverter_1#6301 (>K:ROTOR_BRAKE)
PMDGDC6_Plane_batt_Ground#7801 (>K:ROTOR_BRAKE)
//PMDG/DC-6/Engines
PMDGDC6_MIXTURE_1#OFF - onPress: 40008 (>K:ROTOR_BRAKE) onRelease: 40007 (>K:ROTOR_BRAKE) RICH - onPress: 40007 (>K:ROTOR_BRAKE) onRelease 40008 (>K:ROTOR_BRAKE)
PMDGDC6_MIXTURE_2#OFF - onPress: 40108 (>K:ROTOR_BRAKE) onRelease: 40107 (>K:ROTOR_BRAKE) RICH - onPress: 40107 (>K:ROTOR_BRAKE) onRelease 40108 (>K:ROTOR_BRAKE)
PMDGDC6_MIXTURE_3#OFF - onPress: 40208 (>K:ROTOR_BRAKE) onRelease: 40207 (>K:ROTOR_BRAKE) RICH - onPress: 40207 (>K:ROTOR_BRAKE) onRelease 40208 (>K:ROTOR_BRAKE)
PMDGDC6_MIXTURE_4#OFF - onPress: 40308 (>K:ROTOR_BRAKE) onRelease: 40307 (>K:ROTOR_BRAKE) RICH - onPress: 40307 (>K:ROTOR_BRAKE) onRelease 40308 (>K:ROTOR_BRAKE)
PMDGDC6_WATER_INJECTION_1#onPress: 2301 (>K:ROTOR_BRAKE) onRelease: 2301 (>:ROTOR_BRAKE)
PMDGDC6_WATER_INJECTION_2#onPress: 2401 (>K:ROTOR_BRAKE) onRelease: 2401 (>:ROTOR_BRAKE)
PMDGDC6_WATER_INJECTION_3#onPress: 2501 (>K:ROTOR_BRAKE) onRelease: 2501 (>:ROTOR_BRAKE)
PMDGDC6_WATER_INJECTION_4#onPress: 2601 (>K:ROTOR_BRAKE) onRelease: 2601 (>:ROTOR_BRAKE)
PMDGDC6_XFEED_LEFT#OFF - onPress: 53907 (>K:ROTOR_BRAKE) onRelease: 53908 (>K:ROTOR_BRAKE) ALL - onPress: 53908 (>K:ROTOR_BRAKE) onRelease: 53907 (>K:ROTOR_BRAKE) 
PMDGDC6_XFEED_RIGHT#OFF - onPress: 54007 (>K:ROTOR_BRAKE) onRelease: 54008 (>K:ROTOR_BRAKE) ALL - onPress: 54008 (>K:ROTOR_BRAKE) onRelease: 54007 (>K:ROTOR_BRAKE)
PMDGDC6_SUPERCHARGER_1_TOGGLE#128101 (>K:ROTOR_BRAKE)
PMDGDC6_SUPERCHARGER_2_TOGGLE#128201 (>K:ROTOR_BRAKE)
PMDGDC6_SUPERCHARGER_3_TOGGLE#128301 (>K:ROTOR_BRAKE)
PMDGDC6_SUPERCHARGER_4_TOGGLE#128401 (>K:ROTOR_BRAKE)
//PMDG/DC-6/Fuel
PMDGDC6_FUEL_TANK_SELECTOR_1#OFF onPress: 52008 (>K:ROTOR_BRAKE) onRelease: 52007 (>K:ROTOR_BRAKE) MAIN onPress: 52007 (>K:ROTOR_BRAKE) onRelease: 52008 (>K:ROTOR_BRAKE)
PMDGDC6_FUEL_TANK_SELECTOR_2#OFF - onPress: 52108 (>K:ROTOR_BRAKE) onRelease: 52107 (>K:ROTOR_BRAKE) MAIN - onPress: 52107 (>K:ROTOR_BRAKE) onRelease: 52108 (>K:ROTOR_BRAKE)
PMDGDC6_FUEL_TANK_SELECTOR_3#OFF - onPress: 52208 (>K:ROTOR_BRAKE) onRelease: 52207 (>K:ROTOR_BRAKE) MAIN - onPress: 52207 (>K:ROTOR_BRAKE) onRelease: 52208 (>K:ROTOR_BRAKE)
PMDGDC6_FUEL_TANK_SELECTOR_4#OFF - onPress: 52308 (>K:ROTOR_BRAKE) onRelease: 52307 (>K:ROTOR_BRAKE) MAIN - onPress: 52307 (>K:ROTOR_BRAKE) onRelease: 52308 (>K:ROTOR_BRAKE)
PMDGDC-_Main_Fuel_Boost_1_#(L:dc6_069, number) 0 (>L:dc6_069_obj, number) to set low (L:dc6_069, number) 1 (>L:dc6_069_obj, number) to set off (L:dc6_069, number) 2 (>L:dc6_069_obj, number) to set high
PMDGDC6_ALT_FUEL_BOOST_1_TOGGLE#(L:dc6_073_dir) s1 (L:dc6_073_obj, enum) 2 == if{ 07308 s1 } (L:dc6_073_obj, enum) 0 == if{ 07307 s1 } (L:dc6_073_obj, enum) 1 == (L:dc6_073_dir) 0 == and if{ 07307 s1 } l1 (>K:ROTOR_BRAKE) l1 (>L:dc6_073_dir)
PMDGDC6_ALT_FUEL_BOOST_2_TOGGLE#(L:dc6_074_dir) s1 (L:dc6_074_obj, enum) 2 == if{ 07408 s1 } (L:dc6_074_obj, enum) 0 == if{ 07407 s1 } (L:dc6_074_obj, enum) 1 == (L:dc6_074_dir) 0 == and if{ 07407 s1 } l1 (>K:ROTOR_BRAKE) l1 (>L:dc6_074_dir)
PMDGDC6_ALT_FUEL_BOOST_3_TOGGLE#(L:dc6_075_dir) s1 (L:dc6_075_obj, enum) 2 == if{ 07508 s1 } (L:dc6_075_obj, enum) 0 == if{ 07507 s1 } (L:dc6_075_obj, enum) 1 == (L:dc6_075_dir) 0 == and if{ 07507 s1 } l1 (>K:ROTOR_BRAKE) l1 (>L:dc6_075_dir)
PMDGDC6_ALT_FUEL_BOOST_4_TOGGLE#(L:dc6_076_dir) s1 (L:dc6_076_obj, enum) 2 == if{ 07608 s1 } (L:dc6_076_obj, enum) 0 == if{ 07607 s1 } (L:dc6_076_obj, enum) 1 == (L:dc6_076_dir) 0 == and if{ 07607 s1 } l1 (>K:ROTOR_BRAKE) l1 (>L:dc6_076_dir)
PMDGDC6_Main_Fuel_Booster_Pump_High__1#6907 (>K:ROTOR_BRAKE) 6908 (>K:ROTOR_BRAKE)
PMDGDC6_Main_Fuel_Booster_Pump_High__2#7007 (>K:ROTOR_BRAKE) 7008 (>K:ROTOR_BRAKE)
PMDGDC6_Main_Fuel_Booster_Pump_High__3#7107 (>K:ROTOR_BRAKE) 7108 (>K:ROTOR_BRAKE)
PMDGDC6_Main_Fuel_Booster_Pump_High__4#7207 (>K:ROTOR_BRAKE) 7208 (>K:ROTOR_BRAKE)
PMDGDC6_Main_Fuel_Booster_Pump_Low__1#6901 (>K:ROTOR_BRAKE) 6902 (>K:ROTOR_BRAKE)
PMDGDC6_Main_Fuel_Booster_Pump_Low__2#7001 (>K:ROTOR_BRAKE) 7002 (>K:ROTOR_BRAKE)
PMDGDC6_Main_Fuel_Booster_Pump_Low__3#7101 (>K:ROTOR_BRAKE) 7102 (>K:ROTOR_BRAKE) 
PMDGDC6_Main_Fuel_Booster_Pump_Low__4#7201 (>K:ROTOR_BRAKE) 7202 (>K:ROTOR_BRAKE)
//PMDG/DC-6/Gear
PMDGDC6_GEAR_DOWN#40507 (>K:ROTOR_BRAKE)
PMDGDC6_GEAR_UP#40508 (>K:ROTOR_BRAKE)
PMDGDC6_GUST_LOCK_OFF#0 (>L:dc6_398_obj, bool)
PMDGDC6_GUST_LOCK_ON#1 (>L:dc6_398_obj, bool)
//PMDG/DC-6/Lights
PMDGDC6_LANDING_LIGHTS#onPress: 12101 (>K:ROTOR_BRAKE) onRelease: 12101 (>K:ROTOR_BRAKE)
PMDGDC6_LANDING_LIGHTS_POSITION#Extend - onPress: 12208 (>K:ROTOR_BRAKE) onRelease: 12207 (>K:ROTOR_BRAKE) Retract - onPress: 12207 (>K:ROTOR_BRAKE) onRelease: 12208 (>K:ROTOR_BRAKE)
PMDGDC6_PositionLights#Steady - onPress: 4008 (>K:ROTOR_BRAKE) onRelease: 4007 (>K:ROTOR_BRAKE) Flashing - onPress: 4007 (>K:ROTOR_BRAKE) onRelease: 04008 (>K:ROTOR_BRAKE)
PMDGDC6_Beacon#(L:dc6_041_obj, number) ! (>L:dc6_041_obj, number)
PMDGDC6_Emer_LTS_No_smoking#0 (L:dc6_038_obj, number) ! (>L:dc6_038_obj, number) 1
PMDGDC6_Entrance_Lights#0 (L:dc6_036_obj, number) ! (>L:dc6_036_obj, number) 1
PMDGDC6_Main_J_box_Flood_light#0 (L:dc6_037_obj, number) ! (>L:dc6_037_obj, number) 1
PMDGDC6_Position_Lights_Steady#(L:dc6_040_obj, number) ! (>L:dc6_040_obj, number) 
//PMDG/DC-6/Miscellaneous
PMDGDC6_TABLET_ABORT#>0 (>L:AfeBeforeStart, number) 0 (>L:AfeAfterStart, bool) 0 (>L:AfeBeforeTakeoff, bool) 0 (>L:AfeTakeoffDry, bool) 0 (>L:AfeTakeoffWet, bool) 0 (>L:AfeCruise, bool) 0 (>L:AfeDescent, bool) 0 (>L:AfeInRange, bool) 0 (>L:AfeBeforeLanding, bool) 0 (>L:AfeAfterLanding, bool) 0 (>L:AfeParking, bool) 29 (>K:ROTOR_BRAKE)
PMDGDC6_TABLET_AFTER_LANDING#0 (>L:AfeBeforeStart, number) 0 (>L:AfeAfterStart, bool) 0 (>L:AfeBeforeTakeoff, bool) 0 (>L:AfeTakeoffDry, bool) 0 (>L:AfeTakeoffWet, bool) 0 (>L:AfeCruise, bool) 0 (>L:AfeDescent, bool) 0 (>L:AfeInRange, bool) 0 (>L:AfeBeforeLanding, bool) 0 (>L:AfeParking, bool) (L:AfeAfterLanding, bool) ! (>L:AfeAfterLanding, bool) (L:AfeAfterLanding, bool) if{ 25 (>K:ROTOR_BRAKE) } els{ 26 (>K:ROTOR_BRAKE) }
PMDGDC6_TABLET_AFTER_START#0 (>L:AfeBeforeStart, number) 0 (>L:AfeBeforeTakeoff, bool) 0 (>L:AfeTakeoffDry, bool) 0 (>L:AfeTakeoffWet, bool) 0 (>L:AfeCruise, bool) 0 (>L:AfeDescent, bool) 0 (>L:AfeInRange, bool) 0 (>L:AfeBeforeLanding, bool) 0 (>L:AfeAfterLanding, bool) 0 (>L:AfeParking, bool) (L:AfeAfterStart, bool) ! (>L:AfeAfterStart, bool) (L:AfeAfterStart, bool) if{ 9 (>K:ROTOR_BRAKE) } els{ 10 (>K:ROTOR_BRAKE) }
PMDGDC6_TABLET_BEFORE_LANDING#0 (>L:AfeBeforeStart, number) 0 (>L:AfeAfterStart, bool) 0 (>L:AfeBeforeTakeoff, bool) 0 (>L:AfeTakeoffDry, bool) 0 (>L:AfeTakeoffWet, bool) 0 (>L:AfeCruise, bool) 0 (>L:AfeDescent, bool) 0 (>L:AfeInRange, bool) 0 (>L:AfeAfterLanding, bool) 0 (>L:AfeParking, bool) (L:AfeBeforeLanding, bool) ! (>L:AfeBeforeLanding, bool) (L:AfeBeforeLanding, bool) if{ 23 (>K:ROTOR_BRAKE) } els{ 24 (>K:ROTOR_BRAKE) }
PMDGDC6_TABLET_BEFORE_START#0 (>L:AfeAfterStart, bool) 0 (>L:AfeBeforeTakeoff, bool) 0 (>L:AfeTakeoffDry, bool) 0 (>L:AfeTakeoffWet, bool) 0 (>L:AfeCruise, bool) 0 (>L:AfeDescent, bool) 0 (>L:AfeInRange, bool) 0 (>L:AfeBeforeLanding, bool) 0 (>L:AfeAfterLanding, bool) 0 (>L:AfeParking, bool) (L:AfeBeforeStart, bool) ! (>L:AfeBeforeStart, bool) (L:AfeBeforeStart, bool) if{ 7 (>K:ROTOR_BRAKE) } els{ 8 (>K:ROTOR_BRAKE) }
PMDGDC6_TABLET_BEFORE_TAKEOFF#0 (>L:AfeBeforeStart, number) 0 (>L:AfeAfterStart, bool) 0 (>L:AfeTakeoffDry, bool) 0 (>L:AfeTakeoffWet, bool) 0 (>L:AfeCruise, bool) 0 (>L:AfeDescent, bool) 0 (>L:AfeInRange, bool) 0 (>L:AfeBeforeLanding, bool) 0 (>L:AfeAfterLanding, bool) 0 (>L:AfeParking, bool) (L:AfeBeforeTakeoff, bool) ! (>L:AfeBeforeTakeoff, bool) (L:AfeBeforeTakeoff, bool) if{ 11 (>K:ROTOR_BRAKE) } els{ 12 (>K:ROTOR_BRAKE) }
PMDGDC6_TABLET_CRUISE#0 (>L:AfeBeforeStart, number) 0 (>L:AfeAfterStart, bool) 0 (>L:AfeBeforeTakeoff, bool) 0 (>L:AfeTakeoffDry, bool) 0 (>L:AfeTakeoffWet, bool) 0 (>L:AfeDescent, bool) 0 (>L:AfeInRange, bool) 0 (>L:AfeBeforeLanding, bool) 0 (>L:AfeAfterLanding, bool) 0 (>L:AfeParking, bool) (L:AfeCruise, bool) ! (>L:AfeCruise, bool) (L:AfeCruise, bool) if{ 17 (>K:ROTOR_BRAKE) } els{ 18 (>K:ROTOR_BRAKE) }
PMDGDC6_TABLET_DESCENT#0 (>L:AfeBeforeStart, number) 0 (>L:AfeAfterStart, bool) 0 (>L:AfeBeforeTakeoff, bool) 0 (>L:AfeTakeoffDry, bool) 0 (>L:AfeTakeoffWet, bool) 0 (>L:AfeCruise, bool) 0 (>L:AfeInRange, bool) 0 (>L:AfeBeforeLanding, bool) 0 (>L:AfeAfterLanding, bool) 0 (>L:AfeParking, bool) (L:AfeDescent, bool) ! (>L:AfeDescent, bool) (L:AfeDescent, bool) if{ 19 (>K:ROTOR_BRAKE) } els{ 20 (>K:ROTOR_BRAKE) }
PMDGDC6_TABLET_IN_RANGE#0 (>L:AfeBeforeStart, number) 0 (>L:AfeAfterStart, bool) 0 (>L:AfeBeforeTakeoff, bool) 0 (>L:AfeTakeoffDry, bool) 0 (>L:AfeTakeoffWet, bool) 0 (>L:AfeCruise, bool) 0 (>L:AfeDescent, bool) 0 (>L:AfeBeforeLanding, bool) 0 (>L:AfeAfterLanding, bool) 0 (>L:AfeParking, bool) (L:AfeInRange, bool) ! (>L:AfeInRange, bool) (L:AfeInRange, bool) if{ 21 (>K:ROTOR_BRAKE) } els{ 22 (>K:ROTOR_BRAKE) }
PMDGDC6_TABLET_PARKING#0 (>L:AfeBeforeStart, number) 0 (>L:AfeAfterStart, bool) 0 (>L:AfeBeforeTakeoff, bool) 0 (>L:AfeTakeoffDry, bool) 0 (>L:AfeTakeoffWet, bool) 0 (>L:AfeCruise, bool) 0 (>L:AfeDescent, bool) 0 (>L:AfeInRange, bool) 0 (>L:AfeBeforeLanding, bool) 0 (>L:AfeAfterLanding, bool) (L:AfeParking, bool) ! (>L:AfeParking, bool) (L:AfeParking, bool) if{ 27 (>K:ROTOR_BRAKE) } els{ 28 (>K:ROTOR_BRAKE) }
PMDGDC6_TABLET_TAKEOFF_DRY#0 (>L:AfeBeforeStart, number) 0 (>L:AfeAfterStart, bool) 0 (>L:AfeBeforeTakeoff, bool) 0 (>L:AfeTakeoffWet, bool) 0 (>L:AfeCruise, bool) 0 (>L:AfeDescent, bool) 0 (>L:AfeInRange, bool) 0 (>L:AfeBeforeLanding, bool) 0 (>L:AfeAfterLanding, bool) 0 (>L:AfeParking, bool) (L:AfeTakeoffDry, bool) ! (>L:AfeTakeoffDry, bool) (L:AfeTakeoffDry, bool) if{ 13 (>K:ROTOR_BRAKE) } els{ 14 (>K:ROTOR_BRAKE) }
PMDGDC6_TABLET_TAKEOFF_WET#0 (>L:AfeBeforeStart, number) 0 (>L:AfeAfterStart, bool) 0 (>L:AfeBeforeTakeoff, bool) 0 (>L:AfeTakeoffDry, bool) 0 (>L:AfeCruise, bool) 0 (>L:AfeDescent, bool) 0 (>L:AfeInRange, bool) 0 (>L:AfeBeforeLanding, bool) 0 (>L:AfeAfterLanding, bool) 0 (>L:AfeParking, bool) (L:AfeTakeoffWet, bool) ! (>L:AfeTakeoffWet, bool) (L:AfeTakeoffWet, bool) if{ 15 (>K:ROTOR_BRAKE) } els{ 16 (>K:ROTOR_BRAKE) }
//PMDG/DC-6/Safety
PMDGDC6_Seat_Belt#0 (L:dc6_039_obj, number) ! (>L:dc6_039_obj, number) 1
//PMS50/APGA/Autopilot
Autopilot_ALT_mode#(>H:APGA_ALT)
Autopilot_ARM#(>H:APGA_ARM)
Autopilot_Approach_mode#(>H:APGA_APR)
Autopilot_Back_course_mode#(>H:APGA_REV)
Autopilot_CGA_Mode#(>H:APGA_CGA)
Autopilot_CLVL_mode#(>H:APGA_CLVL)
Autopilot_DOWN#(>H:APGA_DOWN)
Autopilot_FLC_mode#(>H:APGA_FLC)
Autopilot_Flight_director#(>H:APGA_FD)
Autopilot_HDG#(>H:APGA_HDG)
Autopilot_LVL_mode#(>H:APGA_LVL)
Autopilot_NAV#(>H:APGA_NAV)
Autopilot_Selected_VS_large_dec#(>H:APGA_SEL_VS_LARGE_DEC)
Autopilot_Selected_VS_large_inc#(>H:APGA_SEL_VS_LARGE_INC)
Autopilot_Selected_VS_small_dec#(>H:APGA_SEL_VS_SMALL_DEC)
Autopilot_Selected_VS_small_inc#(>H:APGA_SEL_VS_SMALL_INC)
Autopilot_Selected_altitude_large_dec#(>H:APGA_SEL_ALT_LARGE_DEC)
Autopilot_Selected_altitude_large_inc#(>H:APGA_SEL_ALT_LARGE_INC)
Autopilot_Selected_altitude_small_dec#(>H:APGA_SEL_ALT_SMALL_DEC)
Autopilot_Selected_altitude_small_inc#(>H:APGA_SEL_ALT_SMALL_INC)
Autopilot_Selected_altitude_very_large_dec#(>H:APGA_SEL_ALT_VERY_LARGE_DEC)
Autopilot_Selected_altitude_very_large_inc#(>H:APGA_SEL_ALT_VERY_LARGE_INC)
Autopilot_UP#(>H:APGA_UP)
Autopilot_VS_mode#(>H:APGA_VS)
Autopilot_Yaw_damper#(>H:APGA_YD)
Autopilot_master#(>H:APGA_AP)
//PMS50/GTN750/Navigation
GTN750_PANEL_DirectToPush#1 (>L:GTN750_PANEL_DirectToPush)
GTN750_PANEL_HomePush#1 (>L:GTN750_PANEL_HomePush)
GTN750_PANEL_HomePushLong#1 (>L:GTN750_PANEL_HomePushLong)
GTN750_PANEL_KnobLargeDec#1 (>L:GTN750_PANEL_KnobLargeDec)
GTN750_PANEL_KnobLargeInc#1 (>L:GTN750_PANEL_KnobLargeInc)
GTN750_PANEL_KnobPush#1 (>L:GTN750_PANEL_KnobPush)
GTN750_PANEL_KnobSmallDec#1 (>L:GTN750_PANEL_KnobSmallDec)
GTN750_PANEL_KnobSmallInc#1 (>L:GTN750_PANEL_KnobSmallInc)
GTN750_PANEL_VolDec#1 (>L:GTN750_PANEL_VolDec)
GTN750_PANEL_VolInc#1 (>L:GTN750_PANEL_VolInc)
GTN750_PANEL_VolPush#1 (>L:GTN750_PANEL_VolPush)
//SC Designs/F16C/Air Conditioning and Pressurization
F16C_RIGHT_AIRCOND_TEMP_0#0 (>L:AIRCOND)
F16C_RIGHT_AIRCOND_TEMP_1#1 (>L:AIRCOND)
F16C_RIGHT_AIRCOND_TEMP_2#2 (>L:AIRCOND)
F16C_RIGHT_AIRCOND_TEMP_3#3 (>L:AIRCOND)
F16C_RIGHT_AIRCOND_TEMP_4#4 (>L:AIRCOND)
F16C_RIGHT_AIRCOND_TEMP_5#5 (>L:AIRCOND)
F16C_RIGHT_AIRCOND_TEMP_6#6 (>L:AIRCOND)
F16C_RIGHT_AIRCOND_TEMP_DEC#(L:AIRCOND) -- 0 max (>L:AIRCOND)
F16C_RIGHT_AIRCOND_TEMP_INC#(L:AIRCOND) ++ 6 min (>L:AIRCOND)
F16C_RIGHT_AIR_SOURCE_DEC#(L:Air_Source) -- 0 max (>L:Air_Source)
F16C_RIGHT_AIR_SOURCE_DUMP#2 (>L:Air_Source)
F16C_RIGHT_AIR_SOURCE_INC#(L:Air_Source) ++ 3 min (>L:Air_Source)
F16C_RIGHT_AIR_SOURCE_NORM#1 (>L:Air_Source)
F16C_RIGHT_AIR_SOURCE_OFF#0 (>L:Air_Source)
F16C_RIGHT_AIR_SOURCE_RAM#3 (>L:Air_Source)
//SC Designs/F16C/Anti-Ice
F16C_RIGHT_PITOT_HEAT_TOGGLE#(>K:PITOT_HEAT_TOGGLE)
F16C_RIGHT_WINDSHIELD_DEICE_LOWER#2 (>L:XMLVAR_DeiceWindshield_1) (A:WINDSHIELD DEICE SWITCH,bool) if{ (>K:WINDSHIELD_DEICE_TOGGLE)
F16C_RIGHT_WINDSHIELD_DEICE_NORM#1 (>L:XMLVAR_DeiceWindshield_1) (A:WINDSHIELD DEICE SWITCH,bool) if{ (>K:WINDSHIELD_DEICE_TOGGLE)
F16C_RIGHT_WINDSHIELD_DEICE_UPPER#0 (>L:XMLVAR_DeiceWindshield_1) (A:WINDSHIELD DEICE SWITCH,bool) ! if{ (>K:WINDSHIELD_DEICE_TOGGLE)
//SC Designs/F16C/Autopilot
F16C_FRONT_AP_BARO_DEC#(>K:KOHLSMAN_DEC) (>H:AP_BARO_Down)
F16C_FRONT_AP_BARO_INC#(>K:KOHLSMAN_INC) (>H:AP_BARO_Up)
F16C_FRONT_AP_BARO_PUSH#1 (>K:BAROMETRIC)
F16C_FRONT_AP_CRS_DEC#(A:NAV OBS:1, degree) -- dnor (>K:VOR1_SET)
F16C_FRONT_AP_CRS_INC#(A:NAV OBS:1, degree) ++ dnor (>K:VOR1_SET)
F16C_FRONT_AP_CRS_SYNC_PUSH#(A:HEADING INDICATOR, degrees) (>K:VOR1_SET)
F16C_FRONT_AP_HDG_DEC#(A:AUTOPILOT HEADING LOCK DIR:1, degrees) -- dnor (>K:2:HEADING_BUG_SET)
F16C_FRONT_AP_HDG_INC#(A:AUTOPILOT HEADING LOCK DIR:1, degrees) ++ dnor (>K:2:HEADING_BUG_SET)
F16C_FRONT_AP_HDG_SYNC_PUSH#(A:HEADING INDICATOR, degrees) (>K:HEADING_BUG_SET)
F16C_FRONT_PITCH_ALT_HOLD#0 (>L:PITCH_ALT_HOLD) (A:AUTOPILOT MASTER,bool) ! If{ (>K:AUTOPILOT_ON) } (A:AUTOPILOT ALTITUDE LOCK,bool) ! If{ (>K:AP_ALT_HOLD) }
F16C_FRONT_PITCH_AP_OFF#1 (>L:PITCH_ALT_HOLD) (A:AUTOPILOT MASTER,bool) if{ (>K:AUTOPILOT_OFF) } 0 (>K:AP_ALT_VAR_SET_ENGLISH) (>K:AP_ALT_HOLD_OFF) (A:AUTOPILOT PITCH HOLD,bool) if{ (>K:AP_PITCH_LEVELER_OFF) }
F16C_FRONT_PITCH_ATT_HOLD#2 (>L:PITCH_ALT_HOLD) (A:AUTOPILOT MASTER,bool) ! If{ (>K:AUTOPILOT_ON) } (A:AUTOPILOT PITCH HOLD,bool) ! If{ (>K:AP_PITCH_LEVELER_ON) }
F16C_FRONT_ROLL_HDG_SEL#0 (>L:MODE_HEADING)
F16C_FRONT_ROLL_STRG_SEL#1 (>L:MODE_HEADING)
F16C_LEFT_AP_ALT_HOLD_OFF#(>K:AP_ALT_HOLD_OFF)
F16C_LEFT_AP_ALT_HOLD_ON#(>K:AP_ALT_HOLD_ON)
F16C_LEFT_AP_ALT_HOLD_TOGGLE#(>K:AP_ALT_HOLD)
F16C_LEFT_AP_APP_HOLD_OFF#(A:AUTOPILOT APPROACH HOLD, Bool) if{ (>K:AP_APR_HOLD) }
F16C_LEFT_AP_APP_HOLD_ON#(A:AUTOPILOT APPROACH HOLD, Bool) ! if{ (>K:AP_APR_HOLD) }
F16C_LEFT_AP_APP_HOLD_TOGGLE#(>K:AP_APR_HOLD)
F16C_LEFT_AP_BC_HOLD_OFF#(A:AUTOPILOT BACKCOURSE HOLD, Bool) If{ (>K:AP_BC_HOLD) }
F16C_LEFT_AP_BC_HOLD_ON#(A:AUTOPILOT BACKCOURSE HOLD, Bool) ! If{ (>K:AP_BC_HOLD) }
F16C_LEFT_AP_BC_HOLD_TOGGLE#(>K:AP_BC_HOLD)
F16C_LEFT_AP_HDG_HOLD_OFF#(>K:AP_HDG_HOLD_OFF)
F16C_LEFT_AP_HDG_HOLD_ON#(>K:AP_HDG_HOLD_ON)
F16C_LEFT_AP_HDG_HOLD_TOGGLE#(>K:AP_PANEL_HEADING_HOLD)
F16C_LEFT_AP_IAS_HOLD_OFF#(A:AUTOPILOT THROTTLE ARM,bool) If{ (>K:AUTO_THROTTLE_ARM) 0 (>L:SIMVAR,bool) }
F16C_LEFT_AP_IAS_HOLD_ON#(A:AUTOPILOT THROTTLE ARM,bool) ! If{ (>K:AUTO_THROTTLE_ARM) 1 (>L:SIMVAR,bool) }
F16C_LEFT_AP_IAS_HOLD_TOGGLE#(>K:AUTO_THROTTLE_ARM) (L:SIMVAR,bool) ! (>L:SIMVAR,bool)
F16C_LEFT_AP_MASTER_OFF#(A:AUTOPILOT MASTER, Bool) if{ (>K:AP_MASTER) (>H:Generic_Autopilot_Manual_Off) }
F16C_LEFT_AP_MASTER_ON#(A:AUTOPILOT MASTER, Bool) ! if{ (>K:AP_MASTER) }
F16C_LEFT_AP_MASTER_TOGGLE#(A:AUTOPILOT DISENGAGED, Bool) ! if{ (>K:AP_MASTER) (A:AUTOPILOT MASTER, Bool) ! if{ (>H:Generic_Autopilot_Manual_Off) } }
F16C_MFD_1_BUTTON_10_GpsNav1#(>K:TOGGLE_GPS_DRIVES_NAV1)
F16C_MFD_1_BUTTON_2_HdgHold#(>K:AP_PANEL_HEADING_HOLD)
F16C_MFD_1_BUTTON_9_Nav1Hold#(>K:AP_NAV1_HOLD)
F16C_MFD_2_BUTTON_10_FD#1 (>K:TOGGLE_FLIGHT_DIRECTOR)
F16C_MFD_2_BUTTON_1_ApSpdMod#(L:MODE_SPEED,bool) ! (>L:MODE_SPEED,bool)
F16C_MFD_2_BUTTON_2_ApAltMod#(L:MODE_ALTITUDE,bool) ! (>L:MODE_ALTITUDE,bool)
F16C_MFD_2_BUTTON_3_ApAltDec#(>K:AP_ALT_VAR_DEC)
F16C_MFD_2_BUTTON_4_ApAltHld#(>K:AP_ALT_HOLD)
F16C_MFD_2_BUTTON_5_ApAltInc#(>K:AP_ALT_VAR_INC)
F16C_MFD_2_BUTTON_6_ApLocHld#(>K:AP_LOC_HOLD) 
F16C_MFD_2_BUTTON_7_ApAprHld#(>K:AP_APR_HOLD)
F16C_MFD_2_BUTTON_8_ApBcHld#(>K:AP_BC_HOLD) 
F16C_MFD_2_BUTTON_9_ApTrkFpa#(L:XMLVAR_TRK_FPA_MODE_ACTIVE,bool) ! (>L:XMLVAR_TRK_FPA_MODE_ACTIVE,bool)
F16C_MFD_2_BUTTON_L1_ApSpdInc#(>K:AP_SPD_VAR_INC)
F16C_MFD_2_BUTTON_L2_ApSpdHld#(>K:AP_AIRSPEED_HOLD)
F16C_MFD_2_BUTTON_L3_ApSpdDec#(>K:AP_SPD_VAR_DEC)
F16C_MFD_2_BUTTON_L4_ApThrArm#(>K:AUTO_THROTTLE_ARM)
F16C_MFD_2_BUTTON_L5_SpdMach#(L:XMLVAR_AirSpeedIsInMach) ! (>L:XMLVAR_AirSpeedIsInMach)
F16C_MFD_2_BUTTON_R1_ApVsInc#(>K:AP_VS_VAR_INC)
F16C_MFD_2_BUTTON_R2_ApVsHld#(>K:AP_PANEL_VS_HOLD)
F16C_MFD_2_BUTTON_R3_ApVsDec#(>K:AP_VS_VAR_DEC)
F16C_MFD_2_BUTTON_R4_ApFlc#(>K:FLIGHT_LEVEL_CHANGE)
F16C_MFD_2_BUTTON_R5_Gcas#(L:GCAS) ! (>L:GCAS)
//SC Designs/F16C/Avionics
F16C_LEFT_CNI_MODE_AB#0 (>L:CNI_MODE)
F16C_LEFT_CNI_MODE_BACKUP#1 (>L:CNI_MODE)
F16C_LEFT_IFF_SELECTOR_DEC#(L:IFF_Selector) -- 0 max (>L:IFF_Selector)
F16C_LEFT_IFF_SELECTOR_EMER#4 (>L:IFF_Selector)
F16C_LEFT_IFF_SELECTOR_INC#(L:IFF_Selector) ++ 4 min (>L:IFF_Selector)
F16C_LEFT_IFF_SELECTOR_LOW#2 (>L:IFF_Selector)
F16C_LEFT_IFF_SELECTOR_NORM#3 (>L:IFF_Selector)
F16C_LEFT_IFF_SELECTOR_OFF#0 (>L:IFF_Selector)
F16C_LEFT_IFF_SELECTOR_STBY#1 (>L:IFF_Selector)
F16C_MFD_1_BUTTON_1_HdgMode#(L:MODE_HEADING,bool) ! (>L:MODE_HEADING,bool)
F16C_MFD_1_BUTTON_3_CurHdgSet#(A:HEADING INDICATOR, degrees) (>K:HEADING_BUG_SET)
F16C_MFD_1_BUTTON_4_HdgVOR1#(A:HEADING INDICATOR, degrees) (>K:VOR1_SET)
F16C_MFD_1_BUTTON_5_YD#(>K:YAW_DAMPER_TOGGLE)
F16C_MFD_1_BUTTON_6_TerronND#(L:BTN_TERRONND_ACTIVE,bool) ! (>L:BTN_TERRONND_ACTIVE,bool)
F16C_MFD_1_BUTTON_7_WX#(L:BTN_WX_ACTIVE,bool) ! (>L:BTN_WX_ACTIVE,bool)
F16C_MFD_1_BUTTON_8_VORD#(>H:A320_Neo_MFD_BTN_VORD) (>H:A320_Neo_PFD_BTN_VORD) and
F16C_MFD_1_BUTTON_L1_MinsInc#(>H:B747_8_PFD_Mins_INC) (>H:B787_10_HUD_Mins_INC)
F16C_MFD_1_BUTTON_L2_MinsDec#(>H:B747_8_PFD_Mins_DEC) (>H:B787_10_HUD_Mins_DEC)
F16C_MFD_1_BUTTON_L3_NavaidOff#0 (>L:XMLVAR_NAV_AID_SWITCH_L1_State)
F16C_MFD_1_BUTTON_L4_RDF1#1 (>L:XMLVAR_NAV_AID_SWITCH_L1_State)
F16C_MFD_1_BUTTON_L5_VOR1#2 (>L:XMLVAR_NAV_AID_SWITCH_L1_State)
F16C_MFD_1_BUTTON_R1_BaroMinSel#(L:XMLVAR_Mins_Selector_Baro) ! (>L:XMLVAR_Mins_Selector_Baro)
F16C_MFD_1_BUTTON_R2_HpaHgSel#(L:XMLVAR_Baro_Selector_HPA_1) ! (>L:XMLVAR_Baro_Selector_HPA_1)
F16C_MFD_1_BUTTON_R3_NavaidOff#0 (>L:XMLVAR_NAV_AID_SWITCH_L2_State)
F16C_MFD_1_BUTTON_R4_RDF2#1 (>L:XMLVAR_NAV_AID_SWITCH_L2_State)
F16C_MFD_1_BUTTON_R5_VOR2#2 (>L:XMLVAR_NAV_AID_SWITCH_L2_State)
F16C_MFD_1_CORNER2_Down_RadModInc#(L:XMLVAR_A320_WeatherRadar_Mode) ++ 3 min (>L:XMLVAR_A320_WeatherRadar_Mode)
F16C_MFD_1_CORNER2_Up_RadModDec#(L:XMLVAR_A320_WeatherRadar_Mode) -- 0 max (>L:XMLVAR_A320_WeatherRadar_Mode)
F16C_MFD_1_UPPER_BUTTON_LEFT_Down_RangeInc#(L:A320_Neo_MFD_Range) ++ 5 min (>L:A320_Neo_MFD_Range)
F16C_MFD_1_UPPER_BUTTON_LEFT_Up_RangeDec#(L:A320_Neo_MFD_Range) -- 0 max (>L:A320_Neo_MFD_Range)
F16C_MFD_1_UPPER_BUTTON_RIGHT_Down_NavModeInc#(L:A320_Neo_MFD_NAV_MODE) ++ 4 min (>L:A320_Neo_MFD_NAV_MODE)
F16C_MFD_1_UPPER_BUTTON_RIGHT_Up_NavModeDec#(L:A320_Neo_MFD_NAV_MODE) -- 0 max (>L:A320_Neo_MFD_NAV_MODE)
F16C_MFD_2_UPPER_BUTTON_LEFT_Down_SVTerr#(>H:B747_8_PFD_SVTTerrain_Toggle)
F16C_MFD_2_UPPER_BUTTON_LEFT_Up_SVTerr#(>H:B747_8_PFD_SVTTerrain_Toggle)
//SC Designs/F16C/Controls
F16C_LEFT_ALT_FLAPS_EXTEND#1 (>L:ALT_FLAPS)
F16C_LEFT_ALT_FLAPS_NORM#0 (>L:ALT_FLAPS)
F16C_LEFT_AP_TRIM_Off#1 (>L:AP_TRIM,bool) 0 (>K:AUTOPILOT_DISENGAGE_SET)
F16C_LEFT_AP_TRIM_On#0 (>L:AP_TRIM,bool) 1 (>K:AUTOPILOT_DISENGAGE_SET)
F16C_LEFT_AP_TRIM_Toggle#(L:AP_TRIM,bool) s0 ! (>L:AP_TRIM) l0 (>K:AUTOPILOT_DISENGAGE_SET)
F16C_LEFT_EFLAPS_ENABLE#1 (>L:LE_FLAPS)
F16C_LEFT_EFLAPS_LOCK#0 (>L:LE_FLAPS)
F16C_LEFT_FLCS_BRT_OFF#0 (>L:FLCS_BRT) (L:FLCS_RESET,bool) if{ } els{ (A:FLY BY WIRE ELAC SWITCH:1, bool) ! If{ (>K:FLY_BY_WIRE_ELAC_TOGGLE) } }
F16C_LEFT_FLCS_BRT_ON#1 (>L:FLCS_BRT) (L:FLCS_RESET,bool) if{ } els{ (A:FLY BY WIRE ELAC SWITCH:1, bool) If{ (>K:FLY_BY_WIRE_ELAC_TOGGLE) } }
F16C_LEFT_FLCS_RESET_OFF#0 (>L:FLCS_RESET) (A:FLY BY WIRE ELAC SWITCH:1, bool) ! If{ (>K:FLY_BY_WIRE_ELAC_TOGGLE) } (A:FLY BY WIRE SEC SWITCH:1, bool) ! If{ (>K:FLY_BY_WIRE_SEC_TOGGLE) } (A:FLY BY WIRE FAC SWITCH:1, bool) ! If{ (>K:FLY_BY_WIRE_FAC_TOGGLE) } (L:FLCS_BRT, bool) if{ 0 (>L:FLCS_BRT) }
F16C_LEFT_FLCS_RESET_ON#1 (>L:FLCS_RESET) (A:FLY BY WIRE ELAC SWITCH:1, bool) If{ (>K:FLY_BY_WIRE_ELAC_TOGGLE) } (A:FLY BY WIRE SEC SWITCH:1, bool) If{ (>K:FLY_BY_WIRE_SEC_TOGGLE) } (A:FLY BY WIRE FAC SWITCH:1, bool) If{ (>K:FLY_BY_WIRE_FAC_TOGGLE) } (L:FLCS_BRT, bool) ! if{ 1 (>L:FLCS_BRT) }
F16C_LEFT_PITCH_TRIM_DOWN#(L:HANDLING_ElevatorTrim) 16 + 16384 min s0 (>K:ELEVATOR_TRIM_SET) l0 (>L:HANDLING_ElevatorTrim)
F16C_LEFT_PITCH_TRIM_UP#(L:HANDLING_ElevatorTrim) 16 - -16384 max s0 (>K:ELEVATOR_TRIM_SET) l0 (>L:HANDLING_ElevatorTrim)
F16C_LEFT_ROLL_TRIM_L#(A:AILERON TRIM PCT,position 16k) 16 - -16384 max s0 (>K:AILERON_TRIM_SET_EX1) l0 (>L:HANDLING_AileronsTrim)
F16C_LEFT_ROLL_TRIM_R#(A:AILERON TRIM PCT,position 16k) 16 + 16384 min s0 (>K:AILERON_TRIM_SET_EX1) l0 (>L:HANDLING_AileronsTrim)
F16C_LEFT_YAW_TRIM_L#(A:RUDDER TRIM PCT, position 16k) 16 - -16384 max s0 (>K:RUDDER_TRIM_SET_EX1) l0 (>L:HANDLING_RudderTrim)
F16C_LEFT_YAW_TRIM_R#(A:RUDDER TRIM PCT, position 16k) 16 + 16384 min s0 (>K:RUDDER_TRIM_SET_EX1) l0 (>L:HANDLING_RudderTrim)
//SC Designs/F16C/Electrical
F16C_RIGHT_ATT_FPM_OFF#0 (>L:ATT_FPM) 
F16C_RIGHT_ATT_FPM_ON#1 (>L:ATT_FPM) 
F16C_RIGHT_ATT_FPM_TOGGLE#(L:ATT_FPM) ! (>L:ATT_FPM)
F16C_RIGHT_DED_DATA_OFF#0 (>L:DED_DATA) 
F16C_RIGHT_DED_DATA_ON#1 (>L:DED_DATA) 
F16C_RIGHT_DED_DATA_TOGGLE#(L:DED_DATA) ! (>L:DED_DATA)
F16C_RIGHT_DEPR_RET_OFF#0 (>L:DEPR_RET) 
F16C_RIGHT_DEPR_RET_ON#1 (>L:DEPR_RET) 
F16C_RIGHT_DEPR_RET_TOGGLE#(L:DEPR_RET) ! (>L:DEPR_RET)
F16C_RIGHT_GENERATORS_OFF#(A:GENERAL ENG MASTER ALTERNATOR:1, Bool) if{ 1 0 (>K:2:ALTERNATOR_SET) }
F16C_RIGHT_GENERATORS_ON#(A:GENERAL ENG MASTER ALTERNATOR:1, Bool) ! if{ 1 1 (>K:2:ALTERNATOR_SET) }
F16C_RIGHT_GENERATORS_TOGGLE#1 (A:GENERAL ENG MASTER ALTERNATOR:1, Bool) ! (>K:2:ALTERNATOR_SET)
F16C_RIGHT_HUD_PWR_OFF#(A:CIRCUIT SWITCH ON:39, Bool) if{ 39 (>K:ELECTRICAL_CIRCUIT_TOGGLE) }
F16C_RIGHT_HUD_PWR_ON#(A:CIRCUIT SWITCH ON:39, Bool) ! if{ 39 (>K:ELECTRICAL_CIRCUIT_TOGGLE) }
F16C_RIGHT_HUD_PWR_TOGGLE#39 (>K:ELECTRICAL_CIRCUIT_TOGGLE)
F16C_RIGHT_MASTER_AVIONICS_OFF#(A:CIRCUIT SWITCH ON:23, Bool) if{ 23 (>K:ELECTRICAL_CIRCUIT_TOGGLE) } (A:BUS CONNECTION ON:4, Bool) if{ 4 1 (>K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE) } (A:CIRCUIT SWITCH ON:24, Bool) if{ 24 (>K:ELECTRICAL_CIRCUIT_TOGGLE) } (A:BUS CONNECTION ON:5, Bool) if{ 5 2 (>K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE) }
F16C_RIGHT_MASTER_AVIONICS_ON#(A:CIRCUIT SWITCH ON:23, Bool) ! if{ 23 (>K:ELECTRICAL_CIRCUIT_TOGGLE) } (A:BUS CONNECTION ON:4, Bool) ! if{ 4 1 (>K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE) } (A:CIRCUIT SWITCH ON:24, Bool) ! if{ 24 (>K:ELECTRICAL_CIRCUIT_TOGGLE) } (A:BUS CONNECTION ON:5, Bool) ! if{ 5 2 (>K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE) }
F16C_RIGHT_MASTER_AVIONICS_TOGGLE#23 (>K:ELECTRICAL_CIRCUIT_TOGGLE) 4 1 (>K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE) 24 (>K:ELECTRICAL_CIRCUIT_TOGGLE) 5 2 (>K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE)
F16C_RIGHT_MASTER_BATTERY_OFF#(A:ELECTRICAL MASTER BATTERY:1,bool) if{ 1 (>K:TOGGLE_MASTER_BATTERY) }
F16C_RIGHT_MASTER_BATTERY_ON#(A:ELECTRICAL MASTER BATTERY:1,bool) ! if{ 1 (>K:TOGGLE_MASTER_BATTERY) }
F16C_RIGHT_MASTER_BATTERY_TOGGLE#1 (>K:TOGGLE_MASTER_BATTERY)
F16C_RIGHT_RDR_ALT_OFF#0 (>L:RDR_ALT) 
F16C_RIGHT_RDR_ALT_ON#1 (>L:RDR_ALT) 
F16C_RIGHT_RDR_ALT_TOGGLE#(L:RDR_ALT) ! (>L:RDR_ALT)
//SC Designs/F16C/Engines
F16C_LEFT_AB_RESET_ENGDATA#0 (>L:ABRESET)
F16C_LEFT_AB_RESET_ON#1 (>L:ABRESET)
F16C_LEFT_AB_RESET_TOGGLE#(L:ABRESET) ! (>L:ABRESET)
F16C_LEFT_ENG_CONTI_PRI#1 (>L:ENG_CONTI)
F16C_LEFT_ENG_CONTI_SEC#0 (>L:ENG_CONTI)
F16C_LEFT_ENG_CONTI_TOGGLE#(L:ENG_CONTI) ! (>L:ENG_CONTI)
F16C_LEFT_ENG_STARTER_OFF#0 sp5 (A:TURB ENG IGNITION SWITCH EX1:1, enum) l5 != if{ l5 (>K:TURBINE_IGNITION_SWITCH_SET1) } (A:GENERAL ENG STARTER:1, Bool) if{ 0 (>K:STARTER1_SET) (>K:TOGGLE_STARTER1)(* Force disable starter *) }
F16C_LEFT_ENG_STARTER_ON#1 sp5 (A:TURB ENG IGNITION SWITCH EX1:1, enum) l5 != if{ l5 (>K:TURBINE_IGNITION_SWITCH_SET1) } (A:GENERAL ENG STARTER:1, Bool) ! if{ 1 (>K:STARTER1_SET) } 
F16C_LEFT_FLCS_OFF#0 (>L:FLCS)
F16C_LEFT_FLCS_ON#1 (>L:FLCS)
F16C_LEFT_FLCS_TOGGLE#(L:FLCS) ! (>L:FLCS)
//SC Designs/F16C/Flight Instrumentation
F16C_RIGHT_ALT_RADAR_0#0 (>L:ALT_RADAR)
F16C_RIGHT_ALT_RADAR_1#1 (>L:ALT_RADAR)
F16C_RIGHT_ALT_RADAR_OFF#2 (>L:ALT_RADAR)
F16C_RIGHT_CAS_GND_SPD#2 (>L:CAS)
F16C_RIGHT_CAS_OFF#1 (>L:CAS)
F16C_RIGHT_CAS_ON#0 (>L:CAS)
F16C_RIGHT_DAY_NIGHT_DOWN#2 (>L:DAY_NIGHT)
F16C_RIGHT_DAY_NIGHT_MID#1 (>L:DAY_NIGHT)
F16C_RIGHT_DAY_NIGHT_UP#0 (>L:DAY_NIGHT)
F16C_RIGHT_TEST_STEP_OFF#0 (>L:TEST_STEP)
F16C_RIGHT_TEST_STEP_ON#1 (>L:TEST_STEP)
//SC Designs/F16C/Fuel
F16C_FRONT_EXT_FUEL_TRANS_NORM#0 (>L:EXT_TRANSF) 16 (>K:FUEL_SELECTOR_SET)
F16C_FRONT_EXT_FUEL_TRANS_OFF#1 (>L:EXT_TRANSF) 1 (>K:FUEL_SELECTOR_SET)
F16C_FRONT_EXT_FUEL_TRANS_WING#2 (>L:EXT_TRANSF) 17 (>K:FUEL_SELECTOR_SET)
F16C_LEFT_AIR_REFUEL_CLOSE#0 (>L:Refuel_Switch,bool) 
F16C_LEFT_AIR_REFUEL_OPEN#1 (>L:Refuel_Switch,bool) (>K:ADD_FUEL_QUANTITY)
F16C_LEFT_ENG_FEED_AFT#2 (>L:ENG_FEED) (>K:SET_FUEL_TRANSFER_AFT)
F16C_LEFT_ENG_FEED_DEC#(L:ENG_FEED) -- 0 max (>L:ENG_FEED) l0 0 == if{ (>K:SET_FUEL_TRANSFER_OFF) } els{ l0 1 == if{ (>K:SET_FUEL_TRANSFER_AUTO) } els{ l0 2 == if{ (>K:SET_FUEL_TRANSFER_AFT) } els{ (>K:SET_FUEL_TRANSFER_FORWARD) } } }
F16C_LEFT_ENG_FEED_FWD#3 (>L:ENG_FEED) (>K:SET_FUEL_TRANSFER_FORWARD)
F16C_LEFT_ENG_FEED_INC#(L:ENG_FEED) ++ 3 min (>L:ENG_FEED) l0 0 == if{ (>K:SET_FUEL_TRANSFER_OFF) } els{ l0 1 == if{ (>K:SET_FUEL_TRANSFER_AUTO) } els{ l0 2 == if{ (>K:SET_FUEL_TRANSFER_AFT) } els{ (>K:SET_FUEL_TRANSFER_FORWARD) } } }
F16C_LEFT_ENG_FEED_NORM#1 (>L:ENG_FEED) (>K:SET_FUEL_TRANSFER_AUTO)
F16C_LEFT_ENG_FEED_OFF#0 (>L:ENG_FEED) (>K:SET_FUEL_TRANSFER_OFF)
F16C_LEFT_FUEL_MASTER_OFF#(A:GENERAL ENG FUEL VALVE:1, Bool) if{ (>K:TOGGLE_FUEL_VALVE_ENG1) }
F16C_LEFT_FUEL_MASTER_ON#(A:GENERAL ENG FUEL VALVE:1, Bool) ! if{ (>K:TOGGLE_FUEL_VALVE_ENG1) }
F16C_LEFT_TANK_INERTING_Off#0 (>L:Fuel_Dump_Switch,bool) (A:FUEL DUMP SWITCH,bool) If{ (>K:FUEL_DUMP_TOGGLE) }
F16C_LEFT_TANK_INERTING_On#1 (>L:Fuel_Dump_Switch,bool) (A:FUEL DUMP SWITCH,bool) ! If{ (>K:FUEL_DUMP_TOGGLE) }
F16C_LEFT_TANK_INERTING_Toggle#(L:Fuel_Dump_Switch,bool) ! (>L:Fuel_Dump_Switch,bool) (>K:FUEL_DUMP_TOGGLE)
//SC Designs/F16C/Gear
F16C_LEFT_BRAKE_ANTISKID_OFF#(A:ANTISKID BRAKES ACTIVE, Bool) If{ (>K:ANTISKID_BRAKES_TOGGLE) 0 (>L:HANDLING_Autobrakes_Position) }
F16C_LEFT_BRAKE_ANTISKID_ON#(A:ANTISKID BRAKES ACTIVE, Bool) ! If{ (>K:ANTISKID_BRAKES_TOGGLE) }
F16C_LEFT_BRAKE_ANTISKID_TOGGLE#(>K:ANTISKID_BRAKES_TOGGLE) (A:ANTISKID BRAKES ACTIVE, Bool) ! if{ 0 (>L:HANDLING_Autobrakes_Position) }
F16C_LEFT_LANDING_GEAR_DOWN#1 (>K:GEAR_SET)
F16C_LEFT_LANDING_GEAR_TOGGLE#(A:GEAR HANDLE POSITION, Bool) if{ 0 } els{ 1 } (>K:GEAR_SET)
F16C_LEFT_LANDING_GEAR_UP#0 (>K:GEAR_SET)
F16C_LEFT_PARKING_BRAKE_OFF#0 (>K:PARKING_BRAKE_SET)
F16C_LEFT_PARKING_BRAKE_ON#1 (>K:PARKING_BRAKE_SET)
F16C_LEFT_PARKING_BRAKE_TOGGLE#(>K:PARKING_BRAKES)
//SC Designs/F16C/Lights
F16C_LEFT_EXTLT_ANTICOL_OFF#1 0 (>K:2:STROBES_SET) 0 (>L:LIGHTING_STROBE_1)
F16C_LEFT_EXTLT_ANTICOL_ON#1 1 (>K:2:STROBES_SET) 1 (>L:LIGHTING_STROBE_1)
F16C_LEFT_EXTLT_FORMATION_OFF#0 (>L:Formation Lights)
F16C_LEFT_EXTLT_FORMATION_ON#1 (>L:Formation Lights)
F16C_LEFT_EXTLT_FORMATION_TOGGLE#(L:Formation Lights) ! (>L:Formation Lights)
F16C_LEFT_EXTLT_NAV_Knob_Dec# (L:LIGHTING_NAV_1) 5 - 0 max s0 (>L:LIGHTING_NAV_1) l0 8 (>K:2:LIGHT_POTENTIOMETER_SET) (A:LIGHT NAV:1, Bool) s2 (L:LIGHTING_NAV_1) 0 > != if{ l2 ! 1 l0 (>K:2:NAV_LIGHTS_SET) }
F16C_LEFT_EXTLT_NAV_Knob_Inc# (L:LIGHTING_NAV_1) 5 + 100 min s0 (>L:LIGHTING_NAV_1) l0 8 (>K:2:LIGHT_POTENTIOMETER_SET) (A:LIGHT NAV:1, Bool) s2 (L:LIGHTING_NAV_1) 0 > != if{ l2 ! 1 l0 (>K:2:NAV_LIGHTS_SET) }
F16C_LEFT_EXTLT_NAV_OFF#0 s0 (>L:LIGHTING_NAV_1) l0 8 (>K:2:LIGHT_POTENTIOMETER_SET) (A:LIGHT NAV:1, Bool) s2 (L:LIGHTING_NAV_1) 0 > != if{ l2 ! 1 l0 (>K:2:NAV_LIGHTS_SET) }
F16C_LEFT_EXTLT_NAV_ON#1 s0 (>L:LIGHTING_NAV_1) l0 8 (>K:2:LIGHT_POTENTIOMETER_SET) (A:LIGHT NAV:1, Bool) s2 (L:LIGHTING_NAV_1) 0 > != if{ l2 ! 1 l0 (>K:2:NAV_LIGHTS_SET) }
F16C_LEFT_EXTLT_POSITION_FLASH#1 1 (>K:2:LOGO_LIGHTS_SET) 1 (>L:LIGHTING_LOGO_1)
F16C_LEFT_EXTLT_POSITION_STEADY#1 0 (>K:2:LOGO_LIGHTS_SET) 0 (>L:LIGHTING_LOGO_1)
F16C_LEFT_EXTLT_REFUEL_DEC#(L:LIGHTING_RECOGNITION_1) 5 - 0 max s0 (>L:LIGHTING_RECOGNITION_1) l0 7 (>K:2:LIGHT_POTENTIOMETER_SET) (A:LIGHT RECOGNITION:1, Bool) s2 (L:LIGHTING_RECOGNITION_1) 0 > != if{ l2 ! 1 l0 (>K:2:RECOGNITION_LIGHTS_SET) }
F16C_LEFT_EXTLT_REFUEL_INC#(L:LIGHTING_RECOGNITION_1) 5 + 100 min s0 (>L:LIGHTING_RECOGNITION_1) l0 7 (>K:2:LIGHT_POTENTIOMETER_SET) (A:LIGHT RECOGNITION:1, Bool) s2 (L:LIGHTING_RECOGNITION_1) 0 > != if{ l2 ! 1 l0 (>K:2:RECOGNITION_LIGHTS_SET) }
F16C_LEFT_LANDING_LIGHTS_OFF#1 0 (>K:2:LANDING_LIGHTS_SET)
F16C_LEFT_LANDING_LIGHTS_ON#1 1 (>K:2:LANDING_LIGHTS_SET)
F16C_LEFT_LANDING_LIGHTS_TOGGLE#1 (L:LIGHTING_LANDING_1) if{ 0 } els{ 1 } (>K:2:LANDING_LIGHTS_SET)
F16C_MFD_1_CORNER1_Down_BrtInc#(L:LIGHTING_POTENTIOMETER_11) 10 + 100 min s0 (>L:LIGHTING_POTENTIOMETER_11) l0 11 (>K:2:LIGHT_POTENTIOMETER_SET)
F16C_MFD_1_CORNER1_Up_BrtDec#(L:LIGHTING_POTENTIOMETER_11) 10 - 0 max s0 (>L:LIGHTING_POTENTIOMETER_11) l0 11 (>K:2:LIGHT_POTENTIOMETER_SET)
F16C_MFD_2_CORNER1_Down_BrtInc# (L:LIGHTING_POTENTIOMETER_12) 10 + 100 min s0 (>L:LIGHTING_POTENTIOMETER_12) l0 12 (>K:2:LIGHT_POTENTIOMETER_SET)
F16C_MFD_2_CORNER1_Up_BrtDec# (L:LIGHTING_POTENTIOMETER_12) 10 - 0 max s0 (>L:LIGHTING_POTENTIOMETER_12) l0 12 (>K:2:LIGHT_POTENTIOMETER_SET)
F16C_RIGHT_LIGHT_CABIN_DEC#(L:LIGHTING_CABIN_1) 5 - 0 max s0 (>L:LIGHTING_CABIN_1) l0 4 (>K:2:LIGHT_POTENTIOMETER_SET) (A:LIGHT CABIN:1, Bool) s2 (L:LIGHTING_CABIN_1) 0 > != if{ l2 ! 1 l0 (>K:2:CABIN_LIGHTS_SET) }
F16C_RIGHT_LIGHT_CABIN_INC#(L:LIGHTING_CABIN_1) 5 + 100 min s0 (>L:LIGHTING_CABIN_1) l0 4 (>K:2:LIGHT_POTENTIOMETER_SET) (A:LIGHT CABIN:1, Bool) s2 (L:LIGHTING_CABIN_1) 0 > != if{ l2 ! 1 l0 (>K:2:CABIN_LIGHTS_SET) }
F16C_RIGHT_LIGHT_CONSOLE_DEC#(>L:LIGHTING_POTENTIOMETER_9) 5 - 0 max s0 (>L:LIGHTING_POTENTIOMETER_9) l0 9 (>K:2:LIGHT_POTENTIOMETER_SET)
F16C_RIGHT_LIGHT_CONSOLE_INC#(>L:LIGHTING_POTENTIOMETER_9) 5 + 100 min s0 (>L:LIGHTING_POTENTIOMETER_9) l0 9 (>K:2:LIGHT_POTENTIOMETER_SET)
F16C_RIGHT_LIGHT_DED_DEC#(L:LIGHTING_POTENTIOMETER_13) 5 - 0 max s0 (>L:LIGHTING_POTENTIOMETER_13) l0 13 (>K:2:LIGHT_POTENTIOMETER_SET)
F16C_RIGHT_LIGHT_DED_INC#(L:LIGHTING_POTENTIOMETER_13) 5 + 100 min s0 (>L:LIGHTING_POTENTIOMETER_13) l0 13 (>K:2:LIGHT_POTENTIOMETER_SET)
F16C_RIGHT_LIGHT_INSTR_FLOOD_DEC#(L:LIGHTING_POTENTIOMETER_2) 5 - 0 max s0 (>L:LIGHTING_POTENTIOMETER_2) l0 2 (>K:2:LIGHT_POTENTIOMETER_SET)
F16C_RIGHT_LIGHT_INSTR_FLOOD_INC#(L:LIGHTING_POTENTIOMETER_2) 5 + 100 min s0 (>L:LIGHTING_POTENTIOMETER_2) l0 2 (>K:2:LIGHT_POTENTIOMETER_SET)
F16C_RIGHT_LIGHT_MAIL_FLOOD_DEC#(L:LIGHTING_PEDESTRAL_1) 5 - 0 max s0 (>L:LIGHTING_PEDESTRAL_1) l0 6 (>K:2:LIGHT_POTENTIOMETER_SET) (A:LIGHT PEDESTRAL:1, Bool) s2 (L:LIGHTING_PEDESTRAL_1) 0 > != if{ l2 ! 1 l0 (>K:2:PEDESTRAL_LIGHTS_SET) }
F16C_RIGHT_LIGHT_MAIL_FLOOD_INC#(L:LIGHTING_PEDESTRAL_1) 5 + 100 min s0 (>L:LIGHTING_PEDESTRAL_1) l0 6 (>K:2:LIGHT_POTENTIOMETER_SET) (A:LIGHT PEDESTRAL:1, Bool) s2 (L:LIGHTING_PEDESTRAL_1) 0 > != if{ l2 ! 1 l0 (>K:2:PEDESTRAL_LIGHTS_SET) }
F16C_RIGHT_LIGHT_PANEL_DEC#(L:LIGHTING_PANEL_1) 5 - 0 max s0 (>L:LIGHTING_PANEL_1) l0 3 (>K:2:LIGHT_POTENTIOMETER_SET) (A:LIGHT PANEL:1, Bool) s2 (L:LIGHTING_PANEL_1) 0 > != if{ l2 ! 1 l0 (>K:2:PANEL_LIGHTS_SET) }
F16C_RIGHT_LIGHT_PANEL_INC#(L:LIGHTING_PANEL_1) 5 + 100 min s0 (>L:LIGHTING_PANEL_1) l0 3 (>K:2:LIGHT_POTENTIOMETER_SET) (A:LIGHT PANEL:1, Bool) s2 (L:LIGHTING_PANEL_1) 0 > != if{ l2 ! 1 l0 (>K:2:PANEL_LIGHTS_SET) }
//SC Designs/F16C/MCDU
F16C_DED_1#(>H:A320_Neo_CDU_BTN_L1)
F16C_DED_10#(>H:A320_Neo_CDU_BTN_R4)
F16C_DED_11#(>H:A320_Neo_CDU_BTN_R5)
F16C_DED_12#(>H:A320_Neo_CDU_BTN_R6)
F16C_DED_2#(>H:A320_Neo_CDU_BTN_L2)
F16C_DED_3#(>H:A320_Neo_CDU_BTN_L3)
F16C_DED_4#(>H:A320_Neo_CDU_BTN_L4)
F16C_DED_5#(>H:A320_Neo_CDU_BTN_L5)
F16C_DED_6#(>H:A320_Neo_CDU_BTN_L6)
F16C_DED_7#(>H:A320_Neo_CDU_BTN_R1)
F16C_DED_8#(>H:A320_Neo_CDU_BTN_R2)
F16C_DED_9#(>H:A320_Neo_CDU_BTN_R3)
F16C_KEYPAD_0#(>H:A320_Neo_CDU_BTN_0)
F16C_KEYPAD_1#(>H:A320_Neo_CDU_BTN_1)
F16C_KEYPAD_2#(>H:A320_Neo_CDU_BTN_2)
F16C_KEYPAD_3#(>H:A320_Neo_CDU_BTN_3)
F16C_KEYPAD_4#(>H:A320_Neo_CDU_BTN_4)
F16C_KEYPAD_5#(>H:A320_Neo_CDU_BTN_5)
F16C_KEYPAD_6#(>H:A320_Neo_CDU_BTN_6)
F16C_KEYPAD_7#(>H:A320_Neo_CDU_BTN_7)
F16C_KEYPAD_8#(>H:A320_Neo_CDU_BTN_8)
F16C_KEYPAD_9#(>H:A320_Neo_CDU_BTN_9)
F16C_KEYPAD_BRT_KNOB_Down#0 (>L:BRT)
F16C_KEYPAD_BRT_KNOB_Up#1 (>L:BRT)
F16C_KEYPAD_CLR_Press#(E:SIMULATION TIME, second) 1 + (>L:MF_Btn_time)
F16C_KEYPAD_CLR_Release#(E:SIMULATION TIME, second) (L:MF_Btn_time) > if{ (>H:A320_Neo_CDU_BTN_CLR) } 0 (>L:MF_Btn_time)
F16C_KEYPAD_CONT_KNOB_Down#0 (>L:CONT)
F16C_KEYPAD_CONT_KNOB_Up#1 (>L:CONT)
F16C_KEYPAD_DATA#(>H:A320_Neo_CDU_BTN_FPLN)
F16C_KEYPAD_DRIFT_SWITCH_Down#2 (>L:DRIFT)
F16C_KEYPAD_DRIFT_SWITCH_Up#0 (>L:DRIFT)
F16C_KEYPAD_GAIN_SWITCH_Down#2 (>L:GAIN)
F16C_KEYPAD_GAIN_SWITCH_Mid#1 (>L:GAIN)
F16C_KEYPAD_GAIN_SWITCH_Up#0 (>L:GAIN)
F16C_KEYPAD_IP#(>H:A320_Neo_CDU_BTN_DATA)
F16C_KEYPAD_MARK#(>H:A320_Neo_CDU_BTN_PROG)
F16C_KEYPAD_MCDUL_OVFR#(>H:A320_Neo_CDU_1_BTN_OVFY)
F16C_KEYPAD_MENU#(>H:A320_Neo_CDU_BTN_DIR)
F16C_KEYPAD_NAV#(>H:A320_Neo_CDU_BTN_RAD)
F16C_KEYPAD_NEXT#(>H:A320_Neo_CDU_BTN_NEXTPAGE)
F16C_KEYPAD_PREV#(>H:A320_Neo_CDU_BTN_PREVPAGE)
F16C_KEYPAD_RET_DEPR_KNOB_Down#0 (>RET_DEPR)
F16C_KEYPAD_RET_DEPR_KNOB_Up#1 (>RET_DEPR)
F16C_KEYPAD_RTN_SEQ_SWITCH_Down#2 (>L:RTN_SEQ) (>H:A320_Neo_CDU_BTN_UP)
F16C_KEYPAD_RTN_SEQ_SWITCH_Up#0 (>L:RTN_SEQ) (>H:A320_Neo_CDU_BTN_DOWN)
F16C_KEYPAD_SHF#(>H:A320_Neo_CDU_BTN_INIT)
F16C_KEYPAD_SYM_KNOB_Down#1 (>L:SYM)
F16C_KEYPAD_SYM_KNOB_Up#0 (>L:SYM)
F16C_KEYPAD_0_-_DUPLICATE#(>H:A320_Neo_CDU_BTN_0)
//SC Designs/F16C/Miscellaneous
F16C_CANOPY_LEVER#(L:Canopy Lever) ! (>L:Canopy Lever)
F16C_LEFT_GND_JETT_ENABLE#1 (>L:GND_JETT,bool)
F16C_LEFT_GND_JETT_OFF#0 (>L:GND_JETT,bool)
F16C_LEFT_GND_JETT_TOGGLE#(L:GND_JETT,bool) ! (>L:GND_JETT,bool)
F16C_LEFT_STORES_CAT_1#0 (>L:STORES_CAT)
F16C_LEFT_STORES_CAT_3#1 (>L:STORES_CAT)
F16C_LEFT_STORES_CAT_TOGGLE#(L:STORES_CAT) ! (>L:STORES_CAT)
F16C_LEFT_TAILHOOK_DOWN#1 (>L:Tailhook,bool)
F16C_LEFT_TAILHOOK_TOGGLE#(L:Tailhook,bool) ! (>L:Tailhook,bool)
F16C_LEFT_TAILHOOK_UP#0 (>L:Tailhook,bool)
F16C_RIGHT_AUDIO_IN_TOGGLE#(L:AUDIO_IN) ! (>L:AUDIO_IN)
F16C_RIGHT_CHOCKS_SWITCH_TOGGLE#(L:Chocks Switch) ! (>L:Chocks Switch)
F16C_RIGHT_COVERS_SWITCH_TOGGLE#(L:Covers Switch) ! (>L:Covers Switch)
F16C_RIGHT_HANDLE_TOGGLE#(L:RIGHT_HANDLE) ! (>L:RIGHT_HANDLE)
F16C_RIGHT_KY_58_VOL_TOGGLE#(L:KY_58_VOL) ! (>L:KY_58_VOL)
F16C_RIGHT_LADDER_SWITCH_TOGGLE#(L:Ladder_Switch) ! (>L:Ladder_Switch)
F16C_RIGHT_MASK_SWITCH_TOGGLE#(L:MaskSwitch) ! (>L:MaskSwitch)
F16C_RIGHT_MODE_C_SET_TOGGLE#(L:MODE_C_SET) ! (>L:MODE_C_SET)
F16C_RIGHT_MODE_C_TOGGLE#(L:MODE_C) ! (>L:MODE_C)
F16C_RIGHT_OXYGEN_REG_L_TOGGLE#(L:OXY_REG) ! (>L:OXY_REG)
F16C_RIGHT_OXYGEN_REG_R_TOGGLE#(L:OXY_REG_R) ! (>L:OXY_REG_R)
F16C_RIGHT_SWITCH_SMOKE_OFF#0 (>L:Smoke Visibility)
F16C_RIGHT_SWITCH_SMOKE_ON#1 (>L:Smoke Visibility)
F16C_RIGHT_SWITCH_SMOKE_TOGGLE#(L:Smoke Visibility) ! (>L:Smoke Visibility)
F16C_RIGHT_TD_ON_TOGGLE#(L:TD_ON) ! (>L:TD_ON)
F16C_RIGHT_VISOR_SWITCH_TOGGLE#(L:VisorSwitch) ! (>L:VisorSwitch)
//SC Designs/F16C/Navigation
F16C_LEFT_GPS_NAV_PUSH#(>K:TOGGLE_GPS_DRIVES_NAV1) (L:NAVGPS,bool) ! (>L:NAVGPS,bool)
//SC Designs/F16C/Radio
F16C_LEFT_ADF_100_DEC#(>K:ADF_100_DEC)
F16C_LEFT_ADF_100_INC#(>K:ADF_100_INC)
F16C_LEFT_ADF_1_10_DEC#(L:XMLVAR_ADF_Frequency_10_Khz) if{ (>K:ADF_10_DEC) } els{ (>K:ADF_1_DEC) } 
F16C_LEFT_ADF_1_10_INC#(L:XMLVAR_ADF_Frequency_10_Khz) if{ (>K:ADF_10_INC) } els{ (>K:ADF_1_INC) } 
F16C_LEFT_ADF_1_10_TOGGLE#(L:XMLVAR_ADF_Frequency_10_Khz) ! (>L:XMLVAR_ADF_Frequency_10_Khz)
F16C_LEFT_ADF_VOL_DEC#(>K:ADF_VOLUME_DEC) 
F16C_LEFT_ADF_VOL_INC#(>K:ADF_VOLUME_INC) 
F16C_LEFT_COM1_KHZ_DEC#(>K:COM_RADIO_FRACT_DEC)
F16C_LEFT_COM1_KHZ_INC#(>K:COM_RADIO_FRACT_INC)
F16C_LEFT_COM1_MHZ_DEC#(>K:COM_RADIO_WHOLE_DEC)
F16C_LEFT_COM1_MHZ_INC#(>K:COM_RADIO_WHOLE_INC)
F16C_LEFT_COM1_SWAP_PUSH#(>K:COM1_RADIO_SWAP)
F16C_LEFT_MSL_TOGGLE#(L:MSL_INC,bool) ! (>L:MSL_INC,bool)
F16C_LEFT_NAV1_KHZ_DEC#(>K:NAV1_RADIO_FRACT_DEC)
F16C_LEFT_NAV1_KHZ_INC#(>K:NAV1_RADIO_FRACT_INC)
F16C_LEFT_NAV1_MHZ_DEC#(>K:NAV1_RADIO_WHOLE_DEC)
F16C_LEFT_NAV1_MHZ_INC#(>K:NAV1_RADIO_WHOLE_INC)
F16C_LEFT_NAV1_SWAP_PUSH#(>K:NAV1_RADIO_SWAP)
F16C_LEFT_THREAT_TOGGLE#(L:THREAT,bool) ! (>L:THREAT,bool)
F16C_LEFT_XPNDR_KNOB_1_DEC#(>K:XPNDR_1000_DEC)
F16C_LEFT_XPNDR_KNOB_1_INC#(>K:XPNDR_1000_INC)
F16C_LEFT_XPNDR_KNOB_2_DEC#(>K:XPNDR_100_DEC)
F16C_LEFT_XPNDR_KNOB_2_INC#(>K:XPNDR_100_INC)
F16C_LEFT_XPNDR_KNOB_3_DEC#(>K:XPNDR_10_DEC)
F16C_LEFT_XPNDR_KNOB_3_INC#(>K:XPNDR_10_INC)
F16C_LEFT_XPNDR_KNOB_4_DEC#(>K:XPNDR_1_DEC)
F16C_LEFT_XPNDR_KNOB_4_INC#(>K:XPNDR_1_INC)
F16C_LEFT_XPNDR_MODE_OFF#0 (>A:TRANSPONDER STATE:1, enum)
F16C_LEFT_XPNDR_MODE_STBY#1 (>A:TRANSPONDER STATE:1, enum)
F16C_LEFT_XPNDR_MODE_TA#3 (>A:TRANSPONDER STATE:1, enum)
F16C_LEFT_XPNDR_MODE_TARA#4 (>A:TRANSPONDER STATE:1, enum)
F16C_LEFT_XPNDR_MODE_XPNDR#2 (>A:TRANSPONDER STATE:1, enum)
//SC Designs/F16C/Warning System
F16C_LEFT_CMDS_01_OFF#0 (>L:01_ON,bool)
F16C_LEFT_CMDS_01_ON#1 (>L:01_ON,bool)
F16C_LEFT_CMDS_01_TOGGLE#(L:01_ON,bool) ! (>L:01_ON,bool)
F16C_LEFT_CMDS_02_OFF#0 (>L:02_ON,bool)
F16C_LEFT_CMDS_02_ON#1 (>L:02_ON,bool)
F16C_LEFT_CMDS_02_TOGGLE#(L:02_ON,bool) ! (>L:02_ON,bool)
F16C_LEFT_CMDS_CH_OFF#0 (>L:03_ON,bool)
F16C_LEFT_CMDS_CH_ON#1 (>L:03_ON,bool)
F16C_LEFT_CMDS_CH_TOGGLE#(L:03_ON,bool) ! (>L:03_ON,bool)
F16C_LEFT_CMDS_FL_OFF#0 (>L:04_ON,bool)
F16C_LEFT_CMDS_FL_ON#1 (>L:04_ON,bool)
F16C_LEFT_CMDS_FL_TOGGLE#(L:04_ON,bool) ! (>L:04_ON,bool)
F16C_LEFT_JETT_OFF#0 (>L:JETT,bool)
F16C_LEFT_JETT_ON#1 (>L:JETT,bool)
F16C_LEFT_JETT_TOGGLE#(L:JETT,bool) ! (>L:JETT,bool)
F16C_LEFT_MODE_AUTO#4 (>L:CMDS_MODE)
F16C_LEFT_MODE_BYP#5 (>L:CMDS_MODE)
F16C_LEFT_MODE_DEC#(L:CMDS_MODE) -- 0 max (>L:CMDS_MODE)
F16C_LEFT_MODE_INC#(L:CMDS_MODE) ++ 5 min (>L:CMDS_MODE)
F16C_LEFT_MODE_MAN#2 (>L:CMDS_MODE)
F16C_LEFT_MODE_OFF#0 (>L:CMDS_MODE)
F16C_LEFT_MODE_SEM#3 (>L:CMDS_MODE)
F16C_LEFT_MODE_STBY#1 (>L:CMDS_MODE)
F16C_LEFT_MWS_B_OFF#0 (>L:MWS_ON_B,bool)
F16C_LEFT_MWS_B_ON#1 (>L:MWS_ON_B,bool)
F16C_LEFT_MWS_B_TOGGLE#(L:MWS_ON_B,bool) ! (>L:MWS_ON_B,bool)
F16C_LEFT_MWS_OFF#0 (>L:MWS_ON,bool)
F16C_LEFT_MWS_ON#1 (>L:MWS_ON,bool)
F16C_LEFT_MWS_TOGGLE#(L:MWS_ON,bool) ! (>L:MWS_ON,bool)
F16C_LEFT_PRGM_1#1 (>L:PRGM)
F16C_LEFT_PRGM_2#2 (>L:PRGM)
F16C_LEFT_PRGM_3#3 (>L:PRGM)
F16C_LEFT_PRGM_4#4 (>L:PRGM)
F16C_LEFT_PRGM_DEC#(L:PRGM) -- 0 max (>L:PRGM)
F16C_LEFT_PRGM_INC#(L:PRGM) ++ 4 min (>L:PRGM)
F16C_LEFT_PRGM_OFF#0 (>L:PRGM)
F16C_LEFT_RWR_OFF#0 (>L:RWR_ON,bool)
F16C_LEFT_RWR_ON#1 (>L:RWR_ON,bool)
F16C_LEFT_RWR_TOGGLE#(L:RWR_ON,bool) ! (>L:RWR_ON,bool)
F16C_LEFT_SYMBOLOGY_OFF#0 (>L:CYLINDER1,bool)
F16C_LEFT_SYMBOLOGY_ON#1 (>L:CYLINDER1,bool)
F16C_LEFT_SYMBOLOGY_TOGGLE#(L:CYLINDER1,bool) ! (>L:CYLINDER1,bool)
F16C_LEFT_TWR_SET_OFF#0 (>L:TWR_SET,bool)
F16C_LEFT_TWR_SET_ON#1 (>L:TWR_SET,bool)
F16C_LEFT_TWR_SET_TOGGLE#(L:TWR_SET,bool) ! (>L:TWR_SET,bool)
F16C_LEFT_TWR_VOL_OFF#0 (>L:TWR_VOL,bool)
F16C_LEFT_TWR_VOL_ON#1 (>L:TWR_VOL,bool)
F16C_LEFT_TWR_VOL_TOGGLE#(L:TWR_VOL,bool) ! (>L:TWR_VOL,bool)
//SC Designs/F16C/Weapons
F16C_FRONT_ARM_SIMULATE#2 (>L:MASTER_ARM)
F16C_FRONT_LASER_ARM#0 (>L:LASER_ARM)
F16C_FRONT_LASER_OFF#1 (>L:LASER_ARM)
F16C_FRONT_LASER_TOGGLE#(L:LASER_ARM) ! (>L:LASER_ARM)
F16C_FRONT_MASTER_ARM_OFF#1 (>L:MASTER_ARM)
F16C_FRONT_MASTER_ARM_ON#0 (>L:MASTER_ARM)
F16C_FRONT_RF_ECM#2 (>L:ECM_ARM)
F16C_FRONT_RF_NORM#0 (>L:ECM_ARM)
F16C_FRONT_RF_SILENT#1 (>L:ECM_ARM)
//SimWorks Studios/Kodiak 100/Anti-Ice
KODIAK_100_DEICE_WINDSHIELD_OFF#(A:WINDSHIELD DEICE SWITCH, Bool) if{ (>K:WINDSHIELD_DEICE_TOGGLE) }
KODIAK_100_DEICE_WINDSHIELD_ON#(A:WINDSHIELD DEICE SWITCH, Bool) ! if{ (>K:WINDSHIELD_DEICE_TOGGLE) }
KODIAK_100_DEICE_WINDSHIELD_TOGGLE#(>K:WINDSHIELD_DEICE_TOGGLE)
//SimWorks Studios/Kodiak 100/Electrical
KODIAK_100_AUX_BUS_OFF#0 (>L:XMLVAR_AUX_Bus_ON, Bool)
KODIAK_100_AUX_BUS_ON#1 (>L:XMLVAR_AUX_Bus_ON, Bool)
KODIAK_100_AUX_BUS_TOGGLE#(L:XMLVAR_AUX_Bus_ON, Bool) ! (>L:XMLVAR_AUX_Bus_ON, Bool)
KODIAK_BREAKER_STBYATT#7 (>A:BUS LOOKUP INDEX, Number) 1 (>A:CIRCUIT BREAKER PULLED:61, Bool) 100 *
Starter_Switch_Lo#0 (>L:SWS_ENGINE_Switch_Starter_ThreeState_1, Enum)
//SimWorks Studios/Kodiak 100/Engine
KODIAK_100_IGNITION_SWITCH_OFF#1 (>K:TURBINE_IGNITION_SWITCH_SET1)
KODIAK_100_IGNITION_SWITCH_ON#2 (>K:TURBINE_IGNITION_SWITCH_SET1)
KODIAK_100_IGNITION_SWITCH_TOGGLE#1 2 (A:TURB ENG IGNITION SWITCH EX1:1, enum) 2 == ? (>K:TURBINE_IGNITION_SWITCH_SET1)
//SimWorks Studios/Kodiak 100/Engines
Starter_Switch_Hi#2 (>L:SWS_ENGINE_Switch_Starter_ThreeState_1, Enum)
Starter_Switch_Off#1 (>L:SWS_ENGINE_Switch_Starter_ThreeState_1, Enum)
//SimWorks Studios/Kodiak 100/Fuel
Fuel_Tank_Selectors__overhead_#(>L:SWS_Kodiak_TankSelector_x, Bool)
KODIAK_100_TANK_SELECT_L_CLOSE#0 (>L:SWS_Kodiak_TankSelector_1, Bool)
KODIAK_100_TANK_SELECT_L_OPEN#1 (>L:SWS_Kodiak_TankSelector_1, Bool)
KODIAK_100_TANK_SELECT_R_CLOSE#0 (>L:SWS_Kodiak_TankSelector_2, Bool)
KODIAK_100_TANK_SELECT_R_OPEN#1 (>L:SWS_Kodiak_TankSelector_2, Bool)
Kodiak_100_Firewall_Fuel_Cutoff_Off#0 (>K:SET_FUEL_VALVE_ENG1)
Kodiak_100_Firewall_Fuel_Cutoff_On#1 (>K:SET_FUEL_VALVE_ENG1)
Kodiak_100_Fuel_Pump_Switch_Off#0 (>L:SWS_FUEL_Switch_Pump_1, Enum)
Kodiak_100_Fuel_Pump_Switch_On#2 (>L:SWS_FUEL_Switch_Pump_1, Enum)
Kodiak_100_Fuel_Pump_Switch_Stby#0 (>L:SWS_FUEL_Switch_Pump_1, Enum)
KODIAK_100_FUEL_PUMP_OFF#0 (>L:SWS_FUEL_Switch_Pump_1)
KODIAK_100_FUEL_PUMP_ON#2 (>L:SWS_FUEL_Switch_Pump_1)
KODIAK_100_FUEL_PUMP_STANDBY#1 (>L:SWS_FUEL_Switch_Pump_1)
KODIAK_100_FIREW_FUEL_CUTOFF_TOGGLE#(>K:TOGGLE_FUEL_VALVE_ENG1)
//SimWorks Studios/Kodiak 100/Lights
Landing_Lights_Off#0 (>L:SWS_LIGHTING_Switch_Light_Landing, Enum)
Landing_Lights_On#2 (>L:SWS_LIGHTING_Switch_Light_Landing, Enum)
Landing_Lights_Pulse#1 (>L:SWS_LIGHTING_Switch_Light_Landing, Enum)
//TDS Sim/GTNxi 650/Navigation
GPS_BUTTON1#10 (>K:GPS_BUTTON1) 12 (>K:GPS_BUTTON1)
GPS_BUTTON2#10 (>K:GPS_BUTTON2) 12 (>K:GPS_BUTTON2)
GPS_CURSOR_BUTTON#10 (>K:GPS_CURSOR_BUTTON) 12 (>K:GPS_CURSOR_BUTTON)
GPS_DIRECTTO_BUTTON#10 (>K:GPS_DIRECTTO_BUTTON) 12 (>K:GPS_DIRECTTO_BUTTON)
GPS_MENU_BUTTON#10 (>K:GPS_MENU_BUTTON) 12 (>K:GPS_MENU_BUTTON)
//TDS Sim/GTNxi 750/Navigation
GPS_BUTTON1#2 (>K:GPS_BUTTON1) 4 (>K:GPS_BUTTON1)
GPS_BUTTON2#2 (>K:GPS_BUTTON2) 4 (>K:GPS_BUTTON2)
GPS_CURSOR_BUTTON#2 (>K:GPS_CURSOR_BUTTON) 4 (>K:GPS_CURSOR_BUTTON)
GPS_DIRECTTO_BUTTON#2 (>K:GPS_DIRECTTO_BUTTON) 4 (>K:GPS_DIRECTTO_BUTTON)
GPS_MENU_BUTTON#2 (>K:GPS_MENU_BUTTON) 4 (>K:GPS_MENU_BUTTON)
//WB Sim/Cessna 172 analog/Avionics
C172-analog-transponder-dec#(L:172X_XPNDR_KNOB, Number) 0 > if{  (L:172X_XPNDR_KNOB, Number) 1 - (>L:172X_XPNDR_KNOB, Number) }
C172-analog-transponder-inc#(L:172X_XPNDR_KNOB, Number) 4 < if{  (L:172X_XPNDR_KNOB, Number) 1 + (>L:172X_XPNDR_KNOB, Number) }
//Working Title/CJ4/Air Condition / Pressurization
WT_CJ4_CABIN_TEMP_DEC#(L:PASSENGER_KNOB_HEAT_2) 4 - 0 max (>L:PASSENGER_KNOB_HEAT_2)
WT_CJ4_CABIN_TEMP_INC#(L:PASSENGER_KNOB_HEAT_2) 4 + 100 min (>L:PASSENGER_KNOB_HEAT_2)
WT_CJ4_CLIMATE_CONTROL_COMPON#2 (>L:CLIMATE_CONTROL) (* COMP ON *) 2
WT_CJ4_CLIMATE_CONTROL_NORM#1 (>L:CLIMATE_CONTROL) (* NORM *) 1
WT_CJ4_CLIMATE_CONTROL_OFF#0 (>L:CLIMATE_CONTROL) (* OFF *) 0
WT_CJ4_COCKPIT_TEMP_DEC#(L:PASSENGER_KNOB_HEAT_1) 4 - 0 max (>L:PASSENGER_KNOB_HEAT_1)
WT_CJ4_COCKPIT_TEMP_INC#(L:PASSENGER_KNOB_HEAT_1) 4 + 100 min (>L:PASSENGER_KNOB_HEAT_1)
WT_CJ4_COPILOT_FAN_DEC#(L:PASSENGER_KNOB_AIR_2) 4 - 0 max (>L:PASSENGER_KNOB_AIR_2)
WT_CJ4_COPILOT_FAN_INC#(L:PASSENGER_KNOB_AIR_2) 4 + 100 min (>L:PASSENGER_KNOB_AIR_2)
WT_CJ4_PILOT_FAN_DEC#(L:PASSENGER_KNOB_AIR_1) 4 - 0 max (>L:PASSENGER_KNOB_AIR_1)
WT_CJ4_PILOT_FAN_INC#(L:PASSENGER_KNOB_AIR_1) 4 + 100 min (>L:PASSENGER_KNOB_AIR_1)
WT_CJ4_PRESSOURCE_FRESH#4 (>L:PRESSOURCE) (* FRESH *) 4
WT_CJ4_PRESSOURCE_L#1 (>L:PRESSOURCE) (* LEFT *) 1
WT_CJ4_PRESSOURCE_NORM#2 (>L:PRESSOURCE) (* NORM *) 2
WT_CJ4_PRESSOURCE_OFF#0 (>L:PRESSOURCE) (* OFF *) 0
WT_CJ4_PRESSOURCE_R#3 (>L:PRESSOURCE) (* RIGHT *) 3
WT_CJ4_PRESSURE_DUMP_PUSH#(>K:PRESSURIZATION_PRESSURE_DUMP_SWITCH)
//Working Title/CJ4/Anti-Ice
WT_CJ4_ANTIICE_WINGENG_LEFT_TOG#(L:DEICE_Airframe_1) ! (>L:DEICE_Airframe_1) (L:DEICE_Airframe_1) ! (L:DEICE_Airframe_2) ! and (A:STRUCTURAL DEICE SWITCH, Bool) == if{ (>K:TOGGLE_STRUCTURAL_DEICE) }
WT_CJ4_ANTIICE_WINGENG_RIGHT_TOG#(L:DEICE_Airframe_2) ! (>L:DEICE_Airframe_2) (L:DEICE_Airframe_1) ! (L:DEICE_Airframe_2) ! and (A:STRUCTURAL DEICE SWITCH, Bool) == if{ (>K:TOGGLE_STRUCTURAL_DEICE) }
WT_CJ4_ANTIICE_ENG_LEFT_TOG#(>K:ANTI_ICE_TOGGLE_ENG1)
WT_CJ4_ANTIICE_ENG_LR_TOG#(>K:ANTI_ICE_TOGGLE_ENG1) (>K:ANTI_ICE_TOGGLE_ENG2)
WT_CJ4_ANTIICE_ENG_RIGHT_TOG#(>K:ANTI_ICE_TOGGLE_ENG2)
WT_CJ4_ANTIICE_PITOTS_TOG#(>K:PITOT_HEAT_TOGGLE)
WT_CJ4_ANTIICE_PITOT_1_OFF#1 (>K:PITOT_HEAT_OFF)
WT_CJ4_ANTIICE_PITOT_1_ON#1 (>K:PITOT_HEAT_ON)
WT_CJ4_ANTIICE_PITOT_1_TOG#1 (>K:PITOT_HEAT_TOGGLE) 
WT_CJ4_ANTIICE_PITOT_2_OFF#2 (>K:PITOT_HEAT_OFF)
WT_CJ4_ANTIICE_PITOT_2_ON#2 (>K:PITOT_HEAT_ON)
WT_CJ4_ANTIICE_PITOT_2_TOG#2 (>K:PITOT_HEAT_TOGGLE) 
WT_CJ4_ANTIICE_WINGENG_LR_OFF#0 (>L:DEICE_Airframe_1) 0 (>L:DEICE_Airframe_2)
WT_CJ4_ANTIICE_WINGENG_LR_ON#1 (>L:DEICE_Airframe_1) 1 (>L:DEICE_Airframe_2)
WT_CJ4_ANTIICE_WINGENG_LR_TOG#(L:DEICE_Airframe_1) ! d (>L:DEICE_Airframe_1) (>L:DEICE_Airframe_2) (L:DEICE_Airframe_1) ! (A:STRUCTURAL DEICE SWITCH, Bool) == if{ (>K:TOGGLE_STRUCTURAL_DEICE) }
WT_CJ4_WING_LIGHT_TOG#1 (L:LIGHTING_WING_1) ! d (>L:LIGHTING_WING_1) (>K:2:WING_LIGHTS_SET)
//Working Title/CJ4/Autopilot
WT_CJ4_AP_Disengage_Bar_Down#0 (>K:AUTOPILOT_DISENGAGE_SET)
WT_CJ4_AP_Disengage_Bar_Up#1 (>K:AUTOPILOT_DISENGAGE_SET)
WT_CJ4_AP_ALT_ALERT_CANCEL# 0 (>L:WT_CJ4_Altitude_Alerter_Active) 1 (>L:WT_CJ4_Altitude_Alerter_Cancel)
WT_CJ4_AP_BUTTON_PRESSED#(A:AUTOPILOT DISENGAGED, Bool) ! if{ (>K:AP_MASTER) (A:AUTOPILOT MASTER, Bool) ! if{ (>H:Generic_Autopilot_Manual_Off) (A:AUTOPILOT YAW DAMPER, bool) if{ (>K:YAW_DAMPER_TOGGLE) } } els{ (A:AUTOPILOT YAW DAMPER, bool) ! if{ (>K:YAW_DAMPER_TOGGLE) } } }
WT_CJ4_AP_CRS1_DEC#(L:WT_CJ4_LNAV_MODE, Number) 2 == if{ (A:NAV OBS:2, degree) 1 - dnor (>K:VOR2_SET) } els{ (A:NAV OBS:1, degree) 1 - dnor (>K:VOR1_SET) }
WT_CJ4_AP_CRS1_INC#(L:WT_CJ4_LNAV_MODE, Number) 2 == if{ (A:NAV OBS:2, degree) 1 + dnor (>K:VOR2_SET) } els{ (A:NAV OBS:1, degree) 1 + dnor (>K:VOR1_SET) }
WT_CJ4_AP_CRS1_PRESSED#(A:HEADING INDICATOR, degrees) sp0 (L:WT_CJ4_LNAV_MODE, Number) 2 == if{ l0 (>K:VOR2_SET) } els{ l0 (>K:VOR1_SET) }
WT_CJ4_AP_CRS2_PRESSED#(A:HEADING INDICATOR, degrees) sp0 (L:WT_CJ4_LNAV_MODE, Number) 2 == if{ l0 (>K:VOR2_SET) } els{ l0 (>K:VOR1_SET) }
WT_CJ4_AP_DISENGAGE_BAR_TOGGLE#(A:AUTOPILOT DISENGAGED, Bool) if{ 0 } els{ 1 } (>K:AUTOPILOT_DISENGAGE_SET) 
WT_CJ4_AP_FLC_PRESSED#(>H:WT_CJ4_AP_FLC_PRESSED) (A:AIRSPEED INDICATED, knots) (>K:AP_SPD_VAR_SET)
WT_CJ4_AP_SPEED_DEC#(L:XMLVar_AirspeedIsInMach, Bool) if{ (>K:AP_MACH_VAR_DEC) }  els{ (>K:AP_SPD_VAR_DEC) }
WT_CJ4_AP_SPEED_INC#(L:XMLVar_AirspeedIsInMach, Bool) if{ (>K:AP_MACH_VAR_INC) } els{ (>K:AP_SPD_VAR_INC) }
WT_CJ4_AP_VS_DEC#(A:AUTOPILOT VERTICAL HOLD, bool) if{ (>K:AP_VS_VAR_DEC) }  els{ (>K:AP_PITCH_REF_INC_DN) }
WT_CJ4_AP_VS_INC#(A:AUTOPILOT VERTICAL HOLD, bool) if{ (>K:AP_VS_VAR_INC) } els{ (>K:AP_PITCH_REF_INC_UP) }
WT_CJ4_AP_ALT_FAST_DEC#1000 (>K:AP_ALT_VAR_DEC)
WT_CJ4_AP_ALT_FAST_INC#1000 (>K:AP_ALT_VAR_INC)
WT_CJ4_AP_ALT_PRESSED#(>H:WT_CJ4_AP_ALT_PRESSED)
WT_CJ4_AP_ALT_VAR_DEC#100 (>K:AP_ALT_VAR_DEC)
WT_CJ4_AP_ALT_VAR_INC#100 (>K:AP_ALT_VAR_INC)
WT_CJ4_AP_APPR_PRESSED#(>H:WT_CJ4_AP_APPR_PRESSED)
WT_CJ4_AP_BC_PRESSED#(>H:WT_CJ4_AP_BC_PRESSED)
WT_CJ4_AP_FD_PRESSED#(>H:WT_CJ4_AP_FD_TOGGLE)
WT_CJ4_AP_HALFBANK_PRESSED#(A:AUTOPILOT MAX BANK, degrees) 16 < if{ (>K:AP_MAX_BANK_INC) } els{ (>K:AP_MAX_BANK_DEC) }
WT_CJ4_AP_HDG_DEC#1 (>K:HEADING_BUG_DEC)
WT_CJ4_AP_HDG_FAST_DEC#(A:AUTOPILOT HEADING LOCK DIR:1, Degrees) 5 - dnor (>K:1:HEADING_BUG_SET)
WT_CJ4_AP_HDG_FAST_INC#(A:AUTOPILOT HEADING LOCK DIR:1, Degrees) 5 + dnor (>K:1:HEADING_BUG_SET)
WT_CJ4_AP_HDG_INC#1 (>K:HEADING_BUG_INC)
WT_CJ4_AP_HDG_PRESSED#(>H:WT_CJ4_AP_HDG_PRESSED)
WT_CJ4_AP_HDG_SYNC#(A:HEADING INDICATOR, degrees) (>K:HEADING_BUG_SET)
WT_CJ4_AP_NAV_PRESSED#(>H:WT_CJ4_AP_NAV_PRESSED)
WT_CJ4_AP_SPEED_FAST_DEC#(L:XMLVAR_AirSpeedIsInMach) if{ (>K:AP_MACH_VAR_DEC) } els{ (A:AUTOPILOT AIRSPEED HOLD VAR, knot) 10 - 10 / near 10 * 0 max (>K:AP_SPD_VAR_SET) }
WT_CJ4_AP_SPEED_FAST_INC#(L:XMLVAR_AirSpeedIsInMach) if{ (>K:AP_MACH_VAR_INC) } els{ (A:AUTOPILOT AIRSPEED HOLD VAR, knot) 10 + 10 / ceil 10 * 0 max (>K:AP_SPD_VAR_SET) }
WT_CJ4_AP_SPEED_PRESSED#(L:XMLVAR_AirSpeedIsInMach, Bool) ! (>L:XMLVAR_AirSpeedIsInMach, Bool)
WT_CJ4_AP_VNAV_PRESSED#(>H:WT_CJ4_AP_VNAV_PRESSED)
WT_CJ4_AP_VS_PRESSED#(>H:WT_CJ4_AP_VS_PRESSED)
WT_CJ4_AP_XFR_PRESSED#(L:XMLVAR_PushXFR) ! (>L:XMLVAR_PushXFR)
WT_CJ4_AP_YD_OFF#0 (A:AUTOPILOT YAW DAMPER, Bool) != if{ (>K:YAW_DAMPER_TOGGLE) }
WT_CJ4_AP_YD_ON#1 (A:AUTOPILOT YAW DAMPER, Bool) != if{ (>K:YAW_DAMPER_TOGGLE) }
WT_CJ4_AP_YD_PRESSED#(>K:YAW_DAMPER_TOGGLE)
//Working Title/CJ4/Avionics
CJ4_Generic_Upr_TILT_DEC#(>H:CJ4_Generic_Upr_TILT_DEC)
CJ4_Generic_Upr_TILT_INC#(>H:CJ4_Generic_Upr_TILT_INC)
Generic_Lwr_DATA_DEC#(>H:Generic_Lwr_DATA_DEC)
Generic_Lwr_DATA_INC#(>H:Generic_Lwr_DATA_INC)
Generic_Lwr_DATA_PUSH#(>H:Generic_Lwr_DATA_PUSH)
Generic_Lwr_DATA_PUSH_LONG#(>H:Generic_Lwr_DATA_PUSH_LONG)
Generic_Lwr_DATA_SHORT_LONG_PRESS#(E:SIMULATION TIME, second) 0.25 + (>L:MF_timer)
Generic_Lwr_DATA_SHORT_LONG_RELEASE#(E:SIMULATION TIME, second) (L:MF_timer) < if{ (>H:Generic_Lwr_DATA_PUSH) } els{ (>H:Generic_Lwr_DATA_PUSH_LONG) } 
Generic_Lwr_Hold_MEM1_1#(>H:Generic_Lwr_Hold_MEM1_1)
Generic_Lwr_Hold_MEM2_1#(>H:Generic_Lwr_Hold_MEM2_1)
Generic_Lwr_Hold_MEM3_1#(>H:Generic_Lwr_Hold_MEM3_1)
Generic_Lwr_JOYSTICK_DOWN#(>H:Generic_Lwr_JOYSTICK_DOWN)
Generic_Lwr_JOYSTICK_LEFT#(>H:Generic_Lwr_JOYSTICK_LEFT)
Generic_Lwr_JOYSTICK_RIGHT#(>H:Generic_Lwr_JOYSTICK_RIGHT)
Generic_Lwr_JOYSTICK_UP#(>H:Generic_Lwr_JOYSTICK_UP)
Generic_Lwr_MENU_ADV_DEC#(>H:Generic_Lwr_MENU_ADV_DEC)
Generic_Lwr_MENU_ADV_INC#(>H:Generic_Lwr_MENU_ADV_INC)
Generic_Lwr_Push_CAS_PAGE#(>H:Generic_Lwr_Push_CAS_PAGE)
Generic_Lwr_Push_CKLST_1#(>H:Generic_Lwr_Push_CKLST_1)
Generic_Lwr_Push_Chart_1#(>H:Generic_Lwr_Push_Chart_1)
Generic_Lwr_Push_ENG#(>H:Generic_Lwr_Push_ENG)
Generic_Lwr_Push_ESC#(>H:Generic_Lwr_Push_ESC)
Generic_Lwr_Push_LWR_MENU#(>H:Generic_Lwr_Push_LWR_MENU)
Generic_Lwr_Push_MEM1_1#(>H:Generic_Lwr_Push_MEM1_1)
Generic_Lwr_Push_MEM2_1#(>H:Generic_Lwr_Push_MEM2_1)
Generic_Lwr_Push_MEM3_1#(>H:Generic_Lwr_Push_MEM3_1)
Generic_Lwr_Push_NAV_DATA#(>H:Generic_Lwr_Push_NAV_DATA)
Generic_Lwr_Push_PASSBRIEF_1#(>H:Generic_Lwr_Push_PASSBRIEF_1)
Generic_Lwr_Push_SYS#(>H:Generic_Lwr_Push_SYS)
Generic_Lwr_Push_TERR_WX#(>H:Generic_Lwr_Push_TERR_WX)
Generic_Lwr_Push_TFC#(>H:Generic_Lwr_Push_TFC)
Generic_Lwr_Push_UPR_MENU#(>H:Generic_Lwr_Push_UPR_MENU)
Generic_Lwr_Push_ZOOM_DEC#(>H:Generic_Lwr_Push_ZOOM_DEC)
Generic_Lwr_Push_ZOOM_INC#(>H:Generic_Lwr_Push_ZOOM_INC)
Generic_Upr_Data_DEC#(>H:Generic_Upr_Data_DEC)
Generic_Upr_Data_INC#(>H:Generic_Upr_Data_INC)
Generic_Upr_Data_PUSH#(>H:Generic_Upr_Data_PUSH)
Generic_Upr_MENU_ADV_DEC#(>H:Generic_Upr_MENU_ADV_DEC)
Generic_Upr_MENU_ADV_INC#(>H:Generic_Upr_MENU_ADV_INC)
Generic_Upr_Push_ESC#(>H:Generic_Upr_Push_ESC)
Generic_Upr_Push_ET#(>H:Generic_Upr_Push_ET)
Generic_Upr_Push_FRMT#(>H:Generic_Upr_Push_FRMT)
Generic_Upr_Push_NAV#(>H:Generic_Upr_Push_NAV)
Generic_Upr_Push_PFD_MENU#(>H:Generic_Upr_Push_PFD_MENU)
Generic_Upr_Push_REFS_MENU#(>H:Generic_Upr_Push_REFS_MENU)
Generic_Upr_Push_TERR_WX#(>H:Generic_Upr_Push_TERR_WX)
Generic_Upr_Push_TFC#(>H:Generic_Upr_Push_TFC)
Generic_Upr_RANGE_DEC#(>H:Generic_Upr_RANGE_DEC)
Generic_Upr_RANGE_INC#(>H:Generic_Upr_RANGE_INC)
MFD1_MEM1-1_Button_Short_Long_Press#(E:SIMULATION TIME, second) 0.25 + (>L:MEM1_Press)
MFD1_MEM1-1_Button_Short_Long_Release#(E:SIMULATION TIME, second) (L:MEM1_Press) < if{ (>H:Generic_Lwr_Push_MEM1_1) } els{ (>H:Generic_Lwr_Hold_MEM1_1) }
MFD1_MEM2-1_Button_Short_Long_Press_#(E:SIMULATION TIME, second) 0.25 + (>L:MEM2_Press)
MFD1_MEM2-1_Button_Short_Long_Release#(E:SIMULATION TIME, second) (L:MEM2_Press) < if{ (>H:Generic_Lwr_Push_MEM2_1) } els{ (>H:Generic_Lwr_Hold_MEM2_1) }
MFD1_MEM3-1_Button_Short_Long_Press#(E:SIMULATION TIME, second) 0.25 + (>L:MEM3_Press)
MFD1_MEM3-1_Short_Long_Release#(E:SIMULATION TIME, second) (L:MEM3_Press) < if{ (>H:Generic_Lwr_Push_MEM3_1) } els{ (>H:Generic_Lwr_Hold_MEM3_1) }
WT_CJ4_BARO1_DEC#(L:XMLVAR_Baro1_ForcedToSTD) ! if{ 1 (>K:KOHLSMAN_DEC) (A:KOHLSMAN SETTING MB:1, mbars) 16 * (>L:XMLVAR_Baro1_SavedPressure) } els{ (L:XMLVAR_Baro1_SavedPressure) 5 - (>L:XMLVAR_Baro1_SavedPressure) }
WT_CJ4_BARO1_INC#(L:XMLVAR_Baro1_ForcedToSTD) ! if{ 1 (>K:KOHLSMAN_INC) (A:KOHLSMAN SETTING MB:1, mbars) 16 * (>L:XMLVAR_Baro1_SavedPressure) } els{ (L:XMLVAR_Baro1_SavedPressure) 5 + (>L:XMLVAR_Baro1_SavedPressure) } 
WT_CJ4_BARO1_STD_PUSH#(L:XMLVAR_Baro1_ForcedToSTD) ! (>L:XMLVAR_Baro1_ForcedToSTD) (L:XMLVAR_Baro1_ForcedToSTD) if{ (A:KOHLSMAN SETTING MB:1, mbars) 16 * (>L:XMLVAR_Baro1_SavedPressure) 1 (>K:BAROMETRIC_STD_PRESSURE) } els{ 1 (L:XMLVAR_Baro1_SavedPressure, number) (>K:2:KOHLSMAN_SET) 2 (L:XMLVAR_Baro1_SavedPressure, number) (>K:2:KOHLSMAN_SET) }
WT_CJ4_BARO2_DEC#(L:XMLVAR_Baro1_ForcedToSTD) ! if{ 1 (>K:KOHLSMAN_DEC) (A:KOHLSMAN SETTING MB:1, mbars) 16 * (>L:XMLVAR_Baro1_SavedPressure) } els{ (L:XMLVAR_Baro1_SavedPressure) 5 - (>L:XMLVAR_Baro1_SavedPressure) }
WT_CJ4_BARO2_INC#(L:XMLVAR_Baro1_ForcedToSTD) ! if{ 1 (>K:KOHLSMAN_INC) (A:KOHLSMAN SETTING MB:1, mbars) 16 * (>L:XMLVAR_Baro1_SavedPressure) } els{ (L:XMLVAR_Baro1_SavedPressure) 5 + (>L:XMLVAR_Baro1_SavedPressure) }
WT_CJ4_BARO2_STD_PUSH#(L:XMLVAR_Baro1_ForcedToSTD) ! (>L:XMLVAR_Baro1_ForcedToSTD) (L:XMLVAR_Baro1_ForcedToSTD) if{ (A:KOHLSMAN SETTING MB:1, mbars) 16 * (>L:XMLVAR_Baro1_SavedPressure) 1 (>K:BAROMETRIC_STD_PRESSURE) } els{ 1 (L:XMLVAR_Baro1_SavedPressure) (>K:2:KOHLSMAN_SET) 2 (L:XMLVAR_Baro1_SavedPressure) (>K:2:KOHLSMAN_SET) } 
WT_CJ4_BARO3_DEC#(L:XMLVAR_Baro2_ForcedToSTD) ! if{ 2 (>K:KOHLSMAN_DEC) (A:KOHLSMAN SETTING MB:1, mbars) 16 * (>L:XMLVAR_Baro2_SavedPressure) } els{ (L:XMLVAR_Baro2_SavedPressure) 5 - (>L:XMLVAR_Baro2_SavedPressure) } 
WT_CJ4_BARO3_INC#(L:XMLVAR_Baro2_ForcedToSTD) ! if{ 2 (>K:KOHLSMAN_INC) (A:KOHLSMAN SETTING MB:1, mbars) 16 * (>L:XMLVAR_Baro2_SavedPressure) } els{ (L:XMLVAR_Baro2_SavedPressure) 5 + (>L:XMLVAR_Baro2_SavedPressure) } 
WT_CJ4_LNAV_MODE_PRESSED#(>H:Generic_Upr_Push_NAV)
//Working Title/CJ4/Controls
AILERON_TRIM_LEFT_WING_DN#(A:AUTOPILOT MASTER, bool) ! if{ (A:RUDDER TRIM PCT, percent) 0.6250 - 163.83 * -16383 max 16383 min (>K:RUDDER_TRIM_SET_EX1) } 2 (>L:XMLVAR_RudderTrim_Switch_1)
AILERON_TRIM_RIGHT_WING_DN#(A:AILERON TRIM PCT, percent) 1 + 163.83 * -16383 max 16383 min (>K:AILERON_TRIM_SET_EX1) }
RUDDER_TRIM_NOSE_LEFT#(A:AUTOPILOT MASTER, bool) ! if{ (A:RUDDER TRIM PCT, percent) 0.6250 - 163.83 * -16383 max 16383 min (>K:RUDDER_TRIM_SET_EX1) }
RUDDER_TRIM_NOSE_RIGHT#(A:AUTOPILOT MASTER, bool) ! if{ (A:RUDDER TRIM PCT, percent) 0.6250 + 163.83 * -16383 max 16383 min (>K:RUDDER_TRIM_SET_EX1) }
SEC_ELEV_TRIM_ENABLE_TOGGLE#(L:SEC_ELEV_TRIM_ENABLE) ! (>L:SEC_ELEV_TRIM_ENABLE)
SECONDARY_ELEV_TRIM_NOSE_DOWN#(L:SEC_ELEV_TRIM_ENABLE) if{ (A:ELEVATOR TRIM PCT, percent) 0.666667 - 163.83 * 16383 min -16383 max (>K:ELEVATOR_TRIM_SET) }
SECONDARY_ELEV_TRIM_NOSE_UP#(L:SEC_ELEV_TRIM_ENABLE) if{ (A:ELEVATOR TRIM PCT, percent) 0.666667 + 163.83 * 16383 min -16383 max (>K:ELEVATOR_TRIM_SET) }
//Working Title/CJ4/Electrical
WT_CJ4_AVIONICS_FTL_EMER_TOG#4 1 (>K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE) 23 (>K:ELECTRICAL_CIRCUIT_TOGGLE) 5 2 (>K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE) 24 (>K:ELECTRICAL_CIRCUIT_TOGGLE) 0 (>L:XMLVAR_AVIONICS_IsComposite) 49 (>K:ELECTRICAL_CIRCUIT_TOGGLE) (L:WT_CJ4_EMER_LIGHT_ARMED) ! (>L:WT_CJ4_EMER_LIGHT_ARMED)
WT_CJ4_AVIONICS_MASTER_DSP#1 (>A:BUS LOOKUP INDEX, number) (A:BUS CONNECTION ON:4, bool) if{ 4 1 (>K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE) } (A:CIRCUIT SWITCH ON:23, bool) if{ 23 (>K:ELECTRICAL_CIRCUIT_TOGGLE) } 2 (>A:BUS LOOKUP INDEX, number) (A:BUS CONNECTION ON:5, bool) ! if{ 5 2 (>K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE) } (A:CIRCUIT SWITCH ON:24, bool) ! if{ 24 (>K:ELECTRICAL_CIRCUIT_TOGGLE) } 1 (>L:XMLVAR_AVIONICS_IsComposite)
WT_CJ4_AVIONICS_MASTER_OFF#1 (>A:BUS LOOKUP INDEX, number) (A:BUS CONNECTION ON:4, bool) if{ 4 1 (>K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE) } (A:CIRCUIT SWITCH ON:23, bool) if{ 23 (>K:ELECTRICAL_CIRCUIT_TOGGLE) } 2 (>A:BUS LOOKUP INDEX, number) (A:BUS CONNECTION ON:5, bool) if{ 5 2 (>K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE) } (A:CIRCUIT SWITCH ON:24, bool) if{ 24 (>K:ELECTRICAL_CIRCUIT_TOGGLE) } 0 (>L:XMLVAR_AVIONICS_IsComposite)
WT_CJ4_AVIONICS_MASTER_ON#1 (>A:BUS LOOKUP INDEX, number) (A:BUS CONNECTION ON:4, bool) ! if{ 4 1 (>K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE) } (A:CIRCUIT SWITCH ON:23, bool) ! if{ 23 (>K:ELECTRICAL_CIRCUIT_TOGGLE) } 2 (>A:BUS LOOKUP INDEX, number) (A:BUS CONNECTION ON:5, bool) ! if{ 5 2 (>K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE) } (A:CIRCUIT SWITCH ON:24, bool) ! if{ 24 (>K:ELECTRICAL_CIRCUIT_TOGGLE) } 0 (>L:XMLVAR_AVIONICS_IsComposite)
WT_CJ4_EMER_LIGHT_ARM#1 (>L:WT_CJ4_EMER_LIGHT_ARMED) }
WT_CJ4_EMER_LIGHT_OFF#0 (>L:WT_CJ4_EMER_LIGHT_ARMED) }
WT_CJ4_EMER_LIGHT_TOG#(L:WT_CJ4_EMER_LIGHT_ARMED) ! (>L:WT_CJ4_EMER_LIGHT_ARMED)
WT_CJ4_GENERATOR_L_OFF#(A:GENERAL ENG MASTER ALTERNATOR:1, bool) if{ (>K:TOGGLE_ALTERNATOR1) }
WT_CJ4_GENERATOR_L_ON#(A:GENERAL ENG MASTER ALTERNATOR:1, bool) ! if{ (>K:TOGGLE_ALTERNATOR1) }
WT_CJ4_GENERATOR_R_OFF#(A:GENERAL ENG MASTER ALTERNATOR:2, bool) if{ (>K:TOGGLE_ALTERNATOR2) }
WT_CJ4_GENERATOR_R_ON#(A:GENERAL ENG MASTER ALTERNATOR:2, bool) ! if{ (>K:TOGGLE_ALTERNATOR2) }
WT_CJ4_GEN_LR_TOG#(>K:TOGGLE_ALTERNATOR1) (>K:TOGGLE_ALTERNATOR2)
WT_CJ4_GEN_L_RESET#1 (>L:MF_WTCJ4_Alternator_1_Reset,bool)
WT_CJ4_GEN_R_RESET#1 (>L:MF_WTCJ4_Alternator_2_Reset,bool)
WT_CJ4_MASTER_BATTERY_EMER#(A:ELECTRICAL MASTER BATTERY:1, bool) ! if{ 1 (>K:TOGGLE_MASTER_BATTERY) } 1 (>L:XMLVAR_Essential_Bus_ON) 1 (>A:BUS LOOKUP INDEX, Number) (A:BUS CONNECTION ON:2, Bool) (L:XMLVAR_Essential_Bus_ON) == if{ 2 1 (>K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE) } (L:XMLVAR_Essential_Bus_ON) if{ 1 (>A:BUS LOOKUP INDEX, Number) (A:BUS CONNECTION ON:3, Bool) if{ 1 3 (>K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE) } 2 (>A:BUS LOOKUP INDEX, Number) (A:BUS CONNECTION ON:3, Bool) ! if{ 2 3 (>K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE) } } els{ 1 (>A:BUS LOOKUP INDEX, Number) (A:BUS CONNECTION ON:3, Bool) ! if{ 1 3 (>K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE) } 2 (>A:BUS LOOKUP INDEX, Number) (A:BUS CONNECTION ON:3, Bool) if{ 2 3 (>K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE) } }
WT_CJ4_MASTER_BATTERY_OFF#(A:ELECTRICAL MASTER BATTERY:1, bool) if{ 1 (>K:TOGGLE_MASTER_BATTERY) } 0 (>L:XMLVAR_Essential_Bus_ON) 1 (>A:BUS LOOKUP INDEX, Number) (A:BUS CONNECTION ON:2, Bool) (L:XMLVAR_Essential_Bus_ON) == if{ 2 1 (>K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE) } (L:XMLVAR_Essential_Bus_ON) if{ 1 (>A:BUS LOOKUP INDEX, Number) (A:BUS CONNECTION ON:3, Bool) if{ 1 3 (>K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE) } 2 (>A:BUS LOOKUP INDEX, Number) (A:BUS CONNECTION ON:3, Bool) ! if{ 2 3 (>K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE) } } els{ 1 (>A:BUS LOOKUP INDEX, Number) (A:BUS CONNECTION ON:3, Bool) ! if{ 1 3 (>K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE) } 2 (>A:BUS LOOKUP INDEX, Number) (A:BUS CONNECTION ON:3, Bool) if{ 2 3 (>K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE) } }
WT_CJ4_MASTER_BATTERY_ON#(A:ELECTRICAL MASTER BATTERY:1, bool) ! if{ 1 (>K:TOGGLE_MASTER_BATTERY) } 0 (>L:XMLVAR_Essential_Bus_ON) 1 (>A:BUS LOOKUP INDEX, Number) (A:BUS CONNECTION ON:2, Bool) (L:XMLVAR_Essential_Bus_ON) == if{ 2 1 (>K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE) } (L:XMLVAR_Essential_Bus_ON) if{ 1 (>A:BUS LOOKUP INDEX, Number) (A:BUS CONNECTION ON:3, Bool) if{ 1 3 (>K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE) } 2 (>A:BUS LOOKUP INDEX, Number) (A:BUS CONNECTION ON:3, Bool) ! if{ 2 3 (>K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE) } } els{ 1 (>A:BUS LOOKUP INDEX, Number) (A:BUS CONNECTION ON:3, Bool) ! if{ 1 3 (>K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE) } 2 (>A:BUS LOOKUP INDEX, Number) (A:BUS CONNECTION ON:3, Bool) if{ 2 3 (>K:2:ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE) } }
WT_CJ4_STBY_FTL_OFF#(A:CIRCUIT SWITCH ON:49,bool) if{ 49 (>K:ELECTRICAL_CIRCUIT_TOGGLE) }
WT_CJ4_STBY_FTL_ON#(A:CIRCUIT SWITCH ON:49,bool) ! if{ 49 (>K:ELECTRICAL_CIRCUIT_TOGGLE) }
WT_CJ4_STBY_FTL_TOG#49 (>K:ELECTRICAL_CIRCUIT_TOGGLE)
//Working Title/CJ4/Engines
WT_CJ4_ENG_L_RUN_OFF#0 (>K:MIXTURE1_SET) 0 (>K:SET_FUEL_VALVE_ENG1)
WT_CJ4_ENG_L_RUN_ON#16384 (>K:MIXTURE1_SET) 1 (>K:SET_FUEL_VALVE_ENG1)
WT_CJ4_ENG_RUNSTOP_L_PUSH#(A:GENERAL ENG MIXTURE LEVER POSITION:1, Percent) 0 > if{ 0 (>K:MIXTURE1_SET) 0 (>K:SET_FUEL_VALVE_ENG1) } els{ 16384 (>K:MIXTURE1_SET) 1 (>K:SET_FUEL_VALVE_ENG1) }
WT_CJ4_ENG_RUNSTOP_R_PUSH#(A:GENERAL ENG MIXTURE LEVER POSITION:2, Percent) 0 > if{ 0 (>K:MIXTURE2_SET) 0 (>K:SET_FUEL_VALVE_ENG2) }  els{ 16384 (>K:MIXTURE2_SET) 1 (>K:SET_FUEL_VALVE_ENG2) }
WT_CJ4_ENG_R_RUN_OFF#0 (>K:MIXTURE2_SET) 0 (>K:SET_FUEL_VALVE_ENG2)
WT_CJ4_ENG_R_RUN_ON#16384 (>K:MIXTURE2_SET) 1 (>K:SET_FUEL_VALVE_ENG2)
WT_CJ4_ENG_START_DISENG#(A:GENERAL ENG STARTER:1, Bool) if{ (>K:TOGGLE_STARTER1) } (A:GENERAL ENG STARTER:2, Bool) if{ (>K:TOGGLE_STARTER2) }
WT_CJ4_ENG_START_LEFT#(>K:TOGGLE_STARTER1)
WT_CJ4_ENG_START_LEFT_OFF#0 (A:GENERAL ENG STARTER:1, Bool) != if{ (>K:TOGGLE_STARTER1) }
WT_CJ4_ENG_START_LEFT_ON#1 (A:GENERAL ENG STARTER:1, Bool) != if{ (>K:TOGGLE_STARTER1) }
WT_CJ4_ENG_START_RIGHT#(>K:TOGGLE_STARTER2)
WT_CJ4_ENG_START_RIGHT_OFF#0 (A:GENERAL ENG STARTER:2, Bool) != if{ (>K:TOGGLE_STARTER2) }
WT_CJ4_ENG_START_RIGHT_ON#1 (A:GENERAL ENG STARTER:2, Bool) != if{ (>K:TOGGLE_STARTER2) }
WT_CJ4_IGNITION_MAN_L_PUSH#2 1 (A:TURB ENG IGNITION SWITCH EX1:1, enum) 1 == ? (>K:TURBINE_IGNITION_SWITCH_SET1)
WT_CJ4_IGNITION_MAN_R_PUSH#2 1 (A:TURB ENG IGNITION SWITCH EX1:2, enum) 1 == ? (>K:TURBINE_IGNITION_SWITCH_SET2)
//Working Title/CJ4/Fuel
WT_CJ4_FUEL_BOOST_MAN_L#(>K:TOGGLE_ELECT_FUEL_PUMP1)
WT_CJ4_FUEL_BOOST_MAN_R#(>K:TOGGLE_ELECT_FUEL_PUMP2)
WT_CJ4_FUEL_XFER_LTK#(A:CIRCUIT SWITCH ON:45, bool) if{ 45 (>K:ELECTRICAL_CIRCUIT_TOGGLE) } (A:CIRCUIT SWITCH ON:46, bool) ! if{ 46 (>K:ELECTRICAL_CIRCUIT_TOGGLE) }
WT_CJ4_FUEL_XFER_OFF#(A:CIRCUIT SWITCH ON:45, bool) if{ 45 (>K:ELECTRICAL_CIRCUIT_TOGGLE) } (A:CIRCUIT SWITCH ON:46, bool) if{ 46 (>K:ELECTRICAL_CIRCUIT_TOGGLE) }
WT_CJ4_FUEL_XFER_RTK#(A:CIRCUIT SWITCH ON:45, bool) ! if{ 45 (>K:ELECTRICAL_CIRCUIT_TOGGLE) } (A:CIRCUIT SWITCH ON:46, bool) if{ 46 (>K:ELECTRICAL_CIRCUIT_TOGGLE) }
//Working Title/CJ4/Lights
WT_CJ4_BEACON_LIGHT_OFF#0 (>L:LIGHTING_BEACON_1) 1 0 (>K:2:BEACON_LIGHTS_SET)
WT_CJ4_BEACON_LIGHT_ON#1 (>L:LIGHTING_BEACON_1) 1 1 (>K:2:BEACON_LIGHTS_SET)
WT_CJ4_BEACON_LIGHT_TOG#1 (L:LIGHTING_BEACON_1) ! d (>L:LIGHTING_BEACON_1) (>K:2:BEACON_LIGHTS_SET)
WT_CJ4_CABIN1_LIGHT_DEC#(L:LIGHTING_CABIN_1) 5 - 0 max 100 min d (>L:LIGHTING_CABIN_1) 5 (>K:2:LIGHT_POTENTIOMETER_SET) (A:LIGHT CABIN:1, Bool) (L:LIGHTING_CABIN_1) 0 > != if{ 1 (L:LIGHTING_CABIN_1) (>K:2:CABIN_LIGHTS_SET) }
WT_CJ4_CABIN1_LIGHT_INC#(L:LIGHTING_CABIN_1) 5 + 0 max 100 min d (>L:LIGHTING_CABIN_1) 5 (>K:2:LIGHT_POTENTIOMETER_SET) (A:LIGHT CABIN:1, Bool) (L:LIGHTING_CABIN_1) 0 > != if{ 1 (L:LIGHTING_CABIN_1) (>K:2:CABIN_LIGHTS_SET) }
WT_CJ4_CABIN1_LIGHT_TOGGLE#(A:LIGHT CABIN:1, Bool) ! if{ 1 1 (>K:2:CABIN_LIGHTS_SET) 100 5 (>K:2:LIGHT_POTENTIOMETER_SET) } els{ 0 5 (>K:2:LIGHT_POTENTIOMETER_SET) 1 0 (>K:2:CABIN_LIGHTS_SET) }
WT_CJ4_CABIN2_LIGHT_DEC#(L:LIGHTING_CABIN_2) 5 - 0 max 100 min d (>L:LIGHTING_CABIN_2) 6 (>K:2:LIGHT_POTENTIOMETER_SET) (A:LIGHT CABIN:2, Bool) (L:LIGHTING_CABIN_2) 0 > != if{ 2 (L:LIGHTING_CABIN_2) (>K:2:CABIN_LIGHTS_SET)
WT_CJ4_CABIN2_LIGHT_INC#(L:LIGHTING_CABIN_2) 5 + 0 max 100 min d (>L:LIGHTING_CABIN_2) 6 (>K:2:LIGHT_POTENTIOMETER_SET) (A:LIGHT CABIN:2, Bool) (L:LIGHTING_CABIN_2) 0 > != if{ 2 (L:LIGHTING_CABIN_2) (>K:2:CABIN_LIGHTS_SET)
WT_CJ4_CABIN2_LIGHT_TOGGLE#(A:LIGHT CABIN:2, Bool) ! if{ 2 1 (>K:2:CABIN_LIGHTS_SET) 100 6 (>K:2:LIGHT_POTENTIOMETER_SET) } els{ 0 6 (>K:2:LIGHT_POTENTIOMETER_SET) 2 0 (>K:2:CABIN_LIGHTS_SET) }
WT_CJ4_FLOOD_LIGHT_DEC#(L:LIGHTING_CABIN_3) 5 - 0 max 100 min d (>L:LIGHTING_CABIN_3) 4 (>K:2:LIGHT_POTENTIOMETER_SET) (A:LIGHT CABIN:3, Bool) (L:LIGHTING_CABIN_3) 0 > != if{ 3 (L:LIGHTING_CABIN_3) (>K:2:CABIN_LIGHTS_SET)
WT_CJ4_FLOOD_LIGHT_INC#(L:LIGHTING_CABIN_3) 5 + 0 max 100 min d (>L:LIGHTING_CABIN_3) 4 (>K:2:LIGHT_POTENTIOMETER_SET) (A:LIGHT CABIN:3, Bool) (L:LIGHTING_CABIN_3) 0 > != if{ 3 (L:LIGHTING_CABIN_3) (>K:2:CABIN_LIGHTS_SET)
WT_CJ4_FLOOD_LIGHT_TOGGLE#(A:LIGHT CABIN:3, Bool) ! if{ 3 1 (>K:2:CABIN_LIGHTS_SET) 100 4 (>K:2:LIGHT_POTENTIOMETER_SET) } els{ 0 4 (>K:2:LIGHT_POTENTIOMETER_SET) 3 0 (>K:2:CABIN_LIGHTS_SET) }
WT_CJ4_LANDING_LIGHTS_OFF#(A:LIGHT LANDING, Bool) if{ (>K:LANDING_LIGHTS_TOGGLE) }
WT_CJ4_LANDING_LIGHTS_ON#(A:LIGHT LANDING, Bool) ! if{ (>K:LANDING_LIGHTS_TOGGLE) (A:LIGHT TAXI, Bool) if{ (>K:TOGGLE_TAXI_LIGHTS) } (A:LIGHT RECOGNITION, Bool) if{ (>K:TOGGLE_RECOGNITION_LIGHTS) } }
WT_CJ4_LANDING_LIGHTS_TOGGLE#(>K:LANDING_LIGHTS_TOGGLE) (A:LIGHT TAXI, Bool) if{ (>K:TOGGLE_TAXI_LIGHTS) } (A:LIGHT RECOGNITION, Bool) if{ (>K:TOGGLE_RECOGNITION_LIGHTS) }
WT_CJ4_LOGO_LIGHT_TOGGLE#1 (L:LIGHTING_LOGO_1) ! d (>L:LIGHTING_LOGO_1) (>K:2:LOGO_LIGHTS_SET)
WT_CJ4_MFD1_LIGHT_DEC#(L:LIGHTING_POTENTIOMETER_17) 5 - 0 max 100 min d (>L:LIGHTING_POTENTIOMETER_17) 17 (>K:2:LIGHT_POTENTIOMETER_SET)
WT_CJ4_MFD1_LIGHT_INC#(L:LIGHTING_POTENTIOMETER_17) 5 + 0 max 100 min d (>L:LIGHTING_POTENTIOMETER_17) 17 (>K:2:LIGHT_POTENTIOMETER_SET)
WT_CJ4_MFD2_LIGHT_DEC#(L:LIGHTING_POTENTIOMETER_18) 5 - 0 max 100 min d (>L:LIGHTING_POTENTIOMETER_18) 18 (>K:2:LIGHT_POTENTIOMETER_SET)
WT_CJ4_MFD2_LIGHT_INC#(L:LIGHTING_POTENTIOMETER_18) 5 + 0 max 100 min d (>L:LIGHTING_POTENTIOMETER_18) 18 (>K:2:LIGHT_POTENTIOMETER_SET)
WT_CJ4_NAV_LIGHT_OFF#0 (>L:LIGHTING_NAV_1) 1 0 (>K:2:NAV_LIGHTS_SET)
WT_CJ4_NAV_LIGHT_ON#1 (>L:LIGHTING_NAV_1) 1 1 (>K:2:NAV_LIGHTS_SET)
WT_CJ4_NAV_LIGHT_TOG#1 (L:LIGHTING_NAV_1) ! d (>L:LIGHTING_NAV_1) (>K:2:NAV_LIGHTS_SET)
WT_CJ4_PANEL_LIGHTS_DEC#(L:LIGHTING_Knob_Master, number) 10 - 10 max (>L:LIGHTING_Knob_Master, number) 
WT_CJ4_PANEL_LIGHTS_INC#(L:LIGHTING_Knob_Master, number) 10 + 100 min (>L:LIGHTING_Knob_Master, number)
WT_CJ4_PANEL_LIGHTS_TOGGLE#(L:LIGHTING_Knob_Master, number) 90 > if{ 90 (>L:LIGHTING_Knob_Master, number) } els{ 100 (>L:LIGHTING_Knob_Master, number) }
WT_CJ4_PFD1_LIGHT_DEC#(L:LIGHTING_POTENTIOMETER_15) 5 - 0 max 100 min d (>L:LIGHTING_POTENTIOMETER_15) 15 (>K:2:LIGHT_POTENTIOMETER_SET)
WT_CJ4_PFD1_LIGHT_INC#(L:LIGHTING_POTENTIOMETER_15) 5 + 0 max 100 min d (>L:LIGHTING_POTENTIOMETER_15) 15 (>K:2:LIGHT_POTENTIOMETER_SET)
WT_CJ4_PFD2_LIGHT_DEC#(L:LIGHTING_POTENTIOMETER_16) 5 - 0 max 100 min d (>L:LIGHTING_POTENTIOMETER_16) 16 (>K:2:LIGHT_POTENTIOMETER_SET)
WT_CJ4_PFD2_LIGHT_INC#(L:LIGHTING_POTENTIOMETER_16) 5 + 0 max 100 min d (>L:LIGHTING_POTENTIOMETER_16) 16 (>K:2:LIGHT_POTENTIOMETER_SET)
WT_CJ4_RECOGNITION_LIGHTS_OFF#(A:LIGHT RECOGNITION, Bool) if{ (>K:TOGGLE_RECOGNITION_LIGHTS) }
WT_CJ4_RECOGNITION_LIGHTS_ON#(A:LIGHT RECOGNITION, Bool) ! if{ (>K:TOGGLE_RECOGNITION_LIGHTS) (A:LIGHT TAXI, Bool) if{ (>K:TOGGLE_TAXI_LIGHTS) } (A:LIGHT LANDING, Bool) if{ (>K:LANDING_LIGHTS_TOGGLE) } }
WT_CJ4_RECOGNITION_LIGHTS_TOGGLE#(>K:TOGGLE_RECOGNITION_LIGHTS) (A:LIGHT TAXI, Bool) if{ (>K:TOGGLE_TAXI_LIGHTS) } (A:LIGHT LANDING, Bool) if{ (>K:LANDING_LIGHTS_TOGGLE) }
WT_CJ4_SAFETY_LIGHT_TOGGLE#(L:SAFETY_LIGHT_ON) ! (>L:SAFETY_LIGHT_ON)
WT_CJ4_SEATBELT_LIGHT_TOGGLE#(L:SEATBELT_LIGHT_ON) ! (>L:SEATBELT_LIGHT_ON)
WT_CJ4_STROBE_LIGHT_OFF#0 (>L:LIGHTING_STROBE_1) 1 0 (>K:2:STROBES_SET)
WT_CJ4_STROBE_LIGHT_ON#1 (>L:LIGHTING_STROBE_1) 1 1 (>K:2:STROBES_SET)
WT_CJ4_STROBE_LIGHT_TOG#1 (L:LIGHTING_STROBE_1) ! d (>L:LIGHTING_STROBE_1) (>K:2:STROBES_SET)
WT_CJ4_TAXI_LIGHTS_OFF#(A:LIGHT TAXI, Bool) if{ (>K:TOGGLE_TAXI_LIGHTS) }
WT_CJ4_TAXI_LIGHTS_ON#(A:LIGHT TAXI, Bool) ! if{ (>K:TOGGLE_TAXI_LIGHTS) (A:LIGHT LANDING, Bool) if{ (>K:LANDING_LIGHTS_TOGGLE) } (A:LIGHT RECOGNITION, Bool) if{ (>K:TOGGLE_RECOGNITION_LIGHTS) } }
WT_CJ4_TAXI_LIGHTS_TOGGLE#(>K:TOGGLE_TAXI_LIGHTS) (A:LIGHT LANDING, Bool) if{ (>K:LANDING_LIGHTS_TOGGLE) } (A:LIGHT RECOGNITION, Bool) if{ (>K:TOGGLE_RECOGNITION_LIGHTS) }
//Working Title/CJ4/Navigation
CJ4_FMC_1_BTN_0#(>H:CJ4_FMC_1_BTN_0)
CJ4_FMC_1_BTN_1#(>H:CJ4_FMC_1_BTN_1)
CJ4_FMC_1_BTN_2#(>H:CJ4_FMC_1_BTN_2)
CJ4_FMC_1_BTN_3#(>H:CJ4_FMC_1_BTN_3)
CJ4_FMC_1_BTN_4#(>H:CJ4_FMC_1_BTN_4)
CJ4_FMC_1_BTN_5#(>H:CJ4_FMC_1_BTN_5)
CJ4_FMC_1_BTN_6#(>H:CJ4_FMC_1_BTN_6)
CJ4_FMC_1_BTN_7#(>H:CJ4_FMC_1_BTN_7)
CJ4_FMC_1_BTN_8#(>H:CJ4_FMC_1_BTN_8)
CJ4_FMC_1_BTN_9#(>H:CJ4_FMC_1_BTN_9)
CJ4_FMC_1_BTN_A#(>H:CJ4_FMC_1_BTN_A)
CJ4_FMC_1_BTN_B#(>H:CJ4_FMC_1_BTN_B)
CJ4_FMC_1_BTN_C#(>H:CJ4_FMC_1_BTN_C)
CJ4_FMC_1_BTN_CLR#(>H:CJ4_FMC_1_BTN_CLR)
CJ4_FMC_1_BTN_CLR_Long#(>H:CJ4_FMC_1_BTN_CLR_Long)
CJ4_FMC_1_BTN_D#(>H:CJ4_FMC_1_BTN_D)
CJ4_FMC_1_BTN_DEPARR#(>H:CJ4_FMC_1_BTN_DEPARR)
CJ4_FMC_1_BTN_DIR#(>H:CJ4_FMC_1_BTN_DIR)
CJ4_FMC_1_BTN_DIV#(>H:CJ4_FMC_1_BTN_DIV)
CJ4_FMC_1_BTN_DOT#(>H:CJ4_FMC_1_BTN_DOT)
CJ4_FMC_1_BTN_DSPL_MENU#(>H:CJ4_FMC_1_BTN_DSPL_MENU)
CJ4_FMC_1_BTN_E#(>H:CJ4_FMC_1_BTN_E)
CJ4_FMC_1_BTN_EXEC#(>H:CJ4_FMC_1_BTN_EXEC)
CJ4_FMC_1_BTN_F#(>H:CJ4_FMC_1_BTN_F)
CJ4_FMC_1_BTN_FPLN#(>H:CJ4_FMC_1_BTN_FPLN)
CJ4_FMC_1_BTN_G#(>H:CJ4_FMC_1_BTN_G)
CJ4_FMC_1_BTN_H#(>H:CJ4_FMC_1_BTN_H)
CJ4_FMC_1_BTN_I#(>H:CJ4_FMC_1_BTN_I)
CJ4_FMC_1_BTN_IDX#(>H:CJ4_FMC_1_BTN_IDX)
CJ4_FMC_1_BTN_J#(>H:CJ4_FMC_1_BTN_J)
CJ4_FMC_1_BTN_K#(>H:CJ4_FMC_1_BTN_K)
CJ4_FMC_1_BTN_L#(>H:CJ4_FMC_1_BTN_L)
CJ4_FMC_1_BTN_L1#(>H:CJ4_FMC_1_BTN_L1)
CJ4_FMC_1_BTN_L2#(>H:CJ4_FMC_1_BTN_L2)
CJ4_FMC_1_BTN_L3#(>H:CJ4_FMC_1_BTN_L3)
CJ4_FMC_1_BTN_L4#(>H:CJ4_FMC_1_BTN_L4)
CJ4_FMC_1_BTN_L5#(>H:CJ4_FMC_1_BTN_L5)
CJ4_FMC_1_BTN_L6#(>H:CJ4_FMC_1_BTN_L6)
CJ4_FMC_1_BTN_LEGS#(>H:CJ4_FMC_1_BTN_LEGS)
CJ4_FMC_1_BTN_M#(>H:CJ4_FMC_1_BTN_M)
CJ4_FMC_1_BTN_MFD_ADV#(>H:CJ4_FMC_1_BTN_MFD_ADV)
CJ4_FMC_1_BTN_MFD_DATA#(>H:CJ4_FMC_1_BTN_MFD_DATA)
CJ4_FMC_1_BTN_MSG#(>H:CJ4_FMC_1_BTN_MSG)
CJ4_FMC_1_BTN_N#(>H:CJ4_FMC_1_BTN_N)
CJ4_FMC_1_BTN_NEXTPAGE#(>H:CJ4_FMC_1_BTN_NEXTPAGE)
CJ4_FMC_1_BTN_O#(>H:CJ4_FMC_1_BTN_O)
CJ4_FMC_1_BTN_P#(>H:CJ4_FMC_1_BTN_P)
CJ4_FMC_1_BTN_PERF#(>H:CJ4_FMC_1_BTN_PERF)
CJ4_FMC_1_BTN_PLUSMINUS#(>H:CJ4_FMC_1_BTN_PLUSMINUS)
CJ4_FMC_1_BTN_PREVPAGE#(>H:CJ4_FMC_1_BTN_PREVPAGE)
CJ4_FMC_1_BTN_Q#(>H:CJ4_FMC_1_BTN_Q)
CJ4_FMC_1_BTN_R#(>H:CJ4_FMC_1_BTN_R)
CJ4_FMC_1_BTN_R1#(>H:CJ4_FMC_1_BTN_R1)
CJ4_FMC_1_BTN_R2#(>H:CJ4_FMC_1_BTN_R2)
CJ4_FMC_1_BTN_R3#(>H:CJ4_FMC_1_BTN_R3)
CJ4_FMC_1_BTN_R4#(>H:CJ4_FMC_1_BTN_R4)
CJ4_FMC_1_BTN_R5#(>H:CJ4_FMC_1_BTN_R5)
CJ4_FMC_1_BTN_R6#(>H:CJ4_FMC_1_BTN_R6)
CJ4_FMC_1_BTN_S#(>H:CJ4_FMC_1_BTN_S)
CJ4_FMC_1_BTN_SP#(>H:CJ4_FMC_1_BTN_SP)
CJ4_FMC_1_BTN_T#(>H:CJ4_FMC_1_BTN_T)
CJ4_FMC_1_BTN_TUN#(>H:CJ4_FMC_1_BTN_TUN)
CJ4_FMC_1_BTN_U#(>H:CJ4_FMC_1_BTN_U)
CJ4_FMC_1_BTN_V#(>H:CJ4_FMC_1_BTN_V)
CJ4_FMC_1_BTN_W#(>H:CJ4_FMC_1_BTN_W)
CJ4_FMC_1_BTN_X#(>H:CJ4_FMC_1_BTN_X)
CJ4_FMC_1_BTN_Y#(>H:CJ4_FMC_1_BTN_Y)
CJ4_FMC_1_BTN_Z#(>H:CJ4_FMC_1_BTN_Z)
//Working Title/CJ4/Radio
WT_CJ4_ADF1_TOG#(>K:RADIO_ADF_IDENT_TOGGLE)
WT_CJ4_COM1COM2_ACTIVE_TOG#1 0 (A:COM TRANSMIT:1,bool) ? d (>K:PILOT_TRANSMITTER_SET) (>K:COPILOT_TRANSMITTER_SET)
WT_CJ4_COM1_ACTIVE_PUSH#0 (>K:PILOT_TRANSMITTER_SET) 0 (>K:COPILOT_TRANSMITTER_SET)
WT_CJ4_COM1_ON_TOGGLE#0 100 (A:COM VOLUME:1, Percent) 0 > ? (>K:COM1_VOLUME_SET)
WT_CJ4_COM1_VOLUME_DEC# (>K:COM1_VOLUME_DEC)
WT_CJ4_COM1_VOLUME_INC# (>K:COM1_VOLUME_INC)
WT_CJ4_COM2_ACTIVE_PUSH#1 (>K:PILOT_TRANSMITTER_SET) 1 (>K:COPILOT_TRANSMITTER_SET)
WT_CJ4_COM2_ON_TOGGLE#0 100 (A:COM VOLUME:2, Percent) 0 > ? (>K:COM2_VOLUME_SET)
WT_CJ4_COM2_VOLUME_DEC# (>K:COM2_VOLUME_DEC)
WT_CJ4_COM2_VOLUME_INC# (>K:COM2_VOLUME_INC)
WT_CJ4_DME1_TOG#(>K:RADIO_DME1_IDENT_TOGGLE)
WT_CJ4_DME2_TOG#(>K:RADIO_DME2_IDENT_TOGGLE)
WT_CJ4_MKR_MUTE_PRESS#1 (>K:MARKER_BEACON_TEST_MUTE)
WT_CJ4_MKR_MUTE_RELEASE#0 (>K:MARKER_BEACON_TEST_MUTE)
WT_CJ4_MKR_TOG#(>K:MARKER_SOUND_TOGGLE)
WT_CJ4_NAV1_TOG#0 1 (A:NAV VOLUME:1, Percent) 0 > ? (>K:NAV1_VOLUME_SET)
WT_CJ4_NAV1_VOLUME_DEC#(>K:NAV1_VOLUME_DEC) 
WT_CJ4_NAV1_VOLUME_INC#(>K:NAV1_VOLUME_INC) 
WT_CJ4_NAV2_TOG#0 1 (A:NAV VOLUME:2, Percent) 0 > ? (>K:NAV2_VOLUME_SET)
WT_CJ4_NAV2_VOLUME_DEC#(>K:NAV2_VOLUME_DEC) 
WT_CJ4_NAV2_VOLUME_INC#(>K:NAV2_VOLUME_INC) 
WT_CJ4_SPKR_TOG#(>K:TOGGLE_SPEAKER)
//Working Title/CJ4/Warning System
WT_CJ4_MASTER_CAUTION_PUSH#1 (>L:MF_Master_Caution_Test) (>K:MASTER_CAUTION_ACKNOWLEDGE)
WT_CJ4_MASTER_CAUTION_RELEASE#0 (>L:MF_Master_Caution_Test)
WT_CJ4_MASTER_WARNING_PUSH#1 (>L:MF_Master_Warning_Test) (>K:MASTER_WARNING_ACKNOWLEDGE)
WT_CJ4_MASTER_WARNING_RELEASE#0 (>L:MF_Master_Warning_Test) 
//Working Title/G1000 NXi/Avionics
AS1000_VNAV_TOGGLE#(>H:AS1000_VNAV_TOGGLE)
//Working Title/G1000 NXi/Radio
Mid_COM1_Button_Push#(A:COM RECEIVE:1, Bool) if{ 0 } els{ 1 } (>K:COM1_RECEIVE_SELECT) (>H:AS1000_MID_COM_1_Push) 
Mid_COM1_Mic_Button_Push#(>H:AS1000_MID_COM_Mic_1_Push) 0 (>K:PILOT_TRANSMITTER_SET) 0 (>K:COPILOT_TRANSMITTER_SET)
Mid_COM2_Button_Push#(A:COM RECEIVE:2, Bool) if{ 0 } els{ 1 } (>K:COM2_RECEIVE_SELECT) (>H:AS1000_MID_COM_2_Push) 
Mid_COM2_Mic_Button_Push#(>H:AS1000_MID_COM_Mic_2_Push) 1 (>K:PILOT_TRANSMITTER_SET) 1 (>K:COPILOT_TRANSMITTER_SET) 
Mid_COM3_Button_Push#(>H:AS1000_MID_COM_3_Push)
Mid_COM3_Mic_Button_Push#(>H:AS1000_MID_COM_Mic_3_Push)