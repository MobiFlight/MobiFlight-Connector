name: Add Artifact Links to PR

on:
  workflow_call:
    inputs:
      pr_number:
        description: 'Pull request number (optional if triggered from workflow_run)'
        required: true
        type: number
      workflow_names:
        description: 'Comma-separated list of workflow names to search for artifacts (e.g., "RunTests,Build"), leave empty for all workflows'
        required: false
        type: string
        default: ''
      comment_title:
        description: 'Title for the comment'
        required: false
        type: string
        default: 'ðŸš€ Build for this pull request ðŸš€'
      include_workflow_link:
        description: 'Include link to workflow run in comment'
        required: false
        type: boolean
        default: true
    secrets:
      token:
        description: 'GitHub token with repo permissions'
        required: false

jobs:
  add-artifact-links:
    name: Add artifact links to pull request
    runs-on: ubuntu-latest
    steps:
      - name: Add artifact links to PR comment
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.token || secrets.GITHUB_TOKEN }}
          script: |
            // Get PR number from input, workflow_run event, or context
            const prNumber = ${{ inputs.pr_number }} || 
                            (context.payload.workflow_run && context.payload.workflow_run.pull_requests.length > 0 
                             ? context.payload.workflow_run.pull_requests[0].number 
                             : context.payload.pull_request?.number);
            
            console.log(`PR Number: ${prNumber}`);
            console.log(`Input PR Number: ${{ inputs.pr_number }}`);
            
            if (!prNumber) {
              console.log('No PR number found, skipping artifact comment');
              return;
            }
            
            // Get the PR to find the head SHA
            const pr = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber,
            });
            
            const headSha = pr.data.head.sha;
            console.log(`PR #${prNumber} head SHA: ${headSha}`);
            
            // Parse workflow names to search for
            const workflowNames = '${{ inputs.workflow_names }}'.split(',').map(name => name.trim()).filter(name => name);
            const searchAllWorkflows = workflowNames.length === 0;
            
            console.log(`Searching for artifacts in: ${searchAllWorkflows ? 'all workflows' : workflowNames.join(', ')}`);
            
            // Find workflow runs for this commit
            const workflowRuns = await github.rest.actions.listWorkflowRunsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              head_sha: headSha,
              status: 'completed',
              conclusion: 'success',
              per_page: 50
            });
            
            console.log(`Found ${workflowRuns.data.workflow_runs.length} completed successful runs for SHA ${headSha}`);
            
            // Use the most recent run from each matching workflow
            const workflowToLatestRun = {};
            for (const run of workflowRuns.data.workflow_runs) {
              if (!searchAllWorkflows && !workflowNames.includes(run.name)) {
                continue;
              }
              if (!workflowToLatestRun[run.name] || new Date(run.created_at) > new Date(workflowToLatestRun[run.name].created_at)) {
                workflowToLatestRun[run.name] = run;
              }
            }
            const targetRuns = Object.values(workflowToLatestRun);
            console.log(`Using latest runs from workflows: ${targetRuns.map(r => `${r.name} (#${r.id})`).join(', ')}`);
            
            // Collect artifacts from target runs and group by workflow
            const artifactsByWorkflow = {};
            const workflowRunsWithArtifacts = [];
            
            for (const run of targetRuns) {
              console.log(`Checking run ${run.id} (${run.name})`);
              const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
                owner: context.repo.owner,
                repo: context.repo.repo,
                run_id: run.id,
              });
              
              console.log(`Run ${run.id} has ${artifacts.data.artifacts.length} artifacts`);
              if (artifacts.data.artifacts.length === 0) {
                continue;
              }
              
              // Group artifacts by workflow and add workflow info
              if (!artifactsByWorkflow[run.name]) {
                artifactsByWorkflow[run.name] = [];
              }
              
              artifacts.data.artifacts.forEach(artifact => {
                artifact.workflow_name = run.name;
                artifact.workflow_run_id = run.id;
                artifactsByWorkflow[run.name].push(artifact);
              });
              
              workflowRunsWithArtifacts.push(run.id);
            }
            
            const totalArtifacts = Object.values(artifactsByWorkflow).flat().length;
            if (totalArtifacts === 0) {
              console.log('No artifacts found in any matching workflow runs');
              return;
            }

            console.log(`Found ${totalArtifacts} total artifacts across ${workflowRunsWithArtifacts.length} workflow runs`);
            
            // Create comment body with artifacts grouped by workflow
            const commentTitle = '${{ inputs.comment_title }}';
            let commentBody = `## ${commentTitle}:\n\n`;
            
            // Add artifacts grouped by workflow
            for (const [workflowName, artifacts] of Object.entries(artifactsByWorkflow)) {
              commentBody += `### ${workflowName}\n`;
              artifacts.forEach(artifact => {
                const downloadUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${artifact.workflow_run_id}/artifacts/${artifact.id}`;
                commentBody += `- [${artifact.name}](${downloadUrl})\n`;
              });
              commentBody += '\n';
            }
            
            // Add workflow run links if enabled
            if (${{ inputs.include_workflow_link }}) {
              commentBody += '*Generated from workflow runs: ';
              const runLinks = workflowRunsWithArtifacts.map(runId => 
                `[#${runId}](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${runId})`
              );
              commentBody += runLinks.join(', ') + '*';
            }
            
            // Check if a comment already exists with our headline
            const comments = await github.rest.issues.listComments({
              issue_number: prNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            
            const existingComment = comments.data.find(comment => 
              comment.body.includes('${{ inputs.comment_title }}')
            );
            
            if (existingComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                comment_id: existingComment.id,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: commentBody
              });
              console.log(`Updated existing artifact comment for PR #${prNumber}`);
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                issue_number: prNumber,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: commentBody
              });
              console.log(`Posted new artifact links comment to PR #${prNumber}`);
            }
